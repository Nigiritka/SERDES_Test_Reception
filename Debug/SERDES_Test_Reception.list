
SERDES_Test_Reception.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099a0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009c38  08009c38  00019c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009c78  08009c78  00019c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009c80  08009c80  00019c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009c84  08009c84  00019c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08009c88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  08009c98  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  08009cf8  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002f94  240000d0  08009d58  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24003064  08009d58  00023064  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f859  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f66  00000000  00000000  0003f957  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b0  00000000  00000000  000428c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014a8  00000000  00000000  00043e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038f0d  00000000  00000000  00045318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c1af  00000000  00000000  0007e225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016d725  00000000  00000000  0009a3d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00207af9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e1c  00000000  00000000  00207b4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009c20 	.word	0x08009c20

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08009c20 	.word	0x08009c20

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f001 f878 	bl	80016d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f8ae 	bl	8000744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 fac8 	bl	8000b7c <MX_GPIO_Init>
  MX_ETH_Init();
 80005ec:	f000 f92e 	bl	800084c <MX_ETH_Init>
  MX_DMA_Init();
 80005f0:	f000 faa4 	bl	8000b3c <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f4:	f000 fa70 	bl	8000ad8 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 80005f8:	f000 f974 	bl	80008e4 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 80005fc:	f000 fa20 	bl	8000a40 <MX_USART3_UART_Init>
  MX_TIM5_Init();
 8000600:	f000 f9c4 	bl	800098c <MX_TIM5_Init>

  //Enable Ref clock for PLL of SERDES... Bad Idea because we need stable clock at both side of data communication
  //HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);

  	// Create a function for DMA Transfer complete interruption
  	  hdma_tim2_ch4.XferCpltCallback = TransferComplete;
 8000604:	4b3a      	ldr	r3, [pc, #232]	; (80006f0 <main+0x114>)
 8000606:	4a3b      	ldr	r2, [pc, #236]	; (80006f4 <main+0x118>)
 8000608:	63da      	str	r2, [r3, #60]	; 0x3c

	// Enable interrupt for DMA (Transfer completed)
	__HAL_DMA_ENABLE_IT(&hdma_tim2_ch4, DMA_IT_TC);
 800060a:	4b39      	ldr	r3, [pc, #228]	; (80006f0 <main+0x114>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a3a      	ldr	r2, [pc, #232]	; (80006f8 <main+0x11c>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d04a      	beq.n	80006aa <main+0xce>
 8000614:	4b36      	ldr	r3, [pc, #216]	; (80006f0 <main+0x114>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a38      	ldr	r2, [pc, #224]	; (80006fc <main+0x120>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d045      	beq.n	80006aa <main+0xce>
 800061e:	4b34      	ldr	r3, [pc, #208]	; (80006f0 <main+0x114>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a37      	ldr	r2, [pc, #220]	; (8000700 <main+0x124>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d040      	beq.n	80006aa <main+0xce>
 8000628:	4b31      	ldr	r3, [pc, #196]	; (80006f0 <main+0x114>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a35      	ldr	r2, [pc, #212]	; (8000704 <main+0x128>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d03b      	beq.n	80006aa <main+0xce>
 8000632:	4b2f      	ldr	r3, [pc, #188]	; (80006f0 <main+0x114>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a34      	ldr	r2, [pc, #208]	; (8000708 <main+0x12c>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d036      	beq.n	80006aa <main+0xce>
 800063c:	4b2c      	ldr	r3, [pc, #176]	; (80006f0 <main+0x114>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a32      	ldr	r2, [pc, #200]	; (800070c <main+0x130>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d031      	beq.n	80006aa <main+0xce>
 8000646:	4b2a      	ldr	r3, [pc, #168]	; (80006f0 <main+0x114>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a31      	ldr	r2, [pc, #196]	; (8000710 <main+0x134>)
 800064c:	4293      	cmp	r3, r2
 800064e:	d02c      	beq.n	80006aa <main+0xce>
 8000650:	4b27      	ldr	r3, [pc, #156]	; (80006f0 <main+0x114>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a2f      	ldr	r2, [pc, #188]	; (8000714 <main+0x138>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d027      	beq.n	80006aa <main+0xce>
 800065a:	4b25      	ldr	r3, [pc, #148]	; (80006f0 <main+0x114>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a2e      	ldr	r2, [pc, #184]	; (8000718 <main+0x13c>)
 8000660:	4293      	cmp	r3, r2
 8000662:	d022      	beq.n	80006aa <main+0xce>
 8000664:	4b22      	ldr	r3, [pc, #136]	; (80006f0 <main+0x114>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a2c      	ldr	r2, [pc, #176]	; (800071c <main+0x140>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d01d      	beq.n	80006aa <main+0xce>
 800066e:	4b20      	ldr	r3, [pc, #128]	; (80006f0 <main+0x114>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a2b      	ldr	r2, [pc, #172]	; (8000720 <main+0x144>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d018      	beq.n	80006aa <main+0xce>
 8000678:	4b1d      	ldr	r3, [pc, #116]	; (80006f0 <main+0x114>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a29      	ldr	r2, [pc, #164]	; (8000724 <main+0x148>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d013      	beq.n	80006aa <main+0xce>
 8000682:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <main+0x114>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a28      	ldr	r2, [pc, #160]	; (8000728 <main+0x14c>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d00e      	beq.n	80006aa <main+0xce>
 800068c:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <main+0x114>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a26      	ldr	r2, [pc, #152]	; (800072c <main+0x150>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d009      	beq.n	80006aa <main+0xce>
 8000696:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <main+0x114>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a25      	ldr	r2, [pc, #148]	; (8000730 <main+0x154>)
 800069c:	4293      	cmp	r3, r2
 800069e:	d004      	beq.n	80006aa <main+0xce>
 80006a0:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <main+0x114>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a23      	ldr	r2, [pc, #140]	; (8000734 <main+0x158>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d108      	bne.n	80006bc <main+0xe0>
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <main+0x114>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	681a      	ldr	r2, [r3, #0]
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <main+0x114>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f042 0210 	orr.w	r2, r2, #16
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	e007      	b.n	80006cc <main+0xf0>
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <main+0x114>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <main+0x114>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f042 0202 	orr.w	r2, r2, #2
 80006ca:	601a      	str	r2, [r3, #0]

	// Start DMA transfer from GPIO Port E
	HAL_DMA_Start(&hdma_tim2_ch4, (uint32_t) &GPIOE->IDR, (uint32_t) RecievedData, TRANSFER_SIZE);
 80006cc:	4a1a      	ldr	r2, [pc, #104]	; (8000738 <main+0x15c>)
 80006ce:	f242 73d8 	movw	r3, #10200	; 0x27d8
 80006d2:	491a      	ldr	r1, [pc, #104]	; (800073c <main+0x160>)
 80006d4:	4806      	ldr	r0, [pc, #24]	; (80006f0 <main+0x114>)
 80006d6:	f001 fd3f 	bl	8002158 <HAL_DMA_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80006da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006de:	4818      	ldr	r0, [pc, #96]	; (8000740 <main+0x164>)
 80006e0:	f003 ff59 	bl	8004596 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80006e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006e8:	f001 f886 	bl	80017f8 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80006ec:	e7f5      	b.n	80006da <main+0xfe>
 80006ee:	bf00      	nop
 80006f0:	2400026c 	.word	0x2400026c
 80006f4:	08000da5 	.word	0x08000da5
 80006f8:	40020010 	.word	0x40020010
 80006fc:	40020028 	.word	0x40020028
 8000700:	40020040 	.word	0x40020040
 8000704:	40020058 	.word	0x40020058
 8000708:	40020070 	.word	0x40020070
 800070c:	40020088 	.word	0x40020088
 8000710:	400200a0 	.word	0x400200a0
 8000714:	400200b8 	.word	0x400200b8
 8000718:	40020410 	.word	0x40020410
 800071c:	40020428 	.word	0x40020428
 8000720:	40020440 	.word	0x40020440
 8000724:	40020458 	.word	0x40020458
 8000728:	40020470 	.word	0x40020470
 800072c:	40020488 	.word	0x40020488
 8000730:	400204a0 	.word	0x400204a0
 8000734:	400204b8 	.word	0x400204b8
 8000738:	24000880 	.word	0x24000880
 800073c:	58021010 	.word	0x58021010
 8000740:	58020400 	.word	0x58020400

08000744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b09c      	sub	sp, #112	; 0x70
 8000748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800074e:	224c      	movs	r2, #76	; 0x4c
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f009 fa5c 	bl	8009c10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	2220      	movs	r2, #32
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f009 fa56 	bl	8009c10 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000764:	2002      	movs	r0, #2
 8000766:	f004 f893 	bl	8004890 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800076a:	2300      	movs	r3, #0
 800076c:	603b      	str	r3, [r7, #0]
 800076e:	4b34      	ldr	r3, [pc, #208]	; (8000840 <SystemClock_Config+0xfc>)
 8000770:	699b      	ldr	r3, [r3, #24]
 8000772:	4a33      	ldr	r2, [pc, #204]	; (8000840 <SystemClock_Config+0xfc>)
 8000774:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000778:	6193      	str	r3, [r2, #24]
 800077a:	4b31      	ldr	r3, [pc, #196]	; (8000840 <SystemClock_Config+0xfc>)
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	4b2f      	ldr	r3, [pc, #188]	; (8000844 <SystemClock_Config+0x100>)
 8000786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000788:	4a2e      	ldr	r2, [pc, #184]	; (8000844 <SystemClock_Config+0x100>)
 800078a:	f043 0301 	orr.w	r3, r3, #1
 800078e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000790:	4b2c      	ldr	r3, [pc, #176]	; (8000844 <SystemClock_Config+0x100>)
 8000792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000794:	f003 0301 	and.w	r3, r3, #1
 8000798:	603b      	str	r3, [r7, #0]
 800079a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800079c:	bf00      	nop
 800079e:	4b28      	ldr	r3, [pc, #160]	; (8000840 <SystemClock_Config+0xfc>)
 80007a0:	699b      	ldr	r3, [r3, #24]
 80007a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007aa:	d1f8      	bne.n	800079e <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80007ac:	4b26      	ldr	r3, [pc, #152]	; (8000848 <SystemClock_Config+0x104>)
 80007ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007b0:	f023 0303 	bic.w	r3, r3, #3
 80007b4:	4a24      	ldr	r2, [pc, #144]	; (8000848 <SystemClock_Config+0x104>)
 80007b6:	f043 0302 	orr.w	r3, r3, #2
 80007ba:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007bc:	2301      	movs	r3, #1
 80007be:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007c0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c6:	2302      	movs	r3, #2
 80007c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ca:	2302      	movs	r3, #2
 80007cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007ce:	2301      	movs	r3, #1
 80007d0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 80007d2:	2378      	movs	r3, #120	; 0x78
 80007d4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007d6:	2302      	movs	r3, #2
 80007d8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007da:	2304      	movs	r3, #4
 80007dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007de:	2302      	movs	r3, #2
 80007e0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007e2:	230c      	movs	r3, #12
 80007e4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007e6:	2300      	movs	r3, #0
 80007e8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f2:	4618      	mov	r0, r3
 80007f4:	f004 f896 	bl	8004924 <HAL_RCC_OscConfig>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80007fe:	f000 fbad 	bl	8000f5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000802:	233f      	movs	r3, #63	; 0x3f
 8000804:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000806:	2303      	movs	r3, #3
 8000808:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800080e:	2308      	movs	r3, #8
 8000810:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000812:	2340      	movs	r3, #64	; 0x40
 8000814:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000816:	2340      	movs	r3, #64	; 0x40
 8000818:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800081a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800081e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000820:	2340      	movs	r3, #64	; 0x40
 8000822:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	2104      	movs	r1, #4
 8000828:	4618      	mov	r0, r3
 800082a:	f004 fca9 	bl	8005180 <HAL_RCC_ClockConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000834:	f000 fb92 	bl	8000f5c <Error_Handler>
  }
}
 8000838:	bf00      	nop
 800083a:	3770      	adds	r7, #112	; 0x70
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	58024800 	.word	0x58024800
 8000844:	58000400 	.word	0x58000400
 8000848:	58024400 	.word	0x58024400

0800084c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000850:	4b1e      	ldr	r3, [pc, #120]	; (80008cc <MX_ETH_Init+0x80>)
 8000852:	4a1f      	ldr	r2, [pc, #124]	; (80008d0 <MX_ETH_Init+0x84>)
 8000854:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000856:	4b1f      	ldr	r3, [pc, #124]	; (80008d4 <MX_ETH_Init+0x88>)
 8000858:	2200      	movs	r2, #0
 800085a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800085c:	4b1d      	ldr	r3, [pc, #116]	; (80008d4 <MX_ETH_Init+0x88>)
 800085e:	2280      	movs	r2, #128	; 0x80
 8000860:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000862:	4b1c      	ldr	r3, [pc, #112]	; (80008d4 <MX_ETH_Init+0x88>)
 8000864:	22e1      	movs	r2, #225	; 0xe1
 8000866:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000868:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <MX_ETH_Init+0x88>)
 800086a:	2200      	movs	r2, #0
 800086c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800086e:	4b19      	ldr	r3, [pc, #100]	; (80008d4 <MX_ETH_Init+0x88>)
 8000870:	2200      	movs	r2, #0
 8000872:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000874:	4b17      	ldr	r3, [pc, #92]	; (80008d4 <MX_ETH_Init+0x88>)
 8000876:	2200      	movs	r2, #0
 8000878:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800087a:	4b14      	ldr	r3, [pc, #80]	; (80008cc <MX_ETH_Init+0x80>)
 800087c:	4a15      	ldr	r2, [pc, #84]	; (80008d4 <MX_ETH_Init+0x88>)
 800087e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000880:	4b12      	ldr	r3, [pc, #72]	; (80008cc <MX_ETH_Init+0x80>)
 8000882:	2201      	movs	r2, #1
 8000884:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000886:	4b11      	ldr	r3, [pc, #68]	; (80008cc <MX_ETH_Init+0x80>)
 8000888:	4a13      	ldr	r2, [pc, #76]	; (80008d8 <MX_ETH_Init+0x8c>)
 800088a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800088c:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <MX_ETH_Init+0x80>)
 800088e:	4a13      	ldr	r2, [pc, #76]	; (80008dc <MX_ETH_Init+0x90>)
 8000890:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <MX_ETH_Init+0x80>)
 8000894:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000898:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800089a:	480c      	ldr	r0, [pc, #48]	; (80008cc <MX_ETH_Init+0x80>)
 800089c:	f003 f88e 	bl	80039bc <HAL_ETH_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80008a6:	f000 fb59 	bl	8000f5c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008aa:	2238      	movs	r2, #56	; 0x38
 80008ac:	2100      	movs	r1, #0
 80008ae:	480c      	ldr	r0, [pc, #48]	; (80008e0 <MX_ETH_Init+0x94>)
 80008b0:	f009 f9ae 	bl	8009c10 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008b4:	4b0a      	ldr	r3, [pc, #40]	; (80008e0 <MX_ETH_Init+0x94>)
 80008b6:	2221      	movs	r2, #33	; 0x21
 80008b8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_ETH_Init+0x94>)
 80008bc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80008c0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008c2:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <MX_ETH_Init+0x94>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	24000124 	.word	0x24000124
 80008d0:	40028000 	.word	0x40028000
 80008d4:	24003058 	.word	0x24003058
 80008d8:	24000070 	.word	0x24000070
 80008dc:	24000010 	.word	0x24000010
 80008e0:	240000ec 	.word	0x240000ec

080008e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b088      	sub	sp, #32
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000902:	4b21      	ldr	r3, [pc, #132]	; (8000988 <MX_TIM2_Init+0xa4>)
 8000904:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000908:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800090a:	4b1f      	ldr	r3, [pc, #124]	; (8000988 <MX_TIM2_Init+0xa4>)
 800090c:	2200      	movs	r2, #0
 800090e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000910:	4b1d      	ldr	r3, [pc, #116]	; (8000988 <MX_TIM2_Init+0xa4>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000916:	4b1c      	ldr	r3, [pc, #112]	; (8000988 <MX_TIM2_Init+0xa4>)
 8000918:	f04f 32ff 	mov.w	r2, #4294967295
 800091c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800091e:	4b1a      	ldr	r3, [pc, #104]	; (8000988 <MX_TIM2_Init+0xa4>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000924:	4b18      	ldr	r3, [pc, #96]	; (8000988 <MX_TIM2_Init+0xa4>)
 8000926:	2200      	movs	r2, #0
 8000928:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800092a:	4817      	ldr	r0, [pc, #92]	; (8000988 <MX_TIM2_Init+0xa4>)
 800092c:	f006 fb73 	bl	8007016 <HAL_TIM_IC_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000936:	f000 fb11 	bl	8000f5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800093a:	2300      	movs	r3, #0
 800093c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800093e:	2380      	movs	r3, #128	; 0x80
 8000940:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	4619      	mov	r1, r3
 8000948:	480f      	ldr	r0, [pc, #60]	; (8000988 <MX_TIM2_Init+0xa4>)
 800094a:	f007 fc81 	bl	8008250 <HAL_TIMEx_MasterConfigSynchronization>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000954:	f000 fb02 	bl	8000f5c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000958:	2302      	movs	r3, #2
 800095a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800095c:	2301      	movs	r3, #1
 800095e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	220c      	movs	r2, #12
 800096c:	4619      	mov	r1, r3
 800096e:	4806      	ldr	r0, [pc, #24]	; (8000988 <MX_TIM2_Init+0xa4>)
 8000970:	f006 fdcb 	bl	800750a <HAL_TIM_IC_ConfigChannel>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800097a:	f000 faef 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	3720      	adds	r7, #32
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	240001d4 	.word	0x240001d4

0800098c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08a      	sub	sp, #40	; 0x28
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800099e:	463b      	mov	r3, r7
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
 80009ac:	615a      	str	r2, [r3, #20]
 80009ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80009b0:	4b21      	ldr	r3, [pc, #132]	; (8000a38 <MX_TIM5_Init+0xac>)
 80009b2:	4a22      	ldr	r2, [pc, #136]	; (8000a3c <MX_TIM5_Init+0xb0>)
 80009b4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80009b6:	4b20      	ldr	r3, [pc, #128]	; (8000a38 <MX_TIM5_Init+0xac>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009bc:	4b1e      	ldr	r3, [pc, #120]	; (8000a38 <MX_TIM5_Init+0xac>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 15;
 80009c2:	4b1d      	ldr	r3, [pc, #116]	; (8000a38 <MX_TIM5_Init+0xac>)
 80009c4:	220f      	movs	r2, #15
 80009c6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c8:	4b1b      	ldr	r3, [pc, #108]	; (8000a38 <MX_TIM5_Init+0xac>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ce:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <MX_TIM5_Init+0xac>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80009d4:	4818      	ldr	r0, [pc, #96]	; (8000a38 <MX_TIM5_Init+0xac>)
 80009d6:	f006 fac7 	bl	8006f68 <HAL_TIM_PWM_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80009e0:	f000 fabc 	bl	8000f5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e4:	2300      	movs	r3, #0
 80009e6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4619      	mov	r1, r3
 80009f2:	4811      	ldr	r0, [pc, #68]	; (8000a38 <MX_TIM5_Init+0xac>)
 80009f4:	f007 fc2c 	bl	8008250 <HAL_TIMEx_MasterConfigSynchronization>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80009fe:	f000 faad 	bl	8000f5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a02:	2360      	movs	r3, #96	; 0x60
 8000a04:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 8;
 8000a06:	2308      	movs	r3, #8
 8000a08:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a12:	463b      	mov	r3, r7
 8000a14:	2200      	movs	r2, #0
 8000a16:	4619      	mov	r1, r3
 8000a18:	4807      	ldr	r0, [pc, #28]	; (8000a38 <MX_TIM5_Init+0xac>)
 8000a1a:	f006 fe13 	bl	8007644 <HAL_TIM_PWM_ConfigChannel>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8000a24:	f000 fa9a 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000a28:	4803      	ldr	r0, [pc, #12]	; (8000a38 <MX_TIM5_Init+0xac>)
 8000a2a:	f000 fc27 	bl	800127c <HAL_TIM_MspPostInit>

}
 8000a2e:	bf00      	nop
 8000a30:	3728      	adds	r7, #40	; 0x28
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	24000220 	.word	0x24000220
 8000a3c:	40000c00 	.word	0x40000c00

08000a40 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a44:	4b22      	ldr	r3, [pc, #136]	; (8000ad0 <MX_USART3_UART_Init+0x90>)
 8000a46:	4a23      	ldr	r2, [pc, #140]	; (8000ad4 <MX_USART3_UART_Init+0x94>)
 8000a48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a4a:	4b21      	ldr	r3, [pc, #132]	; (8000ad0 <MX_USART3_UART_Init+0x90>)
 8000a4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a50:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a52:	4b1f      	ldr	r3, [pc, #124]	; (8000ad0 <MX_USART3_UART_Init+0x90>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a58:	4b1d      	ldr	r3, [pc, #116]	; (8000ad0 <MX_USART3_UART_Init+0x90>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a5e:	4b1c      	ldr	r3, [pc, #112]	; (8000ad0 <MX_USART3_UART_Init+0x90>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a64:	4b1a      	ldr	r3, [pc, #104]	; (8000ad0 <MX_USART3_UART_Init+0x90>)
 8000a66:	220c      	movs	r2, #12
 8000a68:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6a:	4b19      	ldr	r3, [pc, #100]	; (8000ad0 <MX_USART3_UART_Init+0x90>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a70:	4b17      	ldr	r3, [pc, #92]	; (8000ad0 <MX_USART3_UART_Init+0x90>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a76:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <MX_USART3_UART_Init+0x90>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a7c:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <MX_USART3_UART_Init+0x90>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a82:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <MX_USART3_UART_Init+0x90>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a88:	4811      	ldr	r0, [pc, #68]	; (8000ad0 <MX_USART3_UART_Init+0x90>)
 8000a8a:	f007 fc8d 	bl	80083a8 <HAL_UART_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a94:	f000 fa62 	bl	8000f5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a98:	2100      	movs	r1, #0
 8000a9a:	480d      	ldr	r0, [pc, #52]	; (8000ad0 <MX_USART3_UART_Init+0x90>)
 8000a9c:	f008 fcc0 	bl	8009420 <HAL_UARTEx_SetTxFifoThreshold>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000aa6:	f000 fa59 	bl	8000f5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4808      	ldr	r0, [pc, #32]	; (8000ad0 <MX_USART3_UART_Init+0x90>)
 8000aae:	f008 fcf5 	bl	800949c <HAL_UARTEx_SetRxFifoThreshold>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ab8:	f000 fa50 	bl	8000f5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000abc:	4804      	ldr	r0, [pc, #16]	; (8000ad0 <MX_USART3_UART_Init+0x90>)
 8000abe:	f008 fc76 	bl	80093ae <HAL_UARTEx_DisableFifoMode>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ac8:	f000 fa48 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	240002e4 	.word	0x240002e4
 8000ad4:	40004800 	.word	0x40004800

08000ad8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000adc:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ade:	4a16      	ldr	r2, [pc, #88]	; (8000b38 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000ae0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000ae2:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ae4:	2209      	movs	r2, #9
 8000ae6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aea:	2202      	movs	r2, #2
 8000aec:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000aee:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000af6:	2202      	movs	r2, #2
 8000af8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b06:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000b0c:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b12:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b1e:	4805      	ldr	r0, [pc, #20]	; (8000b34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b20:	f003 fd6d 	bl	80045fe <HAL_PCD_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000b2a:	f000 fa17 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	24000374 	.word	0x24000374
 8000b38:	40080000 	.word	0x40080000

08000b3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b42:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <MX_DMA_Init+0x3c>)
 8000b44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b48:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <MX_DMA_Init+0x3c>)
 8000b4a:	f043 0301 	orr.w	r3, r3, #1
 8000b4e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <MX_DMA_Init+0x3c>)
 8000b54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b58:	f003 0301 	and.w	r3, r3, #1
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2100      	movs	r1, #0
 8000b64:	200c      	movs	r0, #12
 8000b66:	f000 ff66 	bl	8001a36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b6a:	200c      	movs	r0, #12
 8000b6c:	f000 ff7d 	bl	8001a6a <HAL_NVIC_EnableIRQ>

}
 8000b70:	bf00      	nop
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	58024400 	.word	0x58024400

08000b7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08c      	sub	sp, #48	; 0x30
 8000b80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b82:	f107 031c 	add.w	r3, r7, #28
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
 8000b90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b92:	4b7e      	ldr	r3, [pc, #504]	; (8000d8c <MX_GPIO_Init+0x210>)
 8000b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b98:	4a7c      	ldr	r2, [pc, #496]	; (8000d8c <MX_GPIO_Init+0x210>)
 8000b9a:	f043 0310 	orr.w	r3, r3, #16
 8000b9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ba2:	4b7a      	ldr	r3, [pc, #488]	; (8000d8c <MX_GPIO_Init+0x210>)
 8000ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba8:	f003 0310 	and.w	r3, r3, #16
 8000bac:	61bb      	str	r3, [r7, #24]
 8000bae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb0:	4b76      	ldr	r3, [pc, #472]	; (8000d8c <MX_GPIO_Init+0x210>)
 8000bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb6:	4a75      	ldr	r2, [pc, #468]	; (8000d8c <MX_GPIO_Init+0x210>)
 8000bb8:	f043 0304 	orr.w	r3, r3, #4
 8000bbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bc0:	4b72      	ldr	r3, [pc, #456]	; (8000d8c <MX_GPIO_Init+0x210>)
 8000bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc6:	f003 0304 	and.w	r3, r3, #4
 8000bca:	617b      	str	r3, [r7, #20]
 8000bcc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bce:	4b6f      	ldr	r3, [pc, #444]	; (8000d8c <MX_GPIO_Init+0x210>)
 8000bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd4:	4a6d      	ldr	r2, [pc, #436]	; (8000d8c <MX_GPIO_Init+0x210>)
 8000bd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bde:	4b6b      	ldr	r3, [pc, #428]	; (8000d8c <MX_GPIO_Init+0x210>)
 8000be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000be8:	613b      	str	r3, [r7, #16]
 8000bea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bec:	4b67      	ldr	r3, [pc, #412]	; (8000d8c <MX_GPIO_Init+0x210>)
 8000bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf2:	4a66      	ldr	r2, [pc, #408]	; (8000d8c <MX_GPIO_Init+0x210>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bfc:	4b63      	ldr	r3, [pc, #396]	; (8000d8c <MX_GPIO_Init+0x210>)
 8000bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0a:	4b60      	ldr	r3, [pc, #384]	; (8000d8c <MX_GPIO_Init+0x210>)
 8000c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c10:	4a5e      	ldr	r2, [pc, #376]	; (8000d8c <MX_GPIO_Init+0x210>)
 8000c12:	f043 0302 	orr.w	r3, r3, #2
 8000c16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c1a:	4b5c      	ldr	r3, [pc, #368]	; (8000d8c <MX_GPIO_Init+0x210>)
 8000c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c20:	f003 0302 	and.w	r3, r3, #2
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c28:	4b58      	ldr	r3, [pc, #352]	; (8000d8c <MX_GPIO_Init+0x210>)
 8000c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2e:	4a57      	ldr	r2, [pc, #348]	; (8000d8c <MX_GPIO_Init+0x210>)
 8000c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c38:	4b54      	ldr	r3, [pc, #336]	; (8000d8c <MX_GPIO_Init+0x210>)
 8000c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c46:	4b51      	ldr	r3, [pc, #324]	; (8000d8c <MX_GPIO_Init+0x210>)
 8000c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4c:	4a4f      	ldr	r2, [pc, #316]	; (8000d8c <MX_GPIO_Init+0x210>)
 8000c4e:	f043 0308 	orr.w	r3, r3, #8
 8000c52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c56:	4b4d      	ldr	r3, [pc, #308]	; (8000d8c <MX_GPIO_Init+0x210>)
 8000c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5c:	f003 0308 	and.w	r3, r3, #8
 8000c60:	603b      	str	r3, [r7, #0]
 8000c62:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000c64:	2200      	movs	r2, #0
 8000c66:	f244 0101 	movw	r1, #16385	; 0x4001
 8000c6a:	4849      	ldr	r0, [pc, #292]	; (8000d90 <MX_GPIO_Init+0x214>)
 8000c6c:	f003 fc7a 	bl	8004564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_RESET);
 8000c70:	2200      	movs	r2, #0
 8000c72:	2101      	movs	r1, #1
 8000c74:	4847      	ldr	r0, [pc, #284]	; (8000d94 <MX_GPIO_Init+0x218>)
 8000c76:	f003 fc75 	bl	8004564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c80:	4845      	ldr	r0, [pc, #276]	; (8000d98 <MX_GPIO_Init+0x21c>)
 8000c82:	f003 fc6f 	bl	8004564 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DATA_IN_2_Pin DATA_IN_3_Pin DATA_IN_4_Pin DATA_IN_5_Pin
                           DATA_IN_6_Pin DATA_IN_7_Pin DATA_IN_0_Pin DATA_IN_1_Pin */
  GPIO_InitStruct.Pin = DATA_IN_2_Pin|DATA_IN_3_Pin|DATA_IN_4_Pin|DATA_IN_5_Pin
 8000c86:	23ff      	movs	r3, #255	; 0xff
 8000c88:	61fb      	str	r3, [r7, #28]
                          |DATA_IN_6_Pin|DATA_IN_7_Pin|DATA_IN_0_Pin|DATA_IN_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c92:	f107 031c 	add.w	r3, r7, #28
 8000c96:	4619      	mov	r1, r3
 8000c98:	4840      	ldr	r0, [pc, #256]	; (8000d9c <MX_GPIO_Init+0x220>)
 8000c9a:	f003 fab3 	bl	8004204 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ca2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ca4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ca8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cae:	f107 031c 	add.w	r3, r7, #28
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	483a      	ldr	r0, [pc, #232]	; (8000da0 <MX_GPIO_Init+0x224>)
 8000cb6:	f003 faa5 	bl	8004204 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000cba:	f244 0301 	movw	r3, #16385	; 0x4001
 8000cbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ccc:	f107 031c 	add.w	r3, r7, #28
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	482f      	ldr	r0, [pc, #188]	; (8000d90 <MX_GPIO_Init+0x214>)
 8000cd4:	f003 fa96 	bl	8004204 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_Pin */
  GPIO_InitStruct.Pin = TEST_Pin;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 8000ce8:	f107 031c 	add.w	r3, r7, #28
 8000cec:	4619      	mov	r1, r3
 8000cee:	4829      	ldr	r0, [pc, #164]	; (8000d94 <MX_GPIO_Init+0x218>)
 8000cf0:	f003 fa88 	bl	8004204 <HAL_GPIO_Init>

  /*Configure GPIO pin : LOCK_L_Pin */
  GPIO_InitStruct.Pin = LOCK_L_Pin;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cf8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000cfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LOCK_L_GPIO_Port, &GPIO_InitStruct);
 8000d02:	f107 031c 	add.w	r3, r7, #28
 8000d06:	4619      	mov	r1, r3
 8000d08:	4822      	ldr	r0, [pc, #136]	; (8000d94 <MX_GPIO_Init+0x218>)
 8000d0a:	f003 fa7b 	bl	8004204 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_TRANSACTION_Pin */
  GPIO_InitStruct.Pin = START_TRANSACTION_Pin;
 8000d0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d14:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(START_TRANSACTION_GPIO_Port, &GPIO_InitStruct);
 8000d1e:	f107 031c 	add.w	r3, r7, #28
 8000d22:	4619      	mov	r1, r3
 8000d24:	481d      	ldr	r0, [pc, #116]	; (8000d9c <MX_GPIO_Init+0x220>)
 8000d26:	f003 fa6d 	bl	8004204 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000d2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d30:	2301      	movs	r3, #1
 8000d32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d3c:	f107 031c 	add.w	r3, r7, #28
 8000d40:	4619      	mov	r1, r3
 8000d42:	4815      	ldr	r0, [pc, #84]	; (8000d98 <MX_GPIO_Init+0x21c>)
 8000d44:	f003 fa5e 	bl	8004204 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000d48:	2380      	movs	r3, #128	; 0x80
 8000d4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d4c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000d56:	f107 031c 	add.w	r3, r7, #28
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	480d      	ldr	r0, [pc, #52]	; (8000d94 <MX_GPIO_Init+0x218>)
 8000d5e:	f003 fa51 	bl	8004204 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2100      	movs	r1, #0
 8000d66:	2007      	movs	r0, #7
 8000d68:	f000 fe65 	bl	8001a36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000d6c:	2007      	movs	r0, #7
 8000d6e:	f000 fe7c 	bl	8001a6a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2100      	movs	r1, #0
 8000d76:	2017      	movs	r0, #23
 8000d78:	f000 fe5d 	bl	8001a36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d7c:	2017      	movs	r0, #23
 8000d7e:	f000 fe74 	bl	8001a6a <HAL_NVIC_EnableIRQ>

}
 8000d82:	bf00      	nop
 8000d84:	3730      	adds	r7, #48	; 0x30
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	58024400 	.word	0x58024400
 8000d90:	58020400 	.word	0x58020400
 8000d94:	58021800 	.word	0x58021800
 8000d98:	58020c00 	.word	0x58020c00
 8000d9c:	58021000 	.word	0x58021000
 8000da0:	58020800 	.word	0x58020800

08000da4 <TransferComplete>:

/* USER CODE BEGIN 4 */


static void TransferComplete(DMA_HandleTypeDef *DmaHandle)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
	// Find start of the message
	for (uint32_t i=0; i<TRANSFER_SIZE; i++)
 8000dac:	2300      	movs	r3, #0
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	e015      	b.n	8000dde <TransferComplete+0x3a>
	{
		if (RecievedData[i] == 76)
 8000db2:	4a43      	ldr	r2, [pc, #268]	; (8000ec0 <TransferComplete+0x11c>)
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	4413      	add	r3, r2
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2b4c      	cmp	r3, #76	; 0x4c
 8000dbc:	d109      	bne.n	8000dd2 <TransferComplete+0x2e>
		{
			HAL_UART_Transmit(&huart3, &RecievedData[i], 10000, 10);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	4a3f      	ldr	r2, [pc, #252]	; (8000ec0 <TransferComplete+0x11c>)
 8000dc2:	1899      	adds	r1, r3, r2
 8000dc4:	230a      	movs	r3, #10
 8000dc6:	f242 7210 	movw	r2, #10000	; 0x2710
 8000dca:	483e      	ldr	r0, [pc, #248]	; (8000ec4 <TransferComplete+0x120>)
 8000dcc:	f007 fb3c 	bl	8008448 <HAL_UART_Transmit>
			break;
 8000dd0:	e00a      	b.n	8000de8 <TransferComplete+0x44>
		}
		else
			i++;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	60fb      	str	r3, [r7, #12]
	for (uint32_t i=0; i<TRANSFER_SIZE; i++)
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	f242 72d7 	movw	r2, #10199	; 0x27d7
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d9e4      	bls.n	8000db2 <TransferComplete+0xe>


	//HAL_UART_Transmit(&huart3, RecievedData, TRANSFER_SIZE, 10);

	// Enable interrupt for DMA (Transfer completed)
	__HAL_DMA_ENABLE_IT(&hdma_tim2_ch4, DMA_IT_TC);
 8000de8:	4b37      	ldr	r3, [pc, #220]	; (8000ec8 <TransferComplete+0x124>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a37      	ldr	r2, [pc, #220]	; (8000ecc <TransferComplete+0x128>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d04a      	beq.n	8000e88 <TransferComplete+0xe4>
 8000df2:	4b35      	ldr	r3, [pc, #212]	; (8000ec8 <TransferComplete+0x124>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a36      	ldr	r2, [pc, #216]	; (8000ed0 <TransferComplete+0x12c>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d045      	beq.n	8000e88 <TransferComplete+0xe4>
 8000dfc:	4b32      	ldr	r3, [pc, #200]	; (8000ec8 <TransferComplete+0x124>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a34      	ldr	r2, [pc, #208]	; (8000ed4 <TransferComplete+0x130>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d040      	beq.n	8000e88 <TransferComplete+0xe4>
 8000e06:	4b30      	ldr	r3, [pc, #192]	; (8000ec8 <TransferComplete+0x124>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a33      	ldr	r2, [pc, #204]	; (8000ed8 <TransferComplete+0x134>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d03b      	beq.n	8000e88 <TransferComplete+0xe4>
 8000e10:	4b2d      	ldr	r3, [pc, #180]	; (8000ec8 <TransferComplete+0x124>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a31      	ldr	r2, [pc, #196]	; (8000edc <TransferComplete+0x138>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d036      	beq.n	8000e88 <TransferComplete+0xe4>
 8000e1a:	4b2b      	ldr	r3, [pc, #172]	; (8000ec8 <TransferComplete+0x124>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a30      	ldr	r2, [pc, #192]	; (8000ee0 <TransferComplete+0x13c>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d031      	beq.n	8000e88 <TransferComplete+0xe4>
 8000e24:	4b28      	ldr	r3, [pc, #160]	; (8000ec8 <TransferComplete+0x124>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a2e      	ldr	r2, [pc, #184]	; (8000ee4 <TransferComplete+0x140>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d02c      	beq.n	8000e88 <TransferComplete+0xe4>
 8000e2e:	4b26      	ldr	r3, [pc, #152]	; (8000ec8 <TransferComplete+0x124>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a2d      	ldr	r2, [pc, #180]	; (8000ee8 <TransferComplete+0x144>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d027      	beq.n	8000e88 <TransferComplete+0xe4>
 8000e38:	4b23      	ldr	r3, [pc, #140]	; (8000ec8 <TransferComplete+0x124>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a2b      	ldr	r2, [pc, #172]	; (8000eec <TransferComplete+0x148>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d022      	beq.n	8000e88 <TransferComplete+0xe4>
 8000e42:	4b21      	ldr	r3, [pc, #132]	; (8000ec8 <TransferComplete+0x124>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a2a      	ldr	r2, [pc, #168]	; (8000ef0 <TransferComplete+0x14c>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d01d      	beq.n	8000e88 <TransferComplete+0xe4>
 8000e4c:	4b1e      	ldr	r3, [pc, #120]	; (8000ec8 <TransferComplete+0x124>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a28      	ldr	r2, [pc, #160]	; (8000ef4 <TransferComplete+0x150>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d018      	beq.n	8000e88 <TransferComplete+0xe4>
 8000e56:	4b1c      	ldr	r3, [pc, #112]	; (8000ec8 <TransferComplete+0x124>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a27      	ldr	r2, [pc, #156]	; (8000ef8 <TransferComplete+0x154>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d013      	beq.n	8000e88 <TransferComplete+0xe4>
 8000e60:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <TransferComplete+0x124>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a25      	ldr	r2, [pc, #148]	; (8000efc <TransferComplete+0x158>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d00e      	beq.n	8000e88 <TransferComplete+0xe4>
 8000e6a:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <TransferComplete+0x124>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a24      	ldr	r2, [pc, #144]	; (8000f00 <TransferComplete+0x15c>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d009      	beq.n	8000e88 <TransferComplete+0xe4>
 8000e74:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <TransferComplete+0x124>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a22      	ldr	r2, [pc, #136]	; (8000f04 <TransferComplete+0x160>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d004      	beq.n	8000e88 <TransferComplete+0xe4>
 8000e7e:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <TransferComplete+0x124>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a21      	ldr	r2, [pc, #132]	; (8000f08 <TransferComplete+0x164>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d108      	bne.n	8000e9a <TransferComplete+0xf6>
 8000e88:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <TransferComplete+0x124>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <TransferComplete+0x124>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f042 0210 	orr.w	r2, r2, #16
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	e007      	b.n	8000eaa <TransferComplete+0x106>
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <TransferComplete+0x124>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <TransferComplete+0x124>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f042 0202 	orr.w	r2, r2, #2
 8000ea8:	601a      	str	r2, [r3, #0]

	// Start DMA transfer from GPIO Port E
	HAL_DMA_Start(&hdma_tim2_ch4, (uint32_t) &GPIOE->IDR, (uint32_t) RecievedData, TRANSFER_SIZE);
 8000eaa:	4a05      	ldr	r2, [pc, #20]	; (8000ec0 <TransferComplete+0x11c>)
 8000eac:	f242 73d8 	movw	r3, #10200	; 0x27d8
 8000eb0:	4916      	ldr	r1, [pc, #88]	; (8000f0c <TransferComplete+0x168>)
 8000eb2:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <TransferComplete+0x124>)
 8000eb4:	f001 f950 	bl	8002158 <HAL_DMA_Start>

}
 8000eb8:	bf00      	nop
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	24000880 	.word	0x24000880
 8000ec4:	240002e4 	.word	0x240002e4
 8000ec8:	2400026c 	.word	0x2400026c
 8000ecc:	40020010 	.word	0x40020010
 8000ed0:	40020028 	.word	0x40020028
 8000ed4:	40020040 	.word	0x40020040
 8000ed8:	40020058 	.word	0x40020058
 8000edc:	40020070 	.word	0x40020070
 8000ee0:	40020088 	.word	0x40020088
 8000ee4:	400200a0 	.word	0x400200a0
 8000ee8:	400200b8 	.word	0x400200b8
 8000eec:	40020410 	.word	0x40020410
 8000ef0:	40020428 	.word	0x40020428
 8000ef4:	40020440 	.word	0x40020440
 8000ef8:	40020458 	.word	0x40020458
 8000efc:	40020470 	.word	0x40020470
 8000f00:	40020488 	.word	0x40020488
 8000f04:	400204a0 	.word	0x400204a0
 8000f08:	400204b8 	.word	0x400204b8
 8000f0c:	58021010 	.word	0x58021010

08000f10 <HAL_GPIO_EXTI_Callback>:




void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	80fb      	strh	r3, [r7, #6]

	// Start input capture of the TIMER 2 at pin PA3 (Channel 4 of the TIMER)
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_4);
 8000f1a:	210c      	movs	r1, #12
 8000f1c:	480c      	ldr	r0, [pc, #48]	; (8000f50 <HAL_GPIO_EXTI_Callback+0x40>)
 8000f1e:	f006 f8d1 	bl	80070c4 <HAL_TIM_IC_Start>

	// Enable DMA interrupt for input capture event
	TIM2->DIER |= (1<<12);
 8000f22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f30:	60d3      	str	r3, [r2, #12]

	HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_SET);
 8000f32:	2201      	movs	r2, #1
 8000f34:	2101      	movs	r1, #1
 8000f36:	4807      	ldr	r0, [pc, #28]	; (8000f54 <HAL_GPIO_EXTI_Callback+0x44>)
 8000f38:	f003 fb14 	bl	8004564 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	2101      	movs	r1, #1
 8000f40:	4805      	ldr	r0, [pc, #20]	; (8000f58 <HAL_GPIO_EXTI_Callback+0x48>)
 8000f42:	f003 fb0f 	bl	8004564 <HAL_GPIO_WritePin>


}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	240001d4 	.word	0x240001d4
 8000f54:	58021800 	.word	0x58021800
 8000f58:	58020400 	.word	0x58020400

08000f5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f60:	b672      	cpsid	i
}
 8000f62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <Error_Handler+0x8>
	...

08000f68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <HAL_MspInit+0x30>)
 8000f70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f74:	4a08      	ldr	r2, [pc, #32]	; (8000f98 <HAL_MspInit+0x30>)
 8000f76:	f043 0302 	orr.w	r3, r3, #2
 8000f7a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_MspInit+0x30>)
 8000f80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f84:	f003 0302 	and.w	r3, r3, #2
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	58024400 	.word	0x58024400

08000f9c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08e      	sub	sp, #56	; 0x38
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a59      	ldr	r2, [pc, #356]	; (8001120 <HAL_ETH_MspInit+0x184>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	f040 80ab 	bne.w	8001116 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000fc0:	4b58      	ldr	r3, [pc, #352]	; (8001124 <HAL_ETH_MspInit+0x188>)
 8000fc2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fc6:	4a57      	ldr	r2, [pc, #348]	; (8001124 <HAL_ETH_MspInit+0x188>)
 8000fc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fcc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000fd0:	4b54      	ldr	r3, [pc, #336]	; (8001124 <HAL_ETH_MspInit+0x188>)
 8000fd2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fda:	623b      	str	r3, [r7, #32]
 8000fdc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000fde:	4b51      	ldr	r3, [pc, #324]	; (8001124 <HAL_ETH_MspInit+0x188>)
 8000fe0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fe4:	4a4f      	ldr	r2, [pc, #316]	; (8001124 <HAL_ETH_MspInit+0x188>)
 8000fe6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fea:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000fee:	4b4d      	ldr	r3, [pc, #308]	; (8001124 <HAL_ETH_MspInit+0x188>)
 8000ff0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ff8:	61fb      	str	r3, [r7, #28]
 8000ffa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000ffc:	4b49      	ldr	r3, [pc, #292]	; (8001124 <HAL_ETH_MspInit+0x188>)
 8000ffe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001002:	4a48      	ldr	r2, [pc, #288]	; (8001124 <HAL_ETH_MspInit+0x188>)
 8001004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001008:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800100c:	4b45      	ldr	r3, [pc, #276]	; (8001124 <HAL_ETH_MspInit+0x188>)
 800100e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001016:	61bb      	str	r3, [r7, #24]
 8001018:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800101a:	4b42      	ldr	r3, [pc, #264]	; (8001124 <HAL_ETH_MspInit+0x188>)
 800101c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001020:	4a40      	ldr	r2, [pc, #256]	; (8001124 <HAL_ETH_MspInit+0x188>)
 8001022:	f043 0304 	orr.w	r3, r3, #4
 8001026:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800102a:	4b3e      	ldr	r3, [pc, #248]	; (8001124 <HAL_ETH_MspInit+0x188>)
 800102c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001030:	f003 0304 	and.w	r3, r3, #4
 8001034:	617b      	str	r3, [r7, #20]
 8001036:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001038:	4b3a      	ldr	r3, [pc, #232]	; (8001124 <HAL_ETH_MspInit+0x188>)
 800103a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800103e:	4a39      	ldr	r2, [pc, #228]	; (8001124 <HAL_ETH_MspInit+0x188>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001048:	4b36      	ldr	r3, [pc, #216]	; (8001124 <HAL_ETH_MspInit+0x188>)
 800104a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001056:	4b33      	ldr	r3, [pc, #204]	; (8001124 <HAL_ETH_MspInit+0x188>)
 8001058:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800105c:	4a31      	ldr	r2, [pc, #196]	; (8001124 <HAL_ETH_MspInit+0x188>)
 800105e:	f043 0302 	orr.w	r3, r3, #2
 8001062:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001066:	4b2f      	ldr	r3, [pc, #188]	; (8001124 <HAL_ETH_MspInit+0x188>)
 8001068:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800106c:	f003 0302 	and.w	r3, r3, #2
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001074:	4b2b      	ldr	r3, [pc, #172]	; (8001124 <HAL_ETH_MspInit+0x188>)
 8001076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800107a:	4a2a      	ldr	r2, [pc, #168]	; (8001124 <HAL_ETH_MspInit+0x188>)
 800107c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001080:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001084:	4b27      	ldr	r3, [pc, #156]	; (8001124 <HAL_ETH_MspInit+0x188>)
 8001086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800108a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001092:	2332      	movs	r3, #50	; 0x32
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	2302      	movs	r3, #2
 8001098:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109e:	2300      	movs	r3, #0
 80010a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010a2:	230b      	movs	r3, #11
 80010a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010aa:	4619      	mov	r1, r3
 80010ac:	481e      	ldr	r0, [pc, #120]	; (8001128 <HAL_ETH_MspInit+0x18c>)
 80010ae:	f003 f8a9 	bl	8004204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80010b2:	2386      	movs	r3, #134	; 0x86
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	2302      	movs	r3, #2
 80010b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010be:	2300      	movs	r3, #0
 80010c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010c2:	230b      	movs	r3, #11
 80010c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ca:	4619      	mov	r1, r3
 80010cc:	4817      	ldr	r0, [pc, #92]	; (800112c <HAL_ETH_MspInit+0x190>)
 80010ce:	f003 f899 	bl	8004204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80010d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d8:	2302      	movs	r3, #2
 80010da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e0:	2300      	movs	r3, #0
 80010e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010e4:	230b      	movs	r3, #11
 80010e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ec:	4619      	mov	r1, r3
 80010ee:	4810      	ldr	r0, [pc, #64]	; (8001130 <HAL_ETH_MspInit+0x194>)
 80010f0:	f003 f888 	bl	8004204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80010f4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80010f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fa:	2302      	movs	r3, #2
 80010fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001102:	2300      	movs	r3, #0
 8001104:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001106:	230b      	movs	r3, #11
 8001108:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800110a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800110e:	4619      	mov	r1, r3
 8001110:	4808      	ldr	r0, [pc, #32]	; (8001134 <HAL_ETH_MspInit+0x198>)
 8001112:	f003 f877 	bl	8004204 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001116:	bf00      	nop
 8001118:	3738      	adds	r7, #56	; 0x38
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40028000 	.word	0x40028000
 8001124:	58024400 	.word	0x58024400
 8001128:	58020800 	.word	0x58020800
 800112c:	58020000 	.word	0x58020000
 8001130:	58020400 	.word	0x58020400
 8001134:	58021800 	.word	0x58021800

08001138 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	; 0x28
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001158:	d162      	bne.n	8001220 <HAL_TIM_IC_MspInit+0xe8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800115a:	4b33      	ldr	r3, [pc, #204]	; (8001228 <HAL_TIM_IC_MspInit+0xf0>)
 800115c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001160:	4a31      	ldr	r2, [pc, #196]	; (8001228 <HAL_TIM_IC_MspInit+0xf0>)
 8001162:	f043 0301 	orr.w	r3, r3, #1
 8001166:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800116a:	4b2f      	ldr	r3, [pc, #188]	; (8001228 <HAL_TIM_IC_MspInit+0xf0>)
 800116c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001170:	f003 0301 	and.w	r3, r3, #1
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001178:	4b2b      	ldr	r3, [pc, #172]	; (8001228 <HAL_TIM_IC_MspInit+0xf0>)
 800117a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800117e:	4a2a      	ldr	r2, [pc, #168]	; (8001228 <HAL_TIM_IC_MspInit+0xf0>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001188:	4b27      	ldr	r3, [pc, #156]	; (8001228 <HAL_TIM_IC_MspInit+0xf0>)
 800118a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001196:	2308      	movs	r3, #8
 8001198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119a:	2302      	movs	r3, #2
 800119c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a2:	2300      	movs	r3, #0
 80011a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011a6:	2301      	movs	r3, #1
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011aa:	f107 0314 	add.w	r3, r7, #20
 80011ae:	4619      	mov	r1, r3
 80011b0:	481e      	ldr	r0, [pc, #120]	; (800122c <HAL_TIM_IC_MspInit+0xf4>)
 80011b2:	f003 f827 	bl	8004204 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH4 Init */
    hdma_tim2_ch4.Instance = DMA1_Stream1;
 80011b6:	4b1e      	ldr	r3, [pc, #120]	; (8001230 <HAL_TIM_IC_MspInit+0xf8>)
 80011b8:	4a1e      	ldr	r2, [pc, #120]	; (8001234 <HAL_TIM_IC_MspInit+0xfc>)
 80011ba:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch4.Init.Request = DMA_REQUEST_TIM2_CH4;
 80011bc:	4b1c      	ldr	r3, [pc, #112]	; (8001230 <HAL_TIM_IC_MspInit+0xf8>)
 80011be:	2215      	movs	r2, #21
 80011c0:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011c2:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <HAL_TIM_IC_MspInit+0xf8>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80011c8:	4b19      	ldr	r3, [pc, #100]	; (8001230 <HAL_TIM_IC_MspInit+0xf8>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80011ce:	4b18      	ldr	r3, [pc, #96]	; (8001230 <HAL_TIM_IC_MspInit+0xf8>)
 80011d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011d4:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011d6:	4b16      	ldr	r3, [pc, #88]	; (8001230 <HAL_TIM_IC_MspInit+0xf8>)
 80011d8:	2200      	movs	r2, #0
 80011da:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011dc:	4b14      	ldr	r3, [pc, #80]	; (8001230 <HAL_TIM_IC_MspInit+0xf8>)
 80011de:	2200      	movs	r2, #0
 80011e0:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch4.Init.Mode = DMA_NORMAL;
 80011e2:	4b13      	ldr	r3, [pc, #76]	; (8001230 <HAL_TIM_IC_MspInit+0xf8>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 80011e8:	4b11      	ldr	r3, [pc, #68]	; (8001230 <HAL_TIM_IC_MspInit+0xf8>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011ee:	4b10      	ldr	r3, [pc, #64]	; (8001230 <HAL_TIM_IC_MspInit+0xf8>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch4) != HAL_OK)
 80011f4:	480e      	ldr	r0, [pc, #56]	; (8001230 <HAL_TIM_IC_MspInit+0xf8>)
 80011f6:	f000 fc53 	bl	8001aa0 <HAL_DMA_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <HAL_TIM_IC_MspInit+0xcc>
    {
      Error_Handler();
 8001200:	f7ff feac 	bl	8000f5c <Error_Handler>
    }

    __HAL_LINKDMA(htim_ic,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch4);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <HAL_TIM_IC_MspInit+0xf8>)
 8001208:	631a      	str	r2, [r3, #48]	; 0x30
 800120a:	4a09      	ldr	r2, [pc, #36]	; (8001230 <HAL_TIM_IC_MspInit+0xf8>)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001210:	2200      	movs	r2, #0
 8001212:	2100      	movs	r1, #0
 8001214:	201c      	movs	r0, #28
 8001216:	f000 fc0e 	bl	8001a36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800121a:	201c      	movs	r0, #28
 800121c:	f000 fc25 	bl	8001a6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001220:	bf00      	nop
 8001222:	3728      	adds	r7, #40	; 0x28
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	58024400 	.word	0x58024400
 800122c:	58020000 	.word	0x58020000
 8001230:	2400026c 	.word	0x2400026c
 8001234:	40020028 	.word	0x40020028

08001238 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a0b      	ldr	r2, [pc, #44]	; (8001274 <HAL_TIM_PWM_MspInit+0x3c>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d10e      	bne.n	8001268 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800124a:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <HAL_TIM_PWM_MspInit+0x40>)
 800124c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001250:	4a09      	ldr	r2, [pc, #36]	; (8001278 <HAL_TIM_PWM_MspInit+0x40>)
 8001252:	f043 0308 	orr.w	r3, r3, #8
 8001256:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800125a:	4b07      	ldr	r3, [pc, #28]	; (8001278 <HAL_TIM_PWM_MspInit+0x40>)
 800125c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001260:	f003 0308 	and.w	r3, r3, #8
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001268:	bf00      	nop
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	40000c00 	.word	0x40000c00
 8001278:	58024400 	.word	0x58024400

0800127c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b088      	sub	sp, #32
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 030c 	add.w	r3, r7, #12
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a12      	ldr	r2, [pc, #72]	; (80012e4 <HAL_TIM_MspPostInit+0x68>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d11e      	bne.n	80012dc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129e:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <HAL_TIM_MspPostInit+0x6c>)
 80012a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a4:	4a10      	ldr	r2, [pc, #64]	; (80012e8 <HAL_TIM_MspPostInit+0x6c>)
 80012a6:	f043 0301 	orr.w	r3, r3, #1
 80012aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012ae:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <HAL_TIM_MspPostInit+0x6c>)
 80012b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012bc:	2301      	movs	r3, #1
 80012be:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c0:	2302      	movs	r3, #2
 80012c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80012cc:	2302      	movs	r3, #2
 80012ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d0:	f107 030c 	add.w	r3, r7, #12
 80012d4:	4619      	mov	r1, r3
 80012d6:	4805      	ldr	r0, [pc, #20]	; (80012ec <HAL_TIM_MspPostInit+0x70>)
 80012d8:	f002 ff94 	bl	8004204 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80012dc:	bf00      	nop
 80012de:	3720      	adds	r7, #32
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40000c00 	.word	0x40000c00
 80012e8:	58024400 	.word	0x58024400
 80012ec:	58020000 	.word	0x58020000

080012f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b0b8      	sub	sp, #224	; 0xe0
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001308:	f107 0310 	add.w	r3, r7, #16
 800130c:	22bc      	movs	r2, #188	; 0xbc
 800130e:	2100      	movs	r1, #0
 8001310:	4618      	mov	r0, r3
 8001312:	f008 fc7d 	bl	8009c10 <memset>
  if(huart->Instance==USART3)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a25      	ldr	r2, [pc, #148]	; (80013b0 <HAL_UART_MspInit+0xc0>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d142      	bne.n	80013a6 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001320:	2302      	movs	r3, #2
 8001322:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001324:	2300      	movs	r3, #0
 8001326:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800132a:	f107 0310 	add.w	r3, r7, #16
 800132e:	4618      	mov	r0, r3
 8001330:	f004 fab2 	bl	8005898 <HAL_RCCEx_PeriphCLKConfig>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800133a:	f7ff fe0f 	bl	8000f5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800133e:	4b1d      	ldr	r3, [pc, #116]	; (80013b4 <HAL_UART_MspInit+0xc4>)
 8001340:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001344:	4a1b      	ldr	r2, [pc, #108]	; (80013b4 <HAL_UART_MspInit+0xc4>)
 8001346:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800134a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800134e:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <HAL_UART_MspInit+0xc4>)
 8001350:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001354:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800135c:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <HAL_UART_MspInit+0xc4>)
 800135e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001362:	4a14      	ldr	r2, [pc, #80]	; (80013b4 <HAL_UART_MspInit+0xc4>)
 8001364:	f043 0308 	orr.w	r3, r3, #8
 8001368:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800136c:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <HAL_UART_MspInit+0xc4>)
 800136e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001372:	f003 0308 	and.w	r3, r3, #8
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800137a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800137e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001382:	2302      	movs	r3, #2
 8001384:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138e:	2300      	movs	r3, #0
 8001390:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001394:	2307      	movs	r3, #7
 8001396:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800139a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800139e:	4619      	mov	r1, r3
 80013a0:	4805      	ldr	r0, [pc, #20]	; (80013b8 <HAL_UART_MspInit+0xc8>)
 80013a2:	f002 ff2f 	bl	8004204 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013a6:	bf00      	nop
 80013a8:	37e0      	adds	r7, #224	; 0xe0
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40004800 	.word	0x40004800
 80013b4:	58024400 	.word	0x58024400
 80013b8:	58020c00 	.word	0x58020c00

080013bc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b0b8      	sub	sp, #224	; 0xe0
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
 80013d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013d4:	f107 0310 	add.w	r3, r7, #16
 80013d8:	22bc      	movs	r2, #188	; 0xbc
 80013da:	2100      	movs	r1, #0
 80013dc:	4618      	mov	r0, r3
 80013de:	f008 fc17 	bl	8009c10 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a36      	ldr	r2, [pc, #216]	; (80014c0 <HAL_PCD_MspInit+0x104>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d165      	bne.n	80014b8 <HAL_PCD_MspInit+0xfc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80013ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80013f0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 4;
 80013f2:	2304      	movs	r3, #4
 80013f4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 100;
 80013f6:	2364      	movs	r3, #100	; 0x64
 80013f8:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80013fa:	2302      	movs	r3, #2
 80013fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 80013fe:	2304      	movs	r3, #4
 8001400:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001402:	2302      	movs	r3, #2
 8001404:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 8001406:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800140a:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001410:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001414:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001418:	f107 0310 	add.w	r3, r7, #16
 800141c:	4618      	mov	r0, r3
 800141e:	f004 fa3b 	bl	8005898 <HAL_RCCEx_PeriphCLKConfig>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001428:	f7ff fd98 	bl	8000f5c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800142c:	f003 fa6a 	bl	8004904 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001430:	4b24      	ldr	r3, [pc, #144]	; (80014c4 <HAL_PCD_MspInit+0x108>)
 8001432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001436:	4a23      	ldr	r2, [pc, #140]	; (80014c4 <HAL_PCD_MspInit+0x108>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001440:	4b20      	ldr	r3, [pc, #128]	; (80014c4 <HAL_PCD_MspInit+0x108>)
 8001442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800144e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001452:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001456:	2302      	movs	r3, #2
 8001458:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001462:	2300      	movs	r3, #0
 8001464:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001468:	230a      	movs	r3, #10
 800146a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001472:	4619      	mov	r1, r3
 8001474:	4814      	ldr	r0, [pc, #80]	; (80014c8 <HAL_PCD_MspInit+0x10c>)
 8001476:	f002 fec5 	bl	8004204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800147a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800147e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001482:	2300      	movs	r3, #0
 8001484:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001492:	4619      	mov	r1, r3
 8001494:	480c      	ldr	r0, [pc, #48]	; (80014c8 <HAL_PCD_MspInit+0x10c>)
 8001496:	f002 feb5 	bl	8004204 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800149a:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <HAL_PCD_MspInit+0x108>)
 800149c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014a0:	4a08      	ldr	r2, [pc, #32]	; (80014c4 <HAL_PCD_MspInit+0x108>)
 80014a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80014a6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_PCD_MspInit+0x108>)
 80014ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80014b8:	bf00      	nop
 80014ba:	37e0      	adds	r7, #224	; 0xe0
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40080000 	.word	0x40080000
 80014c4:	58024400 	.word	0x58024400
 80014c8:	58020000 	.word	0x58020000

080014cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <NMI_Handler+0x4>

080014d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014d6:	e7fe      	b.n	80014d6 <HardFault_Handler+0x4>

080014d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014dc:	e7fe      	b.n	80014dc <MemManage_Handler+0x4>

080014de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e2:	e7fe      	b.n	80014e2 <BusFault_Handler+0x4>

080014e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <UsageFault_Handler+0x4>

080014ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001518:	f000 f94e 	bl	80017b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}

08001520 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LOCK_L_Pin);
 8001524:	2002      	movs	r0, #2
 8001526:	f003 f850 	bl	80045ca <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch4);
 8001534:	4802      	ldr	r0, [pc, #8]	; (8001540 <DMA1_Stream1_IRQHandler+0x10>)
 8001536:	f000 ff2f 	bl	8002398 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */



  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	2400026c 	.word	0x2400026c

08001544 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_OVCR_Pin);
 8001548:	2080      	movs	r0, #128	; 0x80
 800154a:	f003 f83e 	bl	80045ca <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(START_TRANSACTION_Pin);
 800154e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001552:	f003 f83a 	bl	80045ca <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001560:	4802      	ldr	r0, [pc, #8]	; (800156c <TIM2_IRQHandler+0x10>)
 8001562:	f005 feb3 	bl	80072cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	240001d4 	.word	0x240001d4

08001570 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001574:	4b37      	ldr	r3, [pc, #220]	; (8001654 <SystemInit+0xe4>)
 8001576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800157a:	4a36      	ldr	r2, [pc, #216]	; (8001654 <SystemInit+0xe4>)
 800157c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001580:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001584:	4b34      	ldr	r3, [pc, #208]	; (8001658 <SystemInit+0xe8>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 030f 	and.w	r3, r3, #15
 800158c:	2b06      	cmp	r3, #6
 800158e:	d807      	bhi.n	80015a0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001590:	4b31      	ldr	r3, [pc, #196]	; (8001658 <SystemInit+0xe8>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f023 030f 	bic.w	r3, r3, #15
 8001598:	4a2f      	ldr	r2, [pc, #188]	; (8001658 <SystemInit+0xe8>)
 800159a:	f043 0307 	orr.w	r3, r3, #7
 800159e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80015a0:	4b2e      	ldr	r3, [pc, #184]	; (800165c <SystemInit+0xec>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a2d      	ldr	r2, [pc, #180]	; (800165c <SystemInit+0xec>)
 80015a6:	f043 0301 	orr.w	r3, r3, #1
 80015aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80015ac:	4b2b      	ldr	r3, [pc, #172]	; (800165c <SystemInit+0xec>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80015b2:	4b2a      	ldr	r3, [pc, #168]	; (800165c <SystemInit+0xec>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	4929      	ldr	r1, [pc, #164]	; (800165c <SystemInit+0xec>)
 80015b8:	4b29      	ldr	r3, [pc, #164]	; (8001660 <SystemInit+0xf0>)
 80015ba:	4013      	ands	r3, r2
 80015bc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015be:	4b26      	ldr	r3, [pc, #152]	; (8001658 <SystemInit+0xe8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0308 	and.w	r3, r3, #8
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d007      	beq.n	80015da <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015ca:	4b23      	ldr	r3, [pc, #140]	; (8001658 <SystemInit+0xe8>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f023 030f 	bic.w	r3, r3, #15
 80015d2:	4a21      	ldr	r2, [pc, #132]	; (8001658 <SystemInit+0xe8>)
 80015d4:	f043 0307 	orr.w	r3, r3, #7
 80015d8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80015da:	4b20      	ldr	r3, [pc, #128]	; (800165c <SystemInit+0xec>)
 80015dc:	2200      	movs	r2, #0
 80015de:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80015e0:	4b1e      	ldr	r3, [pc, #120]	; (800165c <SystemInit+0xec>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80015e6:	4b1d      	ldr	r3, [pc, #116]	; (800165c <SystemInit+0xec>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80015ec:	4b1b      	ldr	r3, [pc, #108]	; (800165c <SystemInit+0xec>)
 80015ee:	4a1d      	ldr	r2, [pc, #116]	; (8001664 <SystemInit+0xf4>)
 80015f0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80015f2:	4b1a      	ldr	r3, [pc, #104]	; (800165c <SystemInit+0xec>)
 80015f4:	4a1c      	ldr	r2, [pc, #112]	; (8001668 <SystemInit+0xf8>)
 80015f6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80015f8:	4b18      	ldr	r3, [pc, #96]	; (800165c <SystemInit+0xec>)
 80015fa:	4a1c      	ldr	r2, [pc, #112]	; (800166c <SystemInit+0xfc>)
 80015fc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80015fe:	4b17      	ldr	r3, [pc, #92]	; (800165c <SystemInit+0xec>)
 8001600:	2200      	movs	r2, #0
 8001602:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001604:	4b15      	ldr	r3, [pc, #84]	; (800165c <SystemInit+0xec>)
 8001606:	4a19      	ldr	r2, [pc, #100]	; (800166c <SystemInit+0xfc>)
 8001608:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800160a:	4b14      	ldr	r3, [pc, #80]	; (800165c <SystemInit+0xec>)
 800160c:	2200      	movs	r2, #0
 800160e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <SystemInit+0xec>)
 8001612:	4a16      	ldr	r2, [pc, #88]	; (800166c <SystemInit+0xfc>)
 8001614:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001616:	4b11      	ldr	r3, [pc, #68]	; (800165c <SystemInit+0xec>)
 8001618:	2200      	movs	r2, #0
 800161a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800161c:	4b0f      	ldr	r3, [pc, #60]	; (800165c <SystemInit+0xec>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a0e      	ldr	r2, [pc, #56]	; (800165c <SystemInit+0xec>)
 8001622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001626:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001628:	4b0c      	ldr	r3, [pc, #48]	; (800165c <SystemInit+0xec>)
 800162a:	2200      	movs	r2, #0
 800162c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800162e:	4b10      	ldr	r3, [pc, #64]	; (8001670 <SystemInit+0x100>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	4b10      	ldr	r3, [pc, #64]	; (8001674 <SystemInit+0x104>)
 8001634:	4013      	ands	r3, r2
 8001636:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800163a:	d202      	bcs.n	8001642 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800163c:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <SystemInit+0x108>)
 800163e:	2201      	movs	r2, #1
 8001640:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001642:	4b0e      	ldr	r3, [pc, #56]	; (800167c <SystemInit+0x10c>)
 8001644:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001648:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800164a:	bf00      	nop
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	e000ed00 	.word	0xe000ed00
 8001658:	52002000 	.word	0x52002000
 800165c:	58024400 	.word	0x58024400
 8001660:	eaf6ed7f 	.word	0xeaf6ed7f
 8001664:	02020200 	.word	0x02020200
 8001668:	01ff0000 	.word	0x01ff0000
 800166c:	01010280 	.word	0x01010280
 8001670:	5c001000 	.word	0x5c001000
 8001674:	ffff0000 	.word	0xffff0000
 8001678:	51008108 	.word	0x51008108
 800167c:	52004000 	.word	0x52004000

08001680 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001680:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001684:	f7ff ff74 	bl	8001570 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001688:	480c      	ldr	r0, [pc, #48]	; (80016bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800168a:	490d      	ldr	r1, [pc, #52]	; (80016c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800168c:	4a0d      	ldr	r2, [pc, #52]	; (80016c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800168e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001690:	e002      	b.n	8001698 <LoopCopyDataInit>

08001692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001696:	3304      	adds	r3, #4

08001698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800169a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800169c:	d3f9      	bcc.n	8001692 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800169e:	4a0a      	ldr	r2, [pc, #40]	; (80016c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016a0:	4c0a      	ldr	r4, [pc, #40]	; (80016cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80016a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016a4:	e001      	b.n	80016aa <LoopFillZerobss>

080016a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016a8:	3204      	adds	r2, #4

080016aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016ac:	d3fb      	bcc.n	80016a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016ae:	f008 fa8b 	bl	8009bc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016b2:	f7fe ff93 	bl	80005dc <main>
  bx  lr
 80016b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016b8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80016bc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80016c0:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80016c4:	08009c88 	.word	0x08009c88
  ldr r2, =_sbss
 80016c8:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 80016cc:	24003064 	.word	0x24003064

080016d0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016d0:	e7fe      	b.n	80016d0 <ADC3_IRQHandler>
	...

080016d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016da:	2003      	movs	r0, #3
 80016dc:	f000 f9a0 	bl	8001a20 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016e0:	f003 ff04 	bl	80054ec <HAL_RCC_GetSysClockFreq>
 80016e4:	4602      	mov	r2, r0
 80016e6:	4b15      	ldr	r3, [pc, #84]	; (800173c <HAL_Init+0x68>)
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	0a1b      	lsrs	r3, r3, #8
 80016ec:	f003 030f 	and.w	r3, r3, #15
 80016f0:	4913      	ldr	r1, [pc, #76]	; (8001740 <HAL_Init+0x6c>)
 80016f2:	5ccb      	ldrb	r3, [r1, r3]
 80016f4:	f003 031f 	and.w	r3, r3, #31
 80016f8:	fa22 f303 	lsr.w	r3, r2, r3
 80016fc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016fe:	4b0f      	ldr	r3, [pc, #60]	; (800173c <HAL_Init+0x68>)
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	f003 030f 	and.w	r3, r3, #15
 8001706:	4a0e      	ldr	r2, [pc, #56]	; (8001740 <HAL_Init+0x6c>)
 8001708:	5cd3      	ldrb	r3, [r2, r3]
 800170a:	f003 031f 	and.w	r3, r3, #31
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	fa22 f303 	lsr.w	r3, r2, r3
 8001714:	4a0b      	ldr	r2, [pc, #44]	; (8001744 <HAL_Init+0x70>)
 8001716:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001718:	4a0b      	ldr	r2, [pc, #44]	; (8001748 <HAL_Init+0x74>)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800171e:	2000      	movs	r0, #0
 8001720:	f000 f814 	bl	800174c <HAL_InitTick>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e002      	b.n	8001734 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800172e:	f7ff fc1b 	bl	8000f68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001732:	2300      	movs	r3, #0
}
 8001734:	4618      	mov	r0, r3
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	58024400 	.word	0x58024400
 8001740:	08009c38 	.word	0x08009c38
 8001744:	24000004 	.word	0x24000004
 8001748:	24000000 	.word	0x24000000

0800174c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001754:	4b15      	ldr	r3, [pc, #84]	; (80017ac <HAL_InitTick+0x60>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d101      	bne.n	8001760 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e021      	b.n	80017a4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001760:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <HAL_InitTick+0x64>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	4b11      	ldr	r3, [pc, #68]	; (80017ac <HAL_InitTick+0x60>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	4619      	mov	r1, r3
 800176a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800176e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001772:	fbb2 f3f3 	udiv	r3, r2, r3
 8001776:	4618      	mov	r0, r3
 8001778:	f000 f985 	bl	8001a86 <HAL_SYSTICK_Config>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e00e      	b.n	80017a4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2b0f      	cmp	r3, #15
 800178a:	d80a      	bhi.n	80017a2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800178c:	2200      	movs	r2, #0
 800178e:	6879      	ldr	r1, [r7, #4]
 8001790:	f04f 30ff 	mov.w	r0, #4294967295
 8001794:	f000 f94f 	bl	8001a36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001798:	4a06      	ldr	r2, [pc, #24]	; (80017b4 <HAL_InitTick+0x68>)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800179e:	2300      	movs	r3, #0
 80017a0:	e000      	b.n	80017a4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	2400000c 	.word	0x2400000c
 80017b0:	24000000 	.word	0x24000000
 80017b4:	24000008 	.word	0x24000008

080017b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <HAL_IncTick+0x20>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	461a      	mov	r2, r3
 80017c2:	4b06      	ldr	r3, [pc, #24]	; (80017dc <HAL_IncTick+0x24>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4413      	add	r3, r2
 80017c8:	4a04      	ldr	r2, [pc, #16]	; (80017dc <HAL_IncTick+0x24>)
 80017ca:	6013      	str	r3, [r2, #0]
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	2400000c 	.word	0x2400000c
 80017dc:	24003060 	.word	0x24003060

080017e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  return uwTick;
 80017e4:	4b03      	ldr	r3, [pc, #12]	; (80017f4 <HAL_GetTick+0x14>)
 80017e6:	681b      	ldr	r3, [r3, #0]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	24003060 	.word	0x24003060

080017f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001800:	f7ff ffee 	bl	80017e0 <HAL_GetTick>
 8001804:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001810:	d005      	beq.n	800181e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001812:	4b0a      	ldr	r3, [pc, #40]	; (800183c <HAL_Delay+0x44>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	461a      	mov	r2, r3
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	4413      	add	r3, r2
 800181c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800181e:	bf00      	nop
 8001820:	f7ff ffde 	bl	80017e0 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	429a      	cmp	r2, r3
 800182e:	d8f7      	bhi.n	8001820 <HAL_Delay+0x28>
  {
  }
}
 8001830:	bf00      	nop
 8001832:	bf00      	nop
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	2400000c 	.word	0x2400000c

08001840 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001844:	4b03      	ldr	r3, [pc, #12]	; (8001854 <HAL_GetREVID+0x14>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	0c1b      	lsrs	r3, r3, #16
}
 800184a:	4618      	mov	r0, r3
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	5c001000 	.word	0x5c001000

08001858 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001860:	4b06      	ldr	r3, [pc, #24]	; (800187c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001868:	4904      	ldr	r1, [pc, #16]	; (800187c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4313      	orrs	r3, r2
 800186e:	604b      	str	r3, [r1, #4]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	58000400 	.word	0x58000400

08001880 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001890:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <__NVIC_SetPriorityGrouping+0x40>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800189c:	4013      	ands	r3, r2
 800189e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <__NVIC_SetPriorityGrouping+0x44>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ae:	4a04      	ldr	r2, [pc, #16]	; (80018c0 <__NVIC_SetPriorityGrouping+0x40>)
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	60d3      	str	r3, [r2, #12]
}
 80018b4:	bf00      	nop
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000ed00 	.word	0xe000ed00
 80018c4:	05fa0000 	.word	0x05fa0000

080018c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018cc:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <__NVIC_GetPriorityGrouping+0x18>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	0a1b      	lsrs	r3, r3, #8
 80018d2:	f003 0307 	and.w	r3, r3, #7
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	db0b      	blt.n	800190e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018f6:	88fb      	ldrh	r3, [r7, #6]
 80018f8:	f003 021f 	and.w	r2, r3, #31
 80018fc:	4907      	ldr	r1, [pc, #28]	; (800191c <__NVIC_EnableIRQ+0x38>)
 80018fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001902:	095b      	lsrs	r3, r3, #5
 8001904:	2001      	movs	r0, #1
 8001906:	fa00 f202 	lsl.w	r2, r0, r2
 800190a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	e000e100 	.word	0xe000e100

08001920 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	6039      	str	r1, [r7, #0]
 800192a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800192c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001930:	2b00      	cmp	r3, #0
 8001932:	db0a      	blt.n	800194a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	b2da      	uxtb	r2, r3
 8001938:	490c      	ldr	r1, [pc, #48]	; (800196c <__NVIC_SetPriority+0x4c>)
 800193a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800193e:	0112      	lsls	r2, r2, #4
 8001940:	b2d2      	uxtb	r2, r2
 8001942:	440b      	add	r3, r1
 8001944:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001948:	e00a      	b.n	8001960 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	b2da      	uxtb	r2, r3
 800194e:	4908      	ldr	r1, [pc, #32]	; (8001970 <__NVIC_SetPriority+0x50>)
 8001950:	88fb      	ldrh	r3, [r7, #6]
 8001952:	f003 030f 	and.w	r3, r3, #15
 8001956:	3b04      	subs	r3, #4
 8001958:	0112      	lsls	r2, r2, #4
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	440b      	add	r3, r1
 800195e:	761a      	strb	r2, [r3, #24]
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	e000e100 	.word	0xe000e100
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001974:	b480      	push	{r7}
 8001976:	b089      	sub	sp, #36	; 0x24
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f1c3 0307 	rsb	r3, r3, #7
 800198e:	2b04      	cmp	r3, #4
 8001990:	bf28      	it	cs
 8001992:	2304      	movcs	r3, #4
 8001994:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	3304      	adds	r3, #4
 800199a:	2b06      	cmp	r3, #6
 800199c:	d902      	bls.n	80019a4 <NVIC_EncodePriority+0x30>
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	3b03      	subs	r3, #3
 80019a2:	e000      	b.n	80019a6 <NVIC_EncodePriority+0x32>
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a8:	f04f 32ff 	mov.w	r2, #4294967295
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43da      	mvns	r2, r3
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	401a      	ands	r2, r3
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019bc:	f04f 31ff 	mov.w	r1, #4294967295
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	fa01 f303 	lsl.w	r3, r1, r3
 80019c6:	43d9      	mvns	r1, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019cc:	4313      	orrs	r3, r2
         );
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3724      	adds	r7, #36	; 0x24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
	...

080019dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019ec:	d301      	bcc.n	80019f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ee:	2301      	movs	r3, #1
 80019f0:	e00f      	b.n	8001a12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019f2:	4a0a      	ldr	r2, [pc, #40]	; (8001a1c <SysTick_Config+0x40>)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019fa:	210f      	movs	r1, #15
 80019fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001a00:	f7ff ff8e 	bl	8001920 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a04:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <SysTick_Config+0x40>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a0a:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <SysTick_Config+0x40>)
 8001a0c:	2207      	movs	r2, #7
 8001a0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	e000e010 	.word	0xe000e010

08001a20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7ff ff29 	bl	8001880 <__NVIC_SetPriorityGrouping>
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b086      	sub	sp, #24
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	60b9      	str	r1, [r7, #8]
 8001a40:	607a      	str	r2, [r7, #4]
 8001a42:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a44:	f7ff ff40 	bl	80018c8 <__NVIC_GetPriorityGrouping>
 8001a48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	68b9      	ldr	r1, [r7, #8]
 8001a4e:	6978      	ldr	r0, [r7, #20]
 8001a50:	f7ff ff90 	bl	8001974 <NVIC_EncodePriority>
 8001a54:	4602      	mov	r2, r0
 8001a56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a5a:	4611      	mov	r1, r2
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff ff5f 	bl	8001920 <__NVIC_SetPriority>
}
 8001a62:	bf00      	nop
 8001a64:	3718      	adds	r7, #24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b082      	sub	sp, #8
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	4603      	mov	r3, r0
 8001a72:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff ff33 	bl	80018e4 <__NVIC_EnableIRQ>
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b082      	sub	sp, #8
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7ff ffa4 	bl	80019dc <SysTick_Config>
 8001a94:	4603      	mov	r3, r0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
	...

08001aa0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001aa8:	f7ff fe9a 	bl	80017e0 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d101      	bne.n	8001ab8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e316      	b.n	80020e6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a66      	ldr	r2, [pc, #408]	; (8001c58 <HAL_DMA_Init+0x1b8>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d04a      	beq.n	8001b58 <HAL_DMA_Init+0xb8>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a65      	ldr	r2, [pc, #404]	; (8001c5c <HAL_DMA_Init+0x1bc>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d045      	beq.n	8001b58 <HAL_DMA_Init+0xb8>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a63      	ldr	r2, [pc, #396]	; (8001c60 <HAL_DMA_Init+0x1c0>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d040      	beq.n	8001b58 <HAL_DMA_Init+0xb8>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a62      	ldr	r2, [pc, #392]	; (8001c64 <HAL_DMA_Init+0x1c4>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d03b      	beq.n	8001b58 <HAL_DMA_Init+0xb8>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a60      	ldr	r2, [pc, #384]	; (8001c68 <HAL_DMA_Init+0x1c8>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d036      	beq.n	8001b58 <HAL_DMA_Init+0xb8>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a5f      	ldr	r2, [pc, #380]	; (8001c6c <HAL_DMA_Init+0x1cc>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d031      	beq.n	8001b58 <HAL_DMA_Init+0xb8>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a5d      	ldr	r2, [pc, #372]	; (8001c70 <HAL_DMA_Init+0x1d0>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d02c      	beq.n	8001b58 <HAL_DMA_Init+0xb8>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a5c      	ldr	r2, [pc, #368]	; (8001c74 <HAL_DMA_Init+0x1d4>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d027      	beq.n	8001b58 <HAL_DMA_Init+0xb8>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a5a      	ldr	r2, [pc, #360]	; (8001c78 <HAL_DMA_Init+0x1d8>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d022      	beq.n	8001b58 <HAL_DMA_Init+0xb8>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a59      	ldr	r2, [pc, #356]	; (8001c7c <HAL_DMA_Init+0x1dc>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d01d      	beq.n	8001b58 <HAL_DMA_Init+0xb8>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a57      	ldr	r2, [pc, #348]	; (8001c80 <HAL_DMA_Init+0x1e0>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d018      	beq.n	8001b58 <HAL_DMA_Init+0xb8>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a56      	ldr	r2, [pc, #344]	; (8001c84 <HAL_DMA_Init+0x1e4>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d013      	beq.n	8001b58 <HAL_DMA_Init+0xb8>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a54      	ldr	r2, [pc, #336]	; (8001c88 <HAL_DMA_Init+0x1e8>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d00e      	beq.n	8001b58 <HAL_DMA_Init+0xb8>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a53      	ldr	r2, [pc, #332]	; (8001c8c <HAL_DMA_Init+0x1ec>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d009      	beq.n	8001b58 <HAL_DMA_Init+0xb8>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a51      	ldr	r2, [pc, #324]	; (8001c90 <HAL_DMA_Init+0x1f0>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d004      	beq.n	8001b58 <HAL_DMA_Init+0xb8>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a50      	ldr	r2, [pc, #320]	; (8001c94 <HAL_DMA_Init+0x1f4>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d101      	bne.n	8001b5c <HAL_DMA_Init+0xbc>
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e000      	b.n	8001b5e <HAL_DMA_Init+0xbe>
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f000 813b 	beq.w	8001dda <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2202      	movs	r2, #2
 8001b68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a37      	ldr	r2, [pc, #220]	; (8001c58 <HAL_DMA_Init+0x1b8>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d04a      	beq.n	8001c14 <HAL_DMA_Init+0x174>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a36      	ldr	r2, [pc, #216]	; (8001c5c <HAL_DMA_Init+0x1bc>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d045      	beq.n	8001c14 <HAL_DMA_Init+0x174>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a34      	ldr	r2, [pc, #208]	; (8001c60 <HAL_DMA_Init+0x1c0>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d040      	beq.n	8001c14 <HAL_DMA_Init+0x174>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a33      	ldr	r2, [pc, #204]	; (8001c64 <HAL_DMA_Init+0x1c4>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d03b      	beq.n	8001c14 <HAL_DMA_Init+0x174>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a31      	ldr	r2, [pc, #196]	; (8001c68 <HAL_DMA_Init+0x1c8>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d036      	beq.n	8001c14 <HAL_DMA_Init+0x174>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a30      	ldr	r2, [pc, #192]	; (8001c6c <HAL_DMA_Init+0x1cc>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d031      	beq.n	8001c14 <HAL_DMA_Init+0x174>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a2e      	ldr	r2, [pc, #184]	; (8001c70 <HAL_DMA_Init+0x1d0>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d02c      	beq.n	8001c14 <HAL_DMA_Init+0x174>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a2d      	ldr	r2, [pc, #180]	; (8001c74 <HAL_DMA_Init+0x1d4>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d027      	beq.n	8001c14 <HAL_DMA_Init+0x174>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a2b      	ldr	r2, [pc, #172]	; (8001c78 <HAL_DMA_Init+0x1d8>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d022      	beq.n	8001c14 <HAL_DMA_Init+0x174>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a2a      	ldr	r2, [pc, #168]	; (8001c7c <HAL_DMA_Init+0x1dc>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d01d      	beq.n	8001c14 <HAL_DMA_Init+0x174>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a28      	ldr	r2, [pc, #160]	; (8001c80 <HAL_DMA_Init+0x1e0>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d018      	beq.n	8001c14 <HAL_DMA_Init+0x174>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a27      	ldr	r2, [pc, #156]	; (8001c84 <HAL_DMA_Init+0x1e4>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d013      	beq.n	8001c14 <HAL_DMA_Init+0x174>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a25      	ldr	r2, [pc, #148]	; (8001c88 <HAL_DMA_Init+0x1e8>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d00e      	beq.n	8001c14 <HAL_DMA_Init+0x174>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a24      	ldr	r2, [pc, #144]	; (8001c8c <HAL_DMA_Init+0x1ec>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d009      	beq.n	8001c14 <HAL_DMA_Init+0x174>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a22      	ldr	r2, [pc, #136]	; (8001c90 <HAL_DMA_Init+0x1f0>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d004      	beq.n	8001c14 <HAL_DMA_Init+0x174>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a21      	ldr	r2, [pc, #132]	; (8001c94 <HAL_DMA_Init+0x1f4>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d108      	bne.n	8001c26 <HAL_DMA_Init+0x186>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f022 0201 	bic.w	r2, r2, #1
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	e007      	b.n	8001c36 <HAL_DMA_Init+0x196>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f022 0201 	bic.w	r2, r2, #1
 8001c34:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001c36:	e02f      	b.n	8001c98 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c38:	f7ff fdd2 	bl	80017e0 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b05      	cmp	r3, #5
 8001c44:	d928      	bls.n	8001c98 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2220      	movs	r2, #32
 8001c4a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2203      	movs	r2, #3
 8001c50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e246      	b.n	80020e6 <HAL_DMA_Init+0x646>
 8001c58:	40020010 	.word	0x40020010
 8001c5c:	40020028 	.word	0x40020028
 8001c60:	40020040 	.word	0x40020040
 8001c64:	40020058 	.word	0x40020058
 8001c68:	40020070 	.word	0x40020070
 8001c6c:	40020088 	.word	0x40020088
 8001c70:	400200a0 	.word	0x400200a0
 8001c74:	400200b8 	.word	0x400200b8
 8001c78:	40020410 	.word	0x40020410
 8001c7c:	40020428 	.word	0x40020428
 8001c80:	40020440 	.word	0x40020440
 8001c84:	40020458 	.word	0x40020458
 8001c88:	40020470 	.word	0x40020470
 8001c8c:	40020488 	.word	0x40020488
 8001c90:	400204a0 	.word	0x400204a0
 8001c94:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1c8      	bne.n	8001c38 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	4b83      	ldr	r3, [pc, #524]	; (8001ec0 <HAL_DMA_Init+0x420>)
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001cbe:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cca:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cd6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce8:	2b04      	cmp	r3, #4
 8001cea:	d107      	bne.n	8001cfc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001cfc:	4b71      	ldr	r3, [pc, #452]	; (8001ec4 <HAL_DMA_Init+0x424>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	4b71      	ldr	r3, [pc, #452]	; (8001ec8 <HAL_DMA_Init+0x428>)
 8001d02:	4013      	ands	r3, r2
 8001d04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d08:	d328      	bcc.n	8001d5c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2b28      	cmp	r3, #40	; 0x28
 8001d10:	d903      	bls.n	8001d1a <HAL_DMA_Init+0x27a>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	2b2e      	cmp	r3, #46	; 0x2e
 8001d18:	d917      	bls.n	8001d4a <HAL_DMA_Init+0x2aa>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	2b3e      	cmp	r3, #62	; 0x3e
 8001d20:	d903      	bls.n	8001d2a <HAL_DMA_Init+0x28a>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	2b42      	cmp	r3, #66	; 0x42
 8001d28:	d90f      	bls.n	8001d4a <HAL_DMA_Init+0x2aa>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	2b46      	cmp	r3, #70	; 0x46
 8001d30:	d903      	bls.n	8001d3a <HAL_DMA_Init+0x29a>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b48      	cmp	r3, #72	; 0x48
 8001d38:	d907      	bls.n	8001d4a <HAL_DMA_Init+0x2aa>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	2b4e      	cmp	r3, #78	; 0x4e
 8001d40:	d905      	bls.n	8001d4e <HAL_DMA_Init+0x2ae>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	2b52      	cmp	r3, #82	; 0x52
 8001d48:	d801      	bhi.n	8001d4e <HAL_DMA_Init+0x2ae>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e000      	b.n	8001d50 <HAL_DMA_Init+0x2b0>
 8001d4e:	2300      	movs	r3, #0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d003      	beq.n	8001d5c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d5a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	697a      	ldr	r2, [r7, #20]
 8001d62:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	f023 0307 	bic.w	r3, r3, #7
 8001d72:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d78:	697a      	ldr	r2, [r7, #20]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	d117      	bne.n	8001db6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8a:	697a      	ldr	r2, [r7, #20]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d00e      	beq.n	8001db6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f001 fc85 	bl	80036a8 <DMA_CheckFifoParam>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d008      	beq.n	8001db6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2240      	movs	r2, #64	; 0x40
 8001da8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2201      	movs	r2, #1
 8001dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e197      	b.n	80020e6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f001 fbc0 	bl	8003544 <DMA_CalcBaseAndBitshift>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dcc:	f003 031f 	and.w	r3, r3, #31
 8001dd0:	223f      	movs	r2, #63	; 0x3f
 8001dd2:	409a      	lsls	r2, r3
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	e0cd      	b.n	8001f76 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a3b      	ldr	r2, [pc, #236]	; (8001ecc <HAL_DMA_Init+0x42c>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d022      	beq.n	8001e2a <HAL_DMA_Init+0x38a>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a39      	ldr	r2, [pc, #228]	; (8001ed0 <HAL_DMA_Init+0x430>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d01d      	beq.n	8001e2a <HAL_DMA_Init+0x38a>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a38      	ldr	r2, [pc, #224]	; (8001ed4 <HAL_DMA_Init+0x434>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d018      	beq.n	8001e2a <HAL_DMA_Init+0x38a>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a36      	ldr	r2, [pc, #216]	; (8001ed8 <HAL_DMA_Init+0x438>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d013      	beq.n	8001e2a <HAL_DMA_Init+0x38a>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a35      	ldr	r2, [pc, #212]	; (8001edc <HAL_DMA_Init+0x43c>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d00e      	beq.n	8001e2a <HAL_DMA_Init+0x38a>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a33      	ldr	r2, [pc, #204]	; (8001ee0 <HAL_DMA_Init+0x440>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d009      	beq.n	8001e2a <HAL_DMA_Init+0x38a>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a32      	ldr	r2, [pc, #200]	; (8001ee4 <HAL_DMA_Init+0x444>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d004      	beq.n	8001e2a <HAL_DMA_Init+0x38a>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a30      	ldr	r2, [pc, #192]	; (8001ee8 <HAL_DMA_Init+0x448>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d101      	bne.n	8001e2e <HAL_DMA_Init+0x38e>
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e000      	b.n	8001e30 <HAL_DMA_Init+0x390>
 8001e2e:	2300      	movs	r3, #0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f000 8097 	beq.w	8001f64 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a24      	ldr	r2, [pc, #144]	; (8001ecc <HAL_DMA_Init+0x42c>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d021      	beq.n	8001e84 <HAL_DMA_Init+0x3e4>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a22      	ldr	r2, [pc, #136]	; (8001ed0 <HAL_DMA_Init+0x430>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d01c      	beq.n	8001e84 <HAL_DMA_Init+0x3e4>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a21      	ldr	r2, [pc, #132]	; (8001ed4 <HAL_DMA_Init+0x434>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d017      	beq.n	8001e84 <HAL_DMA_Init+0x3e4>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a1f      	ldr	r2, [pc, #124]	; (8001ed8 <HAL_DMA_Init+0x438>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d012      	beq.n	8001e84 <HAL_DMA_Init+0x3e4>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a1e      	ldr	r2, [pc, #120]	; (8001edc <HAL_DMA_Init+0x43c>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d00d      	beq.n	8001e84 <HAL_DMA_Init+0x3e4>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a1c      	ldr	r2, [pc, #112]	; (8001ee0 <HAL_DMA_Init+0x440>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d008      	beq.n	8001e84 <HAL_DMA_Init+0x3e4>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a1b      	ldr	r2, [pc, #108]	; (8001ee4 <HAL_DMA_Init+0x444>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d003      	beq.n	8001e84 <HAL_DMA_Init+0x3e4>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a19      	ldr	r2, [pc, #100]	; (8001ee8 <HAL_DMA_Init+0x448>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2202      	movs	r2, #2
 8001e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	4b12      	ldr	r3, [pc, #72]	; (8001eec <HAL_DMA_Init+0x44c>)
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	2b40      	cmp	r3, #64	; 0x40
 8001eac:	d020      	beq.n	8001ef0 <HAL_DMA_Init+0x450>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	2b80      	cmp	r3, #128	; 0x80
 8001eb4:	d102      	bne.n	8001ebc <HAL_DMA_Init+0x41c>
 8001eb6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001eba:	e01a      	b.n	8001ef2 <HAL_DMA_Init+0x452>
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	e018      	b.n	8001ef2 <HAL_DMA_Init+0x452>
 8001ec0:	fe10803f 	.word	0xfe10803f
 8001ec4:	5c001000 	.word	0x5c001000
 8001ec8:	ffff0000 	.word	0xffff0000
 8001ecc:	58025408 	.word	0x58025408
 8001ed0:	5802541c 	.word	0x5802541c
 8001ed4:	58025430 	.word	0x58025430
 8001ed8:	58025444 	.word	0x58025444
 8001edc:	58025458 	.word	0x58025458
 8001ee0:	5802546c 	.word	0x5802546c
 8001ee4:	58025480 	.word	0x58025480
 8001ee8:	58025494 	.word	0x58025494
 8001eec:	fffe000f 	.word	0xfffe000f
 8001ef0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	68d2      	ldr	r2, [r2, #12]
 8001ef6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ef8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001f00:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001f08:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001f10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001f18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
 8001f1e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001f20:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	461a      	mov	r2, r3
 8001f36:	4b6e      	ldr	r3, [pc, #440]	; (80020f0 <HAL_DMA_Init+0x650>)
 8001f38:	4413      	add	r3, r2
 8001f3a:	4a6e      	ldr	r2, [pc, #440]	; (80020f4 <HAL_DMA_Init+0x654>)
 8001f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f40:	091b      	lsrs	r3, r3, #4
 8001f42:	009a      	lsls	r2, r3, #2
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f001 fafb 	bl	8003544 <DMA_CalcBaseAndBitshift>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f56:	f003 031f 	and.w	r3, r3, #31
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	409a      	lsls	r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	e008      	b.n	8001f76 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2240      	movs	r2, #64	; 0x40
 8001f68:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2203      	movs	r2, #3
 8001f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e0b7      	b.n	80020e6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a5f      	ldr	r2, [pc, #380]	; (80020f8 <HAL_DMA_Init+0x658>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d072      	beq.n	8002066 <HAL_DMA_Init+0x5c6>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a5d      	ldr	r2, [pc, #372]	; (80020fc <HAL_DMA_Init+0x65c>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d06d      	beq.n	8002066 <HAL_DMA_Init+0x5c6>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a5c      	ldr	r2, [pc, #368]	; (8002100 <HAL_DMA_Init+0x660>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d068      	beq.n	8002066 <HAL_DMA_Init+0x5c6>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a5a      	ldr	r2, [pc, #360]	; (8002104 <HAL_DMA_Init+0x664>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d063      	beq.n	8002066 <HAL_DMA_Init+0x5c6>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a59      	ldr	r2, [pc, #356]	; (8002108 <HAL_DMA_Init+0x668>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d05e      	beq.n	8002066 <HAL_DMA_Init+0x5c6>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a57      	ldr	r2, [pc, #348]	; (800210c <HAL_DMA_Init+0x66c>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d059      	beq.n	8002066 <HAL_DMA_Init+0x5c6>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a56      	ldr	r2, [pc, #344]	; (8002110 <HAL_DMA_Init+0x670>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d054      	beq.n	8002066 <HAL_DMA_Init+0x5c6>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a54      	ldr	r2, [pc, #336]	; (8002114 <HAL_DMA_Init+0x674>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d04f      	beq.n	8002066 <HAL_DMA_Init+0x5c6>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a53      	ldr	r2, [pc, #332]	; (8002118 <HAL_DMA_Init+0x678>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d04a      	beq.n	8002066 <HAL_DMA_Init+0x5c6>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a51      	ldr	r2, [pc, #324]	; (800211c <HAL_DMA_Init+0x67c>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d045      	beq.n	8002066 <HAL_DMA_Init+0x5c6>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a50      	ldr	r2, [pc, #320]	; (8002120 <HAL_DMA_Init+0x680>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d040      	beq.n	8002066 <HAL_DMA_Init+0x5c6>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a4e      	ldr	r2, [pc, #312]	; (8002124 <HAL_DMA_Init+0x684>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d03b      	beq.n	8002066 <HAL_DMA_Init+0x5c6>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a4d      	ldr	r2, [pc, #308]	; (8002128 <HAL_DMA_Init+0x688>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d036      	beq.n	8002066 <HAL_DMA_Init+0x5c6>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a4b      	ldr	r2, [pc, #300]	; (800212c <HAL_DMA_Init+0x68c>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d031      	beq.n	8002066 <HAL_DMA_Init+0x5c6>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a4a      	ldr	r2, [pc, #296]	; (8002130 <HAL_DMA_Init+0x690>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d02c      	beq.n	8002066 <HAL_DMA_Init+0x5c6>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a48      	ldr	r2, [pc, #288]	; (8002134 <HAL_DMA_Init+0x694>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d027      	beq.n	8002066 <HAL_DMA_Init+0x5c6>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a47      	ldr	r2, [pc, #284]	; (8002138 <HAL_DMA_Init+0x698>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d022      	beq.n	8002066 <HAL_DMA_Init+0x5c6>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a45      	ldr	r2, [pc, #276]	; (800213c <HAL_DMA_Init+0x69c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d01d      	beq.n	8002066 <HAL_DMA_Init+0x5c6>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a44      	ldr	r2, [pc, #272]	; (8002140 <HAL_DMA_Init+0x6a0>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d018      	beq.n	8002066 <HAL_DMA_Init+0x5c6>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a42      	ldr	r2, [pc, #264]	; (8002144 <HAL_DMA_Init+0x6a4>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d013      	beq.n	8002066 <HAL_DMA_Init+0x5c6>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a41      	ldr	r2, [pc, #260]	; (8002148 <HAL_DMA_Init+0x6a8>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d00e      	beq.n	8002066 <HAL_DMA_Init+0x5c6>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a3f      	ldr	r2, [pc, #252]	; (800214c <HAL_DMA_Init+0x6ac>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d009      	beq.n	8002066 <HAL_DMA_Init+0x5c6>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a3e      	ldr	r2, [pc, #248]	; (8002150 <HAL_DMA_Init+0x6b0>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d004      	beq.n	8002066 <HAL_DMA_Init+0x5c6>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a3c      	ldr	r2, [pc, #240]	; (8002154 <HAL_DMA_Init+0x6b4>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d101      	bne.n	800206a <HAL_DMA_Init+0x5ca>
 8002066:	2301      	movs	r3, #1
 8002068:	e000      	b.n	800206c <HAL_DMA_Init+0x5cc>
 800206a:	2300      	movs	r3, #0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d032      	beq.n	80020d6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f001 fb95 	bl	80037a0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	2b80      	cmp	r3, #128	; 0x80
 800207c:	d102      	bne.n	8002084 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002098:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d010      	beq.n	80020c4 <HAL_DMA_Init+0x624>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b08      	cmp	r3, #8
 80020a8:	d80c      	bhi.n	80020c4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f001 fc12 	bl	80038d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	e008      	b.n	80020d6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	a7fdabf8 	.word	0xa7fdabf8
 80020f4:	cccccccd 	.word	0xcccccccd
 80020f8:	40020010 	.word	0x40020010
 80020fc:	40020028 	.word	0x40020028
 8002100:	40020040 	.word	0x40020040
 8002104:	40020058 	.word	0x40020058
 8002108:	40020070 	.word	0x40020070
 800210c:	40020088 	.word	0x40020088
 8002110:	400200a0 	.word	0x400200a0
 8002114:	400200b8 	.word	0x400200b8
 8002118:	40020410 	.word	0x40020410
 800211c:	40020428 	.word	0x40020428
 8002120:	40020440 	.word	0x40020440
 8002124:	40020458 	.word	0x40020458
 8002128:	40020470 	.word	0x40020470
 800212c:	40020488 	.word	0x40020488
 8002130:	400204a0 	.word	0x400204a0
 8002134:	400204b8 	.word	0x400204b8
 8002138:	58025408 	.word	0x58025408
 800213c:	5802541c 	.word	0x5802541c
 8002140:	58025430 	.word	0x58025430
 8002144:	58025444 	.word	0x58025444
 8002148:	58025458 	.word	0x58025458
 800214c:	5802546c 	.word	0x5802546c
 8002150:	58025480 	.word	0x58025480
 8002154:	58025494 	.word	0x58025494

08002158 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
 8002164:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002166:	2300      	movs	r3, #0
 8002168:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d101      	bne.n	8002174 <HAL_DMA_Start+0x1c>
  {
    return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e0ec      	b.n	800234e <HAL_DMA_Start+0x1f6>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800217a:	2b01      	cmp	r3, #1
 800217c:	d101      	bne.n	8002182 <HAL_DMA_Start+0x2a>
 800217e:	2302      	movs	r3, #2
 8002180:	e0e5      	b.n	800234e <HAL_DMA_Start+0x1f6>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2201      	movs	r2, #1
 8002186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b01      	cmp	r3, #1
 8002194:	f040 80d0 	bne.w	8002338 <HAL_DMA_Start+0x1e0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2202      	movs	r2, #2
 800219c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a6b      	ldr	r2, [pc, #428]	; (8002358 <HAL_DMA_Start+0x200>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d04a      	beq.n	8002246 <HAL_DMA_Start+0xee>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a69      	ldr	r2, [pc, #420]	; (800235c <HAL_DMA_Start+0x204>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d045      	beq.n	8002246 <HAL_DMA_Start+0xee>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a68      	ldr	r2, [pc, #416]	; (8002360 <HAL_DMA_Start+0x208>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d040      	beq.n	8002246 <HAL_DMA_Start+0xee>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a66      	ldr	r2, [pc, #408]	; (8002364 <HAL_DMA_Start+0x20c>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d03b      	beq.n	8002246 <HAL_DMA_Start+0xee>
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a65      	ldr	r2, [pc, #404]	; (8002368 <HAL_DMA_Start+0x210>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d036      	beq.n	8002246 <HAL_DMA_Start+0xee>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a63      	ldr	r2, [pc, #396]	; (800236c <HAL_DMA_Start+0x214>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d031      	beq.n	8002246 <HAL_DMA_Start+0xee>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a62      	ldr	r2, [pc, #392]	; (8002370 <HAL_DMA_Start+0x218>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d02c      	beq.n	8002246 <HAL_DMA_Start+0xee>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a60      	ldr	r2, [pc, #384]	; (8002374 <HAL_DMA_Start+0x21c>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d027      	beq.n	8002246 <HAL_DMA_Start+0xee>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a5f      	ldr	r2, [pc, #380]	; (8002378 <HAL_DMA_Start+0x220>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d022      	beq.n	8002246 <HAL_DMA_Start+0xee>
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a5d      	ldr	r2, [pc, #372]	; (800237c <HAL_DMA_Start+0x224>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d01d      	beq.n	8002246 <HAL_DMA_Start+0xee>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a5c      	ldr	r2, [pc, #368]	; (8002380 <HAL_DMA_Start+0x228>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d018      	beq.n	8002246 <HAL_DMA_Start+0xee>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a5a      	ldr	r2, [pc, #360]	; (8002384 <HAL_DMA_Start+0x22c>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d013      	beq.n	8002246 <HAL_DMA_Start+0xee>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a59      	ldr	r2, [pc, #356]	; (8002388 <HAL_DMA_Start+0x230>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d00e      	beq.n	8002246 <HAL_DMA_Start+0xee>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a57      	ldr	r2, [pc, #348]	; (800238c <HAL_DMA_Start+0x234>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d009      	beq.n	8002246 <HAL_DMA_Start+0xee>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a56      	ldr	r2, [pc, #344]	; (8002390 <HAL_DMA_Start+0x238>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d004      	beq.n	8002246 <HAL_DMA_Start+0xee>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a54      	ldr	r2, [pc, #336]	; (8002394 <HAL_DMA_Start+0x23c>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d108      	bne.n	8002258 <HAL_DMA_Start+0x100>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f022 0201 	bic.w	r2, r2, #1
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	e007      	b.n	8002268 <HAL_DMA_Start+0x110>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f022 0201 	bic.w	r2, r2, #1
 8002266:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	68b9      	ldr	r1, [r7, #8]
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f000 ffbc 	bl	80031ec <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a37      	ldr	r2, [pc, #220]	; (8002358 <HAL_DMA_Start+0x200>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d04a      	beq.n	8002314 <HAL_DMA_Start+0x1bc>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a36      	ldr	r2, [pc, #216]	; (800235c <HAL_DMA_Start+0x204>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d045      	beq.n	8002314 <HAL_DMA_Start+0x1bc>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a34      	ldr	r2, [pc, #208]	; (8002360 <HAL_DMA_Start+0x208>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d040      	beq.n	8002314 <HAL_DMA_Start+0x1bc>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a33      	ldr	r2, [pc, #204]	; (8002364 <HAL_DMA_Start+0x20c>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d03b      	beq.n	8002314 <HAL_DMA_Start+0x1bc>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a31      	ldr	r2, [pc, #196]	; (8002368 <HAL_DMA_Start+0x210>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d036      	beq.n	8002314 <HAL_DMA_Start+0x1bc>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a30      	ldr	r2, [pc, #192]	; (800236c <HAL_DMA_Start+0x214>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d031      	beq.n	8002314 <HAL_DMA_Start+0x1bc>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a2e      	ldr	r2, [pc, #184]	; (8002370 <HAL_DMA_Start+0x218>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d02c      	beq.n	8002314 <HAL_DMA_Start+0x1bc>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a2d      	ldr	r2, [pc, #180]	; (8002374 <HAL_DMA_Start+0x21c>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d027      	beq.n	8002314 <HAL_DMA_Start+0x1bc>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a2b      	ldr	r2, [pc, #172]	; (8002378 <HAL_DMA_Start+0x220>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d022      	beq.n	8002314 <HAL_DMA_Start+0x1bc>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a2a      	ldr	r2, [pc, #168]	; (800237c <HAL_DMA_Start+0x224>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d01d      	beq.n	8002314 <HAL_DMA_Start+0x1bc>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a28      	ldr	r2, [pc, #160]	; (8002380 <HAL_DMA_Start+0x228>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d018      	beq.n	8002314 <HAL_DMA_Start+0x1bc>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a27      	ldr	r2, [pc, #156]	; (8002384 <HAL_DMA_Start+0x22c>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d013      	beq.n	8002314 <HAL_DMA_Start+0x1bc>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a25      	ldr	r2, [pc, #148]	; (8002388 <HAL_DMA_Start+0x230>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d00e      	beq.n	8002314 <HAL_DMA_Start+0x1bc>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a24      	ldr	r2, [pc, #144]	; (800238c <HAL_DMA_Start+0x234>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d009      	beq.n	8002314 <HAL_DMA_Start+0x1bc>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a22      	ldr	r2, [pc, #136]	; (8002390 <HAL_DMA_Start+0x238>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d004      	beq.n	8002314 <HAL_DMA_Start+0x1bc>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a21      	ldr	r2, [pc, #132]	; (8002394 <HAL_DMA_Start+0x23c>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d108      	bne.n	8002326 <HAL_DMA_Start+0x1ce>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0201 	orr.w	r2, r2, #1
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	e012      	b.n	800234c <HAL_DMA_Start+0x1f4>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f042 0201 	orr.w	r2, r2, #1
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	e009      	b.n	800234c <HAL_DMA_Start+0x1f4>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800233e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800234c:	7dfb      	ldrb	r3, [r7, #23]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3718      	adds	r7, #24
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40020010 	.word	0x40020010
 800235c:	40020028 	.word	0x40020028
 8002360:	40020040 	.word	0x40020040
 8002364:	40020058 	.word	0x40020058
 8002368:	40020070 	.word	0x40020070
 800236c:	40020088 	.word	0x40020088
 8002370:	400200a0 	.word	0x400200a0
 8002374:	400200b8 	.word	0x400200b8
 8002378:	40020410 	.word	0x40020410
 800237c:	40020428 	.word	0x40020428
 8002380:	40020440 	.word	0x40020440
 8002384:	40020458 	.word	0x40020458
 8002388:	40020470 	.word	0x40020470
 800238c:	40020488 	.word	0x40020488
 8002390:	400204a0 	.word	0x400204a0
 8002394:	400204b8 	.word	0x400204b8

08002398 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b08a      	sub	sp, #40	; 0x28
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80023a0:	2300      	movs	r3, #0
 80023a2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80023a4:	4b67      	ldr	r3, [pc, #412]	; (8002544 <HAL_DMA_IRQHandler+0x1ac>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a67      	ldr	r2, [pc, #412]	; (8002548 <HAL_DMA_IRQHandler+0x1b0>)
 80023aa:	fba2 2303 	umull	r2, r3, r2, r3
 80023ae:	0a9b      	lsrs	r3, r3, #10
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023bc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80023be:	6a3b      	ldr	r3, [r7, #32]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a5f      	ldr	r2, [pc, #380]	; (800254c <HAL_DMA_IRQHandler+0x1b4>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d04a      	beq.n	800246a <HAL_DMA_IRQHandler+0xd2>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a5d      	ldr	r2, [pc, #372]	; (8002550 <HAL_DMA_IRQHandler+0x1b8>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d045      	beq.n	800246a <HAL_DMA_IRQHandler+0xd2>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a5c      	ldr	r2, [pc, #368]	; (8002554 <HAL_DMA_IRQHandler+0x1bc>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d040      	beq.n	800246a <HAL_DMA_IRQHandler+0xd2>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a5a      	ldr	r2, [pc, #360]	; (8002558 <HAL_DMA_IRQHandler+0x1c0>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d03b      	beq.n	800246a <HAL_DMA_IRQHandler+0xd2>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a59      	ldr	r2, [pc, #356]	; (800255c <HAL_DMA_IRQHandler+0x1c4>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d036      	beq.n	800246a <HAL_DMA_IRQHandler+0xd2>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a57      	ldr	r2, [pc, #348]	; (8002560 <HAL_DMA_IRQHandler+0x1c8>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d031      	beq.n	800246a <HAL_DMA_IRQHandler+0xd2>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a56      	ldr	r2, [pc, #344]	; (8002564 <HAL_DMA_IRQHandler+0x1cc>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d02c      	beq.n	800246a <HAL_DMA_IRQHandler+0xd2>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a54      	ldr	r2, [pc, #336]	; (8002568 <HAL_DMA_IRQHandler+0x1d0>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d027      	beq.n	800246a <HAL_DMA_IRQHandler+0xd2>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a53      	ldr	r2, [pc, #332]	; (800256c <HAL_DMA_IRQHandler+0x1d4>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d022      	beq.n	800246a <HAL_DMA_IRQHandler+0xd2>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a51      	ldr	r2, [pc, #324]	; (8002570 <HAL_DMA_IRQHandler+0x1d8>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d01d      	beq.n	800246a <HAL_DMA_IRQHandler+0xd2>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a50      	ldr	r2, [pc, #320]	; (8002574 <HAL_DMA_IRQHandler+0x1dc>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d018      	beq.n	800246a <HAL_DMA_IRQHandler+0xd2>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a4e      	ldr	r2, [pc, #312]	; (8002578 <HAL_DMA_IRQHandler+0x1e0>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d013      	beq.n	800246a <HAL_DMA_IRQHandler+0xd2>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a4d      	ldr	r2, [pc, #308]	; (800257c <HAL_DMA_IRQHandler+0x1e4>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d00e      	beq.n	800246a <HAL_DMA_IRQHandler+0xd2>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a4b      	ldr	r2, [pc, #300]	; (8002580 <HAL_DMA_IRQHandler+0x1e8>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d009      	beq.n	800246a <HAL_DMA_IRQHandler+0xd2>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a4a      	ldr	r2, [pc, #296]	; (8002584 <HAL_DMA_IRQHandler+0x1ec>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d004      	beq.n	800246a <HAL_DMA_IRQHandler+0xd2>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a48      	ldr	r2, [pc, #288]	; (8002588 <HAL_DMA_IRQHandler+0x1f0>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d101      	bne.n	800246e <HAL_DMA_IRQHandler+0xd6>
 800246a:	2301      	movs	r3, #1
 800246c:	e000      	b.n	8002470 <HAL_DMA_IRQHandler+0xd8>
 800246e:	2300      	movs	r3, #0
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 842b 	beq.w	8002ccc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247a:	f003 031f 	and.w	r3, r3, #31
 800247e:	2208      	movs	r2, #8
 8002480:	409a      	lsls	r2, r3
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	4013      	ands	r3, r2
 8002486:	2b00      	cmp	r3, #0
 8002488:	f000 80a2 	beq.w	80025d0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a2e      	ldr	r2, [pc, #184]	; (800254c <HAL_DMA_IRQHandler+0x1b4>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d04a      	beq.n	800252c <HAL_DMA_IRQHandler+0x194>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a2d      	ldr	r2, [pc, #180]	; (8002550 <HAL_DMA_IRQHandler+0x1b8>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d045      	beq.n	800252c <HAL_DMA_IRQHandler+0x194>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a2b      	ldr	r2, [pc, #172]	; (8002554 <HAL_DMA_IRQHandler+0x1bc>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d040      	beq.n	800252c <HAL_DMA_IRQHandler+0x194>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a2a      	ldr	r2, [pc, #168]	; (8002558 <HAL_DMA_IRQHandler+0x1c0>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d03b      	beq.n	800252c <HAL_DMA_IRQHandler+0x194>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a28      	ldr	r2, [pc, #160]	; (800255c <HAL_DMA_IRQHandler+0x1c4>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d036      	beq.n	800252c <HAL_DMA_IRQHandler+0x194>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a27      	ldr	r2, [pc, #156]	; (8002560 <HAL_DMA_IRQHandler+0x1c8>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d031      	beq.n	800252c <HAL_DMA_IRQHandler+0x194>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a25      	ldr	r2, [pc, #148]	; (8002564 <HAL_DMA_IRQHandler+0x1cc>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d02c      	beq.n	800252c <HAL_DMA_IRQHandler+0x194>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a24      	ldr	r2, [pc, #144]	; (8002568 <HAL_DMA_IRQHandler+0x1d0>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d027      	beq.n	800252c <HAL_DMA_IRQHandler+0x194>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a22      	ldr	r2, [pc, #136]	; (800256c <HAL_DMA_IRQHandler+0x1d4>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d022      	beq.n	800252c <HAL_DMA_IRQHandler+0x194>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a21      	ldr	r2, [pc, #132]	; (8002570 <HAL_DMA_IRQHandler+0x1d8>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d01d      	beq.n	800252c <HAL_DMA_IRQHandler+0x194>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a1f      	ldr	r2, [pc, #124]	; (8002574 <HAL_DMA_IRQHandler+0x1dc>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d018      	beq.n	800252c <HAL_DMA_IRQHandler+0x194>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a1e      	ldr	r2, [pc, #120]	; (8002578 <HAL_DMA_IRQHandler+0x1e0>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d013      	beq.n	800252c <HAL_DMA_IRQHandler+0x194>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a1c      	ldr	r2, [pc, #112]	; (800257c <HAL_DMA_IRQHandler+0x1e4>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d00e      	beq.n	800252c <HAL_DMA_IRQHandler+0x194>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a1b      	ldr	r2, [pc, #108]	; (8002580 <HAL_DMA_IRQHandler+0x1e8>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d009      	beq.n	800252c <HAL_DMA_IRQHandler+0x194>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a19      	ldr	r2, [pc, #100]	; (8002584 <HAL_DMA_IRQHandler+0x1ec>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d004      	beq.n	800252c <HAL_DMA_IRQHandler+0x194>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a18      	ldr	r2, [pc, #96]	; (8002588 <HAL_DMA_IRQHandler+0x1f0>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d12f      	bne.n	800258c <HAL_DMA_IRQHandler+0x1f4>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0304 	and.w	r3, r3, #4
 8002536:	2b00      	cmp	r3, #0
 8002538:	bf14      	ite	ne
 800253a:	2301      	movne	r3, #1
 800253c:	2300      	moveq	r3, #0
 800253e:	b2db      	uxtb	r3, r3
 8002540:	e02e      	b.n	80025a0 <HAL_DMA_IRQHandler+0x208>
 8002542:	bf00      	nop
 8002544:	24000000 	.word	0x24000000
 8002548:	1b4e81b5 	.word	0x1b4e81b5
 800254c:	40020010 	.word	0x40020010
 8002550:	40020028 	.word	0x40020028
 8002554:	40020040 	.word	0x40020040
 8002558:	40020058 	.word	0x40020058
 800255c:	40020070 	.word	0x40020070
 8002560:	40020088 	.word	0x40020088
 8002564:	400200a0 	.word	0x400200a0
 8002568:	400200b8 	.word	0x400200b8
 800256c:	40020410 	.word	0x40020410
 8002570:	40020428 	.word	0x40020428
 8002574:	40020440 	.word	0x40020440
 8002578:	40020458 	.word	0x40020458
 800257c:	40020470 	.word	0x40020470
 8002580:	40020488 	.word	0x40020488
 8002584:	400204a0 	.word	0x400204a0
 8002588:	400204b8 	.word	0x400204b8
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0308 	and.w	r3, r3, #8
 8002596:	2b00      	cmp	r3, #0
 8002598:	bf14      	ite	ne
 800259a:	2301      	movne	r3, #1
 800259c:	2300      	moveq	r3, #0
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d015      	beq.n	80025d0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 0204 	bic.w	r2, r2, #4
 80025b2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b8:	f003 031f 	and.w	r3, r3, #31
 80025bc:	2208      	movs	r2, #8
 80025be:	409a      	lsls	r2, r3
 80025c0:	6a3b      	ldr	r3, [r7, #32]
 80025c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c8:	f043 0201 	orr.w	r2, r3, #1
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d4:	f003 031f 	and.w	r3, r3, #31
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	fa22 f303 	lsr.w	r3, r2, r3
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d06e      	beq.n	80026c4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a69      	ldr	r2, [pc, #420]	; (8002790 <HAL_DMA_IRQHandler+0x3f8>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d04a      	beq.n	8002686 <HAL_DMA_IRQHandler+0x2ee>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a67      	ldr	r2, [pc, #412]	; (8002794 <HAL_DMA_IRQHandler+0x3fc>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d045      	beq.n	8002686 <HAL_DMA_IRQHandler+0x2ee>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a66      	ldr	r2, [pc, #408]	; (8002798 <HAL_DMA_IRQHandler+0x400>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d040      	beq.n	8002686 <HAL_DMA_IRQHandler+0x2ee>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a64      	ldr	r2, [pc, #400]	; (800279c <HAL_DMA_IRQHandler+0x404>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d03b      	beq.n	8002686 <HAL_DMA_IRQHandler+0x2ee>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a63      	ldr	r2, [pc, #396]	; (80027a0 <HAL_DMA_IRQHandler+0x408>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d036      	beq.n	8002686 <HAL_DMA_IRQHandler+0x2ee>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a61      	ldr	r2, [pc, #388]	; (80027a4 <HAL_DMA_IRQHandler+0x40c>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d031      	beq.n	8002686 <HAL_DMA_IRQHandler+0x2ee>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a60      	ldr	r2, [pc, #384]	; (80027a8 <HAL_DMA_IRQHandler+0x410>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d02c      	beq.n	8002686 <HAL_DMA_IRQHandler+0x2ee>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a5e      	ldr	r2, [pc, #376]	; (80027ac <HAL_DMA_IRQHandler+0x414>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d027      	beq.n	8002686 <HAL_DMA_IRQHandler+0x2ee>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a5d      	ldr	r2, [pc, #372]	; (80027b0 <HAL_DMA_IRQHandler+0x418>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d022      	beq.n	8002686 <HAL_DMA_IRQHandler+0x2ee>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a5b      	ldr	r2, [pc, #364]	; (80027b4 <HAL_DMA_IRQHandler+0x41c>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d01d      	beq.n	8002686 <HAL_DMA_IRQHandler+0x2ee>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a5a      	ldr	r2, [pc, #360]	; (80027b8 <HAL_DMA_IRQHandler+0x420>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d018      	beq.n	8002686 <HAL_DMA_IRQHandler+0x2ee>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a58      	ldr	r2, [pc, #352]	; (80027bc <HAL_DMA_IRQHandler+0x424>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d013      	beq.n	8002686 <HAL_DMA_IRQHandler+0x2ee>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a57      	ldr	r2, [pc, #348]	; (80027c0 <HAL_DMA_IRQHandler+0x428>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d00e      	beq.n	8002686 <HAL_DMA_IRQHandler+0x2ee>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a55      	ldr	r2, [pc, #340]	; (80027c4 <HAL_DMA_IRQHandler+0x42c>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d009      	beq.n	8002686 <HAL_DMA_IRQHandler+0x2ee>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a54      	ldr	r2, [pc, #336]	; (80027c8 <HAL_DMA_IRQHandler+0x430>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d004      	beq.n	8002686 <HAL_DMA_IRQHandler+0x2ee>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a52      	ldr	r2, [pc, #328]	; (80027cc <HAL_DMA_IRQHandler+0x434>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d10a      	bne.n	800269c <HAL_DMA_IRQHandler+0x304>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002690:	2b00      	cmp	r3, #0
 8002692:	bf14      	ite	ne
 8002694:	2301      	movne	r3, #1
 8002696:	2300      	moveq	r3, #0
 8002698:	b2db      	uxtb	r3, r3
 800269a:	e003      	b.n	80026a4 <HAL_DMA_IRQHandler+0x30c>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2300      	movs	r3, #0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00d      	beq.n	80026c4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ac:	f003 031f 	and.w	r3, r3, #31
 80026b0:	2201      	movs	r2, #1
 80026b2:	409a      	lsls	r2, r3
 80026b4:	6a3b      	ldr	r3, [r7, #32]
 80026b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026bc:	f043 0202 	orr.w	r2, r3, #2
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c8:	f003 031f 	and.w	r3, r3, #31
 80026cc:	2204      	movs	r2, #4
 80026ce:	409a      	lsls	r2, r3
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	4013      	ands	r3, r2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 808f 	beq.w	80027f8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a2c      	ldr	r2, [pc, #176]	; (8002790 <HAL_DMA_IRQHandler+0x3f8>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d04a      	beq.n	800277a <HAL_DMA_IRQHandler+0x3e2>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a2a      	ldr	r2, [pc, #168]	; (8002794 <HAL_DMA_IRQHandler+0x3fc>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d045      	beq.n	800277a <HAL_DMA_IRQHandler+0x3e2>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a29      	ldr	r2, [pc, #164]	; (8002798 <HAL_DMA_IRQHandler+0x400>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d040      	beq.n	800277a <HAL_DMA_IRQHandler+0x3e2>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a27      	ldr	r2, [pc, #156]	; (800279c <HAL_DMA_IRQHandler+0x404>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d03b      	beq.n	800277a <HAL_DMA_IRQHandler+0x3e2>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a26      	ldr	r2, [pc, #152]	; (80027a0 <HAL_DMA_IRQHandler+0x408>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d036      	beq.n	800277a <HAL_DMA_IRQHandler+0x3e2>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a24      	ldr	r2, [pc, #144]	; (80027a4 <HAL_DMA_IRQHandler+0x40c>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d031      	beq.n	800277a <HAL_DMA_IRQHandler+0x3e2>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a23      	ldr	r2, [pc, #140]	; (80027a8 <HAL_DMA_IRQHandler+0x410>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d02c      	beq.n	800277a <HAL_DMA_IRQHandler+0x3e2>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a21      	ldr	r2, [pc, #132]	; (80027ac <HAL_DMA_IRQHandler+0x414>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d027      	beq.n	800277a <HAL_DMA_IRQHandler+0x3e2>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a20      	ldr	r2, [pc, #128]	; (80027b0 <HAL_DMA_IRQHandler+0x418>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d022      	beq.n	800277a <HAL_DMA_IRQHandler+0x3e2>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a1e      	ldr	r2, [pc, #120]	; (80027b4 <HAL_DMA_IRQHandler+0x41c>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d01d      	beq.n	800277a <HAL_DMA_IRQHandler+0x3e2>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a1d      	ldr	r2, [pc, #116]	; (80027b8 <HAL_DMA_IRQHandler+0x420>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d018      	beq.n	800277a <HAL_DMA_IRQHandler+0x3e2>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a1b      	ldr	r2, [pc, #108]	; (80027bc <HAL_DMA_IRQHandler+0x424>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d013      	beq.n	800277a <HAL_DMA_IRQHandler+0x3e2>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a1a      	ldr	r2, [pc, #104]	; (80027c0 <HAL_DMA_IRQHandler+0x428>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d00e      	beq.n	800277a <HAL_DMA_IRQHandler+0x3e2>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a18      	ldr	r2, [pc, #96]	; (80027c4 <HAL_DMA_IRQHandler+0x42c>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d009      	beq.n	800277a <HAL_DMA_IRQHandler+0x3e2>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a17      	ldr	r2, [pc, #92]	; (80027c8 <HAL_DMA_IRQHandler+0x430>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d004      	beq.n	800277a <HAL_DMA_IRQHandler+0x3e2>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a15      	ldr	r2, [pc, #84]	; (80027cc <HAL_DMA_IRQHandler+0x434>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d12a      	bne.n	80027d0 <HAL_DMA_IRQHandler+0x438>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	bf14      	ite	ne
 8002788:	2301      	movne	r3, #1
 800278a:	2300      	moveq	r3, #0
 800278c:	b2db      	uxtb	r3, r3
 800278e:	e023      	b.n	80027d8 <HAL_DMA_IRQHandler+0x440>
 8002790:	40020010 	.word	0x40020010
 8002794:	40020028 	.word	0x40020028
 8002798:	40020040 	.word	0x40020040
 800279c:	40020058 	.word	0x40020058
 80027a0:	40020070 	.word	0x40020070
 80027a4:	40020088 	.word	0x40020088
 80027a8:	400200a0 	.word	0x400200a0
 80027ac:	400200b8 	.word	0x400200b8
 80027b0:	40020410 	.word	0x40020410
 80027b4:	40020428 	.word	0x40020428
 80027b8:	40020440 	.word	0x40020440
 80027bc:	40020458 	.word	0x40020458
 80027c0:	40020470 	.word	0x40020470
 80027c4:	40020488 	.word	0x40020488
 80027c8:	400204a0 	.word	0x400204a0
 80027cc:	400204b8 	.word	0x400204b8
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2300      	movs	r3, #0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00d      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e0:	f003 031f 	and.w	r3, r3, #31
 80027e4:	2204      	movs	r2, #4
 80027e6:	409a      	lsls	r2, r3
 80027e8:	6a3b      	ldr	r3, [r7, #32]
 80027ea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f0:	f043 0204 	orr.w	r2, r3, #4
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027fc:	f003 031f 	and.w	r3, r3, #31
 8002800:	2210      	movs	r2, #16
 8002802:	409a      	lsls	r2, r3
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	4013      	ands	r3, r2
 8002808:	2b00      	cmp	r3, #0
 800280a:	f000 80a6 	beq.w	800295a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a85      	ldr	r2, [pc, #532]	; (8002a28 <HAL_DMA_IRQHandler+0x690>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d04a      	beq.n	80028ae <HAL_DMA_IRQHandler+0x516>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a83      	ldr	r2, [pc, #524]	; (8002a2c <HAL_DMA_IRQHandler+0x694>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d045      	beq.n	80028ae <HAL_DMA_IRQHandler+0x516>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a82      	ldr	r2, [pc, #520]	; (8002a30 <HAL_DMA_IRQHandler+0x698>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d040      	beq.n	80028ae <HAL_DMA_IRQHandler+0x516>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a80      	ldr	r2, [pc, #512]	; (8002a34 <HAL_DMA_IRQHandler+0x69c>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d03b      	beq.n	80028ae <HAL_DMA_IRQHandler+0x516>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a7f      	ldr	r2, [pc, #508]	; (8002a38 <HAL_DMA_IRQHandler+0x6a0>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d036      	beq.n	80028ae <HAL_DMA_IRQHandler+0x516>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a7d      	ldr	r2, [pc, #500]	; (8002a3c <HAL_DMA_IRQHandler+0x6a4>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d031      	beq.n	80028ae <HAL_DMA_IRQHandler+0x516>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a7c      	ldr	r2, [pc, #496]	; (8002a40 <HAL_DMA_IRQHandler+0x6a8>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d02c      	beq.n	80028ae <HAL_DMA_IRQHandler+0x516>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a7a      	ldr	r2, [pc, #488]	; (8002a44 <HAL_DMA_IRQHandler+0x6ac>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d027      	beq.n	80028ae <HAL_DMA_IRQHandler+0x516>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a79      	ldr	r2, [pc, #484]	; (8002a48 <HAL_DMA_IRQHandler+0x6b0>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d022      	beq.n	80028ae <HAL_DMA_IRQHandler+0x516>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a77      	ldr	r2, [pc, #476]	; (8002a4c <HAL_DMA_IRQHandler+0x6b4>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d01d      	beq.n	80028ae <HAL_DMA_IRQHandler+0x516>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a76      	ldr	r2, [pc, #472]	; (8002a50 <HAL_DMA_IRQHandler+0x6b8>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d018      	beq.n	80028ae <HAL_DMA_IRQHandler+0x516>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a74      	ldr	r2, [pc, #464]	; (8002a54 <HAL_DMA_IRQHandler+0x6bc>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d013      	beq.n	80028ae <HAL_DMA_IRQHandler+0x516>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a73      	ldr	r2, [pc, #460]	; (8002a58 <HAL_DMA_IRQHandler+0x6c0>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d00e      	beq.n	80028ae <HAL_DMA_IRQHandler+0x516>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a71      	ldr	r2, [pc, #452]	; (8002a5c <HAL_DMA_IRQHandler+0x6c4>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d009      	beq.n	80028ae <HAL_DMA_IRQHandler+0x516>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a70      	ldr	r2, [pc, #448]	; (8002a60 <HAL_DMA_IRQHandler+0x6c8>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d004      	beq.n	80028ae <HAL_DMA_IRQHandler+0x516>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a6e      	ldr	r2, [pc, #440]	; (8002a64 <HAL_DMA_IRQHandler+0x6cc>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d10a      	bne.n	80028c4 <HAL_DMA_IRQHandler+0x52c>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0308 	and.w	r3, r3, #8
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	bf14      	ite	ne
 80028bc:	2301      	movne	r3, #1
 80028be:	2300      	moveq	r3, #0
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	e009      	b.n	80028d8 <HAL_DMA_IRQHandler+0x540>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0304 	and.w	r3, r3, #4
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	bf14      	ite	ne
 80028d2:	2301      	movne	r3, #1
 80028d4:	2300      	moveq	r3, #0
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d03e      	beq.n	800295a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e0:	f003 031f 	and.w	r3, r3, #31
 80028e4:	2210      	movs	r2, #16
 80028e6:	409a      	lsls	r2, r3
 80028e8:	6a3b      	ldr	r3, [r7, #32]
 80028ea:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d018      	beq.n	800292c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d108      	bne.n	800291a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290c:	2b00      	cmp	r3, #0
 800290e:	d024      	beq.n	800295a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	4798      	blx	r3
 8002918:	e01f      	b.n	800295a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800291e:	2b00      	cmp	r3, #0
 8002920:	d01b      	beq.n	800295a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	4798      	blx	r3
 800292a:	e016      	b.n	800295a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002936:	2b00      	cmp	r3, #0
 8002938:	d107      	bne.n	800294a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 0208 	bic.w	r2, r2, #8
 8002948:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800295e:	f003 031f 	and.w	r3, r3, #31
 8002962:	2220      	movs	r2, #32
 8002964:	409a      	lsls	r2, r3
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	4013      	ands	r3, r2
 800296a:	2b00      	cmp	r3, #0
 800296c:	f000 8110 	beq.w	8002b90 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a2c      	ldr	r2, [pc, #176]	; (8002a28 <HAL_DMA_IRQHandler+0x690>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d04a      	beq.n	8002a10 <HAL_DMA_IRQHandler+0x678>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a2b      	ldr	r2, [pc, #172]	; (8002a2c <HAL_DMA_IRQHandler+0x694>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d045      	beq.n	8002a10 <HAL_DMA_IRQHandler+0x678>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a29      	ldr	r2, [pc, #164]	; (8002a30 <HAL_DMA_IRQHandler+0x698>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d040      	beq.n	8002a10 <HAL_DMA_IRQHandler+0x678>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a28      	ldr	r2, [pc, #160]	; (8002a34 <HAL_DMA_IRQHandler+0x69c>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d03b      	beq.n	8002a10 <HAL_DMA_IRQHandler+0x678>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a26      	ldr	r2, [pc, #152]	; (8002a38 <HAL_DMA_IRQHandler+0x6a0>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d036      	beq.n	8002a10 <HAL_DMA_IRQHandler+0x678>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a25      	ldr	r2, [pc, #148]	; (8002a3c <HAL_DMA_IRQHandler+0x6a4>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d031      	beq.n	8002a10 <HAL_DMA_IRQHandler+0x678>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a23      	ldr	r2, [pc, #140]	; (8002a40 <HAL_DMA_IRQHandler+0x6a8>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d02c      	beq.n	8002a10 <HAL_DMA_IRQHandler+0x678>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a22      	ldr	r2, [pc, #136]	; (8002a44 <HAL_DMA_IRQHandler+0x6ac>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d027      	beq.n	8002a10 <HAL_DMA_IRQHandler+0x678>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a20      	ldr	r2, [pc, #128]	; (8002a48 <HAL_DMA_IRQHandler+0x6b0>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d022      	beq.n	8002a10 <HAL_DMA_IRQHandler+0x678>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a1f      	ldr	r2, [pc, #124]	; (8002a4c <HAL_DMA_IRQHandler+0x6b4>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d01d      	beq.n	8002a10 <HAL_DMA_IRQHandler+0x678>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a1d      	ldr	r2, [pc, #116]	; (8002a50 <HAL_DMA_IRQHandler+0x6b8>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d018      	beq.n	8002a10 <HAL_DMA_IRQHandler+0x678>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a1c      	ldr	r2, [pc, #112]	; (8002a54 <HAL_DMA_IRQHandler+0x6bc>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d013      	beq.n	8002a10 <HAL_DMA_IRQHandler+0x678>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a1a      	ldr	r2, [pc, #104]	; (8002a58 <HAL_DMA_IRQHandler+0x6c0>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d00e      	beq.n	8002a10 <HAL_DMA_IRQHandler+0x678>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a19      	ldr	r2, [pc, #100]	; (8002a5c <HAL_DMA_IRQHandler+0x6c4>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d009      	beq.n	8002a10 <HAL_DMA_IRQHandler+0x678>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a17      	ldr	r2, [pc, #92]	; (8002a60 <HAL_DMA_IRQHandler+0x6c8>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d004      	beq.n	8002a10 <HAL_DMA_IRQHandler+0x678>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a16      	ldr	r2, [pc, #88]	; (8002a64 <HAL_DMA_IRQHandler+0x6cc>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d12b      	bne.n	8002a68 <HAL_DMA_IRQHandler+0x6d0>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0310 	and.w	r3, r3, #16
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	bf14      	ite	ne
 8002a1e:	2301      	movne	r3, #1
 8002a20:	2300      	moveq	r3, #0
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	e02a      	b.n	8002a7c <HAL_DMA_IRQHandler+0x6e4>
 8002a26:	bf00      	nop
 8002a28:	40020010 	.word	0x40020010
 8002a2c:	40020028 	.word	0x40020028
 8002a30:	40020040 	.word	0x40020040
 8002a34:	40020058 	.word	0x40020058
 8002a38:	40020070 	.word	0x40020070
 8002a3c:	40020088 	.word	0x40020088
 8002a40:	400200a0 	.word	0x400200a0
 8002a44:	400200b8 	.word	0x400200b8
 8002a48:	40020410 	.word	0x40020410
 8002a4c:	40020428 	.word	0x40020428
 8002a50:	40020440 	.word	0x40020440
 8002a54:	40020458 	.word	0x40020458
 8002a58:	40020470 	.word	0x40020470
 8002a5c:	40020488 	.word	0x40020488
 8002a60:	400204a0 	.word	0x400204a0
 8002a64:	400204b8 	.word	0x400204b8
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	bf14      	ite	ne
 8002a76:	2301      	movne	r3, #1
 8002a78:	2300      	moveq	r3, #0
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f000 8087 	beq.w	8002b90 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a86:	f003 031f 	and.w	r3, r3, #31
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	409a      	lsls	r2, r3
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	d139      	bne.n	8002b12 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 0216 	bic.w	r2, r2, #22
 8002aac:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	695a      	ldr	r2, [r3, #20]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002abc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d103      	bne.n	8002ace <HAL_DMA_IRQHandler+0x736>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d007      	beq.n	8002ade <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 0208 	bic.w	r2, r2, #8
 8002adc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae2:	f003 031f 	and.w	r3, r3, #31
 8002ae6:	223f      	movs	r2, #63	; 0x3f
 8002ae8:	409a      	lsls	r2, r3
 8002aea:	6a3b      	ldr	r3, [r7, #32]
 8002aec:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f000 834a 	beq.w	800319c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	4798      	blx	r3
          }
          return;
 8002b10:	e344      	b.n	800319c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d018      	beq.n	8002b52 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d108      	bne.n	8002b40 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d02c      	beq.n	8002b90 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	4798      	blx	r3
 8002b3e:	e027      	b.n	8002b90 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d023      	beq.n	8002b90 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	4798      	blx	r3
 8002b50:	e01e      	b.n	8002b90 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d10f      	bne.n	8002b80 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 0210 	bic.w	r2, r2, #16
 8002b6e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d003      	beq.n	8002b90 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 8306 	beq.w	80031a6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 8088 	beq.w	8002cb8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2204      	movs	r2, #4
 8002bac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a7a      	ldr	r2, [pc, #488]	; (8002da0 <HAL_DMA_IRQHandler+0xa08>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d04a      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x8b8>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a79      	ldr	r2, [pc, #484]	; (8002da4 <HAL_DMA_IRQHandler+0xa0c>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d045      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x8b8>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a77      	ldr	r2, [pc, #476]	; (8002da8 <HAL_DMA_IRQHandler+0xa10>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d040      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x8b8>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a76      	ldr	r2, [pc, #472]	; (8002dac <HAL_DMA_IRQHandler+0xa14>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d03b      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x8b8>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a74      	ldr	r2, [pc, #464]	; (8002db0 <HAL_DMA_IRQHandler+0xa18>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d036      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x8b8>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a73      	ldr	r2, [pc, #460]	; (8002db4 <HAL_DMA_IRQHandler+0xa1c>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d031      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x8b8>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a71      	ldr	r2, [pc, #452]	; (8002db8 <HAL_DMA_IRQHandler+0xa20>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d02c      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x8b8>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a70      	ldr	r2, [pc, #448]	; (8002dbc <HAL_DMA_IRQHandler+0xa24>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d027      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x8b8>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a6e      	ldr	r2, [pc, #440]	; (8002dc0 <HAL_DMA_IRQHandler+0xa28>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d022      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x8b8>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a6d      	ldr	r2, [pc, #436]	; (8002dc4 <HAL_DMA_IRQHandler+0xa2c>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d01d      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x8b8>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a6b      	ldr	r2, [pc, #428]	; (8002dc8 <HAL_DMA_IRQHandler+0xa30>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d018      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x8b8>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a6a      	ldr	r2, [pc, #424]	; (8002dcc <HAL_DMA_IRQHandler+0xa34>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d013      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x8b8>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a68      	ldr	r2, [pc, #416]	; (8002dd0 <HAL_DMA_IRQHandler+0xa38>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d00e      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x8b8>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a67      	ldr	r2, [pc, #412]	; (8002dd4 <HAL_DMA_IRQHandler+0xa3c>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d009      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x8b8>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a65      	ldr	r2, [pc, #404]	; (8002dd8 <HAL_DMA_IRQHandler+0xa40>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d004      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x8b8>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a64      	ldr	r2, [pc, #400]	; (8002ddc <HAL_DMA_IRQHandler+0xa44>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d108      	bne.n	8002c62 <HAL_DMA_IRQHandler+0x8ca>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f022 0201 	bic.w	r2, r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	e007      	b.n	8002c72 <HAL_DMA_IRQHandler+0x8da>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 0201 	bic.w	r2, r2, #1
 8002c70:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	3301      	adds	r3, #1
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d307      	bcc.n	8002c8e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1f2      	bne.n	8002c72 <HAL_DMA_IRQHandler+0x8da>
 8002c8c:	e000      	b.n	8002c90 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002c8e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d004      	beq.n	8002ca8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2203      	movs	r2, #3
 8002ca2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002ca6:	e003      	b.n	8002cb0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 8272 	beq.w	80031a6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	4798      	blx	r3
 8002cca:	e26c      	b.n	80031a6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a43      	ldr	r2, [pc, #268]	; (8002de0 <HAL_DMA_IRQHandler+0xa48>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d022      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x984>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a42      	ldr	r2, [pc, #264]	; (8002de4 <HAL_DMA_IRQHandler+0xa4c>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d01d      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x984>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a40      	ldr	r2, [pc, #256]	; (8002de8 <HAL_DMA_IRQHandler+0xa50>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d018      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x984>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a3f      	ldr	r2, [pc, #252]	; (8002dec <HAL_DMA_IRQHandler+0xa54>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d013      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x984>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a3d      	ldr	r2, [pc, #244]	; (8002df0 <HAL_DMA_IRQHandler+0xa58>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d00e      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x984>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a3c      	ldr	r2, [pc, #240]	; (8002df4 <HAL_DMA_IRQHandler+0xa5c>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d009      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x984>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a3a      	ldr	r2, [pc, #232]	; (8002df8 <HAL_DMA_IRQHandler+0xa60>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d004      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x984>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a39      	ldr	r2, [pc, #228]	; (8002dfc <HAL_DMA_IRQHandler+0xa64>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d101      	bne.n	8002d20 <HAL_DMA_IRQHandler+0x988>
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e000      	b.n	8002d22 <HAL_DMA_IRQHandler+0x98a>
 8002d20:	2300      	movs	r3, #0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f000 823f 	beq.w	80031a6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d34:	f003 031f 	and.w	r3, r3, #31
 8002d38:	2204      	movs	r2, #4
 8002d3a:	409a      	lsls	r2, r3
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f000 80cd 	beq.w	8002ee0 <HAL_DMA_IRQHandler+0xb48>
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f000 80c7 	beq.w	8002ee0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d56:	f003 031f 	and.w	r3, r3, #31
 8002d5a:	2204      	movs	r2, #4
 8002d5c:	409a      	lsls	r2, r3
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d049      	beq.n	8002e00 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d109      	bne.n	8002d8a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f000 8210 	beq.w	80031a0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d88:	e20a      	b.n	80031a0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f000 8206 	beq.w	80031a0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d9c:	e200      	b.n	80031a0 <HAL_DMA_IRQHandler+0xe08>
 8002d9e:	bf00      	nop
 8002da0:	40020010 	.word	0x40020010
 8002da4:	40020028 	.word	0x40020028
 8002da8:	40020040 	.word	0x40020040
 8002dac:	40020058 	.word	0x40020058
 8002db0:	40020070 	.word	0x40020070
 8002db4:	40020088 	.word	0x40020088
 8002db8:	400200a0 	.word	0x400200a0
 8002dbc:	400200b8 	.word	0x400200b8
 8002dc0:	40020410 	.word	0x40020410
 8002dc4:	40020428 	.word	0x40020428
 8002dc8:	40020440 	.word	0x40020440
 8002dcc:	40020458 	.word	0x40020458
 8002dd0:	40020470 	.word	0x40020470
 8002dd4:	40020488 	.word	0x40020488
 8002dd8:	400204a0 	.word	0x400204a0
 8002ddc:	400204b8 	.word	0x400204b8
 8002de0:	58025408 	.word	0x58025408
 8002de4:	5802541c 	.word	0x5802541c
 8002de8:	58025430 	.word	0x58025430
 8002dec:	58025444 	.word	0x58025444
 8002df0:	58025458 	.word	0x58025458
 8002df4:	5802546c 	.word	0x5802546c
 8002df8:	58025480 	.word	0x58025480
 8002dfc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	f003 0320 	and.w	r3, r3, #32
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d160      	bne.n	8002ecc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a7f      	ldr	r2, [pc, #508]	; (800300c <HAL_DMA_IRQHandler+0xc74>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d04a      	beq.n	8002eaa <HAL_DMA_IRQHandler+0xb12>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a7d      	ldr	r2, [pc, #500]	; (8003010 <HAL_DMA_IRQHandler+0xc78>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d045      	beq.n	8002eaa <HAL_DMA_IRQHandler+0xb12>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a7c      	ldr	r2, [pc, #496]	; (8003014 <HAL_DMA_IRQHandler+0xc7c>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d040      	beq.n	8002eaa <HAL_DMA_IRQHandler+0xb12>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a7a      	ldr	r2, [pc, #488]	; (8003018 <HAL_DMA_IRQHandler+0xc80>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d03b      	beq.n	8002eaa <HAL_DMA_IRQHandler+0xb12>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a79      	ldr	r2, [pc, #484]	; (800301c <HAL_DMA_IRQHandler+0xc84>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d036      	beq.n	8002eaa <HAL_DMA_IRQHandler+0xb12>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a77      	ldr	r2, [pc, #476]	; (8003020 <HAL_DMA_IRQHandler+0xc88>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d031      	beq.n	8002eaa <HAL_DMA_IRQHandler+0xb12>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a76      	ldr	r2, [pc, #472]	; (8003024 <HAL_DMA_IRQHandler+0xc8c>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d02c      	beq.n	8002eaa <HAL_DMA_IRQHandler+0xb12>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a74      	ldr	r2, [pc, #464]	; (8003028 <HAL_DMA_IRQHandler+0xc90>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d027      	beq.n	8002eaa <HAL_DMA_IRQHandler+0xb12>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a73      	ldr	r2, [pc, #460]	; (800302c <HAL_DMA_IRQHandler+0xc94>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d022      	beq.n	8002eaa <HAL_DMA_IRQHandler+0xb12>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a71      	ldr	r2, [pc, #452]	; (8003030 <HAL_DMA_IRQHandler+0xc98>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d01d      	beq.n	8002eaa <HAL_DMA_IRQHandler+0xb12>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a70      	ldr	r2, [pc, #448]	; (8003034 <HAL_DMA_IRQHandler+0xc9c>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d018      	beq.n	8002eaa <HAL_DMA_IRQHandler+0xb12>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a6e      	ldr	r2, [pc, #440]	; (8003038 <HAL_DMA_IRQHandler+0xca0>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d013      	beq.n	8002eaa <HAL_DMA_IRQHandler+0xb12>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a6d      	ldr	r2, [pc, #436]	; (800303c <HAL_DMA_IRQHandler+0xca4>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d00e      	beq.n	8002eaa <HAL_DMA_IRQHandler+0xb12>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a6b      	ldr	r2, [pc, #428]	; (8003040 <HAL_DMA_IRQHandler+0xca8>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d009      	beq.n	8002eaa <HAL_DMA_IRQHandler+0xb12>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a6a      	ldr	r2, [pc, #424]	; (8003044 <HAL_DMA_IRQHandler+0xcac>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d004      	beq.n	8002eaa <HAL_DMA_IRQHandler+0xb12>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a68      	ldr	r2, [pc, #416]	; (8003048 <HAL_DMA_IRQHandler+0xcb0>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d108      	bne.n	8002ebc <HAL_DMA_IRQHandler+0xb24>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 0208 	bic.w	r2, r2, #8
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	e007      	b.n	8002ecc <HAL_DMA_IRQHandler+0xb34>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0204 	bic.w	r2, r2, #4
 8002eca:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f000 8165 	beq.w	80031a0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002ede:	e15f      	b.n	80031a0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee4:	f003 031f 	and.w	r3, r3, #31
 8002ee8:	2202      	movs	r2, #2
 8002eea:	409a      	lsls	r2, r3
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f000 80c5 	beq.w	8003080 <HAL_DMA_IRQHandler+0xce8>
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 80bf 	beq.w	8003080 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f06:	f003 031f 	and.w	r3, r3, #31
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	409a      	lsls	r2, r3
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d018      	beq.n	8002f4e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d109      	bne.n	8002f3a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 813a 	beq.w	80031a4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f38:	e134      	b.n	80031a4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 8130 	beq.w	80031a4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f4c:	e12a      	b.n	80031a4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	f003 0320 	and.w	r3, r3, #32
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f040 8089 	bne.w	800306c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a2b      	ldr	r2, [pc, #172]	; (800300c <HAL_DMA_IRQHandler+0xc74>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d04a      	beq.n	8002ffa <HAL_DMA_IRQHandler+0xc62>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a29      	ldr	r2, [pc, #164]	; (8003010 <HAL_DMA_IRQHandler+0xc78>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d045      	beq.n	8002ffa <HAL_DMA_IRQHandler+0xc62>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a28      	ldr	r2, [pc, #160]	; (8003014 <HAL_DMA_IRQHandler+0xc7c>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d040      	beq.n	8002ffa <HAL_DMA_IRQHandler+0xc62>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a26      	ldr	r2, [pc, #152]	; (8003018 <HAL_DMA_IRQHandler+0xc80>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d03b      	beq.n	8002ffa <HAL_DMA_IRQHandler+0xc62>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a25      	ldr	r2, [pc, #148]	; (800301c <HAL_DMA_IRQHandler+0xc84>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d036      	beq.n	8002ffa <HAL_DMA_IRQHandler+0xc62>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a23      	ldr	r2, [pc, #140]	; (8003020 <HAL_DMA_IRQHandler+0xc88>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d031      	beq.n	8002ffa <HAL_DMA_IRQHandler+0xc62>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a22      	ldr	r2, [pc, #136]	; (8003024 <HAL_DMA_IRQHandler+0xc8c>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d02c      	beq.n	8002ffa <HAL_DMA_IRQHandler+0xc62>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a20      	ldr	r2, [pc, #128]	; (8003028 <HAL_DMA_IRQHandler+0xc90>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d027      	beq.n	8002ffa <HAL_DMA_IRQHandler+0xc62>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a1f      	ldr	r2, [pc, #124]	; (800302c <HAL_DMA_IRQHandler+0xc94>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d022      	beq.n	8002ffa <HAL_DMA_IRQHandler+0xc62>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a1d      	ldr	r2, [pc, #116]	; (8003030 <HAL_DMA_IRQHandler+0xc98>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d01d      	beq.n	8002ffa <HAL_DMA_IRQHandler+0xc62>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a1c      	ldr	r2, [pc, #112]	; (8003034 <HAL_DMA_IRQHandler+0xc9c>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d018      	beq.n	8002ffa <HAL_DMA_IRQHandler+0xc62>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a1a      	ldr	r2, [pc, #104]	; (8003038 <HAL_DMA_IRQHandler+0xca0>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d013      	beq.n	8002ffa <HAL_DMA_IRQHandler+0xc62>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a19      	ldr	r2, [pc, #100]	; (800303c <HAL_DMA_IRQHandler+0xca4>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d00e      	beq.n	8002ffa <HAL_DMA_IRQHandler+0xc62>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a17      	ldr	r2, [pc, #92]	; (8003040 <HAL_DMA_IRQHandler+0xca8>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d009      	beq.n	8002ffa <HAL_DMA_IRQHandler+0xc62>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a16      	ldr	r2, [pc, #88]	; (8003044 <HAL_DMA_IRQHandler+0xcac>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d004      	beq.n	8002ffa <HAL_DMA_IRQHandler+0xc62>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a14      	ldr	r2, [pc, #80]	; (8003048 <HAL_DMA_IRQHandler+0xcb0>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d128      	bne.n	800304c <HAL_DMA_IRQHandler+0xcb4>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0214 	bic.w	r2, r2, #20
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	e027      	b.n	800305c <HAL_DMA_IRQHandler+0xcc4>
 800300c:	40020010 	.word	0x40020010
 8003010:	40020028 	.word	0x40020028
 8003014:	40020040 	.word	0x40020040
 8003018:	40020058 	.word	0x40020058
 800301c:	40020070 	.word	0x40020070
 8003020:	40020088 	.word	0x40020088
 8003024:	400200a0 	.word	0x400200a0
 8003028:	400200b8 	.word	0x400200b8
 800302c:	40020410 	.word	0x40020410
 8003030:	40020428 	.word	0x40020428
 8003034:	40020440 	.word	0x40020440
 8003038:	40020458 	.word	0x40020458
 800303c:	40020470 	.word	0x40020470
 8003040:	40020488 	.word	0x40020488
 8003044:	400204a0 	.word	0x400204a0
 8003048:	400204b8 	.word	0x400204b8
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f022 020a 	bic.w	r2, r2, #10
 800305a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 8097 	beq.w	80031a4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800307e:	e091      	b.n	80031a4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003084:	f003 031f 	and.w	r3, r3, #31
 8003088:	2208      	movs	r2, #8
 800308a:	409a      	lsls	r2, r3
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	4013      	ands	r3, r2
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 8088 	beq.w	80031a6 <HAL_DMA_IRQHandler+0xe0e>
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	f003 0308 	and.w	r3, r3, #8
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 8082 	beq.w	80031a6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a41      	ldr	r2, [pc, #260]	; (80031ac <HAL_DMA_IRQHandler+0xe14>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d04a      	beq.n	8003142 <HAL_DMA_IRQHandler+0xdaa>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a3f      	ldr	r2, [pc, #252]	; (80031b0 <HAL_DMA_IRQHandler+0xe18>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d045      	beq.n	8003142 <HAL_DMA_IRQHandler+0xdaa>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a3e      	ldr	r2, [pc, #248]	; (80031b4 <HAL_DMA_IRQHandler+0xe1c>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d040      	beq.n	8003142 <HAL_DMA_IRQHandler+0xdaa>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a3c      	ldr	r2, [pc, #240]	; (80031b8 <HAL_DMA_IRQHandler+0xe20>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d03b      	beq.n	8003142 <HAL_DMA_IRQHandler+0xdaa>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a3b      	ldr	r2, [pc, #236]	; (80031bc <HAL_DMA_IRQHandler+0xe24>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d036      	beq.n	8003142 <HAL_DMA_IRQHandler+0xdaa>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a39      	ldr	r2, [pc, #228]	; (80031c0 <HAL_DMA_IRQHandler+0xe28>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d031      	beq.n	8003142 <HAL_DMA_IRQHandler+0xdaa>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a38      	ldr	r2, [pc, #224]	; (80031c4 <HAL_DMA_IRQHandler+0xe2c>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d02c      	beq.n	8003142 <HAL_DMA_IRQHandler+0xdaa>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a36      	ldr	r2, [pc, #216]	; (80031c8 <HAL_DMA_IRQHandler+0xe30>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d027      	beq.n	8003142 <HAL_DMA_IRQHandler+0xdaa>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a35      	ldr	r2, [pc, #212]	; (80031cc <HAL_DMA_IRQHandler+0xe34>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d022      	beq.n	8003142 <HAL_DMA_IRQHandler+0xdaa>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a33      	ldr	r2, [pc, #204]	; (80031d0 <HAL_DMA_IRQHandler+0xe38>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d01d      	beq.n	8003142 <HAL_DMA_IRQHandler+0xdaa>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a32      	ldr	r2, [pc, #200]	; (80031d4 <HAL_DMA_IRQHandler+0xe3c>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d018      	beq.n	8003142 <HAL_DMA_IRQHandler+0xdaa>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a30      	ldr	r2, [pc, #192]	; (80031d8 <HAL_DMA_IRQHandler+0xe40>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d013      	beq.n	8003142 <HAL_DMA_IRQHandler+0xdaa>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a2f      	ldr	r2, [pc, #188]	; (80031dc <HAL_DMA_IRQHandler+0xe44>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d00e      	beq.n	8003142 <HAL_DMA_IRQHandler+0xdaa>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a2d      	ldr	r2, [pc, #180]	; (80031e0 <HAL_DMA_IRQHandler+0xe48>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d009      	beq.n	8003142 <HAL_DMA_IRQHandler+0xdaa>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a2c      	ldr	r2, [pc, #176]	; (80031e4 <HAL_DMA_IRQHandler+0xe4c>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d004      	beq.n	8003142 <HAL_DMA_IRQHandler+0xdaa>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a2a      	ldr	r2, [pc, #168]	; (80031e8 <HAL_DMA_IRQHandler+0xe50>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d108      	bne.n	8003154 <HAL_DMA_IRQHandler+0xdbc>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 021c 	bic.w	r2, r2, #28
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	e007      	b.n	8003164 <HAL_DMA_IRQHandler+0xdcc>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f022 020e 	bic.w	r2, r2, #14
 8003162:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003168:	f003 031f 	and.w	r3, r3, #31
 800316c:	2201      	movs	r2, #1
 800316e:	409a      	lsls	r2, r3
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800318e:	2b00      	cmp	r3, #0
 8003190:	d009      	beq.n	80031a6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	4798      	blx	r3
 800319a:	e004      	b.n	80031a6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800319c:	bf00      	nop
 800319e:	e002      	b.n	80031a6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80031a0:	bf00      	nop
 80031a2:	e000      	b.n	80031a6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80031a4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80031a6:	3728      	adds	r7, #40	; 0x28
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40020010 	.word	0x40020010
 80031b0:	40020028 	.word	0x40020028
 80031b4:	40020040 	.word	0x40020040
 80031b8:	40020058 	.word	0x40020058
 80031bc:	40020070 	.word	0x40020070
 80031c0:	40020088 	.word	0x40020088
 80031c4:	400200a0 	.word	0x400200a0
 80031c8:	400200b8 	.word	0x400200b8
 80031cc:	40020410 	.word	0x40020410
 80031d0:	40020428 	.word	0x40020428
 80031d4:	40020440 	.word	0x40020440
 80031d8:	40020458 	.word	0x40020458
 80031dc:	40020470 	.word	0x40020470
 80031e0:	40020488 	.word	0x40020488
 80031e4:	400204a0 	.word	0x400204a0
 80031e8:	400204b8 	.word	0x400204b8

080031ec <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b087      	sub	sp, #28
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
 80031f8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fe:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003204:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a7f      	ldr	r2, [pc, #508]	; (8003408 <DMA_SetConfig+0x21c>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d072      	beq.n	80032f6 <DMA_SetConfig+0x10a>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a7d      	ldr	r2, [pc, #500]	; (800340c <DMA_SetConfig+0x220>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d06d      	beq.n	80032f6 <DMA_SetConfig+0x10a>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a7c      	ldr	r2, [pc, #496]	; (8003410 <DMA_SetConfig+0x224>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d068      	beq.n	80032f6 <DMA_SetConfig+0x10a>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a7a      	ldr	r2, [pc, #488]	; (8003414 <DMA_SetConfig+0x228>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d063      	beq.n	80032f6 <DMA_SetConfig+0x10a>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a79      	ldr	r2, [pc, #484]	; (8003418 <DMA_SetConfig+0x22c>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d05e      	beq.n	80032f6 <DMA_SetConfig+0x10a>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a77      	ldr	r2, [pc, #476]	; (800341c <DMA_SetConfig+0x230>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d059      	beq.n	80032f6 <DMA_SetConfig+0x10a>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a76      	ldr	r2, [pc, #472]	; (8003420 <DMA_SetConfig+0x234>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d054      	beq.n	80032f6 <DMA_SetConfig+0x10a>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a74      	ldr	r2, [pc, #464]	; (8003424 <DMA_SetConfig+0x238>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d04f      	beq.n	80032f6 <DMA_SetConfig+0x10a>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a73      	ldr	r2, [pc, #460]	; (8003428 <DMA_SetConfig+0x23c>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d04a      	beq.n	80032f6 <DMA_SetConfig+0x10a>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a71      	ldr	r2, [pc, #452]	; (800342c <DMA_SetConfig+0x240>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d045      	beq.n	80032f6 <DMA_SetConfig+0x10a>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a70      	ldr	r2, [pc, #448]	; (8003430 <DMA_SetConfig+0x244>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d040      	beq.n	80032f6 <DMA_SetConfig+0x10a>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a6e      	ldr	r2, [pc, #440]	; (8003434 <DMA_SetConfig+0x248>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d03b      	beq.n	80032f6 <DMA_SetConfig+0x10a>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a6d      	ldr	r2, [pc, #436]	; (8003438 <DMA_SetConfig+0x24c>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d036      	beq.n	80032f6 <DMA_SetConfig+0x10a>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a6b      	ldr	r2, [pc, #428]	; (800343c <DMA_SetConfig+0x250>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d031      	beq.n	80032f6 <DMA_SetConfig+0x10a>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a6a      	ldr	r2, [pc, #424]	; (8003440 <DMA_SetConfig+0x254>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d02c      	beq.n	80032f6 <DMA_SetConfig+0x10a>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a68      	ldr	r2, [pc, #416]	; (8003444 <DMA_SetConfig+0x258>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d027      	beq.n	80032f6 <DMA_SetConfig+0x10a>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a67      	ldr	r2, [pc, #412]	; (8003448 <DMA_SetConfig+0x25c>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d022      	beq.n	80032f6 <DMA_SetConfig+0x10a>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a65      	ldr	r2, [pc, #404]	; (800344c <DMA_SetConfig+0x260>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d01d      	beq.n	80032f6 <DMA_SetConfig+0x10a>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a64      	ldr	r2, [pc, #400]	; (8003450 <DMA_SetConfig+0x264>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d018      	beq.n	80032f6 <DMA_SetConfig+0x10a>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a62      	ldr	r2, [pc, #392]	; (8003454 <DMA_SetConfig+0x268>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d013      	beq.n	80032f6 <DMA_SetConfig+0x10a>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a61      	ldr	r2, [pc, #388]	; (8003458 <DMA_SetConfig+0x26c>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d00e      	beq.n	80032f6 <DMA_SetConfig+0x10a>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a5f      	ldr	r2, [pc, #380]	; (800345c <DMA_SetConfig+0x270>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d009      	beq.n	80032f6 <DMA_SetConfig+0x10a>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a5e      	ldr	r2, [pc, #376]	; (8003460 <DMA_SetConfig+0x274>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d004      	beq.n	80032f6 <DMA_SetConfig+0x10a>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a5c      	ldr	r2, [pc, #368]	; (8003464 <DMA_SetConfig+0x278>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d101      	bne.n	80032fa <DMA_SetConfig+0x10e>
 80032f6:	2301      	movs	r3, #1
 80032f8:	e000      	b.n	80032fc <DMA_SetConfig+0x110>
 80032fa:	2300      	movs	r3, #0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00d      	beq.n	800331c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003308:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800330e:	2b00      	cmp	r3, #0
 8003310:	d004      	beq.n	800331c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800331a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a39      	ldr	r2, [pc, #228]	; (8003408 <DMA_SetConfig+0x21c>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d04a      	beq.n	80033bc <DMA_SetConfig+0x1d0>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a38      	ldr	r2, [pc, #224]	; (800340c <DMA_SetConfig+0x220>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d045      	beq.n	80033bc <DMA_SetConfig+0x1d0>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a36      	ldr	r2, [pc, #216]	; (8003410 <DMA_SetConfig+0x224>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d040      	beq.n	80033bc <DMA_SetConfig+0x1d0>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a35      	ldr	r2, [pc, #212]	; (8003414 <DMA_SetConfig+0x228>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d03b      	beq.n	80033bc <DMA_SetConfig+0x1d0>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a33      	ldr	r2, [pc, #204]	; (8003418 <DMA_SetConfig+0x22c>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d036      	beq.n	80033bc <DMA_SetConfig+0x1d0>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a32      	ldr	r2, [pc, #200]	; (800341c <DMA_SetConfig+0x230>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d031      	beq.n	80033bc <DMA_SetConfig+0x1d0>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a30      	ldr	r2, [pc, #192]	; (8003420 <DMA_SetConfig+0x234>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d02c      	beq.n	80033bc <DMA_SetConfig+0x1d0>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a2f      	ldr	r2, [pc, #188]	; (8003424 <DMA_SetConfig+0x238>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d027      	beq.n	80033bc <DMA_SetConfig+0x1d0>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a2d      	ldr	r2, [pc, #180]	; (8003428 <DMA_SetConfig+0x23c>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d022      	beq.n	80033bc <DMA_SetConfig+0x1d0>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a2c      	ldr	r2, [pc, #176]	; (800342c <DMA_SetConfig+0x240>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d01d      	beq.n	80033bc <DMA_SetConfig+0x1d0>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a2a      	ldr	r2, [pc, #168]	; (8003430 <DMA_SetConfig+0x244>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d018      	beq.n	80033bc <DMA_SetConfig+0x1d0>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a29      	ldr	r2, [pc, #164]	; (8003434 <DMA_SetConfig+0x248>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d013      	beq.n	80033bc <DMA_SetConfig+0x1d0>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a27      	ldr	r2, [pc, #156]	; (8003438 <DMA_SetConfig+0x24c>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d00e      	beq.n	80033bc <DMA_SetConfig+0x1d0>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a26      	ldr	r2, [pc, #152]	; (800343c <DMA_SetConfig+0x250>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d009      	beq.n	80033bc <DMA_SetConfig+0x1d0>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a24      	ldr	r2, [pc, #144]	; (8003440 <DMA_SetConfig+0x254>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d004      	beq.n	80033bc <DMA_SetConfig+0x1d0>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a23      	ldr	r2, [pc, #140]	; (8003444 <DMA_SetConfig+0x258>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d101      	bne.n	80033c0 <DMA_SetConfig+0x1d4>
 80033bc:	2301      	movs	r3, #1
 80033be:	e000      	b.n	80033c2 <DMA_SetConfig+0x1d6>
 80033c0:	2300      	movs	r3, #0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d059      	beq.n	800347a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ca:	f003 031f 	and.w	r3, r3, #31
 80033ce:	223f      	movs	r2, #63	; 0x3f
 80033d0:	409a      	lsls	r2, r3
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80033e4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	2b40      	cmp	r3, #64	; 0x40
 80033f4:	d138      	bne.n	8003468 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003406:	e086      	b.n	8003516 <DMA_SetConfig+0x32a>
 8003408:	40020010 	.word	0x40020010
 800340c:	40020028 	.word	0x40020028
 8003410:	40020040 	.word	0x40020040
 8003414:	40020058 	.word	0x40020058
 8003418:	40020070 	.word	0x40020070
 800341c:	40020088 	.word	0x40020088
 8003420:	400200a0 	.word	0x400200a0
 8003424:	400200b8 	.word	0x400200b8
 8003428:	40020410 	.word	0x40020410
 800342c:	40020428 	.word	0x40020428
 8003430:	40020440 	.word	0x40020440
 8003434:	40020458 	.word	0x40020458
 8003438:	40020470 	.word	0x40020470
 800343c:	40020488 	.word	0x40020488
 8003440:	400204a0 	.word	0x400204a0
 8003444:	400204b8 	.word	0x400204b8
 8003448:	58025408 	.word	0x58025408
 800344c:	5802541c 	.word	0x5802541c
 8003450:	58025430 	.word	0x58025430
 8003454:	58025444 	.word	0x58025444
 8003458:	58025458 	.word	0x58025458
 800345c:	5802546c 	.word	0x5802546c
 8003460:	58025480 	.word	0x58025480
 8003464:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68ba      	ldr	r2, [r7, #8]
 800346e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	60da      	str	r2, [r3, #12]
}
 8003478:	e04d      	b.n	8003516 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a29      	ldr	r2, [pc, #164]	; (8003524 <DMA_SetConfig+0x338>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d022      	beq.n	80034ca <DMA_SetConfig+0x2de>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a27      	ldr	r2, [pc, #156]	; (8003528 <DMA_SetConfig+0x33c>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d01d      	beq.n	80034ca <DMA_SetConfig+0x2de>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a26      	ldr	r2, [pc, #152]	; (800352c <DMA_SetConfig+0x340>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d018      	beq.n	80034ca <DMA_SetConfig+0x2de>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a24      	ldr	r2, [pc, #144]	; (8003530 <DMA_SetConfig+0x344>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d013      	beq.n	80034ca <DMA_SetConfig+0x2de>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a23      	ldr	r2, [pc, #140]	; (8003534 <DMA_SetConfig+0x348>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d00e      	beq.n	80034ca <DMA_SetConfig+0x2de>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a21      	ldr	r2, [pc, #132]	; (8003538 <DMA_SetConfig+0x34c>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d009      	beq.n	80034ca <DMA_SetConfig+0x2de>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a20      	ldr	r2, [pc, #128]	; (800353c <DMA_SetConfig+0x350>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d004      	beq.n	80034ca <DMA_SetConfig+0x2de>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a1e      	ldr	r2, [pc, #120]	; (8003540 <DMA_SetConfig+0x354>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d101      	bne.n	80034ce <DMA_SetConfig+0x2e2>
 80034ca:	2301      	movs	r3, #1
 80034cc:	e000      	b.n	80034d0 <DMA_SetConfig+0x2e4>
 80034ce:	2300      	movs	r3, #0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d020      	beq.n	8003516 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d8:	f003 031f 	and.w	r3, r3, #31
 80034dc:	2201      	movs	r2, #1
 80034de:	409a      	lsls	r2, r3
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	2b40      	cmp	r3, #64	; 0x40
 80034f2:	d108      	bne.n	8003506 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68ba      	ldr	r2, [r7, #8]
 8003502:	60da      	str	r2, [r3, #12]
}
 8003504:	e007      	b.n	8003516 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	60da      	str	r2, [r3, #12]
}
 8003516:	bf00      	nop
 8003518:	371c      	adds	r7, #28
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	58025408 	.word	0x58025408
 8003528:	5802541c 	.word	0x5802541c
 800352c:	58025430 	.word	0x58025430
 8003530:	58025444 	.word	0x58025444
 8003534:	58025458 	.word	0x58025458
 8003538:	5802546c 	.word	0x5802546c
 800353c:	58025480 	.word	0x58025480
 8003540:	58025494 	.word	0x58025494

08003544 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a42      	ldr	r2, [pc, #264]	; (800365c <DMA_CalcBaseAndBitshift+0x118>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d04a      	beq.n	80035ec <DMA_CalcBaseAndBitshift+0xa8>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a41      	ldr	r2, [pc, #260]	; (8003660 <DMA_CalcBaseAndBitshift+0x11c>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d045      	beq.n	80035ec <DMA_CalcBaseAndBitshift+0xa8>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a3f      	ldr	r2, [pc, #252]	; (8003664 <DMA_CalcBaseAndBitshift+0x120>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d040      	beq.n	80035ec <DMA_CalcBaseAndBitshift+0xa8>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a3e      	ldr	r2, [pc, #248]	; (8003668 <DMA_CalcBaseAndBitshift+0x124>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d03b      	beq.n	80035ec <DMA_CalcBaseAndBitshift+0xa8>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a3c      	ldr	r2, [pc, #240]	; (800366c <DMA_CalcBaseAndBitshift+0x128>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d036      	beq.n	80035ec <DMA_CalcBaseAndBitshift+0xa8>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a3b      	ldr	r2, [pc, #236]	; (8003670 <DMA_CalcBaseAndBitshift+0x12c>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d031      	beq.n	80035ec <DMA_CalcBaseAndBitshift+0xa8>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a39      	ldr	r2, [pc, #228]	; (8003674 <DMA_CalcBaseAndBitshift+0x130>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d02c      	beq.n	80035ec <DMA_CalcBaseAndBitshift+0xa8>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a38      	ldr	r2, [pc, #224]	; (8003678 <DMA_CalcBaseAndBitshift+0x134>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d027      	beq.n	80035ec <DMA_CalcBaseAndBitshift+0xa8>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a36      	ldr	r2, [pc, #216]	; (800367c <DMA_CalcBaseAndBitshift+0x138>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d022      	beq.n	80035ec <DMA_CalcBaseAndBitshift+0xa8>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a35      	ldr	r2, [pc, #212]	; (8003680 <DMA_CalcBaseAndBitshift+0x13c>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d01d      	beq.n	80035ec <DMA_CalcBaseAndBitshift+0xa8>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a33      	ldr	r2, [pc, #204]	; (8003684 <DMA_CalcBaseAndBitshift+0x140>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d018      	beq.n	80035ec <DMA_CalcBaseAndBitshift+0xa8>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a32      	ldr	r2, [pc, #200]	; (8003688 <DMA_CalcBaseAndBitshift+0x144>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d013      	beq.n	80035ec <DMA_CalcBaseAndBitshift+0xa8>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a30      	ldr	r2, [pc, #192]	; (800368c <DMA_CalcBaseAndBitshift+0x148>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d00e      	beq.n	80035ec <DMA_CalcBaseAndBitshift+0xa8>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a2f      	ldr	r2, [pc, #188]	; (8003690 <DMA_CalcBaseAndBitshift+0x14c>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d009      	beq.n	80035ec <DMA_CalcBaseAndBitshift+0xa8>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a2d      	ldr	r2, [pc, #180]	; (8003694 <DMA_CalcBaseAndBitshift+0x150>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d004      	beq.n	80035ec <DMA_CalcBaseAndBitshift+0xa8>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a2c      	ldr	r2, [pc, #176]	; (8003698 <DMA_CalcBaseAndBitshift+0x154>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d101      	bne.n	80035f0 <DMA_CalcBaseAndBitshift+0xac>
 80035ec:	2301      	movs	r3, #1
 80035ee:	e000      	b.n	80035f2 <DMA_CalcBaseAndBitshift+0xae>
 80035f0:	2300      	movs	r3, #0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d024      	beq.n	8003640 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	3b10      	subs	r3, #16
 80035fe:	4a27      	ldr	r2, [pc, #156]	; (800369c <DMA_CalcBaseAndBitshift+0x158>)
 8003600:	fba2 2303 	umull	r2, r3, r2, r3
 8003604:	091b      	lsrs	r3, r3, #4
 8003606:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f003 0307 	and.w	r3, r3, #7
 800360e:	4a24      	ldr	r2, [pc, #144]	; (80036a0 <DMA_CalcBaseAndBitshift+0x15c>)
 8003610:	5cd3      	ldrb	r3, [r2, r3]
 8003612:	461a      	mov	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2b03      	cmp	r3, #3
 800361c:	d908      	bls.n	8003630 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	461a      	mov	r2, r3
 8003624:	4b1f      	ldr	r3, [pc, #124]	; (80036a4 <DMA_CalcBaseAndBitshift+0x160>)
 8003626:	4013      	ands	r3, r2
 8003628:	1d1a      	adds	r2, r3, #4
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	659a      	str	r2, [r3, #88]	; 0x58
 800362e:	e00d      	b.n	800364c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	461a      	mov	r2, r3
 8003636:	4b1b      	ldr	r3, [pc, #108]	; (80036a4 <DMA_CalcBaseAndBitshift+0x160>)
 8003638:	4013      	ands	r3, r2
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	6593      	str	r3, [r2, #88]	; 0x58
 800363e:	e005      	b.n	800364c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003650:	4618      	mov	r0, r3
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr
 800365c:	40020010 	.word	0x40020010
 8003660:	40020028 	.word	0x40020028
 8003664:	40020040 	.word	0x40020040
 8003668:	40020058 	.word	0x40020058
 800366c:	40020070 	.word	0x40020070
 8003670:	40020088 	.word	0x40020088
 8003674:	400200a0 	.word	0x400200a0
 8003678:	400200b8 	.word	0x400200b8
 800367c:	40020410 	.word	0x40020410
 8003680:	40020428 	.word	0x40020428
 8003684:	40020440 	.word	0x40020440
 8003688:	40020458 	.word	0x40020458
 800368c:	40020470 	.word	0x40020470
 8003690:	40020488 	.word	0x40020488
 8003694:	400204a0 	.word	0x400204a0
 8003698:	400204b8 	.word	0x400204b8
 800369c:	aaaaaaab 	.word	0xaaaaaaab
 80036a0:	08009c48 	.word	0x08009c48
 80036a4:	fffffc00 	.word	0xfffffc00

080036a8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036b0:	2300      	movs	r3, #0
 80036b2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d120      	bne.n	80036fe <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c0:	2b03      	cmp	r3, #3
 80036c2:	d858      	bhi.n	8003776 <DMA_CheckFifoParam+0xce>
 80036c4:	a201      	add	r2, pc, #4	; (adr r2, 80036cc <DMA_CheckFifoParam+0x24>)
 80036c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ca:	bf00      	nop
 80036cc:	080036dd 	.word	0x080036dd
 80036d0:	080036ef 	.word	0x080036ef
 80036d4:	080036dd 	.word	0x080036dd
 80036d8:	08003777 	.word	0x08003777
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d048      	beq.n	800377a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80036ec:	e045      	b.n	800377a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036f6:	d142      	bne.n	800377e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80036fc:	e03f      	b.n	800377e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003706:	d123      	bne.n	8003750 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370c:	2b03      	cmp	r3, #3
 800370e:	d838      	bhi.n	8003782 <DMA_CheckFifoParam+0xda>
 8003710:	a201      	add	r2, pc, #4	; (adr r2, 8003718 <DMA_CheckFifoParam+0x70>)
 8003712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003716:	bf00      	nop
 8003718:	08003729 	.word	0x08003729
 800371c:	0800372f 	.word	0x0800372f
 8003720:	08003729 	.word	0x08003729
 8003724:	08003741 	.word	0x08003741
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	73fb      	strb	r3, [r7, #15]
        break;
 800372c:	e030      	b.n	8003790 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003732:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d025      	beq.n	8003786 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800373e:	e022      	b.n	8003786 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003744:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003748:	d11f      	bne.n	800378a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800374e:	e01c      	b.n	800378a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003754:	2b02      	cmp	r3, #2
 8003756:	d902      	bls.n	800375e <DMA_CheckFifoParam+0xb6>
 8003758:	2b03      	cmp	r3, #3
 800375a:	d003      	beq.n	8003764 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800375c:	e018      	b.n	8003790 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	73fb      	strb	r3, [r7, #15]
        break;
 8003762:	e015      	b.n	8003790 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003768:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00e      	beq.n	800378e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	73fb      	strb	r3, [r7, #15]
    break;
 8003774:	e00b      	b.n	800378e <DMA_CheckFifoParam+0xe6>
        break;
 8003776:	bf00      	nop
 8003778:	e00a      	b.n	8003790 <DMA_CheckFifoParam+0xe8>
        break;
 800377a:	bf00      	nop
 800377c:	e008      	b.n	8003790 <DMA_CheckFifoParam+0xe8>
        break;
 800377e:	bf00      	nop
 8003780:	e006      	b.n	8003790 <DMA_CheckFifoParam+0xe8>
        break;
 8003782:	bf00      	nop
 8003784:	e004      	b.n	8003790 <DMA_CheckFifoParam+0xe8>
        break;
 8003786:	bf00      	nop
 8003788:	e002      	b.n	8003790 <DMA_CheckFifoParam+0xe8>
        break;
 800378a:	bf00      	nop
 800378c:	e000      	b.n	8003790 <DMA_CheckFifoParam+0xe8>
    break;
 800378e:	bf00      	nop
    }
  }

  return status;
 8003790:	7bfb      	ldrb	r3, [r7, #15]
}
 8003792:	4618      	mov	r0, r3
 8003794:	3714      	adds	r7, #20
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop

080037a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a38      	ldr	r2, [pc, #224]	; (8003894 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d022      	beq.n	80037fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a36      	ldr	r2, [pc, #216]	; (8003898 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d01d      	beq.n	80037fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a35      	ldr	r2, [pc, #212]	; (800389c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d018      	beq.n	80037fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a33      	ldr	r2, [pc, #204]	; (80038a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d013      	beq.n	80037fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a32      	ldr	r2, [pc, #200]	; (80038a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d00e      	beq.n	80037fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a30      	ldr	r2, [pc, #192]	; (80038a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d009      	beq.n	80037fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a2f      	ldr	r2, [pc, #188]	; (80038ac <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d004      	beq.n	80037fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a2d      	ldr	r2, [pc, #180]	; (80038b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d101      	bne.n	8003802 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80037fe:	2301      	movs	r3, #1
 8003800:	e000      	b.n	8003804 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003802:	2300      	movs	r3, #0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d01a      	beq.n	800383e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	b2db      	uxtb	r3, r3
 800380e:	3b08      	subs	r3, #8
 8003810:	4a28      	ldr	r2, [pc, #160]	; (80038b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003812:	fba2 2303 	umull	r2, r3, r2, r3
 8003816:	091b      	lsrs	r3, r3, #4
 8003818:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	4b26      	ldr	r3, [pc, #152]	; (80038b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800381e:	4413      	add	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	461a      	mov	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a24      	ldr	r2, [pc, #144]	; (80038bc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800382c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f003 031f 	and.w	r3, r3, #31
 8003834:	2201      	movs	r2, #1
 8003836:	409a      	lsls	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800383c:	e024      	b.n	8003888 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	b2db      	uxtb	r3, r3
 8003844:	3b10      	subs	r3, #16
 8003846:	4a1e      	ldr	r2, [pc, #120]	; (80038c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003848:	fba2 2303 	umull	r2, r3, r2, r3
 800384c:	091b      	lsrs	r3, r3, #4
 800384e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	4a1c      	ldr	r2, [pc, #112]	; (80038c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d806      	bhi.n	8003866 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	4a1b      	ldr	r2, [pc, #108]	; (80038c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d902      	bls.n	8003866 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	3308      	adds	r3, #8
 8003864:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	4b18      	ldr	r3, [pc, #96]	; (80038cc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800386a:	4413      	add	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	461a      	mov	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a16      	ldr	r2, [pc, #88]	; (80038d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003878:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f003 031f 	and.w	r3, r3, #31
 8003880:	2201      	movs	r2, #1
 8003882:	409a      	lsls	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003888:	bf00      	nop
 800388a:	3714      	adds	r7, #20
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	58025408 	.word	0x58025408
 8003898:	5802541c 	.word	0x5802541c
 800389c:	58025430 	.word	0x58025430
 80038a0:	58025444 	.word	0x58025444
 80038a4:	58025458 	.word	0x58025458
 80038a8:	5802546c 	.word	0x5802546c
 80038ac:	58025480 	.word	0x58025480
 80038b0:	58025494 	.word	0x58025494
 80038b4:	cccccccd 	.word	0xcccccccd
 80038b8:	16009600 	.word	0x16009600
 80038bc:	58025880 	.word	0x58025880
 80038c0:	aaaaaaab 	.word	0xaaaaaaab
 80038c4:	400204b8 	.word	0x400204b8
 80038c8:	4002040f 	.word	0x4002040f
 80038cc:	10008200 	.word	0x10008200
 80038d0:	40020880 	.word	0x40020880

080038d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d04a      	beq.n	8003980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2b08      	cmp	r3, #8
 80038ee:	d847      	bhi.n	8003980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a25      	ldr	r2, [pc, #148]	; (800398c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d022      	beq.n	8003940 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a24      	ldr	r2, [pc, #144]	; (8003990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d01d      	beq.n	8003940 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a22      	ldr	r2, [pc, #136]	; (8003994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d018      	beq.n	8003940 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a21      	ldr	r2, [pc, #132]	; (8003998 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d013      	beq.n	8003940 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a1f      	ldr	r2, [pc, #124]	; (800399c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d00e      	beq.n	8003940 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a1e      	ldr	r2, [pc, #120]	; (80039a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d009      	beq.n	8003940 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a1c      	ldr	r2, [pc, #112]	; (80039a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d004      	beq.n	8003940 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a1b      	ldr	r2, [pc, #108]	; (80039a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d101      	bne.n	8003944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003940:	2301      	movs	r3, #1
 8003942:	e000      	b.n	8003946 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003944:	2300      	movs	r3, #0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00a      	beq.n	8003960 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	4b17      	ldr	r3, [pc, #92]	; (80039ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800394e:	4413      	add	r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	461a      	mov	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a15      	ldr	r2, [pc, #84]	; (80039b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800395c:	671a      	str	r2, [r3, #112]	; 0x70
 800395e:	e009      	b.n	8003974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	4b14      	ldr	r3, [pc, #80]	; (80039b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003964:	4413      	add	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	461a      	mov	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a11      	ldr	r2, [pc, #68]	; (80039b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003972:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	3b01      	subs	r3, #1
 8003978:	2201      	movs	r2, #1
 800397a:	409a      	lsls	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003980:	bf00      	nop
 8003982:	3714      	adds	r7, #20
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr
 800398c:	58025408 	.word	0x58025408
 8003990:	5802541c 	.word	0x5802541c
 8003994:	58025430 	.word	0x58025430
 8003998:	58025444 	.word	0x58025444
 800399c:	58025458 	.word	0x58025458
 80039a0:	5802546c 	.word	0x5802546c
 80039a4:	58025480 	.word	0x58025480
 80039a8:	58025494 	.word	0x58025494
 80039ac:	1600963f 	.word	0x1600963f
 80039b0:	58025940 	.word	0x58025940
 80039b4:	1000823f 	.word	0x1000823f
 80039b8:	40020940 	.word	0x40020940

080039bc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e0cf      	b.n	8003b6e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d106      	bne.n	80039e6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2223      	movs	r2, #35	; 0x23
 80039dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f7fd fadb 	bl	8000f9c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039e6:	4b64      	ldr	r3, [pc, #400]	; (8003b78 <HAL_ETH_Init+0x1bc>)
 80039e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80039ec:	4a62      	ldr	r2, [pc, #392]	; (8003b78 <HAL_ETH_Init+0x1bc>)
 80039ee:	f043 0302 	orr.w	r3, r3, #2
 80039f2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80039f6:	4b60      	ldr	r3, [pc, #384]	; (8003b78 <HAL_ETH_Init+0x1bc>)
 80039f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	60bb      	str	r3, [r7, #8]
 8003a02:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	7a1b      	ldrb	r3, [r3, #8]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d103      	bne.n	8003a14 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003a0c:	2000      	movs	r0, #0
 8003a0e:	f7fd ff23 	bl	8001858 <HAL_SYSCFG_ETHInterfaceSelect>
 8003a12:	e003      	b.n	8003a1c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003a14:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003a18:	f7fd ff1e 	bl	8001858 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8003a1c:	4b57      	ldr	r3, [pc, #348]	; (8003b7c <HAL_ETH_Init+0x1c0>)
 8003a1e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	6812      	ldr	r2, [r2, #0]
 8003a2e:	f043 0301 	orr.w	r3, r3, #1
 8003a32:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a36:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a38:	f7fd fed2 	bl	80017e0 <HAL_GetTick>
 8003a3c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003a3e:	e011      	b.n	8003a64 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003a40:	f7fd fece 	bl	80017e0 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003a4e:	d909      	bls.n	8003a64 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2204      	movs	r2, #4
 8003a54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	22e0      	movs	r2, #224	; 0xe0
 8003a5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e084      	b.n	8003b6e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1e4      	bne.n	8003a40 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f886 	bl	8003b88 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003a7c:	f001 feb0 	bl	80057e0 <HAL_RCC_GetHCLKFreq>
 8003a80:	4603      	mov	r3, r0
 8003a82:	4a3f      	ldr	r2, [pc, #252]	; (8003b80 <HAL_ETH_Init+0x1c4>)
 8003a84:	fba2 2303 	umull	r2, r3, r2, r3
 8003a88:	0c9a      	lsrs	r2, r3, #18
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	3a01      	subs	r2, #1
 8003a90:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 fa71 	bl	8003f7c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aa2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003aa6:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	6812      	ldr	r2, [r2, #0]
 8003aae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ab2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ab6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	f003 0303 	and.w	r3, r3, #3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d009      	beq.n	8003ada <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	22e0      	movs	r2, #224	; 0xe0
 8003ad2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e049      	b.n	8003b6e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ae2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003ae6:	4b27      	ldr	r3, [pc, #156]	; (8003b84 <HAL_ETH_Init+0x1c8>)
 8003ae8:	4013      	ands	r3, r2
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	6952      	ldr	r2, [r2, #20]
 8003aee:	0051      	lsls	r1, r2, #1
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	6812      	ldr	r2, [r2, #0]
 8003af4:	430b      	orrs	r3, r1
 8003af6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003afa:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 fad9 	bl	80040b6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 fb1f 	bl	8004148 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	3305      	adds	r3, #5
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	021a      	lsls	r2, r3, #8
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	3304      	adds	r3, #4
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	3303      	adds	r3, #3
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	061a      	lsls	r2, r3, #24
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	3302      	adds	r3, #2
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	041b      	lsls	r3, r3, #16
 8003b3c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	3301      	adds	r3, #1
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003b48:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003b56:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003b58:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2210      	movs	r2, #16
 8003b68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	58024400 	.word	0x58024400
 8003b7c:	58000400 	.word	0x58000400
 8003b80:	431bde83 	.word	0x431bde83
 8003b84:	ffff8001 	.word	0xffff8001

08003b88 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003b98:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ba0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003ba2:	f001 fe1d 	bl	80057e0 <HAL_RCC_GetHCLKFreq>
 8003ba6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	4a1e      	ldr	r2, [pc, #120]	; (8003c24 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d908      	bls.n	8003bc2 <HAL_ETH_SetMDIOClockRange+0x3a>
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	4a1d      	ldr	r2, [pc, #116]	; (8003c28 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d804      	bhi.n	8003bc2 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bbe:	60fb      	str	r3, [r7, #12]
 8003bc0:	e027      	b.n	8003c12 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	4a18      	ldr	r2, [pc, #96]	; (8003c28 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d908      	bls.n	8003bdc <HAL_ETH_SetMDIOClockRange+0x54>
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	4a17      	ldr	r2, [pc, #92]	; (8003c2c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d204      	bcs.n	8003bdc <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003bd8:	60fb      	str	r3, [r7, #12]
 8003bda:	e01a      	b.n	8003c12 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	4a13      	ldr	r2, [pc, #76]	; (8003c2c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d303      	bcc.n	8003bec <HAL_ETH_SetMDIOClockRange+0x64>
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	4a12      	ldr	r2, [pc, #72]	; (8003c30 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d911      	bls.n	8003c10 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	4a10      	ldr	r2, [pc, #64]	; (8003c30 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d908      	bls.n	8003c06 <HAL_ETH_SetMDIOClockRange+0x7e>
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	4a0f      	ldr	r2, [pc, #60]	; (8003c34 <HAL_ETH_SetMDIOClockRange+0xac>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d804      	bhi.n	8003c06 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c02:	60fb      	str	r3, [r7, #12]
 8003c04:	e005      	b.n	8003c12 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c0c:	60fb      	str	r3, [r7, #12]
 8003c0e:	e000      	b.n	8003c12 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003c10:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003c1c:	bf00      	nop
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	01312cff 	.word	0x01312cff
 8003c28:	02160ebf 	.word	0x02160ebf
 8003c2c:	03938700 	.word	0x03938700
 8003c30:	05f5e0ff 	.word	0x05f5e0ff
 8003c34:	08f0d17f 	.word	0x08f0d17f

08003c38 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8003c4a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	791b      	ldrb	r3, [r3, #4]
 8003c50:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8003c52:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	7b1b      	ldrb	r3, [r3, #12]
 8003c58:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003c5a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	7b5b      	ldrb	r3, [r3, #13]
 8003c60:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003c62:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	7b9b      	ldrb	r3, [r3, #14]
 8003c68:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003c6a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	7bdb      	ldrb	r3, [r3, #15]
 8003c70:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003c72:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	7c12      	ldrb	r2, [r2, #16]
 8003c78:	2a00      	cmp	r2, #0
 8003c7a:	d102      	bne.n	8003c82 <ETH_SetMACConfig+0x4a>
 8003c7c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003c80:	e000      	b.n	8003c84 <ETH_SetMACConfig+0x4c>
 8003c82:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003c84:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003c86:	683a      	ldr	r2, [r7, #0]
 8003c88:	7c52      	ldrb	r2, [r2, #17]
 8003c8a:	2a00      	cmp	r2, #0
 8003c8c:	d102      	bne.n	8003c94 <ETH_SetMACConfig+0x5c>
 8003c8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c92:	e000      	b.n	8003c96 <ETH_SetMACConfig+0x5e>
 8003c94:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003c96:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	7c9b      	ldrb	r3, [r3, #18]
 8003c9c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003c9e:	431a      	orrs	r2, r3
               macconf->Speed |
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8003ca4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8003caa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	7f1b      	ldrb	r3, [r3, #28]
 8003cb0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8003cb2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	7f5b      	ldrb	r3, [r3, #29]
 8003cb8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003cba:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	7f92      	ldrb	r2, [r2, #30]
 8003cc0:	2a00      	cmp	r2, #0
 8003cc2:	d102      	bne.n	8003cca <ETH_SetMACConfig+0x92>
 8003cc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003cc8:	e000      	b.n	8003ccc <ETH_SetMACConfig+0x94>
 8003cca:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003ccc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	7fdb      	ldrb	r3, [r3, #31]
 8003cd2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003cd4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003cdc:	2a00      	cmp	r2, #0
 8003cde:	d102      	bne.n	8003ce6 <ETH_SetMACConfig+0xae>
 8003ce0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ce4:	e000      	b.n	8003ce8 <ETH_SetMACConfig+0xb0>
 8003ce6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003ce8:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003cee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cf6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8003cf8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	4b56      	ldr	r3, [pc, #344]	; (8003e64 <ETH_SetMACConfig+0x22c>)
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	6812      	ldr	r2, [r2, #0]
 8003d10:	68f9      	ldr	r1, [r7, #12]
 8003d12:	430b      	orrs	r3, r1
 8003d14:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d1a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d22:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003d24:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d2c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003d2e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003d36:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003d38:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8003d3a:	683a      	ldr	r2, [r7, #0]
 8003d3c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8003d40:	2a00      	cmp	r2, #0
 8003d42:	d102      	bne.n	8003d4a <ETH_SetMACConfig+0x112>
 8003d44:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003d48:	e000      	b.n	8003d4c <ETH_SetMACConfig+0x114>
 8003d4a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003d4c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003d52:	4313      	orrs	r3, r2
 8003d54:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	685a      	ldr	r2, [r3, #4]
 8003d5c:	4b42      	ldr	r3, [pc, #264]	; (8003e68 <ETH_SetMACConfig+0x230>)
 8003d5e:	4013      	ands	r3, r2
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	6812      	ldr	r2, [r2, #0]
 8003d64:	68f9      	ldr	r1, [r7, #12]
 8003d66:	430b      	orrs	r3, r1
 8003d68:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d70:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003d76:	4313      	orrs	r3, r2
 8003d78:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68da      	ldr	r2, [r3, #12]
 8003d80:	4b3a      	ldr	r3, [pc, #232]	; (8003e6c <ETH_SetMACConfig+0x234>)
 8003d82:	4013      	ands	r3, r2
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	6812      	ldr	r2, [r2, #0]
 8003d88:	68f9      	ldr	r1, [r7, #12]
 8003d8a:	430b      	orrs	r3, r1
 8003d8c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003d94:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003d9a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003da2:	2a00      	cmp	r2, #0
 8003da4:	d101      	bne.n	8003daa <ETH_SetMACConfig+0x172>
 8003da6:	2280      	movs	r2, #128	; 0x80
 8003da8:	e000      	b.n	8003dac <ETH_SetMACConfig+0x174>
 8003daa:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003dac:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003db2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003db4:	4313      	orrs	r3, r2
 8003db6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003dbe:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	6812      	ldr	r2, [r2, #0]
 8003dc8:	68f9      	ldr	r1, [r7, #12]
 8003dca:	430b      	orrs	r3, r1
 8003dcc:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003dd4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003ddc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003dde:	4313      	orrs	r3, r2
 8003de0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dea:	f023 0103 	bic.w	r1, r3, #3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	430a      	orrs	r2, r1
 8003df6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8003e02:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8003e1e:	2a00      	cmp	r2, #0
 8003e20:	d101      	bne.n	8003e26 <ETH_SetMACConfig+0x1ee>
 8003e22:	2240      	movs	r2, #64	; 0x40
 8003e24:	e000      	b.n	8003e28 <ETH_SetMACConfig+0x1f0>
 8003e26:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003e28:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003e30:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003e32:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8003e3a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003e48:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8003e58:	bf00      	nop
 8003e5a:	3714      	adds	r7, #20
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr
 8003e64:	00048083 	.word	0x00048083
 8003e68:	c0f88000 	.word	0xc0f88000
 8003e6c:	fffffef0 	.word	0xfffffef0

08003e70 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	4b38      	ldr	r3, [pc, #224]	; (8003f68 <ETH_SetDMAConfig+0xf8>)
 8003e86:	4013      	ands	r3, r2
 8003e88:	683a      	ldr	r2, [r7, #0]
 8003e8a:	6811      	ldr	r1, [r2, #0]
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6812      	ldr	r2, [r2, #0]
 8003e90:	430b      	orrs	r3, r1
 8003e92:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e96:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	791b      	ldrb	r3, [r3, #4]
 8003e9c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003ea2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	7b1b      	ldrb	r3, [r3, #12]
 8003ea8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	4b2c      	ldr	r3, [pc, #176]	; (8003f6c <ETH_SetDMAConfig+0xfc>)
 8003eba:	4013      	ands	r3, r2
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	6812      	ldr	r2, [r2, #0]
 8003ec0:	68f9      	ldr	r1, [r7, #12]
 8003ec2:	430b      	orrs	r3, r1
 8003ec4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ec8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	7b5b      	ldrb	r3, [r3, #13]
 8003ece:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ee0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8003ee4:	4b22      	ldr	r3, [pc, #136]	; (8003f70 <ETH_SetDMAConfig+0x100>)
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	6812      	ldr	r2, [r2, #0]
 8003eec:	68f9      	ldr	r1, [r7, #12]
 8003eee:	430b      	orrs	r3, r1
 8003ef0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ef4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	7d1b      	ldrb	r3, [r3, #20]
 8003f00:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003f02:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	7f5b      	ldrb	r3, [r3, #29]
 8003f08:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f16:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8003f1a:	4b16      	ldr	r3, [pc, #88]	; (8003f74 <ETH_SetDMAConfig+0x104>)
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	6812      	ldr	r2, [r2, #0]
 8003f22:	68f9      	ldr	r1, [r7, #12]
 8003f24:	430b      	orrs	r3, r1
 8003f26:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f2a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	7f1b      	ldrb	r3, [r3, #28]
 8003f32:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f44:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003f48:	4b0b      	ldr	r3, [pc, #44]	; (8003f78 <ETH_SetDMAConfig+0x108>)
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	6812      	ldr	r2, [r2, #0]
 8003f50:	68f9      	ldr	r1, [r7, #12]
 8003f52:	430b      	orrs	r3, r1
 8003f54:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f58:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8003f5c:	bf00      	nop
 8003f5e:	3714      	adds	r7, #20
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr
 8003f68:	ffff87fd 	.word	0xffff87fd
 8003f6c:	ffff2ffe 	.word	0xffff2ffe
 8003f70:	fffec000 	.word	0xfffec000
 8003f74:	ffc0efef 	.word	0xffc0efef
 8003f78:	7fc0ffff 	.word	0x7fc0ffff

08003f7c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b0a4      	sub	sp, #144	; 0x90
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003f84:	2301      	movs	r3, #1
 8003f86:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003f94:	2300      	movs	r3, #0
 8003f96:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003fac:	2300      	movs	r3, #0
 8003fae:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003fb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003fbc:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8003fd4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8003fd8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003fea:	2300      	movs	r3, #0
 8003fec:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003ffe:	2300      	movs	r3, #0
 8004000:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004002:	2300      	movs	r3, #0
 8004004:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004008:	2300      	movs	r3, #0
 800400a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800400e:	2301      	movs	r3, #1
 8004010:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004014:	2320      	movs	r3, #32
 8004016:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800401a:	2301      	movs	r3, #1
 800401c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004020:	2300      	movs	r3, #0
 8004022:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004026:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800402a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800402c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004030:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8004032:	2300      	movs	r3, #0
 8004034:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004038:	2302      	movs	r3, #2
 800403a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800403e:	2300      	movs	r3, #0
 8004040:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004044:	2300      	movs	r3, #0
 8004046:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800404a:	2300      	movs	r3, #0
 800404c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004050:	2301      	movs	r3, #1
 8004052:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004056:	2300      	movs	r3, #0
 8004058:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800405a:	2301      	movs	r3, #1
 800405c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004060:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004064:	4619      	mov	r1, r3
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f7ff fde6 	bl	8003c38 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800406c:	2301      	movs	r3, #1
 800406e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004070:	2301      	movs	r3, #1
 8004072:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004074:	2300      	movs	r3, #0
 8004076:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004078:	2300      	movs	r3, #0
 800407a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800407e:	2300      	movs	r3, #0
 8004080:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004082:	2300      	movs	r3, #0
 8004084:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004086:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800408a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800408c:	2300      	movs	r3, #0
 800408e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004090:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004094:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004096:	2300      	movs	r3, #0
 8004098:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800409c:	f44f 7306 	mov.w	r3, #536	; 0x218
 80040a0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80040a2:	f107 0308 	add.w	r3, r7, #8
 80040a6:	4619      	mov	r1, r3
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f7ff fee1 	bl	8003e70 <ETH_SetDMAConfig>
}
 80040ae:	bf00      	nop
 80040b0:	3790      	adds	r7, #144	; 0x90
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b085      	sub	sp, #20
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80040be:	2300      	movs	r3, #0
 80040c0:	60fb      	str	r3, [r7, #12]
 80040c2:	e01d      	b.n	8004100 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68d9      	ldr	r1, [r3, #12]
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	4613      	mov	r3, r2
 80040cc:	005b      	lsls	r3, r3, #1
 80040ce:	4413      	add	r3, r2
 80040d0:	00db      	lsls	r3, r3, #3
 80040d2:	440b      	add	r3, r1
 80040d4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	2200      	movs	r2, #0
 80040da:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	2200      	movs	r2, #0
 80040e0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	2200      	movs	r2, #0
 80040e6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	2200      	movs	r2, #0
 80040ec:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80040ee:	68b9      	ldr	r1, [r7, #8]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	3206      	adds	r2, #6
 80040f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	3301      	adds	r3, #1
 80040fe:	60fb      	str	r3, [r7, #12]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2b03      	cmp	r3, #3
 8004104:	d9de      	bls.n	80040c4 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004114:	461a      	mov	r2, r3
 8004116:	2303      	movs	r3, #3
 8004118:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68da      	ldr	r2, [r3, #12]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004128:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68da      	ldr	r2, [r3, #12]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004138:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800413c:	bf00      	nop
 800413e:	3714      	adds	r7, #20
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004150:	2300      	movs	r3, #0
 8004152:	60fb      	str	r3, [r7, #12]
 8004154:	e023      	b.n	800419e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6919      	ldr	r1, [r3, #16]
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	4613      	mov	r3, r2
 800415e:	005b      	lsls	r3, r3, #1
 8004160:	4413      	add	r3, r2
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	440b      	add	r3, r1
 8004166:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	2200      	movs	r2, #0
 800416c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	2200      	movs	r2, #0
 8004172:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	2200      	movs	r2, #0
 8004178:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	2200      	movs	r2, #0
 800417e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	2200      	movs	r2, #0
 8004184:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	2200      	movs	r2, #0
 800418a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800418c:	68b9      	ldr	r1, [r7, #8]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	3212      	adds	r2, #18
 8004194:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	3301      	adds	r3, #1
 800419c:	60fb      	str	r3, [r7, #12]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2b03      	cmp	r3, #3
 80041a2:	d9d8      	bls.n	8004156 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041ca:	461a      	mov	r2, r3
 80041cc:	2303      	movs	r3, #3
 80041ce:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	691a      	ldr	r2, [r3, #16]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041de:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041f2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80041f6:	bf00      	nop
 80041f8:	3714      	adds	r7, #20
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
	...

08004204 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004204:	b480      	push	{r7}
 8004206:	b089      	sub	sp, #36	; 0x24
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800420e:	2300      	movs	r3, #0
 8004210:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004212:	4b89      	ldr	r3, [pc, #548]	; (8004438 <HAL_GPIO_Init+0x234>)
 8004214:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004216:	e194      	b.n	8004542 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	2101      	movs	r1, #1
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	fa01 f303 	lsl.w	r3, r1, r3
 8004224:	4013      	ands	r3, r2
 8004226:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	2b00      	cmp	r3, #0
 800422c:	f000 8186 	beq.w	800453c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f003 0303 	and.w	r3, r3, #3
 8004238:	2b01      	cmp	r3, #1
 800423a:	d005      	beq.n	8004248 <HAL_GPIO_Init+0x44>
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f003 0303 	and.w	r3, r3, #3
 8004244:	2b02      	cmp	r3, #2
 8004246:	d130      	bne.n	80042aa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	2203      	movs	r2, #3
 8004254:	fa02 f303 	lsl.w	r3, r2, r3
 8004258:	43db      	mvns	r3, r3
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	4013      	ands	r3, r2
 800425e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	68da      	ldr	r2, [r3, #12]
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	005b      	lsls	r3, r3, #1
 8004268:	fa02 f303 	lsl.w	r3, r2, r3
 800426c:	69ba      	ldr	r2, [r7, #24]
 800426e:	4313      	orrs	r3, r2
 8004270:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800427e:	2201      	movs	r2, #1
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	fa02 f303 	lsl.w	r3, r2, r3
 8004286:	43db      	mvns	r3, r3
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	4013      	ands	r3, r2
 800428c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	091b      	lsrs	r3, r3, #4
 8004294:	f003 0201 	and.w	r2, r3, #1
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	fa02 f303 	lsl.w	r3, r2, r3
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f003 0303 	and.w	r3, r3, #3
 80042b2:	2b03      	cmp	r3, #3
 80042b4:	d017      	beq.n	80042e6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	005b      	lsls	r3, r3, #1
 80042c0:	2203      	movs	r2, #3
 80042c2:	fa02 f303 	lsl.w	r3, r2, r3
 80042c6:	43db      	mvns	r3, r3
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	4013      	ands	r3, r2
 80042cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	689a      	ldr	r2, [r3, #8]
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	fa02 f303 	lsl.w	r3, r2, r3
 80042da:	69ba      	ldr	r2, [r7, #24]
 80042dc:	4313      	orrs	r3, r2
 80042de:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	69ba      	ldr	r2, [r7, #24]
 80042e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f003 0303 	and.w	r3, r3, #3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d123      	bne.n	800433a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	08da      	lsrs	r2, r3, #3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	3208      	adds	r2, #8
 80042fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	f003 0307 	and.w	r3, r3, #7
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	220f      	movs	r2, #15
 800430a:	fa02 f303 	lsl.w	r3, r2, r3
 800430e:	43db      	mvns	r3, r3
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	4013      	ands	r3, r2
 8004314:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	691a      	ldr	r2, [r3, #16]
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	fa02 f303 	lsl.w	r3, r2, r3
 8004326:	69ba      	ldr	r2, [r7, #24]
 8004328:	4313      	orrs	r3, r2
 800432a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	08da      	lsrs	r2, r3, #3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3208      	adds	r2, #8
 8004334:	69b9      	ldr	r1, [r7, #24]
 8004336:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	2203      	movs	r2, #3
 8004346:	fa02 f303 	lsl.w	r3, r2, r3
 800434a:	43db      	mvns	r3, r3
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	4013      	ands	r3, r2
 8004350:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f003 0203 	and.w	r2, r3, #3
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	005b      	lsls	r3, r3, #1
 800435e:	fa02 f303 	lsl.w	r3, r2, r3
 8004362:	69ba      	ldr	r2, [r7, #24]
 8004364:	4313      	orrs	r3, r2
 8004366:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004376:	2b00      	cmp	r3, #0
 8004378:	f000 80e0 	beq.w	800453c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800437c:	4b2f      	ldr	r3, [pc, #188]	; (800443c <HAL_GPIO_Init+0x238>)
 800437e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004382:	4a2e      	ldr	r2, [pc, #184]	; (800443c <HAL_GPIO_Init+0x238>)
 8004384:	f043 0302 	orr.w	r3, r3, #2
 8004388:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800438c:	4b2b      	ldr	r3, [pc, #172]	; (800443c <HAL_GPIO_Init+0x238>)
 800438e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	60fb      	str	r3, [r7, #12]
 8004398:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800439a:	4a29      	ldr	r2, [pc, #164]	; (8004440 <HAL_GPIO_Init+0x23c>)
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	089b      	lsrs	r3, r3, #2
 80043a0:	3302      	adds	r3, #2
 80043a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	f003 0303 	and.w	r3, r3, #3
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	220f      	movs	r2, #15
 80043b2:	fa02 f303 	lsl.w	r3, r2, r3
 80043b6:	43db      	mvns	r3, r3
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	4013      	ands	r3, r2
 80043bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a20      	ldr	r2, [pc, #128]	; (8004444 <HAL_GPIO_Init+0x240>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d052      	beq.n	800446c <HAL_GPIO_Init+0x268>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a1f      	ldr	r2, [pc, #124]	; (8004448 <HAL_GPIO_Init+0x244>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d031      	beq.n	8004432 <HAL_GPIO_Init+0x22e>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a1e      	ldr	r2, [pc, #120]	; (800444c <HAL_GPIO_Init+0x248>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d02b      	beq.n	800442e <HAL_GPIO_Init+0x22a>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a1d      	ldr	r2, [pc, #116]	; (8004450 <HAL_GPIO_Init+0x24c>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d025      	beq.n	800442a <HAL_GPIO_Init+0x226>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a1c      	ldr	r2, [pc, #112]	; (8004454 <HAL_GPIO_Init+0x250>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d01f      	beq.n	8004426 <HAL_GPIO_Init+0x222>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a1b      	ldr	r2, [pc, #108]	; (8004458 <HAL_GPIO_Init+0x254>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d019      	beq.n	8004422 <HAL_GPIO_Init+0x21e>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a1a      	ldr	r2, [pc, #104]	; (800445c <HAL_GPIO_Init+0x258>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d013      	beq.n	800441e <HAL_GPIO_Init+0x21a>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a19      	ldr	r2, [pc, #100]	; (8004460 <HAL_GPIO_Init+0x25c>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d00d      	beq.n	800441a <HAL_GPIO_Init+0x216>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a18      	ldr	r2, [pc, #96]	; (8004464 <HAL_GPIO_Init+0x260>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d007      	beq.n	8004416 <HAL_GPIO_Init+0x212>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a17      	ldr	r2, [pc, #92]	; (8004468 <HAL_GPIO_Init+0x264>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d101      	bne.n	8004412 <HAL_GPIO_Init+0x20e>
 800440e:	2309      	movs	r3, #9
 8004410:	e02d      	b.n	800446e <HAL_GPIO_Init+0x26a>
 8004412:	230a      	movs	r3, #10
 8004414:	e02b      	b.n	800446e <HAL_GPIO_Init+0x26a>
 8004416:	2308      	movs	r3, #8
 8004418:	e029      	b.n	800446e <HAL_GPIO_Init+0x26a>
 800441a:	2307      	movs	r3, #7
 800441c:	e027      	b.n	800446e <HAL_GPIO_Init+0x26a>
 800441e:	2306      	movs	r3, #6
 8004420:	e025      	b.n	800446e <HAL_GPIO_Init+0x26a>
 8004422:	2305      	movs	r3, #5
 8004424:	e023      	b.n	800446e <HAL_GPIO_Init+0x26a>
 8004426:	2304      	movs	r3, #4
 8004428:	e021      	b.n	800446e <HAL_GPIO_Init+0x26a>
 800442a:	2303      	movs	r3, #3
 800442c:	e01f      	b.n	800446e <HAL_GPIO_Init+0x26a>
 800442e:	2302      	movs	r3, #2
 8004430:	e01d      	b.n	800446e <HAL_GPIO_Init+0x26a>
 8004432:	2301      	movs	r3, #1
 8004434:	e01b      	b.n	800446e <HAL_GPIO_Init+0x26a>
 8004436:	bf00      	nop
 8004438:	58000080 	.word	0x58000080
 800443c:	58024400 	.word	0x58024400
 8004440:	58000400 	.word	0x58000400
 8004444:	58020000 	.word	0x58020000
 8004448:	58020400 	.word	0x58020400
 800444c:	58020800 	.word	0x58020800
 8004450:	58020c00 	.word	0x58020c00
 8004454:	58021000 	.word	0x58021000
 8004458:	58021400 	.word	0x58021400
 800445c:	58021800 	.word	0x58021800
 8004460:	58021c00 	.word	0x58021c00
 8004464:	58022000 	.word	0x58022000
 8004468:	58022400 	.word	0x58022400
 800446c:	2300      	movs	r3, #0
 800446e:	69fa      	ldr	r2, [r7, #28]
 8004470:	f002 0203 	and.w	r2, r2, #3
 8004474:	0092      	lsls	r2, r2, #2
 8004476:	4093      	lsls	r3, r2
 8004478:	69ba      	ldr	r2, [r7, #24]
 800447a:	4313      	orrs	r3, r2
 800447c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800447e:	4938      	ldr	r1, [pc, #224]	; (8004560 <HAL_GPIO_Init+0x35c>)
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	089b      	lsrs	r3, r3, #2
 8004484:	3302      	adds	r3, #2
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800448c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	43db      	mvns	r3, r3
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	4013      	ands	r3, r2
 800449c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d003      	beq.n	80044b2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80044aa:	69ba      	ldr	r2, [r7, #24]
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80044b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80044ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	43db      	mvns	r3, r3
 80044c6:	69ba      	ldr	r2, [r7, #24]
 80044c8:	4013      	ands	r3, r2
 80044ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d003      	beq.n	80044e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80044d8:	69ba      	ldr	r2, [r7, #24]
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	4313      	orrs	r3, r2
 80044de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80044e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	43db      	mvns	r3, r3
 80044f2:	69ba      	ldr	r2, [r7, #24]
 80044f4:	4013      	ands	r3, r2
 80044f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d003      	beq.n	800450c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004504:	69ba      	ldr	r2, [r7, #24]
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	4313      	orrs	r3, r2
 800450a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	43db      	mvns	r3, r3
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	4013      	ands	r3, r2
 8004520:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d003      	beq.n	8004536 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800452e:	69ba      	ldr	r2, [r7, #24]
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	4313      	orrs	r3, r2
 8004534:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	69ba      	ldr	r2, [r7, #24]
 800453a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	3301      	adds	r3, #1
 8004540:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	fa22 f303 	lsr.w	r3, r2, r3
 800454c:	2b00      	cmp	r3, #0
 800454e:	f47f ae63 	bne.w	8004218 <HAL_GPIO_Init+0x14>
  }
}
 8004552:	bf00      	nop
 8004554:	bf00      	nop
 8004556:	3724      	adds	r7, #36	; 0x24
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr
 8004560:	58000400 	.word	0x58000400

08004564 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	460b      	mov	r3, r1
 800456e:	807b      	strh	r3, [r7, #2]
 8004570:	4613      	mov	r3, r2
 8004572:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004574:	787b      	ldrb	r3, [r7, #1]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d003      	beq.n	8004582 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800457a:	887a      	ldrh	r2, [r7, #2]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004580:	e003      	b.n	800458a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004582:	887b      	ldrh	r3, [r7, #2]
 8004584:	041a      	lsls	r2, r3, #16
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	619a      	str	r2, [r3, #24]
}
 800458a:	bf00      	nop
 800458c:	370c      	adds	r7, #12
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr

08004596 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004596:	b480      	push	{r7}
 8004598:	b085      	sub	sp, #20
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
 800459e:	460b      	mov	r3, r1
 80045a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80045a8:	887a      	ldrh	r2, [r7, #2]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	4013      	ands	r3, r2
 80045ae:	041a      	lsls	r2, r3, #16
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	43d9      	mvns	r1, r3
 80045b4:	887b      	ldrh	r3, [r7, #2]
 80045b6:	400b      	ands	r3, r1
 80045b8:	431a      	orrs	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	619a      	str	r2, [r3, #24]
}
 80045be:	bf00      	nop
 80045c0:	3714      	adds	r7, #20
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b082      	sub	sp, #8
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	4603      	mov	r3, r0
 80045d2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80045d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045d8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80045dc:	88fb      	ldrh	r3, [r7, #6]
 80045de:	4013      	ands	r3, r2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d008      	beq.n	80045f6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80045e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045e8:	88fb      	ldrh	r3, [r7, #6]
 80045ea:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80045ee:	88fb      	ldrh	r3, [r7, #6]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7fc fc8d 	bl	8000f10 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80045f6:	bf00      	nop
 80045f8:	3708      	adds	r7, #8
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80045fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004600:	b08f      	sub	sp, #60	; 0x3c
 8004602:	af0a      	add	r7, sp, #40	; 0x28
 8004604:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d101      	bne.n	8004610 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e116      	b.n	800483e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d106      	bne.n	8004630 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7fc fec6 	bl	80013bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2203      	movs	r2, #3
 8004634:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800463c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004640:	2b00      	cmp	r3, #0
 8004642:	d102      	bne.n	800464a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4618      	mov	r0, r3
 8004650:	f005 f81e 	bl	8009690 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	603b      	str	r3, [r7, #0]
 800465a:	687e      	ldr	r6, [r7, #4]
 800465c:	466d      	mov	r5, sp
 800465e:	f106 0410 	add.w	r4, r6, #16
 8004662:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004664:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004666:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004668:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800466a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800466e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004672:	1d33      	adds	r3, r6, #4
 8004674:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004676:	6838      	ldr	r0, [r7, #0]
 8004678:	f004 ff9c 	bl	80095b4 <USB_CoreInit>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d005      	beq.n	800468e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2202      	movs	r2, #2
 8004686:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e0d7      	b.n	800483e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2100      	movs	r1, #0
 8004694:	4618      	mov	r0, r3
 8004696:	f005 f80c 	bl	80096b2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800469a:	2300      	movs	r3, #0
 800469c:	73fb      	strb	r3, [r7, #15]
 800469e:	e04a      	b.n	8004736 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80046a0:	7bfa      	ldrb	r2, [r7, #15]
 80046a2:	6879      	ldr	r1, [r7, #4]
 80046a4:	4613      	mov	r3, r2
 80046a6:	00db      	lsls	r3, r3, #3
 80046a8:	4413      	add	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	440b      	add	r3, r1
 80046ae:	333d      	adds	r3, #61	; 0x3d
 80046b0:	2201      	movs	r2, #1
 80046b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80046b4:	7bfa      	ldrb	r2, [r7, #15]
 80046b6:	6879      	ldr	r1, [r7, #4]
 80046b8:	4613      	mov	r3, r2
 80046ba:	00db      	lsls	r3, r3, #3
 80046bc:	4413      	add	r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	440b      	add	r3, r1
 80046c2:	333c      	adds	r3, #60	; 0x3c
 80046c4:	7bfa      	ldrb	r2, [r7, #15]
 80046c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80046c8:	7bfa      	ldrb	r2, [r7, #15]
 80046ca:	7bfb      	ldrb	r3, [r7, #15]
 80046cc:	b298      	uxth	r0, r3
 80046ce:	6879      	ldr	r1, [r7, #4]
 80046d0:	4613      	mov	r3, r2
 80046d2:	00db      	lsls	r3, r3, #3
 80046d4:	4413      	add	r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	440b      	add	r3, r1
 80046da:	3344      	adds	r3, #68	; 0x44
 80046dc:	4602      	mov	r2, r0
 80046de:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80046e0:	7bfa      	ldrb	r2, [r7, #15]
 80046e2:	6879      	ldr	r1, [r7, #4]
 80046e4:	4613      	mov	r3, r2
 80046e6:	00db      	lsls	r3, r3, #3
 80046e8:	4413      	add	r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	440b      	add	r3, r1
 80046ee:	3340      	adds	r3, #64	; 0x40
 80046f0:	2200      	movs	r2, #0
 80046f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80046f4:	7bfa      	ldrb	r2, [r7, #15]
 80046f6:	6879      	ldr	r1, [r7, #4]
 80046f8:	4613      	mov	r3, r2
 80046fa:	00db      	lsls	r3, r3, #3
 80046fc:	4413      	add	r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	440b      	add	r3, r1
 8004702:	3348      	adds	r3, #72	; 0x48
 8004704:	2200      	movs	r2, #0
 8004706:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004708:	7bfa      	ldrb	r2, [r7, #15]
 800470a:	6879      	ldr	r1, [r7, #4]
 800470c:	4613      	mov	r3, r2
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	4413      	add	r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	440b      	add	r3, r1
 8004716:	334c      	adds	r3, #76	; 0x4c
 8004718:	2200      	movs	r2, #0
 800471a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800471c:	7bfa      	ldrb	r2, [r7, #15]
 800471e:	6879      	ldr	r1, [r7, #4]
 8004720:	4613      	mov	r3, r2
 8004722:	00db      	lsls	r3, r3, #3
 8004724:	4413      	add	r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	440b      	add	r3, r1
 800472a:	3354      	adds	r3, #84	; 0x54
 800472c:	2200      	movs	r2, #0
 800472e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004730:	7bfb      	ldrb	r3, [r7, #15]
 8004732:	3301      	adds	r3, #1
 8004734:	73fb      	strb	r3, [r7, #15]
 8004736:	7bfa      	ldrb	r2, [r7, #15]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	429a      	cmp	r2, r3
 800473e:	d3af      	bcc.n	80046a0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004740:	2300      	movs	r3, #0
 8004742:	73fb      	strb	r3, [r7, #15]
 8004744:	e044      	b.n	80047d0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004746:	7bfa      	ldrb	r2, [r7, #15]
 8004748:	6879      	ldr	r1, [r7, #4]
 800474a:	4613      	mov	r3, r2
 800474c:	00db      	lsls	r3, r3, #3
 800474e:	4413      	add	r3, r2
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	440b      	add	r3, r1
 8004754:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004758:	2200      	movs	r2, #0
 800475a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800475c:	7bfa      	ldrb	r2, [r7, #15]
 800475e:	6879      	ldr	r1, [r7, #4]
 8004760:	4613      	mov	r3, r2
 8004762:	00db      	lsls	r3, r3, #3
 8004764:	4413      	add	r3, r2
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	440b      	add	r3, r1
 800476a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800476e:	7bfa      	ldrb	r2, [r7, #15]
 8004770:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004772:	7bfa      	ldrb	r2, [r7, #15]
 8004774:	6879      	ldr	r1, [r7, #4]
 8004776:	4613      	mov	r3, r2
 8004778:	00db      	lsls	r3, r3, #3
 800477a:	4413      	add	r3, r2
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	440b      	add	r3, r1
 8004780:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004784:	2200      	movs	r2, #0
 8004786:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004788:	7bfa      	ldrb	r2, [r7, #15]
 800478a:	6879      	ldr	r1, [r7, #4]
 800478c:	4613      	mov	r3, r2
 800478e:	00db      	lsls	r3, r3, #3
 8004790:	4413      	add	r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	440b      	add	r3, r1
 8004796:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800479a:	2200      	movs	r2, #0
 800479c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800479e:	7bfa      	ldrb	r2, [r7, #15]
 80047a0:	6879      	ldr	r1, [r7, #4]
 80047a2:	4613      	mov	r3, r2
 80047a4:	00db      	lsls	r3, r3, #3
 80047a6:	4413      	add	r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	440b      	add	r3, r1
 80047ac:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80047b0:	2200      	movs	r2, #0
 80047b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80047b4:	7bfa      	ldrb	r2, [r7, #15]
 80047b6:	6879      	ldr	r1, [r7, #4]
 80047b8:	4613      	mov	r3, r2
 80047ba:	00db      	lsls	r3, r3, #3
 80047bc:	4413      	add	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	440b      	add	r3, r1
 80047c2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80047c6:	2200      	movs	r2, #0
 80047c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047ca:	7bfb      	ldrb	r3, [r7, #15]
 80047cc:	3301      	adds	r3, #1
 80047ce:	73fb      	strb	r3, [r7, #15]
 80047d0:	7bfa      	ldrb	r2, [r7, #15]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d3b5      	bcc.n	8004746 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	603b      	str	r3, [r7, #0]
 80047e0:	687e      	ldr	r6, [r7, #4]
 80047e2:	466d      	mov	r5, sp
 80047e4:	f106 0410 	add.w	r4, r6, #16
 80047e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80047f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80047f8:	1d33      	adds	r3, r6, #4
 80047fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047fc:	6838      	ldr	r0, [r7, #0]
 80047fe:	f004 ffa5 	bl	800974c <USB_DevInit>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d005      	beq.n	8004814 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2202      	movs	r2, #2
 800480c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e014      	b.n	800483e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004828:	2b01      	cmp	r3, #1
 800482a:	d102      	bne.n	8004832 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 f80b 	bl	8004848 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4618      	mov	r0, r3
 8004838:	f005 f963 	bl	8009b02 <USB_DevDisconnect>

  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3714      	adds	r7, #20
 8004842:	46bd      	mov	sp, r7
 8004844:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004848 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2201      	movs	r2, #1
 800485a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004876:	4b05      	ldr	r3, [pc, #20]	; (800488c <HAL_PCDEx_ActivateLPM+0x44>)
 8004878:	4313      	orrs	r3, r2
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3714      	adds	r7, #20
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr
 800488c:	10000003 	.word	0x10000003

08004890 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004898:	4b19      	ldr	r3, [pc, #100]	; (8004900 <HAL_PWREx_ConfigSupply+0x70>)
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	f003 0304 	and.w	r3, r3, #4
 80048a0:	2b04      	cmp	r3, #4
 80048a2:	d00a      	beq.n	80048ba <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80048a4:	4b16      	ldr	r3, [pc, #88]	; (8004900 <HAL_PWREx_ConfigSupply+0x70>)
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	f003 0307 	and.w	r3, r3, #7
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d001      	beq.n	80048b6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e01f      	b.n	80048f6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80048b6:	2300      	movs	r3, #0
 80048b8:	e01d      	b.n	80048f6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80048ba:	4b11      	ldr	r3, [pc, #68]	; (8004900 <HAL_PWREx_ConfigSupply+0x70>)
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	f023 0207 	bic.w	r2, r3, #7
 80048c2:	490f      	ldr	r1, [pc, #60]	; (8004900 <HAL_PWREx_ConfigSupply+0x70>)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80048ca:	f7fc ff89 	bl	80017e0 <HAL_GetTick>
 80048ce:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80048d0:	e009      	b.n	80048e6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80048d2:	f7fc ff85 	bl	80017e0 <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048e0:	d901      	bls.n	80048e6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e007      	b.n	80048f6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80048e6:	4b06      	ldr	r3, [pc, #24]	; (8004900 <HAL_PWREx_ConfigSupply+0x70>)
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048f2:	d1ee      	bne.n	80048d2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	58024800 	.word	0x58024800

08004904 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004904:	b480      	push	{r7}
 8004906:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004908:	4b05      	ldr	r3, [pc, #20]	; (8004920 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	4a04      	ldr	r2, [pc, #16]	; (8004920 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800490e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004912:	60d3      	str	r3, [r2, #12]
}
 8004914:	bf00      	nop
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	58024800 	.word	0x58024800

08004924 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b08c      	sub	sp, #48	; 0x30
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d102      	bne.n	8004938 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	f000 bc1d 	b.w	8005172 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	2b00      	cmp	r3, #0
 8004942:	f000 8087 	beq.w	8004a54 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004946:	4b99      	ldr	r3, [pc, #612]	; (8004bac <HAL_RCC_OscConfig+0x288>)
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800494e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004950:	4b96      	ldr	r3, [pc, #600]	; (8004bac <HAL_RCC_OscConfig+0x288>)
 8004952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004954:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004958:	2b10      	cmp	r3, #16
 800495a:	d007      	beq.n	800496c <HAL_RCC_OscConfig+0x48>
 800495c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800495e:	2b18      	cmp	r3, #24
 8004960:	d110      	bne.n	8004984 <HAL_RCC_OscConfig+0x60>
 8004962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004964:	f003 0303 	and.w	r3, r3, #3
 8004968:	2b02      	cmp	r3, #2
 800496a:	d10b      	bne.n	8004984 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800496c:	4b8f      	ldr	r3, [pc, #572]	; (8004bac <HAL_RCC_OscConfig+0x288>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d06c      	beq.n	8004a52 <HAL_RCC_OscConfig+0x12e>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d168      	bne.n	8004a52 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e3f6      	b.n	8005172 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800498c:	d106      	bne.n	800499c <HAL_RCC_OscConfig+0x78>
 800498e:	4b87      	ldr	r3, [pc, #540]	; (8004bac <HAL_RCC_OscConfig+0x288>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a86      	ldr	r2, [pc, #536]	; (8004bac <HAL_RCC_OscConfig+0x288>)
 8004994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004998:	6013      	str	r3, [r2, #0]
 800499a:	e02e      	b.n	80049fa <HAL_RCC_OscConfig+0xd6>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10c      	bne.n	80049be <HAL_RCC_OscConfig+0x9a>
 80049a4:	4b81      	ldr	r3, [pc, #516]	; (8004bac <HAL_RCC_OscConfig+0x288>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a80      	ldr	r2, [pc, #512]	; (8004bac <HAL_RCC_OscConfig+0x288>)
 80049aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ae:	6013      	str	r3, [r2, #0]
 80049b0:	4b7e      	ldr	r3, [pc, #504]	; (8004bac <HAL_RCC_OscConfig+0x288>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a7d      	ldr	r2, [pc, #500]	; (8004bac <HAL_RCC_OscConfig+0x288>)
 80049b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049ba:	6013      	str	r3, [r2, #0]
 80049bc:	e01d      	b.n	80049fa <HAL_RCC_OscConfig+0xd6>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049c6:	d10c      	bne.n	80049e2 <HAL_RCC_OscConfig+0xbe>
 80049c8:	4b78      	ldr	r3, [pc, #480]	; (8004bac <HAL_RCC_OscConfig+0x288>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a77      	ldr	r2, [pc, #476]	; (8004bac <HAL_RCC_OscConfig+0x288>)
 80049ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049d2:	6013      	str	r3, [r2, #0]
 80049d4:	4b75      	ldr	r3, [pc, #468]	; (8004bac <HAL_RCC_OscConfig+0x288>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a74      	ldr	r2, [pc, #464]	; (8004bac <HAL_RCC_OscConfig+0x288>)
 80049da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049de:	6013      	str	r3, [r2, #0]
 80049e0:	e00b      	b.n	80049fa <HAL_RCC_OscConfig+0xd6>
 80049e2:	4b72      	ldr	r3, [pc, #456]	; (8004bac <HAL_RCC_OscConfig+0x288>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a71      	ldr	r2, [pc, #452]	; (8004bac <HAL_RCC_OscConfig+0x288>)
 80049e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ec:	6013      	str	r3, [r2, #0]
 80049ee:	4b6f      	ldr	r3, [pc, #444]	; (8004bac <HAL_RCC_OscConfig+0x288>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a6e      	ldr	r2, [pc, #440]	; (8004bac <HAL_RCC_OscConfig+0x288>)
 80049f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049f8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d013      	beq.n	8004a2a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a02:	f7fc feed 	bl	80017e0 <HAL_GetTick>
 8004a06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a08:	e008      	b.n	8004a1c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a0a:	f7fc fee9 	bl	80017e0 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	2b64      	cmp	r3, #100	; 0x64
 8004a16:	d901      	bls.n	8004a1c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e3aa      	b.n	8005172 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a1c:	4b63      	ldr	r3, [pc, #396]	; (8004bac <HAL_RCC_OscConfig+0x288>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d0f0      	beq.n	8004a0a <HAL_RCC_OscConfig+0xe6>
 8004a28:	e014      	b.n	8004a54 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a2a:	f7fc fed9 	bl	80017e0 <HAL_GetTick>
 8004a2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a30:	e008      	b.n	8004a44 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a32:	f7fc fed5 	bl	80017e0 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	2b64      	cmp	r3, #100	; 0x64
 8004a3e:	d901      	bls.n	8004a44 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e396      	b.n	8005172 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a44:	4b59      	ldr	r3, [pc, #356]	; (8004bac <HAL_RCC_OscConfig+0x288>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1f0      	bne.n	8004a32 <HAL_RCC_OscConfig+0x10e>
 8004a50:	e000      	b.n	8004a54 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a52:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0302 	and.w	r3, r3, #2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f000 80cb 	beq.w	8004bf8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a62:	4b52      	ldr	r3, [pc, #328]	; (8004bac <HAL_RCC_OscConfig+0x288>)
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a6a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a6c:	4b4f      	ldr	r3, [pc, #316]	; (8004bac <HAL_RCC_OscConfig+0x288>)
 8004a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a70:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d007      	beq.n	8004a88 <HAL_RCC_OscConfig+0x164>
 8004a78:	6a3b      	ldr	r3, [r7, #32]
 8004a7a:	2b18      	cmp	r3, #24
 8004a7c:	d156      	bne.n	8004b2c <HAL_RCC_OscConfig+0x208>
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	f003 0303 	and.w	r3, r3, #3
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d151      	bne.n	8004b2c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a88:	4b48      	ldr	r3, [pc, #288]	; (8004bac <HAL_RCC_OscConfig+0x288>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0304 	and.w	r3, r3, #4
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d005      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x17c>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d101      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e368      	b.n	8005172 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004aa0:	4b42      	ldr	r3, [pc, #264]	; (8004bac <HAL_RCC_OscConfig+0x288>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f023 0219 	bic.w	r2, r3, #25
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	493f      	ldr	r1, [pc, #252]	; (8004bac <HAL_RCC_OscConfig+0x288>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ab2:	f7fc fe95 	bl	80017e0 <HAL_GetTick>
 8004ab6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ab8:	e008      	b.n	8004acc <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004aba:	f7fc fe91 	bl	80017e0 <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d901      	bls.n	8004acc <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e352      	b.n	8005172 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004acc:	4b37      	ldr	r3, [pc, #220]	; (8004bac <HAL_RCC_OscConfig+0x288>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0304 	and.w	r3, r3, #4
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d0f0      	beq.n	8004aba <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ad8:	f7fc feb2 	bl	8001840 <HAL_GetREVID>
 8004adc:	4603      	mov	r3, r0
 8004ade:	f241 0203 	movw	r2, #4099	; 0x1003
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d817      	bhi.n	8004b16 <HAL_RCC_OscConfig+0x1f2>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	2b40      	cmp	r3, #64	; 0x40
 8004aec:	d108      	bne.n	8004b00 <HAL_RCC_OscConfig+0x1dc>
 8004aee:	4b2f      	ldr	r3, [pc, #188]	; (8004bac <HAL_RCC_OscConfig+0x288>)
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004af6:	4a2d      	ldr	r2, [pc, #180]	; (8004bac <HAL_RCC_OscConfig+0x288>)
 8004af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004afc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004afe:	e07b      	b.n	8004bf8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b00:	4b2a      	ldr	r3, [pc, #168]	; (8004bac <HAL_RCC_OscConfig+0x288>)
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	031b      	lsls	r3, r3, #12
 8004b0e:	4927      	ldr	r1, [pc, #156]	; (8004bac <HAL_RCC_OscConfig+0x288>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b14:	e070      	b.n	8004bf8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b16:	4b25      	ldr	r3, [pc, #148]	; (8004bac <HAL_RCC_OscConfig+0x288>)
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	061b      	lsls	r3, r3, #24
 8004b24:	4921      	ldr	r1, [pc, #132]	; (8004bac <HAL_RCC_OscConfig+0x288>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b2a:	e065      	b.n	8004bf8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d048      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004b34:	4b1d      	ldr	r3, [pc, #116]	; (8004bac <HAL_RCC_OscConfig+0x288>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f023 0219 	bic.w	r2, r3, #25
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	491a      	ldr	r1, [pc, #104]	; (8004bac <HAL_RCC_OscConfig+0x288>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b46:	f7fc fe4b 	bl	80017e0 <HAL_GetTick>
 8004b4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b4c:	e008      	b.n	8004b60 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b4e:	f7fc fe47 	bl	80017e0 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d901      	bls.n	8004b60 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e308      	b.n	8005172 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b60:	4b12      	ldr	r3, [pc, #72]	; (8004bac <HAL_RCC_OscConfig+0x288>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d0f0      	beq.n	8004b4e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b6c:	f7fc fe68 	bl	8001840 <HAL_GetREVID>
 8004b70:	4603      	mov	r3, r0
 8004b72:	f241 0203 	movw	r2, #4099	; 0x1003
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d81a      	bhi.n	8004bb0 <HAL_RCC_OscConfig+0x28c>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	2b40      	cmp	r3, #64	; 0x40
 8004b80:	d108      	bne.n	8004b94 <HAL_RCC_OscConfig+0x270>
 8004b82:	4b0a      	ldr	r3, [pc, #40]	; (8004bac <HAL_RCC_OscConfig+0x288>)
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004b8a:	4a08      	ldr	r2, [pc, #32]	; (8004bac <HAL_RCC_OscConfig+0x288>)
 8004b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b90:	6053      	str	r3, [r2, #4]
 8004b92:	e031      	b.n	8004bf8 <HAL_RCC_OscConfig+0x2d4>
 8004b94:	4b05      	ldr	r3, [pc, #20]	; (8004bac <HAL_RCC_OscConfig+0x288>)
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	031b      	lsls	r3, r3, #12
 8004ba2:	4902      	ldr	r1, [pc, #8]	; (8004bac <HAL_RCC_OscConfig+0x288>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	604b      	str	r3, [r1, #4]
 8004ba8:	e026      	b.n	8004bf8 <HAL_RCC_OscConfig+0x2d4>
 8004baa:	bf00      	nop
 8004bac:	58024400 	.word	0x58024400
 8004bb0:	4b9a      	ldr	r3, [pc, #616]	; (8004e1c <HAL_RCC_OscConfig+0x4f8>)
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	061b      	lsls	r3, r3, #24
 8004bbe:	4997      	ldr	r1, [pc, #604]	; (8004e1c <HAL_RCC_OscConfig+0x4f8>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	604b      	str	r3, [r1, #4]
 8004bc4:	e018      	b.n	8004bf8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bc6:	4b95      	ldr	r3, [pc, #596]	; (8004e1c <HAL_RCC_OscConfig+0x4f8>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a94      	ldr	r2, [pc, #592]	; (8004e1c <HAL_RCC_OscConfig+0x4f8>)
 8004bcc:	f023 0301 	bic.w	r3, r3, #1
 8004bd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd2:	f7fc fe05 	bl	80017e0 <HAL_GetTick>
 8004bd6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004bd8:	e008      	b.n	8004bec <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bda:	f7fc fe01 	bl	80017e0 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d901      	bls.n	8004bec <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e2c2      	b.n	8005172 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004bec:	4b8b      	ldr	r3, [pc, #556]	; (8004e1c <HAL_RCC_OscConfig+0x4f8>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0304 	and.w	r3, r3, #4
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1f0      	bne.n	8004bda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0310 	and.w	r3, r3, #16
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 80a9 	beq.w	8004d58 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c06:	4b85      	ldr	r3, [pc, #532]	; (8004e1c <HAL_RCC_OscConfig+0x4f8>)
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c0e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c10:	4b82      	ldr	r3, [pc, #520]	; (8004e1c <HAL_RCC_OscConfig+0x4f8>)
 8004c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c14:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	2b08      	cmp	r3, #8
 8004c1a:	d007      	beq.n	8004c2c <HAL_RCC_OscConfig+0x308>
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	2b18      	cmp	r3, #24
 8004c20:	d13a      	bne.n	8004c98 <HAL_RCC_OscConfig+0x374>
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f003 0303 	and.w	r3, r3, #3
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d135      	bne.n	8004c98 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c2c:	4b7b      	ldr	r3, [pc, #492]	; (8004e1c <HAL_RCC_OscConfig+0x4f8>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d005      	beq.n	8004c44 <HAL_RCC_OscConfig+0x320>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	69db      	ldr	r3, [r3, #28]
 8004c3c:	2b80      	cmp	r3, #128	; 0x80
 8004c3e:	d001      	beq.n	8004c44 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e296      	b.n	8005172 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c44:	f7fc fdfc 	bl	8001840 <HAL_GetREVID>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	f241 0203 	movw	r2, #4099	; 0x1003
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d817      	bhi.n	8004c82 <HAL_RCC_OscConfig+0x35e>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a1b      	ldr	r3, [r3, #32]
 8004c56:	2b20      	cmp	r3, #32
 8004c58:	d108      	bne.n	8004c6c <HAL_RCC_OscConfig+0x348>
 8004c5a:	4b70      	ldr	r3, [pc, #448]	; (8004e1c <HAL_RCC_OscConfig+0x4f8>)
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004c62:	4a6e      	ldr	r2, [pc, #440]	; (8004e1c <HAL_RCC_OscConfig+0x4f8>)
 8004c64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c68:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c6a:	e075      	b.n	8004d58 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c6c:	4b6b      	ldr	r3, [pc, #428]	; (8004e1c <HAL_RCC_OscConfig+0x4f8>)
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a1b      	ldr	r3, [r3, #32]
 8004c78:	069b      	lsls	r3, r3, #26
 8004c7a:	4968      	ldr	r1, [pc, #416]	; (8004e1c <HAL_RCC_OscConfig+0x4f8>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c80:	e06a      	b.n	8004d58 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c82:	4b66      	ldr	r3, [pc, #408]	; (8004e1c <HAL_RCC_OscConfig+0x4f8>)
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	061b      	lsls	r3, r3, #24
 8004c90:	4962      	ldr	r1, [pc, #392]	; (8004e1c <HAL_RCC_OscConfig+0x4f8>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c96:	e05f      	b.n	8004d58 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	69db      	ldr	r3, [r3, #28]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d042      	beq.n	8004d26 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004ca0:	4b5e      	ldr	r3, [pc, #376]	; (8004e1c <HAL_RCC_OscConfig+0x4f8>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a5d      	ldr	r2, [pc, #372]	; (8004e1c <HAL_RCC_OscConfig+0x4f8>)
 8004ca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004caa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cac:	f7fc fd98 	bl	80017e0 <HAL_GetTick>
 8004cb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004cb2:	e008      	b.n	8004cc6 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004cb4:	f7fc fd94 	bl	80017e0 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e255      	b.n	8005172 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004cc6:	4b55      	ldr	r3, [pc, #340]	; (8004e1c <HAL_RCC_OscConfig+0x4f8>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d0f0      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004cd2:	f7fc fdb5 	bl	8001840 <HAL_GetREVID>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	f241 0203 	movw	r2, #4099	; 0x1003
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d817      	bhi.n	8004d10 <HAL_RCC_OscConfig+0x3ec>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a1b      	ldr	r3, [r3, #32]
 8004ce4:	2b20      	cmp	r3, #32
 8004ce6:	d108      	bne.n	8004cfa <HAL_RCC_OscConfig+0x3d6>
 8004ce8:	4b4c      	ldr	r3, [pc, #304]	; (8004e1c <HAL_RCC_OscConfig+0x4f8>)
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004cf0:	4a4a      	ldr	r2, [pc, #296]	; (8004e1c <HAL_RCC_OscConfig+0x4f8>)
 8004cf2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004cf6:	6053      	str	r3, [r2, #4]
 8004cf8:	e02e      	b.n	8004d58 <HAL_RCC_OscConfig+0x434>
 8004cfa:	4b48      	ldr	r3, [pc, #288]	; (8004e1c <HAL_RCC_OscConfig+0x4f8>)
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	069b      	lsls	r3, r3, #26
 8004d08:	4944      	ldr	r1, [pc, #272]	; (8004e1c <HAL_RCC_OscConfig+0x4f8>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	604b      	str	r3, [r1, #4]
 8004d0e:	e023      	b.n	8004d58 <HAL_RCC_OscConfig+0x434>
 8004d10:	4b42      	ldr	r3, [pc, #264]	; (8004e1c <HAL_RCC_OscConfig+0x4f8>)
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a1b      	ldr	r3, [r3, #32]
 8004d1c:	061b      	lsls	r3, r3, #24
 8004d1e:	493f      	ldr	r1, [pc, #252]	; (8004e1c <HAL_RCC_OscConfig+0x4f8>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	60cb      	str	r3, [r1, #12]
 8004d24:	e018      	b.n	8004d58 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004d26:	4b3d      	ldr	r3, [pc, #244]	; (8004e1c <HAL_RCC_OscConfig+0x4f8>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a3c      	ldr	r2, [pc, #240]	; (8004e1c <HAL_RCC_OscConfig+0x4f8>)
 8004d2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d32:	f7fc fd55 	bl	80017e0 <HAL_GetTick>
 8004d36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004d38:	e008      	b.n	8004d4c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004d3a:	f7fc fd51 	bl	80017e0 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d901      	bls.n	8004d4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e212      	b.n	8005172 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004d4c:	4b33      	ldr	r3, [pc, #204]	; (8004e1c <HAL_RCC_OscConfig+0x4f8>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1f0      	bne.n	8004d3a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0308 	and.w	r3, r3, #8
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d036      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d019      	beq.n	8004da0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d6c:	4b2b      	ldr	r3, [pc, #172]	; (8004e1c <HAL_RCC_OscConfig+0x4f8>)
 8004d6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d70:	4a2a      	ldr	r2, [pc, #168]	; (8004e1c <HAL_RCC_OscConfig+0x4f8>)
 8004d72:	f043 0301 	orr.w	r3, r3, #1
 8004d76:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d78:	f7fc fd32 	bl	80017e0 <HAL_GetTick>
 8004d7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d7e:	e008      	b.n	8004d92 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d80:	f7fc fd2e 	bl	80017e0 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e1ef      	b.n	8005172 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d92:	4b22      	ldr	r3, [pc, #136]	; (8004e1c <HAL_RCC_OscConfig+0x4f8>)
 8004d94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d0f0      	beq.n	8004d80 <HAL_RCC_OscConfig+0x45c>
 8004d9e:	e018      	b.n	8004dd2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004da0:	4b1e      	ldr	r3, [pc, #120]	; (8004e1c <HAL_RCC_OscConfig+0x4f8>)
 8004da2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004da4:	4a1d      	ldr	r2, [pc, #116]	; (8004e1c <HAL_RCC_OscConfig+0x4f8>)
 8004da6:	f023 0301 	bic.w	r3, r3, #1
 8004daa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dac:	f7fc fd18 	bl	80017e0 <HAL_GetTick>
 8004db0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004db2:	e008      	b.n	8004dc6 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004db4:	f7fc fd14 	bl	80017e0 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e1d5      	b.n	8005172 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004dc6:	4b15      	ldr	r3, [pc, #84]	; (8004e1c <HAL_RCC_OscConfig+0x4f8>)
 8004dc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1f0      	bne.n	8004db4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0320 	and.w	r3, r3, #32
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d039      	beq.n	8004e52 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d01c      	beq.n	8004e20 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004de6:	4b0d      	ldr	r3, [pc, #52]	; (8004e1c <HAL_RCC_OscConfig+0x4f8>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a0c      	ldr	r2, [pc, #48]	; (8004e1c <HAL_RCC_OscConfig+0x4f8>)
 8004dec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004df0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004df2:	f7fc fcf5 	bl	80017e0 <HAL_GetTick>
 8004df6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004df8:	e008      	b.n	8004e0c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004dfa:	f7fc fcf1 	bl	80017e0 <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d901      	bls.n	8004e0c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e1b2      	b.n	8005172 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004e0c:	4b03      	ldr	r3, [pc, #12]	; (8004e1c <HAL_RCC_OscConfig+0x4f8>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d0f0      	beq.n	8004dfa <HAL_RCC_OscConfig+0x4d6>
 8004e18:	e01b      	b.n	8004e52 <HAL_RCC_OscConfig+0x52e>
 8004e1a:	bf00      	nop
 8004e1c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e20:	4b9b      	ldr	r3, [pc, #620]	; (8005090 <HAL_RCC_OscConfig+0x76c>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a9a      	ldr	r2, [pc, #616]	; (8005090 <HAL_RCC_OscConfig+0x76c>)
 8004e26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e2a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004e2c:	f7fc fcd8 	bl	80017e0 <HAL_GetTick>
 8004e30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004e32:	e008      	b.n	8004e46 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004e34:	f7fc fcd4 	bl	80017e0 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e195      	b.n	8005172 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004e46:	4b92      	ldr	r3, [pc, #584]	; (8005090 <HAL_RCC_OscConfig+0x76c>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1f0      	bne.n	8004e34 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0304 	and.w	r3, r3, #4
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f000 8081 	beq.w	8004f62 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004e60:	4b8c      	ldr	r3, [pc, #560]	; (8005094 <HAL_RCC_OscConfig+0x770>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a8b      	ldr	r2, [pc, #556]	; (8005094 <HAL_RCC_OscConfig+0x770>)
 8004e66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e6a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e6c:	f7fc fcb8 	bl	80017e0 <HAL_GetTick>
 8004e70:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e72:	e008      	b.n	8004e86 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004e74:	f7fc fcb4 	bl	80017e0 <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	2b64      	cmp	r3, #100	; 0x64
 8004e80:	d901      	bls.n	8004e86 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e175      	b.n	8005172 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e86:	4b83      	ldr	r3, [pc, #524]	; (8005094 <HAL_RCC_OscConfig+0x770>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d0f0      	beq.n	8004e74 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d106      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x584>
 8004e9a:	4b7d      	ldr	r3, [pc, #500]	; (8005090 <HAL_RCC_OscConfig+0x76c>)
 8004e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9e:	4a7c      	ldr	r2, [pc, #496]	; (8005090 <HAL_RCC_OscConfig+0x76c>)
 8004ea0:	f043 0301 	orr.w	r3, r3, #1
 8004ea4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ea6:	e02d      	b.n	8004f04 <HAL_RCC_OscConfig+0x5e0>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d10c      	bne.n	8004eca <HAL_RCC_OscConfig+0x5a6>
 8004eb0:	4b77      	ldr	r3, [pc, #476]	; (8005090 <HAL_RCC_OscConfig+0x76c>)
 8004eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb4:	4a76      	ldr	r2, [pc, #472]	; (8005090 <HAL_RCC_OscConfig+0x76c>)
 8004eb6:	f023 0301 	bic.w	r3, r3, #1
 8004eba:	6713      	str	r3, [r2, #112]	; 0x70
 8004ebc:	4b74      	ldr	r3, [pc, #464]	; (8005090 <HAL_RCC_OscConfig+0x76c>)
 8004ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec0:	4a73      	ldr	r2, [pc, #460]	; (8005090 <HAL_RCC_OscConfig+0x76c>)
 8004ec2:	f023 0304 	bic.w	r3, r3, #4
 8004ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ec8:	e01c      	b.n	8004f04 <HAL_RCC_OscConfig+0x5e0>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	2b05      	cmp	r3, #5
 8004ed0:	d10c      	bne.n	8004eec <HAL_RCC_OscConfig+0x5c8>
 8004ed2:	4b6f      	ldr	r3, [pc, #444]	; (8005090 <HAL_RCC_OscConfig+0x76c>)
 8004ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed6:	4a6e      	ldr	r2, [pc, #440]	; (8005090 <HAL_RCC_OscConfig+0x76c>)
 8004ed8:	f043 0304 	orr.w	r3, r3, #4
 8004edc:	6713      	str	r3, [r2, #112]	; 0x70
 8004ede:	4b6c      	ldr	r3, [pc, #432]	; (8005090 <HAL_RCC_OscConfig+0x76c>)
 8004ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee2:	4a6b      	ldr	r2, [pc, #428]	; (8005090 <HAL_RCC_OscConfig+0x76c>)
 8004ee4:	f043 0301 	orr.w	r3, r3, #1
 8004ee8:	6713      	str	r3, [r2, #112]	; 0x70
 8004eea:	e00b      	b.n	8004f04 <HAL_RCC_OscConfig+0x5e0>
 8004eec:	4b68      	ldr	r3, [pc, #416]	; (8005090 <HAL_RCC_OscConfig+0x76c>)
 8004eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef0:	4a67      	ldr	r2, [pc, #412]	; (8005090 <HAL_RCC_OscConfig+0x76c>)
 8004ef2:	f023 0301 	bic.w	r3, r3, #1
 8004ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ef8:	4b65      	ldr	r3, [pc, #404]	; (8005090 <HAL_RCC_OscConfig+0x76c>)
 8004efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efc:	4a64      	ldr	r2, [pc, #400]	; (8005090 <HAL_RCC_OscConfig+0x76c>)
 8004efe:	f023 0304 	bic.w	r3, r3, #4
 8004f02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d015      	beq.n	8004f38 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f0c:	f7fc fc68 	bl	80017e0 <HAL_GetTick>
 8004f10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f12:	e00a      	b.n	8004f2a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f14:	f7fc fc64 	bl	80017e0 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e123      	b.n	8005172 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f2a:	4b59      	ldr	r3, [pc, #356]	; (8005090 <HAL_RCC_OscConfig+0x76c>)
 8004f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f2e:	f003 0302 	and.w	r3, r3, #2
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d0ee      	beq.n	8004f14 <HAL_RCC_OscConfig+0x5f0>
 8004f36:	e014      	b.n	8004f62 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f38:	f7fc fc52 	bl	80017e0 <HAL_GetTick>
 8004f3c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f3e:	e00a      	b.n	8004f56 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f40:	f7fc fc4e 	bl	80017e0 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e10d      	b.n	8005172 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f56:	4b4e      	ldr	r3, [pc, #312]	; (8005090 <HAL_RCC_OscConfig+0x76c>)
 8004f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1ee      	bne.n	8004f40 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	f000 8102 	beq.w	8005170 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004f6c:	4b48      	ldr	r3, [pc, #288]	; (8005090 <HAL_RCC_OscConfig+0x76c>)
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f74:	2b18      	cmp	r3, #24
 8004f76:	f000 80bd 	beq.w	80050f4 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	f040 809e 	bne.w	80050c0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f84:	4b42      	ldr	r3, [pc, #264]	; (8005090 <HAL_RCC_OscConfig+0x76c>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a41      	ldr	r2, [pc, #260]	; (8005090 <HAL_RCC_OscConfig+0x76c>)
 8004f8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f90:	f7fc fc26 	bl	80017e0 <HAL_GetTick>
 8004f94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f96:	e008      	b.n	8004faa <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f98:	f7fc fc22 	bl	80017e0 <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d901      	bls.n	8004faa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e0e3      	b.n	8005172 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004faa:	4b39      	ldr	r3, [pc, #228]	; (8005090 <HAL_RCC_OscConfig+0x76c>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1f0      	bne.n	8004f98 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fb6:	4b36      	ldr	r3, [pc, #216]	; (8005090 <HAL_RCC_OscConfig+0x76c>)
 8004fb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fba:	4b37      	ldr	r3, [pc, #220]	; (8005098 <HAL_RCC_OscConfig+0x774>)
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004fc6:	0112      	lsls	r2, r2, #4
 8004fc8:	430a      	orrs	r2, r1
 8004fca:	4931      	ldr	r1, [pc, #196]	; (8005090 <HAL_RCC_OscConfig+0x76c>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	628b      	str	r3, [r1, #40]	; 0x28
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	025b      	lsls	r3, r3, #9
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	431a      	orrs	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fea:	3b01      	subs	r3, #1
 8004fec:	041b      	lsls	r3, r3, #16
 8004fee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	061b      	lsls	r3, r3, #24
 8004ffc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005000:	4923      	ldr	r1, [pc, #140]	; (8005090 <HAL_RCC_OscConfig+0x76c>)
 8005002:	4313      	orrs	r3, r2
 8005004:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005006:	4b22      	ldr	r3, [pc, #136]	; (8005090 <HAL_RCC_OscConfig+0x76c>)
 8005008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500a:	4a21      	ldr	r2, [pc, #132]	; (8005090 <HAL_RCC_OscConfig+0x76c>)
 800500c:	f023 0301 	bic.w	r3, r3, #1
 8005010:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005012:	4b1f      	ldr	r3, [pc, #124]	; (8005090 <HAL_RCC_OscConfig+0x76c>)
 8005014:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005016:	4b21      	ldr	r3, [pc, #132]	; (800509c <HAL_RCC_OscConfig+0x778>)
 8005018:	4013      	ands	r3, r2
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800501e:	00d2      	lsls	r2, r2, #3
 8005020:	491b      	ldr	r1, [pc, #108]	; (8005090 <HAL_RCC_OscConfig+0x76c>)
 8005022:	4313      	orrs	r3, r2
 8005024:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005026:	4b1a      	ldr	r3, [pc, #104]	; (8005090 <HAL_RCC_OscConfig+0x76c>)
 8005028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502a:	f023 020c 	bic.w	r2, r3, #12
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005032:	4917      	ldr	r1, [pc, #92]	; (8005090 <HAL_RCC_OscConfig+0x76c>)
 8005034:	4313      	orrs	r3, r2
 8005036:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005038:	4b15      	ldr	r3, [pc, #84]	; (8005090 <HAL_RCC_OscConfig+0x76c>)
 800503a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503c:	f023 0202 	bic.w	r2, r3, #2
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005044:	4912      	ldr	r1, [pc, #72]	; (8005090 <HAL_RCC_OscConfig+0x76c>)
 8005046:	4313      	orrs	r3, r2
 8005048:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800504a:	4b11      	ldr	r3, [pc, #68]	; (8005090 <HAL_RCC_OscConfig+0x76c>)
 800504c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504e:	4a10      	ldr	r2, [pc, #64]	; (8005090 <HAL_RCC_OscConfig+0x76c>)
 8005050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005054:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005056:	4b0e      	ldr	r3, [pc, #56]	; (8005090 <HAL_RCC_OscConfig+0x76c>)
 8005058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505a:	4a0d      	ldr	r2, [pc, #52]	; (8005090 <HAL_RCC_OscConfig+0x76c>)
 800505c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005060:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005062:	4b0b      	ldr	r3, [pc, #44]	; (8005090 <HAL_RCC_OscConfig+0x76c>)
 8005064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005066:	4a0a      	ldr	r2, [pc, #40]	; (8005090 <HAL_RCC_OscConfig+0x76c>)
 8005068:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800506c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800506e:	4b08      	ldr	r3, [pc, #32]	; (8005090 <HAL_RCC_OscConfig+0x76c>)
 8005070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005072:	4a07      	ldr	r2, [pc, #28]	; (8005090 <HAL_RCC_OscConfig+0x76c>)
 8005074:	f043 0301 	orr.w	r3, r3, #1
 8005078:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800507a:	4b05      	ldr	r3, [pc, #20]	; (8005090 <HAL_RCC_OscConfig+0x76c>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a04      	ldr	r2, [pc, #16]	; (8005090 <HAL_RCC_OscConfig+0x76c>)
 8005080:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005084:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005086:	f7fc fbab 	bl	80017e0 <HAL_GetTick>
 800508a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800508c:	e011      	b.n	80050b2 <HAL_RCC_OscConfig+0x78e>
 800508e:	bf00      	nop
 8005090:	58024400 	.word	0x58024400
 8005094:	58024800 	.word	0x58024800
 8005098:	fffffc0c 	.word	0xfffffc0c
 800509c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050a0:	f7fc fb9e 	bl	80017e0 <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e05f      	b.n	8005172 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80050b2:	4b32      	ldr	r3, [pc, #200]	; (800517c <HAL_RCC_OscConfig+0x858>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d0f0      	beq.n	80050a0 <HAL_RCC_OscConfig+0x77c>
 80050be:	e057      	b.n	8005170 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050c0:	4b2e      	ldr	r3, [pc, #184]	; (800517c <HAL_RCC_OscConfig+0x858>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a2d      	ldr	r2, [pc, #180]	; (800517c <HAL_RCC_OscConfig+0x858>)
 80050c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050cc:	f7fc fb88 	bl	80017e0 <HAL_GetTick>
 80050d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050d2:	e008      	b.n	80050e6 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050d4:	f7fc fb84 	bl	80017e0 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d901      	bls.n	80050e6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e045      	b.n	8005172 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050e6:	4b25      	ldr	r3, [pc, #148]	; (800517c <HAL_RCC_OscConfig+0x858>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1f0      	bne.n	80050d4 <HAL_RCC_OscConfig+0x7b0>
 80050f2:	e03d      	b.n	8005170 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80050f4:	4b21      	ldr	r3, [pc, #132]	; (800517c <HAL_RCC_OscConfig+0x858>)
 80050f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80050fa:	4b20      	ldr	r3, [pc, #128]	; (800517c <HAL_RCC_OscConfig+0x858>)
 80050fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fe:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005104:	2b01      	cmp	r3, #1
 8005106:	d031      	beq.n	800516c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	f003 0203 	and.w	r2, r3, #3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005112:	429a      	cmp	r2, r3
 8005114:	d12a      	bne.n	800516c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	091b      	lsrs	r3, r3, #4
 800511a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005122:	429a      	cmp	r2, r3
 8005124:	d122      	bne.n	800516c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005130:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005132:	429a      	cmp	r2, r3
 8005134:	d11a      	bne.n	800516c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	0a5b      	lsrs	r3, r3, #9
 800513a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005142:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005144:	429a      	cmp	r2, r3
 8005146:	d111      	bne.n	800516c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	0c1b      	lsrs	r3, r3, #16
 800514c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005154:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005156:	429a      	cmp	r2, r3
 8005158:	d108      	bne.n	800516c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	0e1b      	lsrs	r3, r3, #24
 800515e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005166:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005168:	429a      	cmp	r2, r3
 800516a:	d001      	beq.n	8005170 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e000      	b.n	8005172 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3730      	adds	r7, #48	; 0x30
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	58024400 	.word	0x58024400

08005180 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d101      	bne.n	8005194 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e19c      	b.n	80054ce <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005194:	4b8a      	ldr	r3, [pc, #552]	; (80053c0 <HAL_RCC_ClockConfig+0x240>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 030f 	and.w	r3, r3, #15
 800519c:	683a      	ldr	r2, [r7, #0]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d910      	bls.n	80051c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051a2:	4b87      	ldr	r3, [pc, #540]	; (80053c0 <HAL_RCC_ClockConfig+0x240>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f023 020f 	bic.w	r2, r3, #15
 80051aa:	4985      	ldr	r1, [pc, #532]	; (80053c0 <HAL_RCC_ClockConfig+0x240>)
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051b2:	4b83      	ldr	r3, [pc, #524]	; (80053c0 <HAL_RCC_ClockConfig+0x240>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 030f 	and.w	r3, r3, #15
 80051ba:	683a      	ldr	r2, [r7, #0]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d001      	beq.n	80051c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e184      	b.n	80054ce <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0304 	and.w	r3, r3, #4
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d010      	beq.n	80051f2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	691a      	ldr	r2, [r3, #16]
 80051d4:	4b7b      	ldr	r3, [pc, #492]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80051dc:	429a      	cmp	r2, r3
 80051de:	d908      	bls.n	80051f2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80051e0:	4b78      	ldr	r3, [pc, #480]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	4975      	ldr	r1, [pc, #468]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0308 	and.w	r3, r3, #8
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d010      	beq.n	8005220 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	695a      	ldr	r2, [r3, #20]
 8005202:	4b70      	ldr	r3, [pc, #448]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 8005204:	69db      	ldr	r3, [r3, #28]
 8005206:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800520a:	429a      	cmp	r2, r3
 800520c:	d908      	bls.n	8005220 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800520e:	4b6d      	ldr	r3, [pc, #436]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 8005210:	69db      	ldr	r3, [r3, #28]
 8005212:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	496a      	ldr	r1, [pc, #424]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 800521c:	4313      	orrs	r3, r2
 800521e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0310 	and.w	r3, r3, #16
 8005228:	2b00      	cmp	r3, #0
 800522a:	d010      	beq.n	800524e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	699a      	ldr	r2, [r3, #24]
 8005230:	4b64      	ldr	r3, [pc, #400]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 8005232:	69db      	ldr	r3, [r3, #28]
 8005234:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005238:	429a      	cmp	r2, r3
 800523a:	d908      	bls.n	800524e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800523c:	4b61      	ldr	r3, [pc, #388]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 800523e:	69db      	ldr	r3, [r3, #28]
 8005240:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	495e      	ldr	r1, [pc, #376]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 800524a:	4313      	orrs	r3, r2
 800524c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0320 	and.w	r3, r3, #32
 8005256:	2b00      	cmp	r3, #0
 8005258:	d010      	beq.n	800527c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	69da      	ldr	r2, [r3, #28]
 800525e:	4b59      	ldr	r3, [pc, #356]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005266:	429a      	cmp	r2, r3
 8005268:	d908      	bls.n	800527c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800526a:	4b56      	ldr	r3, [pc, #344]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	4953      	ldr	r1, [pc, #332]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 8005278:	4313      	orrs	r3, r2
 800527a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0302 	and.w	r3, r3, #2
 8005284:	2b00      	cmp	r3, #0
 8005286:	d010      	beq.n	80052aa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68da      	ldr	r2, [r3, #12]
 800528c:	4b4d      	ldr	r3, [pc, #308]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	f003 030f 	and.w	r3, r3, #15
 8005294:	429a      	cmp	r2, r3
 8005296:	d908      	bls.n	80052aa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005298:	4b4a      	ldr	r3, [pc, #296]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	f023 020f 	bic.w	r2, r3, #15
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	4947      	ldr	r1, [pc, #284]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0301 	and.w	r3, r3, #1
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d055      	beq.n	8005362 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80052b6:	4b43      	ldr	r3, [pc, #268]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	4940      	ldr	r1, [pc, #256]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d107      	bne.n	80052e0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80052d0:	4b3c      	ldr	r3, [pc, #240]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d121      	bne.n	8005320 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e0f6      	b.n	80054ce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	2b03      	cmp	r3, #3
 80052e6:	d107      	bne.n	80052f8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052e8:	4b36      	ldr	r3, [pc, #216]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d115      	bne.n	8005320 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e0ea      	b.n	80054ce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d107      	bne.n	8005310 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005300:	4b30      	ldr	r3, [pc, #192]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005308:	2b00      	cmp	r3, #0
 800530a:	d109      	bne.n	8005320 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e0de      	b.n	80054ce <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005310:	4b2c      	ldr	r3, [pc, #176]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0304 	and.w	r3, r3, #4
 8005318:	2b00      	cmp	r3, #0
 800531a:	d101      	bne.n	8005320 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e0d6      	b.n	80054ce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005320:	4b28      	ldr	r3, [pc, #160]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	f023 0207 	bic.w	r2, r3, #7
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	4925      	ldr	r1, [pc, #148]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 800532e:	4313      	orrs	r3, r2
 8005330:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005332:	f7fc fa55 	bl	80017e0 <HAL_GetTick>
 8005336:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005338:	e00a      	b.n	8005350 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800533a:	f7fc fa51 	bl	80017e0 <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	f241 3288 	movw	r2, #5000	; 0x1388
 8005348:	4293      	cmp	r3, r2
 800534a:	d901      	bls.n	8005350 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e0be      	b.n	80054ce <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005350:	4b1c      	ldr	r3, [pc, #112]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	00db      	lsls	r3, r3, #3
 800535e:	429a      	cmp	r2, r3
 8005360:	d1eb      	bne.n	800533a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0302 	and.w	r3, r3, #2
 800536a:	2b00      	cmp	r3, #0
 800536c:	d010      	beq.n	8005390 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	68da      	ldr	r2, [r3, #12]
 8005372:	4b14      	ldr	r3, [pc, #80]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	f003 030f 	and.w	r3, r3, #15
 800537a:	429a      	cmp	r2, r3
 800537c:	d208      	bcs.n	8005390 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800537e:	4b11      	ldr	r3, [pc, #68]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	f023 020f 	bic.w	r2, r3, #15
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	490e      	ldr	r1, [pc, #56]	; (80053c4 <HAL_RCC_ClockConfig+0x244>)
 800538c:	4313      	orrs	r3, r2
 800538e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005390:	4b0b      	ldr	r3, [pc, #44]	; (80053c0 <HAL_RCC_ClockConfig+0x240>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 030f 	and.w	r3, r3, #15
 8005398:	683a      	ldr	r2, [r7, #0]
 800539a:	429a      	cmp	r2, r3
 800539c:	d214      	bcs.n	80053c8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800539e:	4b08      	ldr	r3, [pc, #32]	; (80053c0 <HAL_RCC_ClockConfig+0x240>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f023 020f 	bic.w	r2, r3, #15
 80053a6:	4906      	ldr	r1, [pc, #24]	; (80053c0 <HAL_RCC_ClockConfig+0x240>)
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ae:	4b04      	ldr	r3, [pc, #16]	; (80053c0 <HAL_RCC_ClockConfig+0x240>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 030f 	and.w	r3, r3, #15
 80053b6:	683a      	ldr	r2, [r7, #0]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d005      	beq.n	80053c8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e086      	b.n	80054ce <HAL_RCC_ClockConfig+0x34e>
 80053c0:	52002000 	.word	0x52002000
 80053c4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0304 	and.w	r3, r3, #4
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d010      	beq.n	80053f6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	691a      	ldr	r2, [r3, #16]
 80053d8:	4b3f      	ldr	r3, [pc, #252]	; (80054d8 <HAL_RCC_ClockConfig+0x358>)
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d208      	bcs.n	80053f6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80053e4:	4b3c      	ldr	r3, [pc, #240]	; (80054d8 <HAL_RCC_ClockConfig+0x358>)
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	4939      	ldr	r1, [pc, #228]	; (80054d8 <HAL_RCC_ClockConfig+0x358>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0308 	and.w	r3, r3, #8
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d010      	beq.n	8005424 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	695a      	ldr	r2, [r3, #20]
 8005406:	4b34      	ldr	r3, [pc, #208]	; (80054d8 <HAL_RCC_ClockConfig+0x358>)
 8005408:	69db      	ldr	r3, [r3, #28]
 800540a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800540e:	429a      	cmp	r2, r3
 8005410:	d208      	bcs.n	8005424 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005412:	4b31      	ldr	r3, [pc, #196]	; (80054d8 <HAL_RCC_ClockConfig+0x358>)
 8005414:	69db      	ldr	r3, [r3, #28]
 8005416:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	492e      	ldr	r1, [pc, #184]	; (80054d8 <HAL_RCC_ClockConfig+0x358>)
 8005420:	4313      	orrs	r3, r2
 8005422:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0310 	and.w	r3, r3, #16
 800542c:	2b00      	cmp	r3, #0
 800542e:	d010      	beq.n	8005452 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	699a      	ldr	r2, [r3, #24]
 8005434:	4b28      	ldr	r3, [pc, #160]	; (80054d8 <HAL_RCC_ClockConfig+0x358>)
 8005436:	69db      	ldr	r3, [r3, #28]
 8005438:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800543c:	429a      	cmp	r2, r3
 800543e:	d208      	bcs.n	8005452 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005440:	4b25      	ldr	r3, [pc, #148]	; (80054d8 <HAL_RCC_ClockConfig+0x358>)
 8005442:	69db      	ldr	r3, [r3, #28]
 8005444:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	4922      	ldr	r1, [pc, #136]	; (80054d8 <HAL_RCC_ClockConfig+0x358>)
 800544e:	4313      	orrs	r3, r2
 8005450:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0320 	and.w	r3, r3, #32
 800545a:	2b00      	cmp	r3, #0
 800545c:	d010      	beq.n	8005480 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	69da      	ldr	r2, [r3, #28]
 8005462:	4b1d      	ldr	r3, [pc, #116]	; (80054d8 <HAL_RCC_ClockConfig+0x358>)
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800546a:	429a      	cmp	r2, r3
 800546c:	d208      	bcs.n	8005480 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800546e:	4b1a      	ldr	r3, [pc, #104]	; (80054d8 <HAL_RCC_ClockConfig+0x358>)
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	69db      	ldr	r3, [r3, #28]
 800547a:	4917      	ldr	r1, [pc, #92]	; (80054d8 <HAL_RCC_ClockConfig+0x358>)
 800547c:	4313      	orrs	r3, r2
 800547e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005480:	f000 f834 	bl	80054ec <HAL_RCC_GetSysClockFreq>
 8005484:	4602      	mov	r2, r0
 8005486:	4b14      	ldr	r3, [pc, #80]	; (80054d8 <HAL_RCC_ClockConfig+0x358>)
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	0a1b      	lsrs	r3, r3, #8
 800548c:	f003 030f 	and.w	r3, r3, #15
 8005490:	4912      	ldr	r1, [pc, #72]	; (80054dc <HAL_RCC_ClockConfig+0x35c>)
 8005492:	5ccb      	ldrb	r3, [r1, r3]
 8005494:	f003 031f 	and.w	r3, r3, #31
 8005498:	fa22 f303 	lsr.w	r3, r2, r3
 800549c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800549e:	4b0e      	ldr	r3, [pc, #56]	; (80054d8 <HAL_RCC_ClockConfig+0x358>)
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	f003 030f 	and.w	r3, r3, #15
 80054a6:	4a0d      	ldr	r2, [pc, #52]	; (80054dc <HAL_RCC_ClockConfig+0x35c>)
 80054a8:	5cd3      	ldrb	r3, [r2, r3]
 80054aa:	f003 031f 	and.w	r3, r3, #31
 80054ae:	693a      	ldr	r2, [r7, #16]
 80054b0:	fa22 f303 	lsr.w	r3, r2, r3
 80054b4:	4a0a      	ldr	r2, [pc, #40]	; (80054e0 <HAL_RCC_ClockConfig+0x360>)
 80054b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80054b8:	4a0a      	ldr	r2, [pc, #40]	; (80054e4 <HAL_RCC_ClockConfig+0x364>)
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80054be:	4b0a      	ldr	r3, [pc, #40]	; (80054e8 <HAL_RCC_ClockConfig+0x368>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7fc f942 	bl	800174c <HAL_InitTick>
 80054c8:	4603      	mov	r3, r0
 80054ca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80054cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3718      	adds	r7, #24
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	58024400 	.word	0x58024400
 80054dc:	08009c38 	.word	0x08009c38
 80054e0:	24000004 	.word	0x24000004
 80054e4:	24000000 	.word	0x24000000
 80054e8:	24000008 	.word	0x24000008

080054ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b089      	sub	sp, #36	; 0x24
 80054f0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054f2:	4bb3      	ldr	r3, [pc, #716]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054fa:	2b18      	cmp	r3, #24
 80054fc:	f200 8155 	bhi.w	80057aa <HAL_RCC_GetSysClockFreq+0x2be>
 8005500:	a201      	add	r2, pc, #4	; (adr r2, 8005508 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005506:	bf00      	nop
 8005508:	0800556d 	.word	0x0800556d
 800550c:	080057ab 	.word	0x080057ab
 8005510:	080057ab 	.word	0x080057ab
 8005514:	080057ab 	.word	0x080057ab
 8005518:	080057ab 	.word	0x080057ab
 800551c:	080057ab 	.word	0x080057ab
 8005520:	080057ab 	.word	0x080057ab
 8005524:	080057ab 	.word	0x080057ab
 8005528:	08005593 	.word	0x08005593
 800552c:	080057ab 	.word	0x080057ab
 8005530:	080057ab 	.word	0x080057ab
 8005534:	080057ab 	.word	0x080057ab
 8005538:	080057ab 	.word	0x080057ab
 800553c:	080057ab 	.word	0x080057ab
 8005540:	080057ab 	.word	0x080057ab
 8005544:	080057ab 	.word	0x080057ab
 8005548:	08005599 	.word	0x08005599
 800554c:	080057ab 	.word	0x080057ab
 8005550:	080057ab 	.word	0x080057ab
 8005554:	080057ab 	.word	0x080057ab
 8005558:	080057ab 	.word	0x080057ab
 800555c:	080057ab 	.word	0x080057ab
 8005560:	080057ab 	.word	0x080057ab
 8005564:	080057ab 	.word	0x080057ab
 8005568:	0800559f 	.word	0x0800559f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800556c:	4b94      	ldr	r3, [pc, #592]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0320 	and.w	r3, r3, #32
 8005574:	2b00      	cmp	r3, #0
 8005576:	d009      	beq.n	800558c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005578:	4b91      	ldr	r3, [pc, #580]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	08db      	lsrs	r3, r3, #3
 800557e:	f003 0303 	and.w	r3, r3, #3
 8005582:	4a90      	ldr	r2, [pc, #576]	; (80057c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005584:	fa22 f303 	lsr.w	r3, r2, r3
 8005588:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800558a:	e111      	b.n	80057b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800558c:	4b8d      	ldr	r3, [pc, #564]	; (80057c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800558e:	61bb      	str	r3, [r7, #24]
    break;
 8005590:	e10e      	b.n	80057b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005592:	4b8d      	ldr	r3, [pc, #564]	; (80057c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005594:	61bb      	str	r3, [r7, #24]
    break;
 8005596:	e10b      	b.n	80057b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005598:	4b8c      	ldr	r3, [pc, #560]	; (80057cc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800559a:	61bb      	str	r3, [r7, #24]
    break;
 800559c:	e108      	b.n	80057b0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800559e:	4b88      	ldr	r3, [pc, #544]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a2:	f003 0303 	and.w	r3, r3, #3
 80055a6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80055a8:	4b85      	ldr	r3, [pc, #532]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ac:	091b      	lsrs	r3, r3, #4
 80055ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055b2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80055b4:	4b82      	ldr	r3, [pc, #520]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b8:	f003 0301 	and.w	r3, r3, #1
 80055bc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80055be:	4b80      	ldr	r3, [pc, #512]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c2:	08db      	lsrs	r3, r3, #3
 80055c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	fb02 f303 	mul.w	r3, r2, r3
 80055ce:	ee07 3a90 	vmov	s15, r3
 80055d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055d6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f000 80e1 	beq.w	80057a4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	f000 8083 	beq.w	80056f0 <HAL_RCC_GetSysClockFreq+0x204>
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	f200 80a1 	bhi.w	8005734 <HAL_RCC_GetSysClockFreq+0x248>
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d003      	beq.n	8005600 <HAL_RCC_GetSysClockFreq+0x114>
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d056      	beq.n	80056ac <HAL_RCC_GetSysClockFreq+0x1c0>
 80055fe:	e099      	b.n	8005734 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005600:	4b6f      	ldr	r3, [pc, #444]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0320 	and.w	r3, r3, #32
 8005608:	2b00      	cmp	r3, #0
 800560a:	d02d      	beq.n	8005668 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800560c:	4b6c      	ldr	r3, [pc, #432]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	08db      	lsrs	r3, r3, #3
 8005612:	f003 0303 	and.w	r3, r3, #3
 8005616:	4a6b      	ldr	r2, [pc, #428]	; (80057c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005618:	fa22 f303 	lsr.w	r3, r2, r3
 800561c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	ee07 3a90 	vmov	s15, r3
 8005624:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	ee07 3a90 	vmov	s15, r3
 800562e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005636:	4b62      	ldr	r3, [pc, #392]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800563a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800563e:	ee07 3a90 	vmov	s15, r3
 8005642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005646:	ed97 6a02 	vldr	s12, [r7, #8]
 800564a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80057d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800564e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005656:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800565a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800565e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005662:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005666:	e087      	b.n	8005778 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	ee07 3a90 	vmov	s15, r3
 800566e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005672:	eddf 6a58 	vldr	s13, [pc, #352]	; 80057d4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800567a:	4b51      	ldr	r3, [pc, #324]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800567c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005682:	ee07 3a90 	vmov	s15, r3
 8005686:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800568a:	ed97 6a02 	vldr	s12, [r7, #8]
 800568e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80057d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005692:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005696:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800569a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800569e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056aa:	e065      	b.n	8005778 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	ee07 3a90 	vmov	s15, r3
 80056b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056b6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80057d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80056ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056be:	4b40      	ldr	r3, [pc, #256]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056c6:	ee07 3a90 	vmov	s15, r3
 80056ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80056d2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80057d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80056d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056ee:	e043      	b.n	8005778 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	ee07 3a90 	vmov	s15, r3
 80056f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056fa:	eddf 6a38 	vldr	s13, [pc, #224]	; 80057dc <HAL_RCC_GetSysClockFreq+0x2f0>
 80056fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005702:	4b2f      	ldr	r3, [pc, #188]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800570a:	ee07 3a90 	vmov	s15, r3
 800570e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005712:	ed97 6a02 	vldr	s12, [r7, #8]
 8005716:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80057d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800571a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800571e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005722:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800572a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800572e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005732:	e021      	b.n	8005778 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	ee07 3a90 	vmov	s15, r3
 800573a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800573e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80057d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005746:	4b1e      	ldr	r3, [pc, #120]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800574e:	ee07 3a90 	vmov	s15, r3
 8005752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005756:	ed97 6a02 	vldr	s12, [r7, #8]
 800575a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80057d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800575e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005762:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005766:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800576a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800576e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005772:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005776:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005778:	4b11      	ldr	r3, [pc, #68]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800577a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800577c:	0a5b      	lsrs	r3, r3, #9
 800577e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005782:	3301      	adds	r3, #1
 8005784:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	ee07 3a90 	vmov	s15, r3
 800578c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005790:	edd7 6a07 	vldr	s13, [r7, #28]
 8005794:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005798:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800579c:	ee17 3a90 	vmov	r3, s15
 80057a0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80057a2:	e005      	b.n	80057b0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80057a4:	2300      	movs	r3, #0
 80057a6:	61bb      	str	r3, [r7, #24]
    break;
 80057a8:	e002      	b.n	80057b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80057aa:	4b07      	ldr	r3, [pc, #28]	; (80057c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80057ac:	61bb      	str	r3, [r7, #24]
    break;
 80057ae:	bf00      	nop
  }

  return sysclockfreq;
 80057b0:	69bb      	ldr	r3, [r7, #24]
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3724      	adds	r7, #36	; 0x24
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop
 80057c0:	58024400 	.word	0x58024400
 80057c4:	03d09000 	.word	0x03d09000
 80057c8:	003d0900 	.word	0x003d0900
 80057cc:	007a1200 	.word	0x007a1200
 80057d0:	46000000 	.word	0x46000000
 80057d4:	4c742400 	.word	0x4c742400
 80057d8:	4a742400 	.word	0x4a742400
 80057dc:	4af42400 	.word	0x4af42400

080057e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80057e6:	f7ff fe81 	bl	80054ec <HAL_RCC_GetSysClockFreq>
 80057ea:	4602      	mov	r2, r0
 80057ec:	4b10      	ldr	r3, [pc, #64]	; (8005830 <HAL_RCC_GetHCLKFreq+0x50>)
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	0a1b      	lsrs	r3, r3, #8
 80057f2:	f003 030f 	and.w	r3, r3, #15
 80057f6:	490f      	ldr	r1, [pc, #60]	; (8005834 <HAL_RCC_GetHCLKFreq+0x54>)
 80057f8:	5ccb      	ldrb	r3, [r1, r3]
 80057fa:	f003 031f 	and.w	r3, r3, #31
 80057fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005802:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005804:	4b0a      	ldr	r3, [pc, #40]	; (8005830 <HAL_RCC_GetHCLKFreq+0x50>)
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	f003 030f 	and.w	r3, r3, #15
 800580c:	4a09      	ldr	r2, [pc, #36]	; (8005834 <HAL_RCC_GetHCLKFreq+0x54>)
 800580e:	5cd3      	ldrb	r3, [r2, r3]
 8005810:	f003 031f 	and.w	r3, r3, #31
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	fa22 f303 	lsr.w	r3, r2, r3
 800581a:	4a07      	ldr	r2, [pc, #28]	; (8005838 <HAL_RCC_GetHCLKFreq+0x58>)
 800581c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800581e:	4a07      	ldr	r2, [pc, #28]	; (800583c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005824:	4b04      	ldr	r3, [pc, #16]	; (8005838 <HAL_RCC_GetHCLKFreq+0x58>)
 8005826:	681b      	ldr	r3, [r3, #0]
}
 8005828:	4618      	mov	r0, r3
 800582a:	3708      	adds	r7, #8
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	58024400 	.word	0x58024400
 8005834:	08009c38 	.word	0x08009c38
 8005838:	24000004 	.word	0x24000004
 800583c:	24000000 	.word	0x24000000

08005840 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005844:	f7ff ffcc 	bl	80057e0 <HAL_RCC_GetHCLKFreq>
 8005848:	4602      	mov	r2, r0
 800584a:	4b06      	ldr	r3, [pc, #24]	; (8005864 <HAL_RCC_GetPCLK1Freq+0x24>)
 800584c:	69db      	ldr	r3, [r3, #28]
 800584e:	091b      	lsrs	r3, r3, #4
 8005850:	f003 0307 	and.w	r3, r3, #7
 8005854:	4904      	ldr	r1, [pc, #16]	; (8005868 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005856:	5ccb      	ldrb	r3, [r1, r3]
 8005858:	f003 031f 	and.w	r3, r3, #31
 800585c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005860:	4618      	mov	r0, r3
 8005862:	bd80      	pop	{r7, pc}
 8005864:	58024400 	.word	0x58024400
 8005868:	08009c38 	.word	0x08009c38

0800586c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005870:	f7ff ffb6 	bl	80057e0 <HAL_RCC_GetHCLKFreq>
 8005874:	4602      	mov	r2, r0
 8005876:	4b06      	ldr	r3, [pc, #24]	; (8005890 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005878:	69db      	ldr	r3, [r3, #28]
 800587a:	0a1b      	lsrs	r3, r3, #8
 800587c:	f003 0307 	and.w	r3, r3, #7
 8005880:	4904      	ldr	r1, [pc, #16]	; (8005894 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005882:	5ccb      	ldrb	r3, [r1, r3]
 8005884:	f003 031f 	and.w	r3, r3, #31
 8005888:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800588c:	4618      	mov	r0, r3
 800588e:	bd80      	pop	{r7, pc}
 8005890:	58024400 	.word	0x58024400
 8005894:	08009c38 	.word	0x08009c38

08005898 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b086      	sub	sp, #24
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80058a0:	2300      	movs	r3, #0
 80058a2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80058a4:	2300      	movs	r3, #0
 80058a6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d03f      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80058bc:	d02a      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80058be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80058c2:	d824      	bhi.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80058c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058c8:	d018      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80058ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058ce:	d81e      	bhi.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d003      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80058d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058d8:	d007      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x52>
 80058da:	e018      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058dc:	4ba3      	ldr	r3, [pc, #652]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80058de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e0:	4aa2      	ldr	r2, [pc, #648]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80058e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80058e8:	e015      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	3304      	adds	r3, #4
 80058ee:	2102      	movs	r1, #2
 80058f0:	4618      	mov	r0, r3
 80058f2:	f001 f9d5 	bl	8006ca0 <RCCEx_PLL2_Config>
 80058f6:	4603      	mov	r3, r0
 80058f8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80058fa:	e00c      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	3324      	adds	r3, #36	; 0x24
 8005900:	2102      	movs	r1, #2
 8005902:	4618      	mov	r0, r3
 8005904:	f001 fa7e 	bl	8006e04 <RCCEx_PLL3_Config>
 8005908:	4603      	mov	r3, r0
 800590a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800590c:	e003      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	75fb      	strb	r3, [r7, #23]
      break;
 8005912:	e000      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005914:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005916:	7dfb      	ldrb	r3, [r7, #23]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d109      	bne.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800591c:	4b93      	ldr	r3, [pc, #588]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800591e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005920:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005928:	4990      	ldr	r1, [pc, #576]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800592a:	4313      	orrs	r3, r2
 800592c:	650b      	str	r3, [r1, #80]	; 0x50
 800592e:	e001      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005930:	7dfb      	ldrb	r3, [r7, #23]
 8005932:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800593c:	2b00      	cmp	r3, #0
 800593e:	d03d      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005944:	2b04      	cmp	r3, #4
 8005946:	d826      	bhi.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005948:	a201      	add	r2, pc, #4	; (adr r2, 8005950 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800594a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800594e:	bf00      	nop
 8005950:	08005965 	.word	0x08005965
 8005954:	08005973 	.word	0x08005973
 8005958:	08005985 	.word	0x08005985
 800595c:	0800599d 	.word	0x0800599d
 8005960:	0800599d 	.word	0x0800599d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005964:	4b81      	ldr	r3, [pc, #516]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005968:	4a80      	ldr	r2, [pc, #512]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800596a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800596e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005970:	e015      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	3304      	adds	r3, #4
 8005976:	2100      	movs	r1, #0
 8005978:	4618      	mov	r0, r3
 800597a:	f001 f991 	bl	8006ca0 <RCCEx_PLL2_Config>
 800597e:	4603      	mov	r3, r0
 8005980:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005982:	e00c      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	3324      	adds	r3, #36	; 0x24
 8005988:	2100      	movs	r1, #0
 800598a:	4618      	mov	r0, r3
 800598c:	f001 fa3a 	bl	8006e04 <RCCEx_PLL3_Config>
 8005990:	4603      	mov	r3, r0
 8005992:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005994:	e003      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	75fb      	strb	r3, [r7, #23]
      break;
 800599a:	e000      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800599c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800599e:	7dfb      	ldrb	r3, [r7, #23]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d109      	bne.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80059a4:	4b71      	ldr	r3, [pc, #452]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80059a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059a8:	f023 0207 	bic.w	r2, r3, #7
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059b0:	496e      	ldr	r1, [pc, #440]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	650b      	str	r3, [r1, #80]	; 0x50
 80059b6:	e001      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059b8:	7dfb      	ldrb	r3, [r7, #23]
 80059ba:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d042      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059d0:	d02b      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x192>
 80059d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059d6:	d825      	bhi.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80059d8:	2bc0      	cmp	r3, #192	; 0xc0
 80059da:	d028      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x196>
 80059dc:	2bc0      	cmp	r3, #192	; 0xc0
 80059de:	d821      	bhi.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80059e0:	2b80      	cmp	r3, #128	; 0x80
 80059e2:	d016      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80059e4:	2b80      	cmp	r3, #128	; 0x80
 80059e6:	d81d      	bhi.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d002      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80059ec:	2b40      	cmp	r3, #64	; 0x40
 80059ee:	d007      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80059f0:	e018      	b.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059f2:	4b5e      	ldr	r3, [pc, #376]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80059f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f6:	4a5d      	ldr	r2, [pc, #372]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80059f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80059fe:	e017      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	3304      	adds	r3, #4
 8005a04:	2100      	movs	r1, #0
 8005a06:	4618      	mov	r0, r3
 8005a08:	f001 f94a 	bl	8006ca0 <RCCEx_PLL2_Config>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005a10:	e00e      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	3324      	adds	r3, #36	; 0x24
 8005a16:	2100      	movs	r1, #0
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f001 f9f3 	bl	8006e04 <RCCEx_PLL3_Config>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005a22:	e005      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	75fb      	strb	r3, [r7, #23]
      break;
 8005a28:	e002      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005a2a:	bf00      	nop
 8005a2c:	e000      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005a2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a30:	7dfb      	ldrb	r3, [r7, #23]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d109      	bne.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005a36:	4b4d      	ldr	r3, [pc, #308]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a3a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a42:	494a      	ldr	r1, [pc, #296]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005a44:	4313      	orrs	r3, r2
 8005a46:	650b      	str	r3, [r1, #80]	; 0x50
 8005a48:	e001      	b.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a4a:	7dfb      	ldrb	r3, [r7, #23]
 8005a4c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d049      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005a60:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a64:	d030      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005a66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a6a:	d82a      	bhi.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005a6c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005a70:	d02c      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005a72:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005a76:	d824      	bhi.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005a78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a7c:	d018      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005a7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a82:	d81e      	bhi.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d003      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005a88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a8c:	d007      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005a8e:	e018      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a90:	4b36      	ldr	r3, [pc, #216]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a94:	4a35      	ldr	r2, [pc, #212]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005a96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a9c:	e017      	b.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	3304      	adds	r3, #4
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f001 f8fb 	bl	8006ca0 <RCCEx_PLL2_Config>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005aae:	e00e      	b.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	3324      	adds	r3, #36	; 0x24
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f001 f9a4 	bl	8006e04 <RCCEx_PLL3_Config>
 8005abc:	4603      	mov	r3, r0
 8005abe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005ac0:	e005      	b.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	75fb      	strb	r3, [r7, #23]
      break;
 8005ac6:	e002      	b.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005ac8:	bf00      	nop
 8005aca:	e000      	b.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005acc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ace:	7dfb      	ldrb	r3, [r7, #23]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d10a      	bne.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005ad4:	4b25      	ldr	r3, [pc, #148]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ad8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005ae2:	4922      	ldr	r1, [pc, #136]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	658b      	str	r3, [r1, #88]	; 0x58
 8005ae8:	e001      	b.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aea:	7dfb      	ldrb	r3, [r7, #23]
 8005aec:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d04b      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005b00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b04:	d030      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005b06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b0a:	d82a      	bhi.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005b0c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b10:	d02e      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8005b12:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b16:	d824      	bhi.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005b18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b1c:	d018      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005b1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b22:	d81e      	bhi.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d003      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005b28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b2c:	d007      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005b2e:	e018      	b.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b30:	4b0e      	ldr	r3, [pc, #56]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b34:	4a0d      	ldr	r2, [pc, #52]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b3a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b3c:	e019      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	3304      	adds	r3, #4
 8005b42:	2100      	movs	r1, #0
 8005b44:	4618      	mov	r0, r3
 8005b46:	f001 f8ab 	bl	8006ca0 <RCCEx_PLL2_Config>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005b4e:	e010      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	3324      	adds	r3, #36	; 0x24
 8005b54:	2100      	movs	r1, #0
 8005b56:	4618      	mov	r0, r3
 8005b58:	f001 f954 	bl	8006e04 <RCCEx_PLL3_Config>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b60:	e007      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	75fb      	strb	r3, [r7, #23]
      break;
 8005b66:	e004      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8005b68:	bf00      	nop
 8005b6a:	e002      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005b6c:	58024400 	.word	0x58024400
      break;
 8005b70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b72:	7dfb      	ldrb	r3, [r7, #23]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d10a      	bne.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005b78:	4b99      	ldr	r3, [pc, #612]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b7c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005b86:	4996      	ldr	r1, [pc, #600]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	658b      	str	r3, [r1, #88]	; 0x58
 8005b8c:	e001      	b.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b8e:	7dfb      	ldrb	r3, [r7, #23]
 8005b90:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d032      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ba2:	2b30      	cmp	r3, #48	; 0x30
 8005ba4:	d01c      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8005ba6:	2b30      	cmp	r3, #48	; 0x30
 8005ba8:	d817      	bhi.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005baa:	2b20      	cmp	r3, #32
 8005bac:	d00c      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8005bae:	2b20      	cmp	r3, #32
 8005bb0:	d813      	bhi.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d016      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8005bb6:	2b10      	cmp	r3, #16
 8005bb8:	d10f      	bne.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bba:	4b89      	ldr	r3, [pc, #548]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bbe:	4a88      	ldr	r2, [pc, #544]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bc4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005bc6:	e00e      	b.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	3304      	adds	r3, #4
 8005bcc:	2102      	movs	r1, #2
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f001 f866 	bl	8006ca0 <RCCEx_PLL2_Config>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005bd8:	e005      	b.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	75fb      	strb	r3, [r7, #23]
      break;
 8005bde:	e002      	b.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005be0:	bf00      	nop
 8005be2:	e000      	b.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005be4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005be6:	7dfb      	ldrb	r3, [r7, #23]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d109      	bne.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005bec:	4b7c      	ldr	r3, [pc, #496]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bf0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bf8:	4979      	ldr	r1, [pc, #484]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005bfe:	e001      	b.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c00:	7dfb      	ldrb	r3, [r7, #23]
 8005c02:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d047      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c18:	d030      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005c1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c1e:	d82a      	bhi.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005c20:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c24:	d02c      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005c26:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c2a:	d824      	bhi.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005c2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c30:	d018      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8005c32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c36:	d81e      	bhi.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d003      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8005c3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c40:	d007      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8005c42:	e018      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c44:	4b66      	ldr	r3, [pc, #408]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c48:	4a65      	ldr	r2, [pc, #404]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005c4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005c50:	e017      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	3304      	adds	r3, #4
 8005c56:	2100      	movs	r1, #0
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f001 f821 	bl	8006ca0 <RCCEx_PLL2_Config>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005c62:	e00e      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	3324      	adds	r3, #36	; 0x24
 8005c68:	2100      	movs	r1, #0
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f001 f8ca 	bl	8006e04 <RCCEx_PLL3_Config>
 8005c70:	4603      	mov	r3, r0
 8005c72:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005c74:	e005      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	75fb      	strb	r3, [r7, #23]
      break;
 8005c7a:	e002      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005c7c:	bf00      	nop
 8005c7e:	e000      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005c80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c82:	7dfb      	ldrb	r3, [r7, #23]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d109      	bne.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005c88:	4b55      	ldr	r3, [pc, #340]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c8c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c94:	4952      	ldr	r1, [pc, #328]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	650b      	str	r3, [r1, #80]	; 0x50
 8005c9a:	e001      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c9c:	7dfb      	ldrb	r3, [r7, #23]
 8005c9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d049      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cb4:	d02e      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005cb6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cba:	d828      	bhi.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005cbc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005cc0:	d02a      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8005cc2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005cc6:	d822      	bhi.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005cc8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ccc:	d026      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x484>
 8005cce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005cd2:	d81c      	bhi.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005cd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cd8:	d010      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x464>
 8005cda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cde:	d816      	bhi.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d01d      	beq.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ce8:	d111      	bne.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	3304      	adds	r3, #4
 8005cee:	2101      	movs	r1, #1
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f000 ffd5 	bl	8006ca0 <RCCEx_PLL2_Config>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005cfa:	e012      	b.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	3324      	adds	r3, #36	; 0x24
 8005d00:	2101      	movs	r1, #1
 8005d02:	4618      	mov	r0, r3
 8005d04:	f001 f87e 	bl	8006e04 <RCCEx_PLL3_Config>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005d0c:	e009      	b.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	75fb      	strb	r3, [r7, #23]
      break;
 8005d12:	e006      	b.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005d14:	bf00      	nop
 8005d16:	e004      	b.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005d18:	bf00      	nop
 8005d1a:	e002      	b.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005d1c:	bf00      	nop
 8005d1e:	e000      	b.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005d20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d22:	7dfb      	ldrb	r3, [r7, #23]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d109      	bne.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005d28:	4b2d      	ldr	r3, [pc, #180]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d2c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d34:	492a      	ldr	r1, [pc, #168]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005d36:	4313      	orrs	r3, r2
 8005d38:	650b      	str	r3, [r1, #80]	; 0x50
 8005d3a:	e001      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d3c:	7dfb      	ldrb	r3, [r7, #23]
 8005d3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d04d      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005d52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d56:	d02e      	beq.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8005d58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d5c:	d828      	bhi.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d62:	d02a      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x522>
 8005d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d68:	d822      	bhi.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005d6a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d6e:	d026      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x526>
 8005d70:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d74:	d81c      	bhi.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005d76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d7a:	d010      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005d7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d80:	d816      	bhi.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d01d      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8005d86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d8a:	d111      	bne.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	3304      	adds	r3, #4
 8005d90:	2101      	movs	r1, #1
 8005d92:	4618      	mov	r0, r3
 8005d94:	f000 ff84 	bl	8006ca0 <RCCEx_PLL2_Config>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005d9c:	e012      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	3324      	adds	r3, #36	; 0x24
 8005da2:	2101      	movs	r1, #1
 8005da4:	4618      	mov	r0, r3
 8005da6:	f001 f82d 	bl	8006e04 <RCCEx_PLL3_Config>
 8005daa:	4603      	mov	r3, r0
 8005dac:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005dae:	e009      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	75fb      	strb	r3, [r7, #23]
      break;
 8005db4:	e006      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005db6:	bf00      	nop
 8005db8:	e004      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005dba:	bf00      	nop
 8005dbc:	e002      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005dbe:	bf00      	nop
 8005dc0:	e000      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005dc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dc4:	7dfb      	ldrb	r3, [r7, #23]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10c      	bne.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005dca:	4b05      	ldr	r3, [pc, #20]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dce:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005dd8:	4901      	ldr	r1, [pc, #4]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	658b      	str	r3, [r1, #88]	; 0x58
 8005dde:	e003      	b.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005de0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005de4:	7dfb      	ldrb	r3, [r7, #23]
 8005de6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d02f      	beq.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005df8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dfc:	d00e      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x584>
 8005dfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e02:	d814      	bhi.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d015      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8005e08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e0c:	d10f      	bne.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e0e:	4baf      	ldr	r3, [pc, #700]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e12:	4aae      	ldr	r2, [pc, #696]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005e14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e18:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005e1a:	e00c      	b.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	3304      	adds	r3, #4
 8005e20:	2101      	movs	r1, #1
 8005e22:	4618      	mov	r0, r3
 8005e24:	f000 ff3c 	bl	8006ca0 <RCCEx_PLL2_Config>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005e2c:	e003      	b.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	75fb      	strb	r3, [r7, #23]
      break;
 8005e32:	e000      	b.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8005e34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e36:	7dfb      	ldrb	r3, [r7, #23]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d109      	bne.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005e3c:	4ba3      	ldr	r3, [pc, #652]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e40:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e48:	49a0      	ldr	r1, [pc, #640]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	650b      	str	r3, [r1, #80]	; 0x50
 8005e4e:	e001      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e50:	7dfb      	ldrb	r3, [r7, #23]
 8005e52:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d032      	beq.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e64:	2b03      	cmp	r3, #3
 8005e66:	d81b      	bhi.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005e68:	a201      	add	r2, pc, #4	; (adr r2, 8005e70 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8005e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e6e:	bf00      	nop
 8005e70:	08005ea7 	.word	0x08005ea7
 8005e74:	08005e81 	.word	0x08005e81
 8005e78:	08005e8f 	.word	0x08005e8f
 8005e7c:	08005ea7 	.word	0x08005ea7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e80:	4b92      	ldr	r3, [pc, #584]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e84:	4a91      	ldr	r2, [pc, #580]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005e86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005e8c:	e00c      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	3304      	adds	r3, #4
 8005e92:	2102      	movs	r1, #2
 8005e94:	4618      	mov	r0, r3
 8005e96:	f000 ff03 	bl	8006ca0 <RCCEx_PLL2_Config>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005e9e:	e003      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	75fb      	strb	r3, [r7, #23]
      break;
 8005ea4:	e000      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005ea6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ea8:	7dfb      	ldrb	r3, [r7, #23]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d109      	bne.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005eae:	4b87      	ldr	r3, [pc, #540]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eb2:	f023 0203 	bic.w	r2, r3, #3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eba:	4984      	ldr	r1, [pc, #528]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005ec0:	e001      	b.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ec2:	7dfb      	ldrb	r3, [r7, #23]
 8005ec4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	f000 8086 	beq.w	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ed4:	4b7e      	ldr	r3, [pc, #504]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a7d      	ldr	r2, [pc, #500]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005eda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ede:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ee0:	f7fb fc7e 	bl	80017e0 <HAL_GetTick>
 8005ee4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ee6:	e009      	b.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ee8:	f7fb fc7a 	bl	80017e0 <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	2b64      	cmp	r3, #100	; 0x64
 8005ef4:	d902      	bls.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	75fb      	strb	r3, [r7, #23]
        break;
 8005efa:	e005      	b.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005efc:	4b74      	ldr	r3, [pc, #464]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d0ef      	beq.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005f08:	7dfb      	ldrb	r3, [r7, #23]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d166      	bne.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005f0e:	4b6f      	ldr	r3, [pc, #444]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f10:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005f18:	4053      	eors	r3, r2
 8005f1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d013      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f22:	4b6a      	ldr	r3, [pc, #424]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f2a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f2c:	4b67      	ldr	r3, [pc, #412]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f30:	4a66      	ldr	r2, [pc, #408]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f36:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f38:	4b64      	ldr	r3, [pc, #400]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f3c:	4a63      	ldr	r2, [pc, #396]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f42:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005f44:	4a61      	ldr	r2, [pc, #388]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005f50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f54:	d115      	bne.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f56:	f7fb fc43 	bl	80017e0 <HAL_GetTick>
 8005f5a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f5c:	e00b      	b.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f5e:	f7fb fc3f 	bl	80017e0 <HAL_GetTick>
 8005f62:	4602      	mov	r2, r0
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d902      	bls.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005f70:	2303      	movs	r3, #3
 8005f72:	75fb      	strb	r3, [r7, #23]
            break;
 8005f74:	e005      	b.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f76:	4b55      	ldr	r3, [pc, #340]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f7a:	f003 0302 	and.w	r3, r3, #2
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d0ed      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8005f82:	7dfb      	ldrb	r3, [r7, #23]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d126      	bne.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f96:	d10d      	bne.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005f98:	4b4c      	ldr	r3, [pc, #304]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005fa6:	0919      	lsrs	r1, r3, #4
 8005fa8:	4b4a      	ldr	r3, [pc, #296]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8005faa:	400b      	ands	r3, r1
 8005fac:	4947      	ldr	r1, [pc, #284]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	610b      	str	r3, [r1, #16]
 8005fb2:	e005      	b.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005fb4:	4b45      	ldr	r3, [pc, #276]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	4a44      	ldr	r2, [pc, #272]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005fba:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005fbe:	6113      	str	r3, [r2, #16]
 8005fc0:	4b42      	ldr	r3, [pc, #264]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005fc2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005fca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fce:	493f      	ldr	r1, [pc, #252]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	670b      	str	r3, [r1, #112]	; 0x70
 8005fd4:	e004      	b.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005fd6:	7dfb      	ldrb	r3, [r7, #23]
 8005fd8:	75bb      	strb	r3, [r7, #22]
 8005fda:	e001      	b.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fdc:	7dfb      	ldrb	r3, [r7, #23]
 8005fde:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0301 	and.w	r3, r3, #1
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f000 8085 	beq.w	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ff2:	2b28      	cmp	r3, #40	; 0x28
 8005ff4:	d866      	bhi.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005ff6:	a201      	add	r2, pc, #4	; (adr r2, 8005ffc <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ffc:	080060d9 	.word	0x080060d9
 8006000:	080060c5 	.word	0x080060c5
 8006004:	080060c5 	.word	0x080060c5
 8006008:	080060c5 	.word	0x080060c5
 800600c:	080060c5 	.word	0x080060c5
 8006010:	080060c5 	.word	0x080060c5
 8006014:	080060c5 	.word	0x080060c5
 8006018:	080060c5 	.word	0x080060c5
 800601c:	080060a1 	.word	0x080060a1
 8006020:	080060c5 	.word	0x080060c5
 8006024:	080060c5 	.word	0x080060c5
 8006028:	080060c5 	.word	0x080060c5
 800602c:	080060c5 	.word	0x080060c5
 8006030:	080060c5 	.word	0x080060c5
 8006034:	080060c5 	.word	0x080060c5
 8006038:	080060c5 	.word	0x080060c5
 800603c:	080060b3 	.word	0x080060b3
 8006040:	080060c5 	.word	0x080060c5
 8006044:	080060c5 	.word	0x080060c5
 8006048:	080060c5 	.word	0x080060c5
 800604c:	080060c5 	.word	0x080060c5
 8006050:	080060c5 	.word	0x080060c5
 8006054:	080060c5 	.word	0x080060c5
 8006058:	080060c5 	.word	0x080060c5
 800605c:	080060d9 	.word	0x080060d9
 8006060:	080060c5 	.word	0x080060c5
 8006064:	080060c5 	.word	0x080060c5
 8006068:	080060c5 	.word	0x080060c5
 800606c:	080060c5 	.word	0x080060c5
 8006070:	080060c5 	.word	0x080060c5
 8006074:	080060c5 	.word	0x080060c5
 8006078:	080060c5 	.word	0x080060c5
 800607c:	080060d9 	.word	0x080060d9
 8006080:	080060c5 	.word	0x080060c5
 8006084:	080060c5 	.word	0x080060c5
 8006088:	080060c5 	.word	0x080060c5
 800608c:	080060c5 	.word	0x080060c5
 8006090:	080060c5 	.word	0x080060c5
 8006094:	080060c5 	.word	0x080060c5
 8006098:	080060c5 	.word	0x080060c5
 800609c:	080060d9 	.word	0x080060d9
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	3304      	adds	r3, #4
 80060a4:	2101      	movs	r1, #1
 80060a6:	4618      	mov	r0, r3
 80060a8:	f000 fdfa 	bl	8006ca0 <RCCEx_PLL2_Config>
 80060ac:	4603      	mov	r3, r0
 80060ae:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80060b0:	e013      	b.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	3324      	adds	r3, #36	; 0x24
 80060b6:	2101      	movs	r1, #1
 80060b8:	4618      	mov	r0, r3
 80060ba:	f000 fea3 	bl	8006e04 <RCCEx_PLL3_Config>
 80060be:	4603      	mov	r3, r0
 80060c0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80060c2:	e00a      	b.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	75fb      	strb	r3, [r7, #23]
      break;
 80060c8:	e007      	b.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x842>
 80060ca:	bf00      	nop
 80060cc:	58024400 	.word	0x58024400
 80060d0:	58024800 	.word	0x58024800
 80060d4:	00ffffcf 	.word	0x00ffffcf
      break;
 80060d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060da:	7dfb      	ldrb	r3, [r7, #23]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d109      	bne.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80060e0:	4b96      	ldr	r3, [pc, #600]	; (800633c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80060e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060e4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060ec:	4993      	ldr	r1, [pc, #588]	; (800633c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80060ee:	4313      	orrs	r3, r2
 80060f0:	654b      	str	r3, [r1, #84]	; 0x54
 80060f2:	e001      	b.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060f4:	7dfb      	ldrb	r3, [r7, #23]
 80060f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0302 	and.w	r3, r3, #2
 8006100:	2b00      	cmp	r3, #0
 8006102:	d038      	beq.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006108:	2b05      	cmp	r3, #5
 800610a:	d821      	bhi.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800610c:	a201      	add	r2, pc, #4	; (adr r2, 8006114 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800610e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006112:	bf00      	nop
 8006114:	08006157 	.word	0x08006157
 8006118:	0800612d 	.word	0x0800612d
 800611c:	0800613f 	.word	0x0800613f
 8006120:	08006157 	.word	0x08006157
 8006124:	08006157 	.word	0x08006157
 8006128:	08006157 	.word	0x08006157
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	3304      	adds	r3, #4
 8006130:	2101      	movs	r1, #1
 8006132:	4618      	mov	r0, r3
 8006134:	f000 fdb4 	bl	8006ca0 <RCCEx_PLL2_Config>
 8006138:	4603      	mov	r3, r0
 800613a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800613c:	e00c      	b.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	3324      	adds	r3, #36	; 0x24
 8006142:	2101      	movs	r1, #1
 8006144:	4618      	mov	r0, r3
 8006146:	f000 fe5d 	bl	8006e04 <RCCEx_PLL3_Config>
 800614a:	4603      	mov	r3, r0
 800614c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800614e:	e003      	b.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	75fb      	strb	r3, [r7, #23]
      break;
 8006154:	e000      	b.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8006156:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006158:	7dfb      	ldrb	r3, [r7, #23]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d109      	bne.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800615e:	4b77      	ldr	r3, [pc, #476]	; (800633c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006162:	f023 0207 	bic.w	r2, r3, #7
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800616a:	4974      	ldr	r1, [pc, #464]	; (800633c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800616c:	4313      	orrs	r3, r2
 800616e:	654b      	str	r3, [r1, #84]	; 0x54
 8006170:	e001      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006172:	7dfb      	ldrb	r3, [r7, #23]
 8006174:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0304 	and.w	r3, r3, #4
 800617e:	2b00      	cmp	r3, #0
 8006180:	d03a      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006188:	2b05      	cmp	r3, #5
 800618a:	d821      	bhi.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800618c:	a201      	add	r2, pc, #4	; (adr r2, 8006194 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800618e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006192:	bf00      	nop
 8006194:	080061d7 	.word	0x080061d7
 8006198:	080061ad 	.word	0x080061ad
 800619c:	080061bf 	.word	0x080061bf
 80061a0:	080061d7 	.word	0x080061d7
 80061a4:	080061d7 	.word	0x080061d7
 80061a8:	080061d7 	.word	0x080061d7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	3304      	adds	r3, #4
 80061b0:	2101      	movs	r1, #1
 80061b2:	4618      	mov	r0, r3
 80061b4:	f000 fd74 	bl	8006ca0 <RCCEx_PLL2_Config>
 80061b8:	4603      	mov	r3, r0
 80061ba:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80061bc:	e00c      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	3324      	adds	r3, #36	; 0x24
 80061c2:	2101      	movs	r1, #1
 80061c4:	4618      	mov	r0, r3
 80061c6:	f000 fe1d 	bl	8006e04 <RCCEx_PLL3_Config>
 80061ca:	4603      	mov	r3, r0
 80061cc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80061ce:	e003      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	75fb      	strb	r3, [r7, #23]
      break;
 80061d4:	e000      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80061d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061d8:	7dfb      	ldrb	r3, [r7, #23]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d10a      	bne.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80061de:	4b57      	ldr	r3, [pc, #348]	; (800633c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80061e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061e2:	f023 0207 	bic.w	r2, r3, #7
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ec:	4953      	ldr	r1, [pc, #332]	; (800633c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80061ee:	4313      	orrs	r3, r2
 80061f0:	658b      	str	r3, [r1, #88]	; 0x58
 80061f2:	e001      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061f4:	7dfb      	ldrb	r3, [r7, #23]
 80061f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 0320 	and.w	r3, r3, #32
 8006200:	2b00      	cmp	r3, #0
 8006202:	d04b      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800620a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800620e:	d02e      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006210:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006214:	d828      	bhi.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800621a:	d02a      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800621c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006220:	d822      	bhi.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006222:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006226:	d026      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006228:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800622c:	d81c      	bhi.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800622e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006232:	d010      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8006234:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006238:	d816      	bhi.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800623a:	2b00      	cmp	r3, #0
 800623c:	d01d      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800623e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006242:	d111      	bne.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	3304      	adds	r3, #4
 8006248:	2100      	movs	r1, #0
 800624a:	4618      	mov	r0, r3
 800624c:	f000 fd28 	bl	8006ca0 <RCCEx_PLL2_Config>
 8006250:	4603      	mov	r3, r0
 8006252:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006254:	e012      	b.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	3324      	adds	r3, #36	; 0x24
 800625a:	2102      	movs	r1, #2
 800625c:	4618      	mov	r0, r3
 800625e:	f000 fdd1 	bl	8006e04 <RCCEx_PLL3_Config>
 8006262:	4603      	mov	r3, r0
 8006264:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006266:	e009      	b.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	75fb      	strb	r3, [r7, #23]
      break;
 800626c:	e006      	b.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800626e:	bf00      	nop
 8006270:	e004      	b.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006272:	bf00      	nop
 8006274:	e002      	b.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006276:	bf00      	nop
 8006278:	e000      	b.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800627a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800627c:	7dfb      	ldrb	r3, [r7, #23]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10a      	bne.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006282:	4b2e      	ldr	r3, [pc, #184]	; (800633c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006286:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006290:	492a      	ldr	r1, [pc, #168]	; (800633c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006292:	4313      	orrs	r3, r2
 8006294:	654b      	str	r3, [r1, #84]	; 0x54
 8006296:	e001      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006298:	7dfb      	ldrb	r3, [r7, #23]
 800629a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d04d      	beq.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062ae:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80062b2:	d02e      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80062b4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80062b8:	d828      	bhi.n	800630c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80062ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062be:	d02a      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80062c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062c4:	d822      	bhi.n	800630c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80062c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062ca:	d026      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80062cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062d0:	d81c      	bhi.n	800630c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80062d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062d6:	d010      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80062d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062dc:	d816      	bhi.n	800630c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d01d      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80062e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062e6:	d111      	bne.n	800630c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	3304      	adds	r3, #4
 80062ec:	2100      	movs	r1, #0
 80062ee:	4618      	mov	r0, r3
 80062f0:	f000 fcd6 	bl	8006ca0 <RCCEx_PLL2_Config>
 80062f4:	4603      	mov	r3, r0
 80062f6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80062f8:	e012      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	3324      	adds	r3, #36	; 0x24
 80062fe:	2102      	movs	r1, #2
 8006300:	4618      	mov	r0, r3
 8006302:	f000 fd7f 	bl	8006e04 <RCCEx_PLL3_Config>
 8006306:	4603      	mov	r3, r0
 8006308:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800630a:	e009      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	75fb      	strb	r3, [r7, #23]
      break;
 8006310:	e006      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006312:	bf00      	nop
 8006314:	e004      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006316:	bf00      	nop
 8006318:	e002      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800631a:	bf00      	nop
 800631c:	e000      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800631e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006320:	7dfb      	ldrb	r3, [r7, #23]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d10c      	bne.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006326:	4b05      	ldr	r3, [pc, #20]	; (800633c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800632a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006334:	4901      	ldr	r1, [pc, #4]	; (800633c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006336:	4313      	orrs	r3, r2
 8006338:	658b      	str	r3, [r1, #88]	; 0x58
 800633a:	e003      	b.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800633c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006340:	7dfb      	ldrb	r3, [r7, #23]
 8006342:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800634c:	2b00      	cmp	r3, #0
 800634e:	d04b      	beq.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006356:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800635a:	d02e      	beq.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800635c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006360:	d828      	bhi.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006362:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006366:	d02a      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006368:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800636c:	d822      	bhi.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800636e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006372:	d026      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8006374:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006378:	d81c      	bhi.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800637a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800637e:	d010      	beq.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006380:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006384:	d816      	bhi.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006386:	2b00      	cmp	r3, #0
 8006388:	d01d      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800638a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800638e:	d111      	bne.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	3304      	adds	r3, #4
 8006394:	2100      	movs	r1, #0
 8006396:	4618      	mov	r0, r3
 8006398:	f000 fc82 	bl	8006ca0 <RCCEx_PLL2_Config>
 800639c:	4603      	mov	r3, r0
 800639e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80063a0:	e012      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	3324      	adds	r3, #36	; 0x24
 80063a6:	2102      	movs	r1, #2
 80063a8:	4618      	mov	r0, r3
 80063aa:	f000 fd2b 	bl	8006e04 <RCCEx_PLL3_Config>
 80063ae:	4603      	mov	r3, r0
 80063b0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80063b2:	e009      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	75fb      	strb	r3, [r7, #23]
      break;
 80063b8:	e006      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80063ba:	bf00      	nop
 80063bc:	e004      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80063be:	bf00      	nop
 80063c0:	e002      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80063c2:	bf00      	nop
 80063c4:	e000      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80063c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063c8:	7dfb      	ldrb	r3, [r7, #23]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10a      	bne.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80063ce:	4b9d      	ldr	r3, [pc, #628]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80063d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80063dc:	4999      	ldr	r1, [pc, #612]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80063de:	4313      	orrs	r3, r2
 80063e0:	658b      	str	r3, [r1, #88]	; 0x58
 80063e2:	e001      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063e4:	7dfb      	ldrb	r3, [r7, #23]
 80063e6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 0308 	and.w	r3, r3, #8
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d01a      	beq.n	800642a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063fe:	d10a      	bne.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	3324      	adds	r3, #36	; 0x24
 8006404:	2102      	movs	r1, #2
 8006406:	4618      	mov	r0, r3
 8006408:	f000 fcfc 	bl	8006e04 <RCCEx_PLL3_Config>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d001      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006416:	4b8b      	ldr	r3, [pc, #556]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800641a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006424:	4987      	ldr	r1, [pc, #540]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006426:	4313      	orrs	r3, r2
 8006428:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 0310 	and.w	r3, r3, #16
 8006432:	2b00      	cmp	r3, #0
 8006434:	d01a      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800643c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006440:	d10a      	bne.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	3324      	adds	r3, #36	; 0x24
 8006446:	2102      	movs	r1, #2
 8006448:	4618      	mov	r0, r3
 800644a:	f000 fcdb 	bl	8006e04 <RCCEx_PLL3_Config>
 800644e:	4603      	mov	r3, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d001      	beq.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006458:	4b7a      	ldr	r3, [pc, #488]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800645a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800645c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006466:	4977      	ldr	r1, [pc, #476]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006468:	4313      	orrs	r3, r2
 800646a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006474:	2b00      	cmp	r3, #0
 8006476:	d034      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800647e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006482:	d01d      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8006484:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006488:	d817      	bhi.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800648a:	2b00      	cmp	r3, #0
 800648c:	d003      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800648e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006492:	d009      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8006494:	e011      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	3304      	adds	r3, #4
 800649a:	2100      	movs	r1, #0
 800649c:	4618      	mov	r0, r3
 800649e:	f000 fbff 	bl	8006ca0 <RCCEx_PLL2_Config>
 80064a2:	4603      	mov	r3, r0
 80064a4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80064a6:	e00c      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	3324      	adds	r3, #36	; 0x24
 80064ac:	2102      	movs	r1, #2
 80064ae:	4618      	mov	r0, r3
 80064b0:	f000 fca8 	bl	8006e04 <RCCEx_PLL3_Config>
 80064b4:	4603      	mov	r3, r0
 80064b6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80064b8:	e003      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	75fb      	strb	r3, [r7, #23]
      break;
 80064be:	e000      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80064c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064c2:	7dfb      	ldrb	r3, [r7, #23]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d10a      	bne.n	80064de <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80064c8:	4b5e      	ldr	r3, [pc, #376]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80064ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80064d6:	495b      	ldr	r1, [pc, #364]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	658b      	str	r3, [r1, #88]	; 0x58
 80064dc:	e001      	b.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064de:	7dfb      	ldrb	r3, [r7, #23]
 80064e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d033      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80064f8:	d01c      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80064fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80064fe:	d816      	bhi.n	800652e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8006500:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006504:	d003      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8006506:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800650a:	d007      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800650c:	e00f      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800650e:	4b4d      	ldr	r3, [pc, #308]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006512:	4a4c      	ldr	r2, [pc, #304]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006518:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800651a:	e00c      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	3324      	adds	r3, #36	; 0x24
 8006520:	2101      	movs	r1, #1
 8006522:	4618      	mov	r0, r3
 8006524:	f000 fc6e 	bl	8006e04 <RCCEx_PLL3_Config>
 8006528:	4603      	mov	r3, r0
 800652a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800652c:	e003      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	75fb      	strb	r3, [r7, #23]
      break;
 8006532:	e000      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8006534:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006536:	7dfb      	ldrb	r3, [r7, #23]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d10a      	bne.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800653c:	4b41      	ldr	r3, [pc, #260]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800653e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006540:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800654a:	493e      	ldr	r1, [pc, #248]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800654c:	4313      	orrs	r3, r2
 800654e:	654b      	str	r3, [r1, #84]	; 0x54
 8006550:	e001      	b.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006552:	7dfb      	ldrb	r3, [r7, #23]
 8006554:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800655e:	2b00      	cmp	r3, #0
 8006560:	d029      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006566:	2b00      	cmp	r3, #0
 8006568:	d003      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800656a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800656e:	d007      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8006570:	e00f      	b.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006572:	4b34      	ldr	r3, [pc, #208]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006576:	4a33      	ldr	r2, [pc, #204]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800657c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800657e:	e00b      	b.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	3304      	adds	r3, #4
 8006584:	2102      	movs	r1, #2
 8006586:	4618      	mov	r0, r3
 8006588:	f000 fb8a 	bl	8006ca0 <RCCEx_PLL2_Config>
 800658c:	4603      	mov	r3, r0
 800658e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006590:	e002      	b.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	75fb      	strb	r3, [r7, #23]
      break;
 8006596:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006598:	7dfb      	ldrb	r3, [r7, #23]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d109      	bne.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800659e:	4b29      	ldr	r3, [pc, #164]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80065a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065aa:	4926      	ldr	r1, [pc, #152]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80065ac:	4313      	orrs	r3, r2
 80065ae:	64cb      	str	r3, [r1, #76]	; 0x4c
 80065b0:	e001      	b.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065b2:	7dfb      	ldrb	r3, [r7, #23]
 80065b4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00a      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	3324      	adds	r3, #36	; 0x24
 80065c6:	2102      	movs	r1, #2
 80065c8:	4618      	mov	r0, r3
 80065ca:	f000 fc1b 	bl	8006e04 <RCCEx_PLL3_Config>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d001      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d033      	beq.n	800664c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065ec:	d017      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80065ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065f2:	d811      	bhi.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80065f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065f8:	d013      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80065fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065fe:	d80b      	bhi.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006600:	2b00      	cmp	r3, #0
 8006602:	d010      	beq.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8006604:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006608:	d106      	bne.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800660a:	4b0e      	ldr	r3, [pc, #56]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800660c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800660e:	4a0d      	ldr	r2, [pc, #52]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006614:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006616:	e007      	b.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	75fb      	strb	r3, [r7, #23]
      break;
 800661c:	e004      	b.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800661e:	bf00      	nop
 8006620:	e002      	b.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006622:	bf00      	nop
 8006624:	e000      	b.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006626:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006628:	7dfb      	ldrb	r3, [r7, #23]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d10c      	bne.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800662e:	4b05      	ldr	r3, [pc, #20]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006632:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800663a:	4902      	ldr	r1, [pc, #8]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800663c:	4313      	orrs	r3, r2
 800663e:	654b      	str	r3, [r1, #84]	; 0x54
 8006640:	e004      	b.n	800664c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8006642:	bf00      	nop
 8006644:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006648:	7dfb      	ldrb	r3, [r7, #23]
 800664a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006654:	2b00      	cmp	r3, #0
 8006656:	d008      	beq.n	800666a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006658:	4b31      	ldr	r3, [pc, #196]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800665a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800665c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006664:	492e      	ldr	r1, [pc, #184]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006666:	4313      	orrs	r3, r2
 8006668:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006672:	2b00      	cmp	r3, #0
 8006674:	d009      	beq.n	800668a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006676:	4b2a      	ldr	r3, [pc, #168]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006684:	4926      	ldr	r1, [pc, #152]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006686:	4313      	orrs	r3, r2
 8006688:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006692:	2b00      	cmp	r3, #0
 8006694:	d008      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006696:	4b22      	ldr	r3, [pc, #136]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800669a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066a2:	491f      	ldr	r1, [pc, #124]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80066a4:	4313      	orrs	r3, r2
 80066a6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00d      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80066b4:	4b1a      	ldr	r3, [pc, #104]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	4a19      	ldr	r2, [pc, #100]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80066ba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066be:	6113      	str	r3, [r2, #16]
 80066c0:	4b17      	ldr	r3, [pc, #92]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80066c2:	691a      	ldr	r2, [r3, #16]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80066ca:	4915      	ldr	r1, [pc, #84]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80066cc:	4313      	orrs	r3, r2
 80066ce:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	da08      	bge.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80066d8:	4b11      	ldr	r3, [pc, #68]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80066da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066dc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066e4:	490e      	ldr	r1, [pc, #56]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80066e6:	4313      	orrs	r3, r2
 80066e8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d009      	beq.n	800670a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80066f6:	4b0a      	ldr	r3, [pc, #40]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80066f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006704:	4906      	ldr	r1, [pc, #24]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006706:	4313      	orrs	r3, r2
 8006708:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800670a:	7dbb      	ldrb	r3, [r7, #22]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d101      	bne.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8006710:	2300      	movs	r3, #0
 8006712:	e000      	b.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
}
 8006716:	4618      	mov	r0, r3
 8006718:	3718      	adds	r7, #24
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	58024400 	.word	0x58024400

08006724 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006728:	f7ff f85a 	bl	80057e0 <HAL_RCC_GetHCLKFreq>
 800672c:	4602      	mov	r2, r0
 800672e:	4b06      	ldr	r3, [pc, #24]	; (8006748 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	091b      	lsrs	r3, r3, #4
 8006734:	f003 0307 	and.w	r3, r3, #7
 8006738:	4904      	ldr	r1, [pc, #16]	; (800674c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800673a:	5ccb      	ldrb	r3, [r1, r3]
 800673c:	f003 031f 	and.w	r3, r3, #31
 8006740:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006744:	4618      	mov	r0, r3
 8006746:	bd80      	pop	{r7, pc}
 8006748:	58024400 	.word	0x58024400
 800674c:	08009c38 	.word	0x08009c38

08006750 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006750:	b480      	push	{r7}
 8006752:	b089      	sub	sp, #36	; 0x24
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006758:	4ba1      	ldr	r3, [pc, #644]	; (80069e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800675a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800675c:	f003 0303 	and.w	r3, r3, #3
 8006760:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006762:	4b9f      	ldr	r3, [pc, #636]	; (80069e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006766:	0b1b      	lsrs	r3, r3, #12
 8006768:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800676c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800676e:	4b9c      	ldr	r3, [pc, #624]	; (80069e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006772:	091b      	lsrs	r3, r3, #4
 8006774:	f003 0301 	and.w	r3, r3, #1
 8006778:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800677a:	4b99      	ldr	r3, [pc, #612]	; (80069e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800677c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800677e:	08db      	lsrs	r3, r3, #3
 8006780:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006784:	693a      	ldr	r2, [r7, #16]
 8006786:	fb02 f303 	mul.w	r3, r2, r3
 800678a:	ee07 3a90 	vmov	s15, r3
 800678e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006792:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	2b00      	cmp	r3, #0
 800679a:	f000 8111 	beq.w	80069c0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	f000 8083 	beq.w	80068ac <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	2b02      	cmp	r3, #2
 80067aa:	f200 80a1 	bhi.w	80068f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d003      	beq.n	80067bc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80067b4:	69bb      	ldr	r3, [r7, #24]
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d056      	beq.n	8006868 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80067ba:	e099      	b.n	80068f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067bc:	4b88      	ldr	r3, [pc, #544]	; (80069e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0320 	and.w	r3, r3, #32
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d02d      	beq.n	8006824 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80067c8:	4b85      	ldr	r3, [pc, #532]	; (80069e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	08db      	lsrs	r3, r3, #3
 80067ce:	f003 0303 	and.w	r3, r3, #3
 80067d2:	4a84      	ldr	r2, [pc, #528]	; (80069e4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80067d4:	fa22 f303 	lsr.w	r3, r2, r3
 80067d8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	ee07 3a90 	vmov	s15, r3
 80067e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	ee07 3a90 	vmov	s15, r3
 80067ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067f2:	4b7b      	ldr	r3, [pc, #492]	; (80069e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067fa:	ee07 3a90 	vmov	s15, r3
 80067fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006802:	ed97 6a03 	vldr	s12, [r7, #12]
 8006806:	eddf 5a78 	vldr	s11, [pc, #480]	; 80069e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800680a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800680e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006812:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800681a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800681e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006822:	e087      	b.n	8006934 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	ee07 3a90 	vmov	s15, r3
 800682a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800682e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80069ec <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006836:	4b6a      	ldr	r3, [pc, #424]	; (80069e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800683e:	ee07 3a90 	vmov	s15, r3
 8006842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006846:	ed97 6a03 	vldr	s12, [r7, #12]
 800684a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80069e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800684e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006856:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800685a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800685e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006862:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006866:	e065      	b.n	8006934 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	ee07 3a90 	vmov	s15, r3
 800686e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006872:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80069f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800687a:	4b59      	ldr	r3, [pc, #356]	; (80069e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800687c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006882:	ee07 3a90 	vmov	s15, r3
 8006886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800688a:	ed97 6a03 	vldr	s12, [r7, #12]
 800688e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80069e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800689a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800689e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80068aa:	e043      	b.n	8006934 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	ee07 3a90 	vmov	s15, r3
 80068b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068b6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80069f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80068ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068be:	4b48      	ldr	r3, [pc, #288]	; (80069e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068c6:	ee07 3a90 	vmov	s15, r3
 80068ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80068d2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80069e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80068ee:	e021      	b.n	8006934 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	ee07 3a90 	vmov	s15, r3
 80068f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068fa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80069f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80068fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006902:	4b37      	ldr	r3, [pc, #220]	; (80069e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800690a:	ee07 3a90 	vmov	s15, r3
 800690e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006912:	ed97 6a03 	vldr	s12, [r7, #12]
 8006916:	eddf 5a34 	vldr	s11, [pc, #208]	; 80069e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800691a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800691e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006922:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800692a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800692e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006932:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006934:	4b2a      	ldr	r3, [pc, #168]	; (80069e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006938:	0a5b      	lsrs	r3, r3, #9
 800693a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800693e:	ee07 3a90 	vmov	s15, r3
 8006942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006946:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800694a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800694e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006952:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006956:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800695a:	ee17 2a90 	vmov	r2, s15
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006962:	4b1f      	ldr	r3, [pc, #124]	; (80069e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006966:	0c1b      	lsrs	r3, r3, #16
 8006968:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800696c:	ee07 3a90 	vmov	s15, r3
 8006970:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006974:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006978:	ee37 7a87 	vadd.f32	s14, s15, s14
 800697c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006980:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006984:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006988:	ee17 2a90 	vmov	r2, s15
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006990:	4b13      	ldr	r3, [pc, #76]	; (80069e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006994:	0e1b      	lsrs	r3, r3, #24
 8006996:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800699a:	ee07 3a90 	vmov	s15, r3
 800699e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80069a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80069aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80069ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069b6:	ee17 2a90 	vmov	r2, s15
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80069be:	e008      	b.n	80069d2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	609a      	str	r2, [r3, #8]
}
 80069d2:	bf00      	nop
 80069d4:	3724      	adds	r7, #36	; 0x24
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	58024400 	.word	0x58024400
 80069e4:	03d09000 	.word	0x03d09000
 80069e8:	46000000 	.word	0x46000000
 80069ec:	4c742400 	.word	0x4c742400
 80069f0:	4a742400 	.word	0x4a742400
 80069f4:	4af42400 	.word	0x4af42400

080069f8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b089      	sub	sp, #36	; 0x24
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a00:	4ba1      	ldr	r3, [pc, #644]	; (8006c88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a04:	f003 0303 	and.w	r3, r3, #3
 8006a08:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006a0a:	4b9f      	ldr	r3, [pc, #636]	; (8006c88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a0e:	0d1b      	lsrs	r3, r3, #20
 8006a10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a14:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006a16:	4b9c      	ldr	r3, [pc, #624]	; (8006c88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a1a:	0a1b      	lsrs	r3, r3, #8
 8006a1c:	f003 0301 	and.w	r3, r3, #1
 8006a20:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006a22:	4b99      	ldr	r3, [pc, #612]	; (8006c88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a26:	08db      	lsrs	r3, r3, #3
 8006a28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a2c:	693a      	ldr	r2, [r7, #16]
 8006a2e:	fb02 f303 	mul.w	r3, r2, r3
 8006a32:	ee07 3a90 	vmov	s15, r3
 8006a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a3a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	f000 8111 	beq.w	8006c68 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	f000 8083 	beq.w	8006b54 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	f200 80a1 	bhi.w	8006b98 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d003      	beq.n	8006a64 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d056      	beq.n	8006b10 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006a62:	e099      	b.n	8006b98 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a64:	4b88      	ldr	r3, [pc, #544]	; (8006c88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 0320 	and.w	r3, r3, #32
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d02d      	beq.n	8006acc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a70:	4b85      	ldr	r3, [pc, #532]	; (8006c88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	08db      	lsrs	r3, r3, #3
 8006a76:	f003 0303 	and.w	r3, r3, #3
 8006a7a:	4a84      	ldr	r2, [pc, #528]	; (8006c8c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a80:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	ee07 3a90 	vmov	s15, r3
 8006a88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	ee07 3a90 	vmov	s15, r3
 8006a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a9a:	4b7b      	ldr	r3, [pc, #492]	; (8006c88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aa2:	ee07 3a90 	vmov	s15, r3
 8006aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006aae:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006c90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ac6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006aca:	e087      	b.n	8006bdc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	ee07 3a90 	vmov	s15, r3
 8006ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ad6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006c94 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006ada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ade:	4b6a      	ldr	r3, [pc, #424]	; (8006c88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ae6:	ee07 3a90 	vmov	s15, r3
 8006aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aee:	ed97 6a03 	vldr	s12, [r7, #12]
 8006af2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006c90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006afe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b0e:	e065      	b.n	8006bdc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	ee07 3a90 	vmov	s15, r3
 8006b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b1a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006c98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b22:	4b59      	ldr	r3, [pc, #356]	; (8006c88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b2a:	ee07 3a90 	vmov	s15, r3
 8006b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b32:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b36:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006c90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b52:	e043      	b.n	8006bdc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	ee07 3a90 	vmov	s15, r3
 8006b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b5e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006c9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b66:	4b48      	ldr	r3, [pc, #288]	; (8006c88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b6e:	ee07 3a90 	vmov	s15, r3
 8006b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b76:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b7a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006c90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b96:	e021      	b.n	8006bdc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	ee07 3a90 	vmov	s15, r3
 8006b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ba2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006c98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006ba6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006baa:	4b37      	ldr	r3, [pc, #220]	; (8006c88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bb2:	ee07 3a90 	vmov	s15, r3
 8006bb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bba:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bbe:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006c90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006bc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bd6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006bda:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006bdc:	4b2a      	ldr	r3, [pc, #168]	; (8006c88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be0:	0a5b      	lsrs	r3, r3, #9
 8006be2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006be6:	ee07 3a90 	vmov	s15, r3
 8006bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006bf2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006bf6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c02:	ee17 2a90 	vmov	r2, s15
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006c0a:	4b1f      	ldr	r3, [pc, #124]	; (8006c88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0e:	0c1b      	lsrs	r3, r3, #16
 8006c10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c14:	ee07 3a90 	vmov	s15, r3
 8006c18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c20:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c24:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c30:	ee17 2a90 	vmov	r2, s15
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006c38:	4b13      	ldr	r3, [pc, #76]	; (8006c88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3c:	0e1b      	lsrs	r3, r3, #24
 8006c3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c42:	ee07 3a90 	vmov	s15, r3
 8006c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c52:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c5e:	ee17 2a90 	vmov	r2, s15
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006c66:	e008      	b.n	8006c7a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	609a      	str	r2, [r3, #8]
}
 8006c7a:	bf00      	nop
 8006c7c:	3724      	adds	r7, #36	; 0x24
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr
 8006c86:	bf00      	nop
 8006c88:	58024400 	.word	0x58024400
 8006c8c:	03d09000 	.word	0x03d09000
 8006c90:	46000000 	.word	0x46000000
 8006c94:	4c742400 	.word	0x4c742400
 8006c98:	4a742400 	.word	0x4a742400
 8006c9c:	4af42400 	.word	0x4af42400

08006ca0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006caa:	2300      	movs	r3, #0
 8006cac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006cae:	4b53      	ldr	r3, [pc, #332]	; (8006dfc <RCCEx_PLL2_Config+0x15c>)
 8006cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb2:	f003 0303 	and.w	r3, r3, #3
 8006cb6:	2b03      	cmp	r3, #3
 8006cb8:	d101      	bne.n	8006cbe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e099      	b.n	8006df2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006cbe:	4b4f      	ldr	r3, [pc, #316]	; (8006dfc <RCCEx_PLL2_Config+0x15c>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a4e      	ldr	r2, [pc, #312]	; (8006dfc <RCCEx_PLL2_Config+0x15c>)
 8006cc4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006cc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cca:	f7fa fd89 	bl	80017e0 <HAL_GetTick>
 8006cce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006cd0:	e008      	b.n	8006ce4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006cd2:	f7fa fd85 	bl	80017e0 <HAL_GetTick>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	1ad3      	subs	r3, r2, r3
 8006cdc:	2b02      	cmp	r3, #2
 8006cde:	d901      	bls.n	8006ce4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006ce0:	2303      	movs	r3, #3
 8006ce2:	e086      	b.n	8006df2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006ce4:	4b45      	ldr	r3, [pc, #276]	; (8006dfc <RCCEx_PLL2_Config+0x15c>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1f0      	bne.n	8006cd2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006cf0:	4b42      	ldr	r3, [pc, #264]	; (8006dfc <RCCEx_PLL2_Config+0x15c>)
 8006cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	031b      	lsls	r3, r3, #12
 8006cfe:	493f      	ldr	r1, [pc, #252]	; (8006dfc <RCCEx_PLL2_Config+0x15c>)
 8006d00:	4313      	orrs	r3, r2
 8006d02:	628b      	str	r3, [r1, #40]	; 0x28
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	3b01      	subs	r3, #1
 8006d0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	3b01      	subs	r3, #1
 8006d14:	025b      	lsls	r3, r3, #9
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	431a      	orrs	r2, r3
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	041b      	lsls	r3, r3, #16
 8006d22:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006d26:	431a      	orrs	r2, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	3b01      	subs	r3, #1
 8006d2e:	061b      	lsls	r3, r3, #24
 8006d30:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006d34:	4931      	ldr	r1, [pc, #196]	; (8006dfc <RCCEx_PLL2_Config+0x15c>)
 8006d36:	4313      	orrs	r3, r2
 8006d38:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006d3a:	4b30      	ldr	r3, [pc, #192]	; (8006dfc <RCCEx_PLL2_Config+0x15c>)
 8006d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d3e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	695b      	ldr	r3, [r3, #20]
 8006d46:	492d      	ldr	r1, [pc, #180]	; (8006dfc <RCCEx_PLL2_Config+0x15c>)
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006d4c:	4b2b      	ldr	r3, [pc, #172]	; (8006dfc <RCCEx_PLL2_Config+0x15c>)
 8006d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d50:	f023 0220 	bic.w	r2, r3, #32
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	699b      	ldr	r3, [r3, #24]
 8006d58:	4928      	ldr	r1, [pc, #160]	; (8006dfc <RCCEx_PLL2_Config+0x15c>)
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006d5e:	4b27      	ldr	r3, [pc, #156]	; (8006dfc <RCCEx_PLL2_Config+0x15c>)
 8006d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d62:	4a26      	ldr	r2, [pc, #152]	; (8006dfc <RCCEx_PLL2_Config+0x15c>)
 8006d64:	f023 0310 	bic.w	r3, r3, #16
 8006d68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006d6a:	4b24      	ldr	r3, [pc, #144]	; (8006dfc <RCCEx_PLL2_Config+0x15c>)
 8006d6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d6e:	4b24      	ldr	r3, [pc, #144]	; (8006e00 <RCCEx_PLL2_Config+0x160>)
 8006d70:	4013      	ands	r3, r2
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	69d2      	ldr	r2, [r2, #28]
 8006d76:	00d2      	lsls	r2, r2, #3
 8006d78:	4920      	ldr	r1, [pc, #128]	; (8006dfc <RCCEx_PLL2_Config+0x15c>)
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006d7e:	4b1f      	ldr	r3, [pc, #124]	; (8006dfc <RCCEx_PLL2_Config+0x15c>)
 8006d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d82:	4a1e      	ldr	r2, [pc, #120]	; (8006dfc <RCCEx_PLL2_Config+0x15c>)
 8006d84:	f043 0310 	orr.w	r3, r3, #16
 8006d88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d106      	bne.n	8006d9e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006d90:	4b1a      	ldr	r3, [pc, #104]	; (8006dfc <RCCEx_PLL2_Config+0x15c>)
 8006d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d94:	4a19      	ldr	r2, [pc, #100]	; (8006dfc <RCCEx_PLL2_Config+0x15c>)
 8006d96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006d9c:	e00f      	b.n	8006dbe <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d106      	bne.n	8006db2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006da4:	4b15      	ldr	r3, [pc, #84]	; (8006dfc <RCCEx_PLL2_Config+0x15c>)
 8006da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da8:	4a14      	ldr	r2, [pc, #80]	; (8006dfc <RCCEx_PLL2_Config+0x15c>)
 8006daa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006dae:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006db0:	e005      	b.n	8006dbe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006db2:	4b12      	ldr	r3, [pc, #72]	; (8006dfc <RCCEx_PLL2_Config+0x15c>)
 8006db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db6:	4a11      	ldr	r2, [pc, #68]	; (8006dfc <RCCEx_PLL2_Config+0x15c>)
 8006db8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006dbc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006dbe:	4b0f      	ldr	r3, [pc, #60]	; (8006dfc <RCCEx_PLL2_Config+0x15c>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a0e      	ldr	r2, [pc, #56]	; (8006dfc <RCCEx_PLL2_Config+0x15c>)
 8006dc4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006dc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dca:	f7fa fd09 	bl	80017e0 <HAL_GetTick>
 8006dce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006dd0:	e008      	b.n	8006de4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006dd2:	f7fa fd05 	bl	80017e0 <HAL_GetTick>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	1ad3      	subs	r3, r2, r3
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d901      	bls.n	8006de4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006de0:	2303      	movs	r3, #3
 8006de2:	e006      	b.n	8006df2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006de4:	4b05      	ldr	r3, [pc, #20]	; (8006dfc <RCCEx_PLL2_Config+0x15c>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d0f0      	beq.n	8006dd2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3710      	adds	r7, #16
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	58024400 	.word	0x58024400
 8006e00:	ffff0007 	.word	0xffff0007

08006e04 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006e12:	4b53      	ldr	r3, [pc, #332]	; (8006f60 <RCCEx_PLL3_Config+0x15c>)
 8006e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e16:	f003 0303 	and.w	r3, r3, #3
 8006e1a:	2b03      	cmp	r3, #3
 8006e1c:	d101      	bne.n	8006e22 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e099      	b.n	8006f56 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006e22:	4b4f      	ldr	r3, [pc, #316]	; (8006f60 <RCCEx_PLL3_Config+0x15c>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a4e      	ldr	r2, [pc, #312]	; (8006f60 <RCCEx_PLL3_Config+0x15c>)
 8006e28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e2e:	f7fa fcd7 	bl	80017e0 <HAL_GetTick>
 8006e32:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e34:	e008      	b.n	8006e48 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006e36:	f7fa fcd3 	bl	80017e0 <HAL_GetTick>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	1ad3      	subs	r3, r2, r3
 8006e40:	2b02      	cmp	r3, #2
 8006e42:	d901      	bls.n	8006e48 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006e44:	2303      	movs	r3, #3
 8006e46:	e086      	b.n	8006f56 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e48:	4b45      	ldr	r3, [pc, #276]	; (8006f60 <RCCEx_PLL3_Config+0x15c>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d1f0      	bne.n	8006e36 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006e54:	4b42      	ldr	r3, [pc, #264]	; (8006f60 <RCCEx_PLL3_Config+0x15c>)
 8006e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e58:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	051b      	lsls	r3, r3, #20
 8006e62:	493f      	ldr	r1, [pc, #252]	; (8006f60 <RCCEx_PLL3_Config+0x15c>)
 8006e64:	4313      	orrs	r3, r2
 8006e66:	628b      	str	r3, [r1, #40]	; 0x28
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	3b01      	subs	r3, #1
 8006e6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	3b01      	subs	r3, #1
 8006e78:	025b      	lsls	r3, r3, #9
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	431a      	orrs	r2, r3
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	3b01      	subs	r3, #1
 8006e84:	041b      	lsls	r3, r3, #16
 8006e86:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006e8a:	431a      	orrs	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	691b      	ldr	r3, [r3, #16]
 8006e90:	3b01      	subs	r3, #1
 8006e92:	061b      	lsls	r3, r3, #24
 8006e94:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006e98:	4931      	ldr	r1, [pc, #196]	; (8006f60 <RCCEx_PLL3_Config+0x15c>)
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006e9e:	4b30      	ldr	r3, [pc, #192]	; (8006f60 <RCCEx_PLL3_Config+0x15c>)
 8006ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	695b      	ldr	r3, [r3, #20]
 8006eaa:	492d      	ldr	r1, [pc, #180]	; (8006f60 <RCCEx_PLL3_Config+0x15c>)
 8006eac:	4313      	orrs	r3, r2
 8006eae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006eb0:	4b2b      	ldr	r3, [pc, #172]	; (8006f60 <RCCEx_PLL3_Config+0x15c>)
 8006eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	699b      	ldr	r3, [r3, #24]
 8006ebc:	4928      	ldr	r1, [pc, #160]	; (8006f60 <RCCEx_PLL3_Config+0x15c>)
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006ec2:	4b27      	ldr	r3, [pc, #156]	; (8006f60 <RCCEx_PLL3_Config+0x15c>)
 8006ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec6:	4a26      	ldr	r2, [pc, #152]	; (8006f60 <RCCEx_PLL3_Config+0x15c>)
 8006ec8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ecc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006ece:	4b24      	ldr	r3, [pc, #144]	; (8006f60 <RCCEx_PLL3_Config+0x15c>)
 8006ed0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ed2:	4b24      	ldr	r3, [pc, #144]	; (8006f64 <RCCEx_PLL3_Config+0x160>)
 8006ed4:	4013      	ands	r3, r2
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	69d2      	ldr	r2, [r2, #28]
 8006eda:	00d2      	lsls	r2, r2, #3
 8006edc:	4920      	ldr	r1, [pc, #128]	; (8006f60 <RCCEx_PLL3_Config+0x15c>)
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006ee2:	4b1f      	ldr	r3, [pc, #124]	; (8006f60 <RCCEx_PLL3_Config+0x15c>)
 8006ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee6:	4a1e      	ldr	r2, [pc, #120]	; (8006f60 <RCCEx_PLL3_Config+0x15c>)
 8006ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006eec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d106      	bne.n	8006f02 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006ef4:	4b1a      	ldr	r3, [pc, #104]	; (8006f60 <RCCEx_PLL3_Config+0x15c>)
 8006ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef8:	4a19      	ldr	r2, [pc, #100]	; (8006f60 <RCCEx_PLL3_Config+0x15c>)
 8006efa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006efe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006f00:	e00f      	b.n	8006f22 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d106      	bne.n	8006f16 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006f08:	4b15      	ldr	r3, [pc, #84]	; (8006f60 <RCCEx_PLL3_Config+0x15c>)
 8006f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f0c:	4a14      	ldr	r2, [pc, #80]	; (8006f60 <RCCEx_PLL3_Config+0x15c>)
 8006f0e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006f12:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006f14:	e005      	b.n	8006f22 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006f16:	4b12      	ldr	r3, [pc, #72]	; (8006f60 <RCCEx_PLL3_Config+0x15c>)
 8006f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f1a:	4a11      	ldr	r2, [pc, #68]	; (8006f60 <RCCEx_PLL3_Config+0x15c>)
 8006f1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f20:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006f22:	4b0f      	ldr	r3, [pc, #60]	; (8006f60 <RCCEx_PLL3_Config+0x15c>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a0e      	ldr	r2, [pc, #56]	; (8006f60 <RCCEx_PLL3_Config+0x15c>)
 8006f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f2e:	f7fa fc57 	bl	80017e0 <HAL_GetTick>
 8006f32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f34:	e008      	b.n	8006f48 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006f36:	f7fa fc53 	bl	80017e0 <HAL_GetTick>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	1ad3      	subs	r3, r2, r3
 8006f40:	2b02      	cmp	r3, #2
 8006f42:	d901      	bls.n	8006f48 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006f44:	2303      	movs	r3, #3
 8006f46:	e006      	b.n	8006f56 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f48:	4b05      	ldr	r3, [pc, #20]	; (8006f60 <RCCEx_PLL3_Config+0x15c>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d0f0      	beq.n	8006f36 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3710      	adds	r7, #16
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	58024400 	.word	0x58024400
 8006f64:	ffff0007 	.word	0xffff0007

08006f68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d101      	bne.n	8006f7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	e049      	b.n	800700e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d106      	bne.n	8006f94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f7fa f952 	bl	8001238 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2202      	movs	r2, #2
 8006f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	3304      	adds	r3, #4
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	4610      	mov	r0, r2
 8006fa8:	f000 fc92 	bl	80078d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3708      	adds	r7, #8
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b082      	sub	sp, #8
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d101      	bne.n	8007028 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	e049      	b.n	80070bc <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800702e:	b2db      	uxtb	r3, r3
 8007030:	2b00      	cmp	r3, #0
 8007032:	d106      	bne.n	8007042 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f7fa f87b 	bl	8001138 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2202      	movs	r2, #2
 8007046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	3304      	adds	r3, #4
 8007052:	4619      	mov	r1, r3
 8007054:	4610      	mov	r0, r2
 8007056:	f000 fc3b 	bl	80078d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2201      	movs	r2, #1
 800705e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2201      	movs	r2, #1
 8007066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2201      	movs	r2, #1
 800706e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2201      	movs	r2, #1
 8007076:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2201      	movs	r2, #1
 800707e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2201      	movs	r2, #1
 8007086:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2201      	movs	r2, #1
 800708e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2201      	movs	r2, #1
 8007096:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2201      	movs	r2, #1
 800709e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2201      	movs	r2, #1
 80070a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2201      	movs	r2, #1
 80070ae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2201      	movs	r2, #1
 80070b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3708      	adds	r7, #8
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d104      	bne.n	80070de <HAL_TIM_IC_Start+0x1a>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	e023      	b.n	8007126 <HAL_TIM_IC_Start+0x62>
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	2b04      	cmp	r3, #4
 80070e2:	d104      	bne.n	80070ee <HAL_TIM_IC_Start+0x2a>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	e01b      	b.n	8007126 <HAL_TIM_IC_Start+0x62>
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	2b08      	cmp	r3, #8
 80070f2:	d104      	bne.n	80070fe <HAL_TIM_IC_Start+0x3a>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	e013      	b.n	8007126 <HAL_TIM_IC_Start+0x62>
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	2b0c      	cmp	r3, #12
 8007102:	d104      	bne.n	800710e <HAL_TIM_IC_Start+0x4a>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800710a:	b2db      	uxtb	r3, r3
 800710c:	e00b      	b.n	8007126 <HAL_TIM_IC_Start+0x62>
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	2b10      	cmp	r3, #16
 8007112:	d104      	bne.n	800711e <HAL_TIM_IC_Start+0x5a>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800711a:	b2db      	uxtb	r3, r3
 800711c:	e003      	b.n	8007126 <HAL_TIM_IC_Start+0x62>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007124:	b2db      	uxtb	r3, r3
 8007126:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d104      	bne.n	8007138 <HAL_TIM_IC_Start+0x74>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007134:	b2db      	uxtb	r3, r3
 8007136:	e013      	b.n	8007160 <HAL_TIM_IC_Start+0x9c>
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	2b04      	cmp	r3, #4
 800713c:	d104      	bne.n	8007148 <HAL_TIM_IC_Start+0x84>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007144:	b2db      	uxtb	r3, r3
 8007146:	e00b      	b.n	8007160 <HAL_TIM_IC_Start+0x9c>
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	2b08      	cmp	r3, #8
 800714c:	d104      	bne.n	8007158 <HAL_TIM_IC_Start+0x94>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007154:	b2db      	uxtb	r3, r3
 8007156:	e003      	b.n	8007160 <HAL_TIM_IC_Start+0x9c>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800715e:	b2db      	uxtb	r3, r3
 8007160:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007162:	7bfb      	ldrb	r3, [r7, #15]
 8007164:	2b01      	cmp	r3, #1
 8007166:	d102      	bne.n	800716e <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007168:	7bbb      	ldrb	r3, [r7, #14]
 800716a:	2b01      	cmp	r3, #1
 800716c:	d001      	beq.n	8007172 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	e097      	b.n	80072a2 <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d104      	bne.n	8007182 <HAL_TIM_IC_Start+0xbe>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2202      	movs	r2, #2
 800717c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007180:	e023      	b.n	80071ca <HAL_TIM_IC_Start+0x106>
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	2b04      	cmp	r3, #4
 8007186:	d104      	bne.n	8007192 <HAL_TIM_IC_Start+0xce>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2202      	movs	r2, #2
 800718c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007190:	e01b      	b.n	80071ca <HAL_TIM_IC_Start+0x106>
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	2b08      	cmp	r3, #8
 8007196:	d104      	bne.n	80071a2 <HAL_TIM_IC_Start+0xde>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2202      	movs	r2, #2
 800719c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071a0:	e013      	b.n	80071ca <HAL_TIM_IC_Start+0x106>
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	2b0c      	cmp	r3, #12
 80071a6:	d104      	bne.n	80071b2 <HAL_TIM_IC_Start+0xee>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2202      	movs	r2, #2
 80071ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80071b0:	e00b      	b.n	80071ca <HAL_TIM_IC_Start+0x106>
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	2b10      	cmp	r3, #16
 80071b6:	d104      	bne.n	80071c2 <HAL_TIM_IC_Start+0xfe>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2202      	movs	r2, #2
 80071bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071c0:	e003      	b.n	80071ca <HAL_TIM_IC_Start+0x106>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2202      	movs	r2, #2
 80071c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d104      	bne.n	80071da <HAL_TIM_IC_Start+0x116>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2202      	movs	r2, #2
 80071d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071d8:	e013      	b.n	8007202 <HAL_TIM_IC_Start+0x13e>
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	2b04      	cmp	r3, #4
 80071de:	d104      	bne.n	80071ea <HAL_TIM_IC_Start+0x126>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2202      	movs	r2, #2
 80071e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071e8:	e00b      	b.n	8007202 <HAL_TIM_IC_Start+0x13e>
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	2b08      	cmp	r3, #8
 80071ee:	d104      	bne.n	80071fa <HAL_TIM_IC_Start+0x136>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2202      	movs	r2, #2
 80071f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80071f8:	e003      	b.n	8007202 <HAL_TIM_IC_Start+0x13e>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2202      	movs	r2, #2
 80071fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	2201      	movs	r2, #1
 8007208:	6839      	ldr	r1, [r7, #0]
 800720a:	4618      	mov	r0, r3
 800720c:	f000 fffa 	bl	8008204 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a25      	ldr	r2, [pc, #148]	; (80072ac <HAL_TIM_IC_Start+0x1e8>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d022      	beq.n	8007260 <HAL_TIM_IC_Start+0x19c>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007222:	d01d      	beq.n	8007260 <HAL_TIM_IC_Start+0x19c>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a21      	ldr	r2, [pc, #132]	; (80072b0 <HAL_TIM_IC_Start+0x1ec>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d018      	beq.n	8007260 <HAL_TIM_IC_Start+0x19c>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a20      	ldr	r2, [pc, #128]	; (80072b4 <HAL_TIM_IC_Start+0x1f0>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d013      	beq.n	8007260 <HAL_TIM_IC_Start+0x19c>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a1e      	ldr	r2, [pc, #120]	; (80072b8 <HAL_TIM_IC_Start+0x1f4>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d00e      	beq.n	8007260 <HAL_TIM_IC_Start+0x19c>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a1d      	ldr	r2, [pc, #116]	; (80072bc <HAL_TIM_IC_Start+0x1f8>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d009      	beq.n	8007260 <HAL_TIM_IC_Start+0x19c>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a1b      	ldr	r2, [pc, #108]	; (80072c0 <HAL_TIM_IC_Start+0x1fc>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d004      	beq.n	8007260 <HAL_TIM_IC_Start+0x19c>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a1a      	ldr	r2, [pc, #104]	; (80072c4 <HAL_TIM_IC_Start+0x200>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d115      	bne.n	800728c <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	689a      	ldr	r2, [r3, #8]
 8007266:	4b18      	ldr	r3, [pc, #96]	; (80072c8 <HAL_TIM_IC_Start+0x204>)
 8007268:	4013      	ands	r3, r2
 800726a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	2b06      	cmp	r3, #6
 8007270:	d015      	beq.n	800729e <HAL_TIM_IC_Start+0x1da>
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007278:	d011      	beq.n	800729e <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f042 0201 	orr.w	r2, r2, #1
 8007288:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800728a:	e008      	b.n	800729e <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f042 0201 	orr.w	r2, r2, #1
 800729a:	601a      	str	r2, [r3, #0]
 800729c:	e000      	b.n	80072a0 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800729e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3710      	adds	r7, #16
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	40010000 	.word	0x40010000
 80072b0:	40000400 	.word	0x40000400
 80072b4:	40000800 	.word	0x40000800
 80072b8:	40000c00 	.word	0x40000c00
 80072bc:	40010400 	.word	0x40010400
 80072c0:	40001800 	.word	0x40001800
 80072c4:	40014000 	.word	0x40014000
 80072c8:	00010007 	.word	0x00010007

080072cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	f003 0302 	and.w	r3, r3, #2
 80072de:	2b02      	cmp	r3, #2
 80072e0:	d122      	bne.n	8007328 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	f003 0302 	and.w	r3, r3, #2
 80072ec:	2b02      	cmp	r3, #2
 80072ee:	d11b      	bne.n	8007328 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f06f 0202 	mvn.w	r2, #2
 80072f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2201      	movs	r2, #1
 80072fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	f003 0303 	and.w	r3, r3, #3
 800730a:	2b00      	cmp	r3, #0
 800730c:	d003      	beq.n	8007316 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 fac0 	bl	8007894 <HAL_TIM_IC_CaptureCallback>
 8007314:	e005      	b.n	8007322 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 fab2 	bl	8007880 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f000 fac3 	bl	80078a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	f003 0304 	and.w	r3, r3, #4
 8007332:	2b04      	cmp	r3, #4
 8007334:	d122      	bne.n	800737c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	f003 0304 	and.w	r3, r3, #4
 8007340:	2b04      	cmp	r3, #4
 8007342:	d11b      	bne.n	800737c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f06f 0204 	mvn.w	r2, #4
 800734c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2202      	movs	r2, #2
 8007352:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	699b      	ldr	r3, [r3, #24]
 800735a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800735e:	2b00      	cmp	r3, #0
 8007360:	d003      	beq.n	800736a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 fa96 	bl	8007894 <HAL_TIM_IC_CaptureCallback>
 8007368:	e005      	b.n	8007376 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 fa88 	bl	8007880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 fa99 	bl	80078a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	f003 0308 	and.w	r3, r3, #8
 8007386:	2b08      	cmp	r3, #8
 8007388:	d122      	bne.n	80073d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	f003 0308 	and.w	r3, r3, #8
 8007394:	2b08      	cmp	r3, #8
 8007396:	d11b      	bne.n	80073d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f06f 0208 	mvn.w	r2, #8
 80073a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2204      	movs	r2, #4
 80073a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	69db      	ldr	r3, [r3, #28]
 80073ae:	f003 0303 	and.w	r3, r3, #3
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d003      	beq.n	80073be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 fa6c 	bl	8007894 <HAL_TIM_IC_CaptureCallback>
 80073bc:	e005      	b.n	80073ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 fa5e 	bl	8007880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 fa6f 	bl	80078a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	f003 0310 	and.w	r3, r3, #16
 80073da:	2b10      	cmp	r3, #16
 80073dc:	d122      	bne.n	8007424 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	f003 0310 	and.w	r3, r3, #16
 80073e8:	2b10      	cmp	r3, #16
 80073ea:	d11b      	bne.n	8007424 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f06f 0210 	mvn.w	r2, #16
 80073f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2208      	movs	r2, #8
 80073fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	69db      	ldr	r3, [r3, #28]
 8007402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007406:	2b00      	cmp	r3, #0
 8007408:	d003      	beq.n	8007412 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 fa42 	bl	8007894 <HAL_TIM_IC_CaptureCallback>
 8007410:	e005      	b.n	800741e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 fa34 	bl	8007880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 fa45 	bl	80078a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	f003 0301 	and.w	r3, r3, #1
 800742e:	2b01      	cmp	r3, #1
 8007430:	d10e      	bne.n	8007450 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	f003 0301 	and.w	r3, r3, #1
 800743c:	2b01      	cmp	r3, #1
 800743e:	d107      	bne.n	8007450 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f06f 0201 	mvn.w	r2, #1
 8007448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 fa0e 	bl	800786c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800745a:	2b80      	cmp	r3, #128	; 0x80
 800745c:	d10e      	bne.n	800747c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007468:	2b80      	cmp	r3, #128	; 0x80
 800746a:	d107      	bne.n	800747c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 ff82 	bl	8008380 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800748a:	d10e      	bne.n	80074aa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007496:	2b80      	cmp	r3, #128	; 0x80
 8007498:	d107      	bne.n	80074aa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80074a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 ff75 	bl	8008394 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074b4:	2b40      	cmp	r3, #64	; 0x40
 80074b6:	d10e      	bne.n	80074d6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074c2:	2b40      	cmp	r3, #64	; 0x40
 80074c4:	d107      	bne.n	80074d6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80074ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 f9f3 	bl	80078bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	f003 0320 	and.w	r3, r3, #32
 80074e0:	2b20      	cmp	r3, #32
 80074e2:	d10e      	bne.n	8007502 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	f003 0320 	and.w	r3, r3, #32
 80074ee:	2b20      	cmp	r3, #32
 80074f0:	d107      	bne.n	8007502 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f06f 0220 	mvn.w	r2, #32
 80074fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 ff35 	bl	800836c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007502:	bf00      	nop
 8007504:	3708      	adds	r7, #8
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b086      	sub	sp, #24
 800750e:	af00      	add	r7, sp, #0
 8007510:	60f8      	str	r0, [r7, #12]
 8007512:	60b9      	str	r1, [r7, #8]
 8007514:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007516:	2300      	movs	r3, #0
 8007518:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007520:	2b01      	cmp	r3, #1
 8007522:	d101      	bne.n	8007528 <HAL_TIM_IC_ConfigChannel+0x1e>
 8007524:	2302      	movs	r3, #2
 8007526:	e088      	b.n	800763a <HAL_TIM_IC_ConfigChannel+0x130>
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d11b      	bne.n	800756e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6818      	ldr	r0, [r3, #0]
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	6819      	ldr	r1, [r3, #0]
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	685a      	ldr	r2, [r3, #4]
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	f000 fd33 	bl	8007fb0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	699a      	ldr	r2, [r3, #24]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f022 020c 	bic.w	r2, r2, #12
 8007558:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	6999      	ldr	r1, [r3, #24]
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	689a      	ldr	r2, [r3, #8]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	430a      	orrs	r2, r1
 800756a:	619a      	str	r2, [r3, #24]
 800756c:	e060      	b.n	8007630 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2b04      	cmp	r3, #4
 8007572:	d11c      	bne.n	80075ae <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6818      	ldr	r0, [r3, #0]
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	6819      	ldr	r1, [r3, #0]
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	685a      	ldr	r2, [r3, #4]
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	68db      	ldr	r3, [r3, #12]
 8007584:	f000 fd88 	bl	8008098 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	699a      	ldr	r2, [r3, #24]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007596:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	6999      	ldr	r1, [r3, #24]
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	021a      	lsls	r2, r3, #8
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	430a      	orrs	r2, r1
 80075aa:	619a      	str	r2, [r3, #24]
 80075ac:	e040      	b.n	8007630 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2b08      	cmp	r3, #8
 80075b2:	d11b      	bne.n	80075ec <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6818      	ldr	r0, [r3, #0]
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	6819      	ldr	r1, [r3, #0]
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	685a      	ldr	r2, [r3, #4]
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	f000 fda5 	bl	8008112 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	69da      	ldr	r2, [r3, #28]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f022 020c 	bic.w	r2, r2, #12
 80075d6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	69d9      	ldr	r1, [r3, #28]
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	689a      	ldr	r2, [r3, #8]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	430a      	orrs	r2, r1
 80075e8:	61da      	str	r2, [r3, #28]
 80075ea:	e021      	b.n	8007630 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2b0c      	cmp	r3, #12
 80075f0:	d11c      	bne.n	800762c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6818      	ldr	r0, [r3, #0]
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	6819      	ldr	r1, [r3, #0]
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	685a      	ldr	r2, [r3, #4]
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	f000 fdc2 	bl	800818a <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	69da      	ldr	r2, [r3, #28]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007614:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	69d9      	ldr	r1, [r3, #28]
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	021a      	lsls	r2, r3, #8
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	430a      	orrs	r2, r1
 8007628:	61da      	str	r2, [r3, #28]
 800762a:	e001      	b.n	8007630 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2200      	movs	r2, #0
 8007634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007638:	7dfb      	ldrb	r3, [r7, #23]
}
 800763a:	4618      	mov	r0, r3
 800763c:	3718      	adds	r7, #24
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
	...

08007644 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b086      	sub	sp, #24
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007650:	2300      	movs	r3, #0
 8007652:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800765a:	2b01      	cmp	r3, #1
 800765c:	d101      	bne.n	8007662 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800765e:	2302      	movs	r3, #2
 8007660:	e0ff      	b.n	8007862 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2201      	movs	r2, #1
 8007666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2b14      	cmp	r3, #20
 800766e:	f200 80f0 	bhi.w	8007852 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007672:	a201      	add	r2, pc, #4	; (adr r2, 8007678 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007678:	080076cd 	.word	0x080076cd
 800767c:	08007853 	.word	0x08007853
 8007680:	08007853 	.word	0x08007853
 8007684:	08007853 	.word	0x08007853
 8007688:	0800770d 	.word	0x0800770d
 800768c:	08007853 	.word	0x08007853
 8007690:	08007853 	.word	0x08007853
 8007694:	08007853 	.word	0x08007853
 8007698:	0800774f 	.word	0x0800774f
 800769c:	08007853 	.word	0x08007853
 80076a0:	08007853 	.word	0x08007853
 80076a4:	08007853 	.word	0x08007853
 80076a8:	0800778f 	.word	0x0800778f
 80076ac:	08007853 	.word	0x08007853
 80076b0:	08007853 	.word	0x08007853
 80076b4:	08007853 	.word	0x08007853
 80076b8:	080077d1 	.word	0x080077d1
 80076bc:	08007853 	.word	0x08007853
 80076c0:	08007853 	.word	0x08007853
 80076c4:	08007853 	.word	0x08007853
 80076c8:	08007811 	.word	0x08007811
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	68b9      	ldr	r1, [r7, #8]
 80076d2:	4618      	mov	r0, r3
 80076d4:	f000 f996 	bl	8007a04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	699a      	ldr	r2, [r3, #24]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f042 0208 	orr.w	r2, r2, #8
 80076e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	699a      	ldr	r2, [r3, #24]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f022 0204 	bic.w	r2, r2, #4
 80076f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	6999      	ldr	r1, [r3, #24]
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	691a      	ldr	r2, [r3, #16]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	430a      	orrs	r2, r1
 8007708:	619a      	str	r2, [r3, #24]
      break;
 800770a:	e0a5      	b.n	8007858 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68b9      	ldr	r1, [r7, #8]
 8007712:	4618      	mov	r0, r3
 8007714:	f000 fa06 	bl	8007b24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	699a      	ldr	r2, [r3, #24]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007726:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	699a      	ldr	r2, [r3, #24]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007736:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	6999      	ldr	r1, [r3, #24]
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	021a      	lsls	r2, r3, #8
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	430a      	orrs	r2, r1
 800774a:	619a      	str	r2, [r3, #24]
      break;
 800774c:	e084      	b.n	8007858 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	68b9      	ldr	r1, [r7, #8]
 8007754:	4618      	mov	r0, r3
 8007756:	f000 fa6f 	bl	8007c38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	69da      	ldr	r2, [r3, #28]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f042 0208 	orr.w	r2, r2, #8
 8007768:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	69da      	ldr	r2, [r3, #28]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f022 0204 	bic.w	r2, r2, #4
 8007778:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	69d9      	ldr	r1, [r3, #28]
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	691a      	ldr	r2, [r3, #16]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	430a      	orrs	r2, r1
 800778a:	61da      	str	r2, [r3, #28]
      break;
 800778c:	e064      	b.n	8007858 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	68b9      	ldr	r1, [r7, #8]
 8007794:	4618      	mov	r0, r3
 8007796:	f000 fad7 	bl	8007d48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	69da      	ldr	r2, [r3, #28]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	69da      	ldr	r2, [r3, #28]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	69d9      	ldr	r1, [r3, #28]
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	691b      	ldr	r3, [r3, #16]
 80077c4:	021a      	lsls	r2, r3, #8
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	430a      	orrs	r2, r1
 80077cc:	61da      	str	r2, [r3, #28]
      break;
 80077ce:	e043      	b.n	8007858 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68b9      	ldr	r1, [r7, #8]
 80077d6:	4618      	mov	r0, r3
 80077d8:	f000 fb20 	bl	8007e1c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f042 0208 	orr.w	r2, r2, #8
 80077ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f022 0204 	bic.w	r2, r2, #4
 80077fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	691a      	ldr	r2, [r3, #16]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	430a      	orrs	r2, r1
 800780c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800780e:	e023      	b.n	8007858 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	68b9      	ldr	r1, [r7, #8]
 8007816:	4618      	mov	r0, r3
 8007818:	f000 fb64 	bl	8007ee4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800782a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800783a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	021a      	lsls	r2, r3, #8
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	430a      	orrs	r2, r1
 800784e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007850:	e002      	b.n	8007858 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	75fb      	strb	r3, [r7, #23]
      break;
 8007856:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2200      	movs	r2, #0
 800785c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007860:	7dfb      	ldrb	r3, [r7, #23]
}
 8007862:	4618      	mov	r0, r3
 8007864:	3718      	adds	r7, #24
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop

0800786c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007874:	bf00      	nop
 8007876:	370c      	adds	r7, #12
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007880:	b480      	push	{r7}
 8007882:	b083      	sub	sp, #12
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007888:	bf00      	nop
 800788a:	370c      	adds	r7, #12
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800789c:	bf00      	nop
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80078b0:	bf00      	nop
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80078c4:	bf00      	nop
 80078c6:	370c      	adds	r7, #12
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b085      	sub	sp, #20
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4a40      	ldr	r2, [pc, #256]	; (80079e4 <TIM_Base_SetConfig+0x114>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d013      	beq.n	8007910 <TIM_Base_SetConfig+0x40>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078ee:	d00f      	beq.n	8007910 <TIM_Base_SetConfig+0x40>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a3d      	ldr	r2, [pc, #244]	; (80079e8 <TIM_Base_SetConfig+0x118>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d00b      	beq.n	8007910 <TIM_Base_SetConfig+0x40>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4a3c      	ldr	r2, [pc, #240]	; (80079ec <TIM_Base_SetConfig+0x11c>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d007      	beq.n	8007910 <TIM_Base_SetConfig+0x40>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a3b      	ldr	r2, [pc, #236]	; (80079f0 <TIM_Base_SetConfig+0x120>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d003      	beq.n	8007910 <TIM_Base_SetConfig+0x40>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	4a3a      	ldr	r2, [pc, #232]	; (80079f4 <TIM_Base_SetConfig+0x124>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d108      	bne.n	8007922 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007916:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	4313      	orrs	r3, r2
 8007920:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4a2f      	ldr	r2, [pc, #188]	; (80079e4 <TIM_Base_SetConfig+0x114>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d01f      	beq.n	800796a <TIM_Base_SetConfig+0x9a>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007930:	d01b      	beq.n	800796a <TIM_Base_SetConfig+0x9a>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4a2c      	ldr	r2, [pc, #176]	; (80079e8 <TIM_Base_SetConfig+0x118>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d017      	beq.n	800796a <TIM_Base_SetConfig+0x9a>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a2b      	ldr	r2, [pc, #172]	; (80079ec <TIM_Base_SetConfig+0x11c>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d013      	beq.n	800796a <TIM_Base_SetConfig+0x9a>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a2a      	ldr	r2, [pc, #168]	; (80079f0 <TIM_Base_SetConfig+0x120>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d00f      	beq.n	800796a <TIM_Base_SetConfig+0x9a>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4a29      	ldr	r2, [pc, #164]	; (80079f4 <TIM_Base_SetConfig+0x124>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d00b      	beq.n	800796a <TIM_Base_SetConfig+0x9a>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a28      	ldr	r2, [pc, #160]	; (80079f8 <TIM_Base_SetConfig+0x128>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d007      	beq.n	800796a <TIM_Base_SetConfig+0x9a>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4a27      	ldr	r2, [pc, #156]	; (80079fc <TIM_Base_SetConfig+0x12c>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d003      	beq.n	800796a <TIM_Base_SetConfig+0x9a>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4a26      	ldr	r2, [pc, #152]	; (8007a00 <TIM_Base_SetConfig+0x130>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d108      	bne.n	800797c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007970:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	4313      	orrs	r3, r2
 800797a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	695b      	ldr	r3, [r3, #20]
 8007986:	4313      	orrs	r3, r2
 8007988:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	68fa      	ldr	r2, [r7, #12]
 800798e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	689a      	ldr	r2, [r3, #8]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4a10      	ldr	r2, [pc, #64]	; (80079e4 <TIM_Base_SetConfig+0x114>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d00f      	beq.n	80079c8 <TIM_Base_SetConfig+0xf8>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	4a12      	ldr	r2, [pc, #72]	; (80079f4 <TIM_Base_SetConfig+0x124>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d00b      	beq.n	80079c8 <TIM_Base_SetConfig+0xf8>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	4a11      	ldr	r2, [pc, #68]	; (80079f8 <TIM_Base_SetConfig+0x128>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d007      	beq.n	80079c8 <TIM_Base_SetConfig+0xf8>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	4a10      	ldr	r2, [pc, #64]	; (80079fc <TIM_Base_SetConfig+0x12c>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d003      	beq.n	80079c8 <TIM_Base_SetConfig+0xf8>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	4a0f      	ldr	r2, [pc, #60]	; (8007a00 <TIM_Base_SetConfig+0x130>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d103      	bne.n	80079d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	691a      	ldr	r2, [r3, #16]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	615a      	str	r2, [r3, #20]
}
 80079d6:	bf00      	nop
 80079d8:	3714      	adds	r7, #20
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr
 80079e2:	bf00      	nop
 80079e4:	40010000 	.word	0x40010000
 80079e8:	40000400 	.word	0x40000400
 80079ec:	40000800 	.word	0x40000800
 80079f0:	40000c00 	.word	0x40000c00
 80079f4:	40010400 	.word	0x40010400
 80079f8:	40014000 	.word	0x40014000
 80079fc:	40014400 	.word	0x40014400
 8007a00:	40014800 	.word	0x40014800

08007a04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b087      	sub	sp, #28
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6a1b      	ldr	r3, [r3, #32]
 8007a12:	f023 0201 	bic.w	r2, r3, #1
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a1b      	ldr	r3, [r3, #32]
 8007a1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	699b      	ldr	r3, [r3, #24]
 8007a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a2c:	68fa      	ldr	r2, [r7, #12]
 8007a2e:	4b37      	ldr	r3, [pc, #220]	; (8007b0c <TIM_OC1_SetConfig+0x108>)
 8007a30:	4013      	ands	r3, r2
 8007a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f023 0303 	bic.w	r3, r3, #3
 8007a3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	f023 0302 	bic.w	r3, r3, #2
 8007a4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	697a      	ldr	r2, [r7, #20]
 8007a54:	4313      	orrs	r3, r2
 8007a56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	4a2d      	ldr	r2, [pc, #180]	; (8007b10 <TIM_OC1_SetConfig+0x10c>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d00f      	beq.n	8007a80 <TIM_OC1_SetConfig+0x7c>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	4a2c      	ldr	r2, [pc, #176]	; (8007b14 <TIM_OC1_SetConfig+0x110>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d00b      	beq.n	8007a80 <TIM_OC1_SetConfig+0x7c>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	4a2b      	ldr	r2, [pc, #172]	; (8007b18 <TIM_OC1_SetConfig+0x114>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d007      	beq.n	8007a80 <TIM_OC1_SetConfig+0x7c>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	4a2a      	ldr	r2, [pc, #168]	; (8007b1c <TIM_OC1_SetConfig+0x118>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d003      	beq.n	8007a80 <TIM_OC1_SetConfig+0x7c>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	4a29      	ldr	r2, [pc, #164]	; (8007b20 <TIM_OC1_SetConfig+0x11c>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d10c      	bne.n	8007a9a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	f023 0308 	bic.w	r3, r3, #8
 8007a86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	68db      	ldr	r3, [r3, #12]
 8007a8c:	697a      	ldr	r2, [r7, #20]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	f023 0304 	bic.w	r3, r3, #4
 8007a98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4a1c      	ldr	r2, [pc, #112]	; (8007b10 <TIM_OC1_SetConfig+0x10c>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d00f      	beq.n	8007ac2 <TIM_OC1_SetConfig+0xbe>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	4a1b      	ldr	r2, [pc, #108]	; (8007b14 <TIM_OC1_SetConfig+0x110>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d00b      	beq.n	8007ac2 <TIM_OC1_SetConfig+0xbe>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4a1a      	ldr	r2, [pc, #104]	; (8007b18 <TIM_OC1_SetConfig+0x114>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d007      	beq.n	8007ac2 <TIM_OC1_SetConfig+0xbe>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4a19      	ldr	r2, [pc, #100]	; (8007b1c <TIM_OC1_SetConfig+0x118>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d003      	beq.n	8007ac2 <TIM_OC1_SetConfig+0xbe>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4a18      	ldr	r2, [pc, #96]	; (8007b20 <TIM_OC1_SetConfig+0x11c>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d111      	bne.n	8007ae6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ac8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ad0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	695b      	ldr	r3, [r3, #20]
 8007ad6:	693a      	ldr	r2, [r7, #16]
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	699b      	ldr	r3, [r3, #24]
 8007ae0:	693a      	ldr	r2, [r7, #16]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	693a      	ldr	r2, [r7, #16]
 8007aea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	68fa      	ldr	r2, [r7, #12]
 8007af0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	685a      	ldr	r2, [r3, #4]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	697a      	ldr	r2, [r7, #20]
 8007afe:	621a      	str	r2, [r3, #32]
}
 8007b00:	bf00      	nop
 8007b02:	371c      	adds	r7, #28
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr
 8007b0c:	fffeff8f 	.word	0xfffeff8f
 8007b10:	40010000 	.word	0x40010000
 8007b14:	40010400 	.word	0x40010400
 8007b18:	40014000 	.word	0x40014000
 8007b1c:	40014400 	.word	0x40014400
 8007b20:	40014800 	.word	0x40014800

08007b24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b087      	sub	sp, #28
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6a1b      	ldr	r3, [r3, #32]
 8007b32:	f023 0210 	bic.w	r2, r3, #16
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a1b      	ldr	r3, [r3, #32]
 8007b3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	699b      	ldr	r3, [r3, #24]
 8007b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b4c:	68fa      	ldr	r2, [r7, #12]
 8007b4e:	4b34      	ldr	r3, [pc, #208]	; (8007c20 <TIM_OC2_SetConfig+0xfc>)
 8007b50:	4013      	ands	r3, r2
 8007b52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	021b      	lsls	r3, r3, #8
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	f023 0320 	bic.w	r3, r3, #32
 8007b6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	011b      	lsls	r3, r3, #4
 8007b76:	697a      	ldr	r2, [r7, #20]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	4a29      	ldr	r2, [pc, #164]	; (8007c24 <TIM_OC2_SetConfig+0x100>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d003      	beq.n	8007b8c <TIM_OC2_SetConfig+0x68>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	4a28      	ldr	r2, [pc, #160]	; (8007c28 <TIM_OC2_SetConfig+0x104>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d10d      	bne.n	8007ba8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	011b      	lsls	r3, r3, #4
 8007b9a:	697a      	ldr	r2, [r7, #20]
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ba6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	4a1e      	ldr	r2, [pc, #120]	; (8007c24 <TIM_OC2_SetConfig+0x100>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d00f      	beq.n	8007bd0 <TIM_OC2_SetConfig+0xac>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	4a1d      	ldr	r2, [pc, #116]	; (8007c28 <TIM_OC2_SetConfig+0x104>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d00b      	beq.n	8007bd0 <TIM_OC2_SetConfig+0xac>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	4a1c      	ldr	r2, [pc, #112]	; (8007c2c <TIM_OC2_SetConfig+0x108>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d007      	beq.n	8007bd0 <TIM_OC2_SetConfig+0xac>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	4a1b      	ldr	r2, [pc, #108]	; (8007c30 <TIM_OC2_SetConfig+0x10c>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d003      	beq.n	8007bd0 <TIM_OC2_SetConfig+0xac>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	4a1a      	ldr	r2, [pc, #104]	; (8007c34 <TIM_OC2_SetConfig+0x110>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d113      	bne.n	8007bf8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007bd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007bde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	695b      	ldr	r3, [r3, #20]
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	693a      	ldr	r2, [r7, #16]
 8007be8:	4313      	orrs	r3, r2
 8007bea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	699b      	ldr	r3, [r3, #24]
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	693a      	ldr	r2, [r7, #16]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	693a      	ldr	r2, [r7, #16]
 8007bfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	68fa      	ldr	r2, [r7, #12]
 8007c02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	685a      	ldr	r2, [r3, #4]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	697a      	ldr	r2, [r7, #20]
 8007c10:	621a      	str	r2, [r3, #32]
}
 8007c12:	bf00      	nop
 8007c14:	371c      	adds	r7, #28
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr
 8007c1e:	bf00      	nop
 8007c20:	feff8fff 	.word	0xfeff8fff
 8007c24:	40010000 	.word	0x40010000
 8007c28:	40010400 	.word	0x40010400
 8007c2c:	40014000 	.word	0x40014000
 8007c30:	40014400 	.word	0x40014400
 8007c34:	40014800 	.word	0x40014800

08007c38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b087      	sub	sp, #28
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6a1b      	ldr	r3, [r3, #32]
 8007c46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6a1b      	ldr	r3, [r3, #32]
 8007c52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	69db      	ldr	r3, [r3, #28]
 8007c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c60:	68fa      	ldr	r2, [r7, #12]
 8007c62:	4b33      	ldr	r3, [pc, #204]	; (8007d30 <TIM_OC3_SetConfig+0xf8>)
 8007c64:	4013      	ands	r3, r2
 8007c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f023 0303 	bic.w	r3, r3, #3
 8007c6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	68fa      	ldr	r2, [r7, #12]
 8007c76:	4313      	orrs	r3, r2
 8007c78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	021b      	lsls	r3, r3, #8
 8007c88:	697a      	ldr	r2, [r7, #20]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4a28      	ldr	r2, [pc, #160]	; (8007d34 <TIM_OC3_SetConfig+0xfc>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d003      	beq.n	8007c9e <TIM_OC3_SetConfig+0x66>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	4a27      	ldr	r2, [pc, #156]	; (8007d38 <TIM_OC3_SetConfig+0x100>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d10d      	bne.n	8007cba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ca4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	021b      	lsls	r3, r3, #8
 8007cac:	697a      	ldr	r2, [r7, #20]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007cb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	4a1d      	ldr	r2, [pc, #116]	; (8007d34 <TIM_OC3_SetConfig+0xfc>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d00f      	beq.n	8007ce2 <TIM_OC3_SetConfig+0xaa>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	4a1c      	ldr	r2, [pc, #112]	; (8007d38 <TIM_OC3_SetConfig+0x100>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d00b      	beq.n	8007ce2 <TIM_OC3_SetConfig+0xaa>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4a1b      	ldr	r2, [pc, #108]	; (8007d3c <TIM_OC3_SetConfig+0x104>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d007      	beq.n	8007ce2 <TIM_OC3_SetConfig+0xaa>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	4a1a      	ldr	r2, [pc, #104]	; (8007d40 <TIM_OC3_SetConfig+0x108>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d003      	beq.n	8007ce2 <TIM_OC3_SetConfig+0xaa>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4a19      	ldr	r2, [pc, #100]	; (8007d44 <TIM_OC3_SetConfig+0x10c>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d113      	bne.n	8007d0a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ce8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007cf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	695b      	ldr	r3, [r3, #20]
 8007cf6:	011b      	lsls	r3, r3, #4
 8007cf8:	693a      	ldr	r2, [r7, #16]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	699b      	ldr	r3, [r3, #24]
 8007d02:	011b      	lsls	r3, r3, #4
 8007d04:	693a      	ldr	r2, [r7, #16]
 8007d06:	4313      	orrs	r3, r2
 8007d08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	693a      	ldr	r2, [r7, #16]
 8007d0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	68fa      	ldr	r2, [r7, #12]
 8007d14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	685a      	ldr	r2, [r3, #4]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	697a      	ldr	r2, [r7, #20]
 8007d22:	621a      	str	r2, [r3, #32]
}
 8007d24:	bf00      	nop
 8007d26:	371c      	adds	r7, #28
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr
 8007d30:	fffeff8f 	.word	0xfffeff8f
 8007d34:	40010000 	.word	0x40010000
 8007d38:	40010400 	.word	0x40010400
 8007d3c:	40014000 	.word	0x40014000
 8007d40:	40014400 	.word	0x40014400
 8007d44:	40014800 	.word	0x40014800

08007d48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b087      	sub	sp, #28
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a1b      	ldr	r3, [r3, #32]
 8007d56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6a1b      	ldr	r3, [r3, #32]
 8007d62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	69db      	ldr	r3, [r3, #28]
 8007d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d70:	68fa      	ldr	r2, [r7, #12]
 8007d72:	4b24      	ldr	r3, [pc, #144]	; (8007e04 <TIM_OC4_SetConfig+0xbc>)
 8007d74:	4013      	ands	r3, r2
 8007d76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	021b      	lsls	r3, r3, #8
 8007d86:	68fa      	ldr	r2, [r7, #12]
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	031b      	lsls	r3, r3, #12
 8007d9a:	693a      	ldr	r2, [r7, #16]
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	4a19      	ldr	r2, [pc, #100]	; (8007e08 <TIM_OC4_SetConfig+0xc0>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d00f      	beq.n	8007dc8 <TIM_OC4_SetConfig+0x80>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4a18      	ldr	r2, [pc, #96]	; (8007e0c <TIM_OC4_SetConfig+0xc4>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d00b      	beq.n	8007dc8 <TIM_OC4_SetConfig+0x80>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	4a17      	ldr	r2, [pc, #92]	; (8007e10 <TIM_OC4_SetConfig+0xc8>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d007      	beq.n	8007dc8 <TIM_OC4_SetConfig+0x80>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	4a16      	ldr	r2, [pc, #88]	; (8007e14 <TIM_OC4_SetConfig+0xcc>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d003      	beq.n	8007dc8 <TIM_OC4_SetConfig+0x80>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4a15      	ldr	r2, [pc, #84]	; (8007e18 <TIM_OC4_SetConfig+0xd0>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d109      	bne.n	8007ddc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007dce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	695b      	ldr	r3, [r3, #20]
 8007dd4:	019b      	lsls	r3, r3, #6
 8007dd6:	697a      	ldr	r2, [r7, #20]
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	697a      	ldr	r2, [r7, #20]
 8007de0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	68fa      	ldr	r2, [r7, #12]
 8007de6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	685a      	ldr	r2, [r3, #4]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	693a      	ldr	r2, [r7, #16]
 8007df4:	621a      	str	r2, [r3, #32]
}
 8007df6:	bf00      	nop
 8007df8:	371c      	adds	r7, #28
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr
 8007e02:	bf00      	nop
 8007e04:	feff8fff 	.word	0xfeff8fff
 8007e08:	40010000 	.word	0x40010000
 8007e0c:	40010400 	.word	0x40010400
 8007e10:	40014000 	.word	0x40014000
 8007e14:	40014400 	.word	0x40014400
 8007e18:	40014800 	.word	0x40014800

08007e1c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b087      	sub	sp, #28
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6a1b      	ldr	r3, [r3, #32]
 8007e2a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6a1b      	ldr	r3, [r3, #32]
 8007e36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007e44:	68fa      	ldr	r2, [r7, #12]
 8007e46:	4b21      	ldr	r3, [pc, #132]	; (8007ecc <TIM_OC5_SetConfig+0xb0>)
 8007e48:	4013      	ands	r3, r2
 8007e4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	68fa      	ldr	r2, [r7, #12]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007e5c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	041b      	lsls	r3, r3, #16
 8007e64:	693a      	ldr	r2, [r7, #16]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a18      	ldr	r2, [pc, #96]	; (8007ed0 <TIM_OC5_SetConfig+0xb4>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d00f      	beq.n	8007e92 <TIM_OC5_SetConfig+0x76>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4a17      	ldr	r2, [pc, #92]	; (8007ed4 <TIM_OC5_SetConfig+0xb8>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d00b      	beq.n	8007e92 <TIM_OC5_SetConfig+0x76>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a16      	ldr	r2, [pc, #88]	; (8007ed8 <TIM_OC5_SetConfig+0xbc>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d007      	beq.n	8007e92 <TIM_OC5_SetConfig+0x76>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a15      	ldr	r2, [pc, #84]	; (8007edc <TIM_OC5_SetConfig+0xc0>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d003      	beq.n	8007e92 <TIM_OC5_SetConfig+0x76>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4a14      	ldr	r2, [pc, #80]	; (8007ee0 <TIM_OC5_SetConfig+0xc4>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d109      	bne.n	8007ea6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e98:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	695b      	ldr	r3, [r3, #20]
 8007e9e:	021b      	lsls	r3, r3, #8
 8007ea0:	697a      	ldr	r2, [r7, #20]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	697a      	ldr	r2, [r7, #20]
 8007eaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	68fa      	ldr	r2, [r7, #12]
 8007eb0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	685a      	ldr	r2, [r3, #4]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	693a      	ldr	r2, [r7, #16]
 8007ebe:	621a      	str	r2, [r3, #32]
}
 8007ec0:	bf00      	nop
 8007ec2:	371c      	adds	r7, #28
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr
 8007ecc:	fffeff8f 	.word	0xfffeff8f
 8007ed0:	40010000 	.word	0x40010000
 8007ed4:	40010400 	.word	0x40010400
 8007ed8:	40014000 	.word	0x40014000
 8007edc:	40014400 	.word	0x40014400
 8007ee0:	40014800 	.word	0x40014800

08007ee4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b087      	sub	sp, #28
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6a1b      	ldr	r3, [r3, #32]
 8007ef2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6a1b      	ldr	r3, [r3, #32]
 8007efe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007f0c:	68fa      	ldr	r2, [r7, #12]
 8007f0e:	4b22      	ldr	r3, [pc, #136]	; (8007f98 <TIM_OC6_SetConfig+0xb4>)
 8007f10:	4013      	ands	r3, r2
 8007f12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	021b      	lsls	r3, r3, #8
 8007f1a:	68fa      	ldr	r2, [r7, #12]
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007f26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	051b      	lsls	r3, r3, #20
 8007f2e:	693a      	ldr	r2, [r7, #16]
 8007f30:	4313      	orrs	r3, r2
 8007f32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	4a19      	ldr	r2, [pc, #100]	; (8007f9c <TIM_OC6_SetConfig+0xb8>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d00f      	beq.n	8007f5c <TIM_OC6_SetConfig+0x78>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	4a18      	ldr	r2, [pc, #96]	; (8007fa0 <TIM_OC6_SetConfig+0xbc>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d00b      	beq.n	8007f5c <TIM_OC6_SetConfig+0x78>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	4a17      	ldr	r2, [pc, #92]	; (8007fa4 <TIM_OC6_SetConfig+0xc0>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d007      	beq.n	8007f5c <TIM_OC6_SetConfig+0x78>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	4a16      	ldr	r2, [pc, #88]	; (8007fa8 <TIM_OC6_SetConfig+0xc4>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d003      	beq.n	8007f5c <TIM_OC6_SetConfig+0x78>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	4a15      	ldr	r2, [pc, #84]	; (8007fac <TIM_OC6_SetConfig+0xc8>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d109      	bne.n	8007f70 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f62:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	695b      	ldr	r3, [r3, #20]
 8007f68:	029b      	lsls	r3, r3, #10
 8007f6a:	697a      	ldr	r2, [r7, #20]
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	697a      	ldr	r2, [r7, #20]
 8007f74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	68fa      	ldr	r2, [r7, #12]
 8007f7a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	685a      	ldr	r2, [r3, #4]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	693a      	ldr	r2, [r7, #16]
 8007f88:	621a      	str	r2, [r3, #32]
}
 8007f8a:	bf00      	nop
 8007f8c:	371c      	adds	r7, #28
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr
 8007f96:	bf00      	nop
 8007f98:	feff8fff 	.word	0xfeff8fff
 8007f9c:	40010000 	.word	0x40010000
 8007fa0:	40010400 	.word	0x40010400
 8007fa4:	40014000 	.word	0x40014000
 8007fa8:	40014400 	.word	0x40014400
 8007fac:	40014800 	.word	0x40014800

08007fb0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b087      	sub	sp, #28
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	60f8      	str	r0, [r7, #12]
 8007fb8:	60b9      	str	r1, [r7, #8]
 8007fba:	607a      	str	r2, [r7, #4]
 8007fbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	6a1b      	ldr	r3, [r3, #32]
 8007fc2:	f023 0201 	bic.w	r2, r3, #1
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	699b      	ldr	r3, [r3, #24]
 8007fce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	6a1b      	ldr	r3, [r3, #32]
 8007fd4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	4a28      	ldr	r2, [pc, #160]	; (800807c <TIM_TI1_SetConfig+0xcc>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d01b      	beq.n	8008016 <TIM_TI1_SetConfig+0x66>
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fe4:	d017      	beq.n	8008016 <TIM_TI1_SetConfig+0x66>
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	4a25      	ldr	r2, [pc, #148]	; (8008080 <TIM_TI1_SetConfig+0xd0>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d013      	beq.n	8008016 <TIM_TI1_SetConfig+0x66>
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	4a24      	ldr	r2, [pc, #144]	; (8008084 <TIM_TI1_SetConfig+0xd4>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d00f      	beq.n	8008016 <TIM_TI1_SetConfig+0x66>
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	4a23      	ldr	r2, [pc, #140]	; (8008088 <TIM_TI1_SetConfig+0xd8>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d00b      	beq.n	8008016 <TIM_TI1_SetConfig+0x66>
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	4a22      	ldr	r2, [pc, #136]	; (800808c <TIM_TI1_SetConfig+0xdc>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d007      	beq.n	8008016 <TIM_TI1_SetConfig+0x66>
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	4a21      	ldr	r2, [pc, #132]	; (8008090 <TIM_TI1_SetConfig+0xe0>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d003      	beq.n	8008016 <TIM_TI1_SetConfig+0x66>
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	4a20      	ldr	r2, [pc, #128]	; (8008094 <TIM_TI1_SetConfig+0xe4>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d101      	bne.n	800801a <TIM_TI1_SetConfig+0x6a>
 8008016:	2301      	movs	r3, #1
 8008018:	e000      	b.n	800801c <TIM_TI1_SetConfig+0x6c>
 800801a:	2300      	movs	r3, #0
 800801c:	2b00      	cmp	r3, #0
 800801e:	d008      	beq.n	8008032 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	f023 0303 	bic.w	r3, r3, #3
 8008026:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008028:	697a      	ldr	r2, [r7, #20]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	4313      	orrs	r3, r2
 800802e:	617b      	str	r3, [r7, #20]
 8008030:	e003      	b.n	800803a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	f043 0301 	orr.w	r3, r3, #1
 8008038:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008040:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	011b      	lsls	r3, r3, #4
 8008046:	b2db      	uxtb	r3, r3
 8008048:	697a      	ldr	r2, [r7, #20]
 800804a:	4313      	orrs	r3, r2
 800804c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	f023 030a 	bic.w	r3, r3, #10
 8008054:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	f003 030a 	and.w	r3, r3, #10
 800805c:	693a      	ldr	r2, [r7, #16]
 800805e:	4313      	orrs	r3, r2
 8008060:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	697a      	ldr	r2, [r7, #20]
 8008066:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	693a      	ldr	r2, [r7, #16]
 800806c:	621a      	str	r2, [r3, #32]
}
 800806e:	bf00      	nop
 8008070:	371c      	adds	r7, #28
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr
 800807a:	bf00      	nop
 800807c:	40010000 	.word	0x40010000
 8008080:	40000400 	.word	0x40000400
 8008084:	40000800 	.word	0x40000800
 8008088:	40000c00 	.word	0x40000c00
 800808c:	40010400 	.word	0x40010400
 8008090:	40001800 	.word	0x40001800
 8008094:	40014000 	.word	0x40014000

08008098 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008098:	b480      	push	{r7}
 800809a:	b087      	sub	sp, #28
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	607a      	str	r2, [r7, #4]
 80080a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	6a1b      	ldr	r3, [r3, #32]
 80080aa:	f023 0210 	bic.w	r2, r3, #16
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	699b      	ldr	r3, [r3, #24]
 80080b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6a1b      	ldr	r3, [r3, #32]
 80080bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	021b      	lsls	r3, r3, #8
 80080ca:	697a      	ldr	r2, [r7, #20]
 80080cc:	4313      	orrs	r3, r2
 80080ce:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80080d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	031b      	lsls	r3, r3, #12
 80080dc:	b29b      	uxth	r3, r3
 80080de:	697a      	ldr	r2, [r7, #20]
 80080e0:	4313      	orrs	r3, r2
 80080e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80080ea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	011b      	lsls	r3, r3, #4
 80080f0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80080f4:	693a      	ldr	r2, [r7, #16]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	697a      	ldr	r2, [r7, #20]
 80080fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	693a      	ldr	r2, [r7, #16]
 8008104:	621a      	str	r2, [r3, #32]
}
 8008106:	bf00      	nop
 8008108:	371c      	adds	r7, #28
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr

08008112 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008112:	b480      	push	{r7}
 8008114:	b087      	sub	sp, #28
 8008116:	af00      	add	r7, sp, #0
 8008118:	60f8      	str	r0, [r7, #12]
 800811a:	60b9      	str	r1, [r7, #8]
 800811c:	607a      	str	r2, [r7, #4]
 800811e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	6a1b      	ldr	r3, [r3, #32]
 8008124:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	69db      	ldr	r3, [r3, #28]
 8008130:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	6a1b      	ldr	r3, [r3, #32]
 8008136:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	f023 0303 	bic.w	r3, r3, #3
 800813e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008140:	697a      	ldr	r2, [r7, #20]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	4313      	orrs	r3, r2
 8008146:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800814e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	011b      	lsls	r3, r3, #4
 8008154:	b2db      	uxtb	r3, r3
 8008156:	697a      	ldr	r2, [r7, #20]
 8008158:	4313      	orrs	r3, r2
 800815a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008162:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	021b      	lsls	r3, r3, #8
 8008168:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800816c:	693a      	ldr	r2, [r7, #16]
 800816e:	4313      	orrs	r3, r2
 8008170:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	697a      	ldr	r2, [r7, #20]
 8008176:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	693a      	ldr	r2, [r7, #16]
 800817c:	621a      	str	r2, [r3, #32]
}
 800817e:	bf00      	nop
 8008180:	371c      	adds	r7, #28
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr

0800818a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800818a:	b480      	push	{r7}
 800818c:	b087      	sub	sp, #28
 800818e:	af00      	add	r7, sp, #0
 8008190:	60f8      	str	r0, [r7, #12]
 8008192:	60b9      	str	r1, [r7, #8]
 8008194:	607a      	str	r2, [r7, #4]
 8008196:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6a1b      	ldr	r3, [r3, #32]
 800819c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	69db      	ldr	r3, [r3, #28]
 80081a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	6a1b      	ldr	r3, [r3, #32]
 80081ae:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081b6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	021b      	lsls	r3, r3, #8
 80081bc:	697a      	ldr	r2, [r7, #20]
 80081be:	4313      	orrs	r3, r2
 80081c0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80081c8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	031b      	lsls	r3, r3, #12
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	697a      	ldr	r2, [r7, #20]
 80081d2:	4313      	orrs	r3, r2
 80081d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80081dc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	031b      	lsls	r3, r3, #12
 80081e2:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80081e6:	693a      	ldr	r2, [r7, #16]
 80081e8:	4313      	orrs	r3, r2
 80081ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	697a      	ldr	r2, [r7, #20]
 80081f0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	693a      	ldr	r2, [r7, #16]
 80081f6:	621a      	str	r2, [r3, #32]
}
 80081f8:	bf00      	nop
 80081fa:	371c      	adds	r7, #28
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr

08008204 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008204:	b480      	push	{r7}
 8008206:	b087      	sub	sp, #28
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	f003 031f 	and.w	r3, r3, #31
 8008216:	2201      	movs	r2, #1
 8008218:	fa02 f303 	lsl.w	r3, r2, r3
 800821c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	6a1a      	ldr	r2, [r3, #32]
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	43db      	mvns	r3, r3
 8008226:	401a      	ands	r2, r3
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	6a1a      	ldr	r2, [r3, #32]
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	f003 031f 	and.w	r3, r3, #31
 8008236:	6879      	ldr	r1, [r7, #4]
 8008238:	fa01 f303 	lsl.w	r3, r1, r3
 800823c:	431a      	orrs	r2, r3
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	621a      	str	r2, [r3, #32]
}
 8008242:	bf00      	nop
 8008244:	371c      	adds	r7, #28
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr
	...

08008250 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008250:	b480      	push	{r7}
 8008252:	b085      	sub	sp, #20
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008260:	2b01      	cmp	r3, #1
 8008262:	d101      	bne.n	8008268 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008264:	2302      	movs	r3, #2
 8008266:	e06d      	b.n	8008344 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2201      	movs	r2, #1
 800826c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2202      	movs	r2, #2
 8008274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a30      	ldr	r2, [pc, #192]	; (8008350 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d004      	beq.n	800829c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a2f      	ldr	r2, [pc, #188]	; (8008354 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d108      	bne.n	80082ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80082a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	4313      	orrs	r3, r2
 80082ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	68fa      	ldr	r2, [r7, #12]
 80082bc:	4313      	orrs	r3, r2
 80082be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	68fa      	ldr	r2, [r7, #12]
 80082c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a20      	ldr	r2, [pc, #128]	; (8008350 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d022      	beq.n	8008318 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082da:	d01d      	beq.n	8008318 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a1d      	ldr	r2, [pc, #116]	; (8008358 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d018      	beq.n	8008318 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a1c      	ldr	r2, [pc, #112]	; (800835c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d013      	beq.n	8008318 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a1a      	ldr	r2, [pc, #104]	; (8008360 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d00e      	beq.n	8008318 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a15      	ldr	r2, [pc, #84]	; (8008354 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d009      	beq.n	8008318 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a16      	ldr	r2, [pc, #88]	; (8008364 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d004      	beq.n	8008318 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a15      	ldr	r2, [pc, #84]	; (8008368 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d10c      	bne.n	8008332 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800831e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	68ba      	ldr	r2, [r7, #8]
 8008326:	4313      	orrs	r3, r2
 8008328:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	68ba      	ldr	r2, [r7, #8]
 8008330:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2201      	movs	r2, #1
 8008336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2200      	movs	r2, #0
 800833e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008342:	2300      	movs	r3, #0
}
 8008344:	4618      	mov	r0, r3
 8008346:	3714      	adds	r7, #20
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr
 8008350:	40010000 	.word	0x40010000
 8008354:	40010400 	.word	0x40010400
 8008358:	40000400 	.word	0x40000400
 800835c:	40000800 	.word	0x40000800
 8008360:	40000c00 	.word	0x40000c00
 8008364:	40001800 	.word	0x40001800
 8008368:	40014000 	.word	0x40014000

0800836c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008374:	bf00      	nop
 8008376:	370c      	adds	r7, #12
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008380:	b480      	push	{r7}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008388:	bf00      	nop
 800838a:	370c      	adds	r7, #12
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008394:	b480      	push	{r7}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800839c:	bf00      	nop
 800839e:	370c      	adds	r7, #12
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d101      	bne.n	80083ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083b6:	2301      	movs	r3, #1
 80083b8:	e042      	b.n	8008440 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d106      	bne.n	80083d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2200      	movs	r2, #0
 80083c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f7f8 ff8f 	bl	80012f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2224      	movs	r2, #36	; 0x24
 80083d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f022 0201 	bic.w	r2, r2, #1
 80083e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 f8c2 	bl	8008574 <UART_SetConfig>
 80083f0:	4603      	mov	r3, r0
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d101      	bne.n	80083fa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80083f6:	2301      	movs	r3, #1
 80083f8:	e022      	b.n	8008440 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d002      	beq.n	8008408 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 fe1e 	bl	8009044 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	685a      	ldr	r2, [r3, #4]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008416:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	689a      	ldr	r2, [r3, #8]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008426:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f042 0201 	orr.w	r2, r2, #1
 8008436:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 fea5 	bl	8009188 <UART_CheckIdleState>
 800843e:	4603      	mov	r3, r0
}
 8008440:	4618      	mov	r0, r3
 8008442:	3708      	adds	r7, #8
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}

08008448 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b08a      	sub	sp, #40	; 0x28
 800844c:	af02      	add	r7, sp, #8
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	60b9      	str	r1, [r7, #8]
 8008452:	603b      	str	r3, [r7, #0]
 8008454:	4613      	mov	r3, r2
 8008456:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800845e:	2b20      	cmp	r3, #32
 8008460:	f040 8083 	bne.w	800856a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d002      	beq.n	8008470 <HAL_UART_Transmit+0x28>
 800846a:	88fb      	ldrh	r3, [r7, #6]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d101      	bne.n	8008474 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008470:	2301      	movs	r3, #1
 8008472:	e07b      	b.n	800856c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800847a:	2b01      	cmp	r3, #1
 800847c:	d101      	bne.n	8008482 <HAL_UART_Transmit+0x3a>
 800847e:	2302      	movs	r3, #2
 8008480:	e074      	b.n	800856c <HAL_UART_Transmit+0x124>
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2201      	movs	r2, #1
 8008486:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2200      	movs	r2, #0
 800848e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2221      	movs	r2, #33	; 0x21
 8008496:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800849a:	f7f9 f9a1 	bl	80017e0 <HAL_GetTick>
 800849e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	88fa      	ldrh	r2, [r7, #6]
 80084a4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	88fa      	ldrh	r2, [r7, #6]
 80084ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084b8:	d108      	bne.n	80084cc <HAL_UART_Transmit+0x84>
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	691b      	ldr	r3, [r3, #16]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d104      	bne.n	80084cc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80084c2:	2300      	movs	r3, #0
 80084c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	61bb      	str	r3, [r7, #24]
 80084ca:	e003      	b.n	80084d4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80084d0:	2300      	movs	r3, #0
 80084d2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2200      	movs	r2, #0
 80084d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80084dc:	e02c      	b.n	8008538 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	9300      	str	r3, [sp, #0]
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	2200      	movs	r2, #0
 80084e6:	2180      	movs	r1, #128	; 0x80
 80084e8:	68f8      	ldr	r0, [r7, #12]
 80084ea:	f000 fe98 	bl	800921e <UART_WaitOnFlagUntilTimeout>
 80084ee:	4603      	mov	r3, r0
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d001      	beq.n	80084f8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80084f4:	2303      	movs	r3, #3
 80084f6:	e039      	b.n	800856c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80084f8:	69fb      	ldr	r3, [r7, #28]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d10b      	bne.n	8008516 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80084fe:	69bb      	ldr	r3, [r7, #24]
 8008500:	881b      	ldrh	r3, [r3, #0]
 8008502:	461a      	mov	r2, r3
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800850c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800850e:	69bb      	ldr	r3, [r7, #24]
 8008510:	3302      	adds	r3, #2
 8008512:	61bb      	str	r3, [r7, #24]
 8008514:	e007      	b.n	8008526 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008516:	69fb      	ldr	r3, [r7, #28]
 8008518:	781a      	ldrb	r2, [r3, #0]
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008520:	69fb      	ldr	r3, [r7, #28]
 8008522:	3301      	adds	r3, #1
 8008524:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800852c:	b29b      	uxth	r3, r3
 800852e:	3b01      	subs	r3, #1
 8008530:	b29a      	uxth	r2, r3
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800853e:	b29b      	uxth	r3, r3
 8008540:	2b00      	cmp	r3, #0
 8008542:	d1cc      	bne.n	80084de <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	9300      	str	r3, [sp, #0]
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	2200      	movs	r2, #0
 800854c:	2140      	movs	r1, #64	; 0x40
 800854e:	68f8      	ldr	r0, [r7, #12]
 8008550:	f000 fe65 	bl	800921e <UART_WaitOnFlagUntilTimeout>
 8008554:	4603      	mov	r3, r0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d001      	beq.n	800855e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800855a:	2303      	movs	r3, #3
 800855c:	e006      	b.n	800856c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2220      	movs	r2, #32
 8008562:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008566:	2300      	movs	r3, #0
 8008568:	e000      	b.n	800856c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800856a:	2302      	movs	r3, #2
  }
}
 800856c:	4618      	mov	r0, r3
 800856e:	3720      	adds	r7, #32
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008574:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008578:	b092      	sub	sp, #72	; 0x48
 800857a:	af00      	add	r7, sp, #0
 800857c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800857e:	2300      	movs	r3, #0
 8008580:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	689a      	ldr	r2, [r3, #8]
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	691b      	ldr	r3, [r3, #16]
 800858c:	431a      	orrs	r2, r3
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	695b      	ldr	r3, [r3, #20]
 8008592:	431a      	orrs	r2, r3
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	69db      	ldr	r3, [r3, #28]
 8008598:	4313      	orrs	r3, r2
 800859a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	4bbe      	ldr	r3, [pc, #760]	; (800889c <UART_SetConfig+0x328>)
 80085a4:	4013      	ands	r3, r2
 80085a6:	697a      	ldr	r2, [r7, #20]
 80085a8:	6812      	ldr	r2, [r2, #0]
 80085aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80085ac:	430b      	orrs	r3, r1
 80085ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	68da      	ldr	r2, [r3, #12]
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	430a      	orrs	r2, r1
 80085c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	699b      	ldr	r3, [r3, #24]
 80085ca:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4ab3      	ldr	r2, [pc, #716]	; (80088a0 <UART_SetConfig+0x32c>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d004      	beq.n	80085e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	6a1b      	ldr	r3, [r3, #32]
 80085da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085dc:	4313      	orrs	r3, r2
 80085de:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	689a      	ldr	r2, [r3, #8]
 80085e6:	4baf      	ldr	r3, [pc, #700]	; (80088a4 <UART_SetConfig+0x330>)
 80085e8:	4013      	ands	r3, r2
 80085ea:	697a      	ldr	r2, [r7, #20]
 80085ec:	6812      	ldr	r2, [r2, #0]
 80085ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80085f0:	430b      	orrs	r3, r1
 80085f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085fa:	f023 010f 	bic.w	r1, r3, #15
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	430a      	orrs	r2, r1
 8008608:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4aa6      	ldr	r2, [pc, #664]	; (80088a8 <UART_SetConfig+0x334>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d177      	bne.n	8008704 <UART_SetConfig+0x190>
 8008614:	4ba5      	ldr	r3, [pc, #660]	; (80088ac <UART_SetConfig+0x338>)
 8008616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008618:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800861c:	2b28      	cmp	r3, #40	; 0x28
 800861e:	d86d      	bhi.n	80086fc <UART_SetConfig+0x188>
 8008620:	a201      	add	r2, pc, #4	; (adr r2, 8008628 <UART_SetConfig+0xb4>)
 8008622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008626:	bf00      	nop
 8008628:	080086cd 	.word	0x080086cd
 800862c:	080086fd 	.word	0x080086fd
 8008630:	080086fd 	.word	0x080086fd
 8008634:	080086fd 	.word	0x080086fd
 8008638:	080086fd 	.word	0x080086fd
 800863c:	080086fd 	.word	0x080086fd
 8008640:	080086fd 	.word	0x080086fd
 8008644:	080086fd 	.word	0x080086fd
 8008648:	080086d5 	.word	0x080086d5
 800864c:	080086fd 	.word	0x080086fd
 8008650:	080086fd 	.word	0x080086fd
 8008654:	080086fd 	.word	0x080086fd
 8008658:	080086fd 	.word	0x080086fd
 800865c:	080086fd 	.word	0x080086fd
 8008660:	080086fd 	.word	0x080086fd
 8008664:	080086fd 	.word	0x080086fd
 8008668:	080086dd 	.word	0x080086dd
 800866c:	080086fd 	.word	0x080086fd
 8008670:	080086fd 	.word	0x080086fd
 8008674:	080086fd 	.word	0x080086fd
 8008678:	080086fd 	.word	0x080086fd
 800867c:	080086fd 	.word	0x080086fd
 8008680:	080086fd 	.word	0x080086fd
 8008684:	080086fd 	.word	0x080086fd
 8008688:	080086e5 	.word	0x080086e5
 800868c:	080086fd 	.word	0x080086fd
 8008690:	080086fd 	.word	0x080086fd
 8008694:	080086fd 	.word	0x080086fd
 8008698:	080086fd 	.word	0x080086fd
 800869c:	080086fd 	.word	0x080086fd
 80086a0:	080086fd 	.word	0x080086fd
 80086a4:	080086fd 	.word	0x080086fd
 80086a8:	080086ed 	.word	0x080086ed
 80086ac:	080086fd 	.word	0x080086fd
 80086b0:	080086fd 	.word	0x080086fd
 80086b4:	080086fd 	.word	0x080086fd
 80086b8:	080086fd 	.word	0x080086fd
 80086bc:	080086fd 	.word	0x080086fd
 80086c0:	080086fd 	.word	0x080086fd
 80086c4:	080086fd 	.word	0x080086fd
 80086c8:	080086f5 	.word	0x080086f5
 80086cc:	2301      	movs	r3, #1
 80086ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086d2:	e222      	b.n	8008b1a <UART_SetConfig+0x5a6>
 80086d4:	2304      	movs	r3, #4
 80086d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086da:	e21e      	b.n	8008b1a <UART_SetConfig+0x5a6>
 80086dc:	2308      	movs	r3, #8
 80086de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086e2:	e21a      	b.n	8008b1a <UART_SetConfig+0x5a6>
 80086e4:	2310      	movs	r3, #16
 80086e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086ea:	e216      	b.n	8008b1a <UART_SetConfig+0x5a6>
 80086ec:	2320      	movs	r3, #32
 80086ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086f2:	e212      	b.n	8008b1a <UART_SetConfig+0x5a6>
 80086f4:	2340      	movs	r3, #64	; 0x40
 80086f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086fa:	e20e      	b.n	8008b1a <UART_SetConfig+0x5a6>
 80086fc:	2380      	movs	r3, #128	; 0x80
 80086fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008702:	e20a      	b.n	8008b1a <UART_SetConfig+0x5a6>
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a69      	ldr	r2, [pc, #420]	; (80088b0 <UART_SetConfig+0x33c>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d130      	bne.n	8008770 <UART_SetConfig+0x1fc>
 800870e:	4b67      	ldr	r3, [pc, #412]	; (80088ac <UART_SetConfig+0x338>)
 8008710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008712:	f003 0307 	and.w	r3, r3, #7
 8008716:	2b05      	cmp	r3, #5
 8008718:	d826      	bhi.n	8008768 <UART_SetConfig+0x1f4>
 800871a:	a201      	add	r2, pc, #4	; (adr r2, 8008720 <UART_SetConfig+0x1ac>)
 800871c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008720:	08008739 	.word	0x08008739
 8008724:	08008741 	.word	0x08008741
 8008728:	08008749 	.word	0x08008749
 800872c:	08008751 	.word	0x08008751
 8008730:	08008759 	.word	0x08008759
 8008734:	08008761 	.word	0x08008761
 8008738:	2300      	movs	r3, #0
 800873a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800873e:	e1ec      	b.n	8008b1a <UART_SetConfig+0x5a6>
 8008740:	2304      	movs	r3, #4
 8008742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008746:	e1e8      	b.n	8008b1a <UART_SetConfig+0x5a6>
 8008748:	2308      	movs	r3, #8
 800874a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800874e:	e1e4      	b.n	8008b1a <UART_SetConfig+0x5a6>
 8008750:	2310      	movs	r3, #16
 8008752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008756:	e1e0      	b.n	8008b1a <UART_SetConfig+0x5a6>
 8008758:	2320      	movs	r3, #32
 800875a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800875e:	e1dc      	b.n	8008b1a <UART_SetConfig+0x5a6>
 8008760:	2340      	movs	r3, #64	; 0x40
 8008762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008766:	e1d8      	b.n	8008b1a <UART_SetConfig+0x5a6>
 8008768:	2380      	movs	r3, #128	; 0x80
 800876a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800876e:	e1d4      	b.n	8008b1a <UART_SetConfig+0x5a6>
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a4f      	ldr	r2, [pc, #316]	; (80088b4 <UART_SetConfig+0x340>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d130      	bne.n	80087dc <UART_SetConfig+0x268>
 800877a:	4b4c      	ldr	r3, [pc, #304]	; (80088ac <UART_SetConfig+0x338>)
 800877c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800877e:	f003 0307 	and.w	r3, r3, #7
 8008782:	2b05      	cmp	r3, #5
 8008784:	d826      	bhi.n	80087d4 <UART_SetConfig+0x260>
 8008786:	a201      	add	r2, pc, #4	; (adr r2, 800878c <UART_SetConfig+0x218>)
 8008788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800878c:	080087a5 	.word	0x080087a5
 8008790:	080087ad 	.word	0x080087ad
 8008794:	080087b5 	.word	0x080087b5
 8008798:	080087bd 	.word	0x080087bd
 800879c:	080087c5 	.word	0x080087c5
 80087a0:	080087cd 	.word	0x080087cd
 80087a4:	2300      	movs	r3, #0
 80087a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087aa:	e1b6      	b.n	8008b1a <UART_SetConfig+0x5a6>
 80087ac:	2304      	movs	r3, #4
 80087ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087b2:	e1b2      	b.n	8008b1a <UART_SetConfig+0x5a6>
 80087b4:	2308      	movs	r3, #8
 80087b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087ba:	e1ae      	b.n	8008b1a <UART_SetConfig+0x5a6>
 80087bc:	2310      	movs	r3, #16
 80087be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087c2:	e1aa      	b.n	8008b1a <UART_SetConfig+0x5a6>
 80087c4:	2320      	movs	r3, #32
 80087c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087ca:	e1a6      	b.n	8008b1a <UART_SetConfig+0x5a6>
 80087cc:	2340      	movs	r3, #64	; 0x40
 80087ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087d2:	e1a2      	b.n	8008b1a <UART_SetConfig+0x5a6>
 80087d4:	2380      	movs	r3, #128	; 0x80
 80087d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087da:	e19e      	b.n	8008b1a <UART_SetConfig+0x5a6>
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a35      	ldr	r2, [pc, #212]	; (80088b8 <UART_SetConfig+0x344>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d130      	bne.n	8008848 <UART_SetConfig+0x2d4>
 80087e6:	4b31      	ldr	r3, [pc, #196]	; (80088ac <UART_SetConfig+0x338>)
 80087e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087ea:	f003 0307 	and.w	r3, r3, #7
 80087ee:	2b05      	cmp	r3, #5
 80087f0:	d826      	bhi.n	8008840 <UART_SetConfig+0x2cc>
 80087f2:	a201      	add	r2, pc, #4	; (adr r2, 80087f8 <UART_SetConfig+0x284>)
 80087f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087f8:	08008811 	.word	0x08008811
 80087fc:	08008819 	.word	0x08008819
 8008800:	08008821 	.word	0x08008821
 8008804:	08008829 	.word	0x08008829
 8008808:	08008831 	.word	0x08008831
 800880c:	08008839 	.word	0x08008839
 8008810:	2300      	movs	r3, #0
 8008812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008816:	e180      	b.n	8008b1a <UART_SetConfig+0x5a6>
 8008818:	2304      	movs	r3, #4
 800881a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800881e:	e17c      	b.n	8008b1a <UART_SetConfig+0x5a6>
 8008820:	2308      	movs	r3, #8
 8008822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008826:	e178      	b.n	8008b1a <UART_SetConfig+0x5a6>
 8008828:	2310      	movs	r3, #16
 800882a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800882e:	e174      	b.n	8008b1a <UART_SetConfig+0x5a6>
 8008830:	2320      	movs	r3, #32
 8008832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008836:	e170      	b.n	8008b1a <UART_SetConfig+0x5a6>
 8008838:	2340      	movs	r3, #64	; 0x40
 800883a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800883e:	e16c      	b.n	8008b1a <UART_SetConfig+0x5a6>
 8008840:	2380      	movs	r3, #128	; 0x80
 8008842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008846:	e168      	b.n	8008b1a <UART_SetConfig+0x5a6>
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a1b      	ldr	r2, [pc, #108]	; (80088bc <UART_SetConfig+0x348>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d142      	bne.n	80088d8 <UART_SetConfig+0x364>
 8008852:	4b16      	ldr	r3, [pc, #88]	; (80088ac <UART_SetConfig+0x338>)
 8008854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008856:	f003 0307 	and.w	r3, r3, #7
 800885a:	2b05      	cmp	r3, #5
 800885c:	d838      	bhi.n	80088d0 <UART_SetConfig+0x35c>
 800885e:	a201      	add	r2, pc, #4	; (adr r2, 8008864 <UART_SetConfig+0x2f0>)
 8008860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008864:	0800887d 	.word	0x0800887d
 8008868:	08008885 	.word	0x08008885
 800886c:	0800888d 	.word	0x0800888d
 8008870:	08008895 	.word	0x08008895
 8008874:	080088c1 	.word	0x080088c1
 8008878:	080088c9 	.word	0x080088c9
 800887c:	2300      	movs	r3, #0
 800887e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008882:	e14a      	b.n	8008b1a <UART_SetConfig+0x5a6>
 8008884:	2304      	movs	r3, #4
 8008886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800888a:	e146      	b.n	8008b1a <UART_SetConfig+0x5a6>
 800888c:	2308      	movs	r3, #8
 800888e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008892:	e142      	b.n	8008b1a <UART_SetConfig+0x5a6>
 8008894:	2310      	movs	r3, #16
 8008896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800889a:	e13e      	b.n	8008b1a <UART_SetConfig+0x5a6>
 800889c:	cfff69f3 	.word	0xcfff69f3
 80088a0:	58000c00 	.word	0x58000c00
 80088a4:	11fff4ff 	.word	0x11fff4ff
 80088a8:	40011000 	.word	0x40011000
 80088ac:	58024400 	.word	0x58024400
 80088b0:	40004400 	.word	0x40004400
 80088b4:	40004800 	.word	0x40004800
 80088b8:	40004c00 	.word	0x40004c00
 80088bc:	40005000 	.word	0x40005000
 80088c0:	2320      	movs	r3, #32
 80088c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088c6:	e128      	b.n	8008b1a <UART_SetConfig+0x5a6>
 80088c8:	2340      	movs	r3, #64	; 0x40
 80088ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088ce:	e124      	b.n	8008b1a <UART_SetConfig+0x5a6>
 80088d0:	2380      	movs	r3, #128	; 0x80
 80088d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088d6:	e120      	b.n	8008b1a <UART_SetConfig+0x5a6>
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4acb      	ldr	r2, [pc, #812]	; (8008c0c <UART_SetConfig+0x698>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d176      	bne.n	80089d0 <UART_SetConfig+0x45c>
 80088e2:	4bcb      	ldr	r3, [pc, #812]	; (8008c10 <UART_SetConfig+0x69c>)
 80088e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80088ea:	2b28      	cmp	r3, #40	; 0x28
 80088ec:	d86c      	bhi.n	80089c8 <UART_SetConfig+0x454>
 80088ee:	a201      	add	r2, pc, #4	; (adr r2, 80088f4 <UART_SetConfig+0x380>)
 80088f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f4:	08008999 	.word	0x08008999
 80088f8:	080089c9 	.word	0x080089c9
 80088fc:	080089c9 	.word	0x080089c9
 8008900:	080089c9 	.word	0x080089c9
 8008904:	080089c9 	.word	0x080089c9
 8008908:	080089c9 	.word	0x080089c9
 800890c:	080089c9 	.word	0x080089c9
 8008910:	080089c9 	.word	0x080089c9
 8008914:	080089a1 	.word	0x080089a1
 8008918:	080089c9 	.word	0x080089c9
 800891c:	080089c9 	.word	0x080089c9
 8008920:	080089c9 	.word	0x080089c9
 8008924:	080089c9 	.word	0x080089c9
 8008928:	080089c9 	.word	0x080089c9
 800892c:	080089c9 	.word	0x080089c9
 8008930:	080089c9 	.word	0x080089c9
 8008934:	080089a9 	.word	0x080089a9
 8008938:	080089c9 	.word	0x080089c9
 800893c:	080089c9 	.word	0x080089c9
 8008940:	080089c9 	.word	0x080089c9
 8008944:	080089c9 	.word	0x080089c9
 8008948:	080089c9 	.word	0x080089c9
 800894c:	080089c9 	.word	0x080089c9
 8008950:	080089c9 	.word	0x080089c9
 8008954:	080089b1 	.word	0x080089b1
 8008958:	080089c9 	.word	0x080089c9
 800895c:	080089c9 	.word	0x080089c9
 8008960:	080089c9 	.word	0x080089c9
 8008964:	080089c9 	.word	0x080089c9
 8008968:	080089c9 	.word	0x080089c9
 800896c:	080089c9 	.word	0x080089c9
 8008970:	080089c9 	.word	0x080089c9
 8008974:	080089b9 	.word	0x080089b9
 8008978:	080089c9 	.word	0x080089c9
 800897c:	080089c9 	.word	0x080089c9
 8008980:	080089c9 	.word	0x080089c9
 8008984:	080089c9 	.word	0x080089c9
 8008988:	080089c9 	.word	0x080089c9
 800898c:	080089c9 	.word	0x080089c9
 8008990:	080089c9 	.word	0x080089c9
 8008994:	080089c1 	.word	0x080089c1
 8008998:	2301      	movs	r3, #1
 800899a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800899e:	e0bc      	b.n	8008b1a <UART_SetConfig+0x5a6>
 80089a0:	2304      	movs	r3, #4
 80089a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089a6:	e0b8      	b.n	8008b1a <UART_SetConfig+0x5a6>
 80089a8:	2308      	movs	r3, #8
 80089aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089ae:	e0b4      	b.n	8008b1a <UART_SetConfig+0x5a6>
 80089b0:	2310      	movs	r3, #16
 80089b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089b6:	e0b0      	b.n	8008b1a <UART_SetConfig+0x5a6>
 80089b8:	2320      	movs	r3, #32
 80089ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089be:	e0ac      	b.n	8008b1a <UART_SetConfig+0x5a6>
 80089c0:	2340      	movs	r3, #64	; 0x40
 80089c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089c6:	e0a8      	b.n	8008b1a <UART_SetConfig+0x5a6>
 80089c8:	2380      	movs	r3, #128	; 0x80
 80089ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089ce:	e0a4      	b.n	8008b1a <UART_SetConfig+0x5a6>
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a8f      	ldr	r2, [pc, #572]	; (8008c14 <UART_SetConfig+0x6a0>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d130      	bne.n	8008a3c <UART_SetConfig+0x4c8>
 80089da:	4b8d      	ldr	r3, [pc, #564]	; (8008c10 <UART_SetConfig+0x69c>)
 80089dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089de:	f003 0307 	and.w	r3, r3, #7
 80089e2:	2b05      	cmp	r3, #5
 80089e4:	d826      	bhi.n	8008a34 <UART_SetConfig+0x4c0>
 80089e6:	a201      	add	r2, pc, #4	; (adr r2, 80089ec <UART_SetConfig+0x478>)
 80089e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ec:	08008a05 	.word	0x08008a05
 80089f0:	08008a0d 	.word	0x08008a0d
 80089f4:	08008a15 	.word	0x08008a15
 80089f8:	08008a1d 	.word	0x08008a1d
 80089fc:	08008a25 	.word	0x08008a25
 8008a00:	08008a2d 	.word	0x08008a2d
 8008a04:	2300      	movs	r3, #0
 8008a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a0a:	e086      	b.n	8008b1a <UART_SetConfig+0x5a6>
 8008a0c:	2304      	movs	r3, #4
 8008a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a12:	e082      	b.n	8008b1a <UART_SetConfig+0x5a6>
 8008a14:	2308      	movs	r3, #8
 8008a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a1a:	e07e      	b.n	8008b1a <UART_SetConfig+0x5a6>
 8008a1c:	2310      	movs	r3, #16
 8008a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a22:	e07a      	b.n	8008b1a <UART_SetConfig+0x5a6>
 8008a24:	2320      	movs	r3, #32
 8008a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a2a:	e076      	b.n	8008b1a <UART_SetConfig+0x5a6>
 8008a2c:	2340      	movs	r3, #64	; 0x40
 8008a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a32:	e072      	b.n	8008b1a <UART_SetConfig+0x5a6>
 8008a34:	2380      	movs	r3, #128	; 0x80
 8008a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a3a:	e06e      	b.n	8008b1a <UART_SetConfig+0x5a6>
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a75      	ldr	r2, [pc, #468]	; (8008c18 <UART_SetConfig+0x6a4>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d130      	bne.n	8008aa8 <UART_SetConfig+0x534>
 8008a46:	4b72      	ldr	r3, [pc, #456]	; (8008c10 <UART_SetConfig+0x69c>)
 8008a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a4a:	f003 0307 	and.w	r3, r3, #7
 8008a4e:	2b05      	cmp	r3, #5
 8008a50:	d826      	bhi.n	8008aa0 <UART_SetConfig+0x52c>
 8008a52:	a201      	add	r2, pc, #4	; (adr r2, 8008a58 <UART_SetConfig+0x4e4>)
 8008a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a58:	08008a71 	.word	0x08008a71
 8008a5c:	08008a79 	.word	0x08008a79
 8008a60:	08008a81 	.word	0x08008a81
 8008a64:	08008a89 	.word	0x08008a89
 8008a68:	08008a91 	.word	0x08008a91
 8008a6c:	08008a99 	.word	0x08008a99
 8008a70:	2300      	movs	r3, #0
 8008a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a76:	e050      	b.n	8008b1a <UART_SetConfig+0x5a6>
 8008a78:	2304      	movs	r3, #4
 8008a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a7e:	e04c      	b.n	8008b1a <UART_SetConfig+0x5a6>
 8008a80:	2308      	movs	r3, #8
 8008a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a86:	e048      	b.n	8008b1a <UART_SetConfig+0x5a6>
 8008a88:	2310      	movs	r3, #16
 8008a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a8e:	e044      	b.n	8008b1a <UART_SetConfig+0x5a6>
 8008a90:	2320      	movs	r3, #32
 8008a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a96:	e040      	b.n	8008b1a <UART_SetConfig+0x5a6>
 8008a98:	2340      	movs	r3, #64	; 0x40
 8008a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a9e:	e03c      	b.n	8008b1a <UART_SetConfig+0x5a6>
 8008aa0:	2380      	movs	r3, #128	; 0x80
 8008aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aa6:	e038      	b.n	8008b1a <UART_SetConfig+0x5a6>
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a5b      	ldr	r2, [pc, #364]	; (8008c1c <UART_SetConfig+0x6a8>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d130      	bne.n	8008b14 <UART_SetConfig+0x5a0>
 8008ab2:	4b57      	ldr	r3, [pc, #348]	; (8008c10 <UART_SetConfig+0x69c>)
 8008ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ab6:	f003 0307 	and.w	r3, r3, #7
 8008aba:	2b05      	cmp	r3, #5
 8008abc:	d826      	bhi.n	8008b0c <UART_SetConfig+0x598>
 8008abe:	a201      	add	r2, pc, #4	; (adr r2, 8008ac4 <UART_SetConfig+0x550>)
 8008ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac4:	08008add 	.word	0x08008add
 8008ac8:	08008ae5 	.word	0x08008ae5
 8008acc:	08008aed 	.word	0x08008aed
 8008ad0:	08008af5 	.word	0x08008af5
 8008ad4:	08008afd 	.word	0x08008afd
 8008ad8:	08008b05 	.word	0x08008b05
 8008adc:	2302      	movs	r3, #2
 8008ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ae2:	e01a      	b.n	8008b1a <UART_SetConfig+0x5a6>
 8008ae4:	2304      	movs	r3, #4
 8008ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aea:	e016      	b.n	8008b1a <UART_SetConfig+0x5a6>
 8008aec:	2308      	movs	r3, #8
 8008aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008af2:	e012      	b.n	8008b1a <UART_SetConfig+0x5a6>
 8008af4:	2310      	movs	r3, #16
 8008af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008afa:	e00e      	b.n	8008b1a <UART_SetConfig+0x5a6>
 8008afc:	2320      	movs	r3, #32
 8008afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b02:	e00a      	b.n	8008b1a <UART_SetConfig+0x5a6>
 8008b04:	2340      	movs	r3, #64	; 0x40
 8008b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b0a:	e006      	b.n	8008b1a <UART_SetConfig+0x5a6>
 8008b0c:	2380      	movs	r3, #128	; 0x80
 8008b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b12:	e002      	b.n	8008b1a <UART_SetConfig+0x5a6>
 8008b14:	2380      	movs	r3, #128	; 0x80
 8008b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a3f      	ldr	r2, [pc, #252]	; (8008c1c <UART_SetConfig+0x6a8>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	f040 80f8 	bne.w	8008d16 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008b26:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008b2a:	2b20      	cmp	r3, #32
 8008b2c:	dc46      	bgt.n	8008bbc <UART_SetConfig+0x648>
 8008b2e:	2b02      	cmp	r3, #2
 8008b30:	f2c0 8082 	blt.w	8008c38 <UART_SetConfig+0x6c4>
 8008b34:	3b02      	subs	r3, #2
 8008b36:	2b1e      	cmp	r3, #30
 8008b38:	d87e      	bhi.n	8008c38 <UART_SetConfig+0x6c4>
 8008b3a:	a201      	add	r2, pc, #4	; (adr r2, 8008b40 <UART_SetConfig+0x5cc>)
 8008b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b40:	08008bc3 	.word	0x08008bc3
 8008b44:	08008c39 	.word	0x08008c39
 8008b48:	08008bcb 	.word	0x08008bcb
 8008b4c:	08008c39 	.word	0x08008c39
 8008b50:	08008c39 	.word	0x08008c39
 8008b54:	08008c39 	.word	0x08008c39
 8008b58:	08008bdb 	.word	0x08008bdb
 8008b5c:	08008c39 	.word	0x08008c39
 8008b60:	08008c39 	.word	0x08008c39
 8008b64:	08008c39 	.word	0x08008c39
 8008b68:	08008c39 	.word	0x08008c39
 8008b6c:	08008c39 	.word	0x08008c39
 8008b70:	08008c39 	.word	0x08008c39
 8008b74:	08008c39 	.word	0x08008c39
 8008b78:	08008beb 	.word	0x08008beb
 8008b7c:	08008c39 	.word	0x08008c39
 8008b80:	08008c39 	.word	0x08008c39
 8008b84:	08008c39 	.word	0x08008c39
 8008b88:	08008c39 	.word	0x08008c39
 8008b8c:	08008c39 	.word	0x08008c39
 8008b90:	08008c39 	.word	0x08008c39
 8008b94:	08008c39 	.word	0x08008c39
 8008b98:	08008c39 	.word	0x08008c39
 8008b9c:	08008c39 	.word	0x08008c39
 8008ba0:	08008c39 	.word	0x08008c39
 8008ba4:	08008c39 	.word	0x08008c39
 8008ba8:	08008c39 	.word	0x08008c39
 8008bac:	08008c39 	.word	0x08008c39
 8008bb0:	08008c39 	.word	0x08008c39
 8008bb4:	08008c39 	.word	0x08008c39
 8008bb8:	08008c2b 	.word	0x08008c2b
 8008bbc:	2b40      	cmp	r3, #64	; 0x40
 8008bbe:	d037      	beq.n	8008c30 <UART_SetConfig+0x6bc>
 8008bc0:	e03a      	b.n	8008c38 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008bc2:	f7fd fdaf 	bl	8006724 <HAL_RCCEx_GetD3PCLK1Freq>
 8008bc6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008bc8:	e03c      	b.n	8008c44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f7fd fdbe 	bl	8006750 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bd8:	e034      	b.n	8008c44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bda:	f107 0318 	add.w	r3, r7, #24
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7fd ff0a 	bl	80069f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008be4:	69fb      	ldr	r3, [r7, #28]
 8008be6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008be8:	e02c      	b.n	8008c44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008bea:	4b09      	ldr	r3, [pc, #36]	; (8008c10 <UART_SetConfig+0x69c>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f003 0320 	and.w	r3, r3, #32
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d016      	beq.n	8008c24 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008bf6:	4b06      	ldr	r3, [pc, #24]	; (8008c10 <UART_SetConfig+0x69c>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	08db      	lsrs	r3, r3, #3
 8008bfc:	f003 0303 	and.w	r3, r3, #3
 8008c00:	4a07      	ldr	r2, [pc, #28]	; (8008c20 <UART_SetConfig+0x6ac>)
 8008c02:	fa22 f303 	lsr.w	r3, r2, r3
 8008c06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008c08:	e01c      	b.n	8008c44 <UART_SetConfig+0x6d0>
 8008c0a:	bf00      	nop
 8008c0c:	40011400 	.word	0x40011400
 8008c10:	58024400 	.word	0x58024400
 8008c14:	40007800 	.word	0x40007800
 8008c18:	40007c00 	.word	0x40007c00
 8008c1c:	58000c00 	.word	0x58000c00
 8008c20:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008c24:	4b9d      	ldr	r3, [pc, #628]	; (8008e9c <UART_SetConfig+0x928>)
 8008c26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c28:	e00c      	b.n	8008c44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008c2a:	4b9d      	ldr	r3, [pc, #628]	; (8008ea0 <UART_SetConfig+0x92c>)
 8008c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c2e:	e009      	b.n	8008c44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c36:	e005      	b.n	8008c44 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008c42:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	f000 81de 	beq.w	8009008 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c50:	4a94      	ldr	r2, [pc, #592]	; (8008ea4 <UART_SetConfig+0x930>)
 8008c52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c56:	461a      	mov	r2, r3
 8008c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c5e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	685a      	ldr	r2, [r3, #4]
 8008c64:	4613      	mov	r3, r2
 8008c66:	005b      	lsls	r3, r3, #1
 8008c68:	4413      	add	r3, r2
 8008c6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d305      	bcc.n	8008c7c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008c76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d903      	bls.n	8008c84 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008c82:	e1c1      	b.n	8009008 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c86:	2200      	movs	r2, #0
 8008c88:	60bb      	str	r3, [r7, #8]
 8008c8a:	60fa      	str	r2, [r7, #12]
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c90:	4a84      	ldr	r2, [pc, #528]	; (8008ea4 <UART_SetConfig+0x930>)
 8008c92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	2200      	movs	r2, #0
 8008c9a:	603b      	str	r3, [r7, #0]
 8008c9c:	607a      	str	r2, [r7, #4]
 8008c9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ca2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008ca6:	f7f7 fb17 	bl	80002d8 <__aeabi_uldivmod>
 8008caa:	4602      	mov	r2, r0
 8008cac:	460b      	mov	r3, r1
 8008cae:	4610      	mov	r0, r2
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	f04f 0200 	mov.w	r2, #0
 8008cb6:	f04f 0300 	mov.w	r3, #0
 8008cba:	020b      	lsls	r3, r1, #8
 8008cbc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008cc0:	0202      	lsls	r2, r0, #8
 8008cc2:	6979      	ldr	r1, [r7, #20]
 8008cc4:	6849      	ldr	r1, [r1, #4]
 8008cc6:	0849      	lsrs	r1, r1, #1
 8008cc8:	2000      	movs	r0, #0
 8008cca:	460c      	mov	r4, r1
 8008ccc:	4605      	mov	r5, r0
 8008cce:	eb12 0804 	adds.w	r8, r2, r4
 8008cd2:	eb43 0905 	adc.w	r9, r3, r5
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	469a      	mov	sl, r3
 8008cde:	4693      	mov	fp, r2
 8008ce0:	4652      	mov	r2, sl
 8008ce2:	465b      	mov	r3, fp
 8008ce4:	4640      	mov	r0, r8
 8008ce6:	4649      	mov	r1, r9
 8008ce8:	f7f7 faf6 	bl	80002d8 <__aeabi_uldivmod>
 8008cec:	4602      	mov	r2, r0
 8008cee:	460b      	mov	r3, r1
 8008cf0:	4613      	mov	r3, r2
 8008cf2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008cfa:	d308      	bcc.n	8008d0e <UART_SetConfig+0x79a>
 8008cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d02:	d204      	bcs.n	8008d0e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d0a:	60da      	str	r2, [r3, #12]
 8008d0c:	e17c      	b.n	8009008 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008d14:	e178      	b.n	8009008 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	69db      	ldr	r3, [r3, #28]
 8008d1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d1e:	f040 80c5 	bne.w	8008eac <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008d22:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008d26:	2b20      	cmp	r3, #32
 8008d28:	dc48      	bgt.n	8008dbc <UART_SetConfig+0x848>
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	db7b      	blt.n	8008e26 <UART_SetConfig+0x8b2>
 8008d2e:	2b20      	cmp	r3, #32
 8008d30:	d879      	bhi.n	8008e26 <UART_SetConfig+0x8b2>
 8008d32:	a201      	add	r2, pc, #4	; (adr r2, 8008d38 <UART_SetConfig+0x7c4>)
 8008d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d38:	08008dc3 	.word	0x08008dc3
 8008d3c:	08008dcb 	.word	0x08008dcb
 8008d40:	08008e27 	.word	0x08008e27
 8008d44:	08008e27 	.word	0x08008e27
 8008d48:	08008dd3 	.word	0x08008dd3
 8008d4c:	08008e27 	.word	0x08008e27
 8008d50:	08008e27 	.word	0x08008e27
 8008d54:	08008e27 	.word	0x08008e27
 8008d58:	08008de3 	.word	0x08008de3
 8008d5c:	08008e27 	.word	0x08008e27
 8008d60:	08008e27 	.word	0x08008e27
 8008d64:	08008e27 	.word	0x08008e27
 8008d68:	08008e27 	.word	0x08008e27
 8008d6c:	08008e27 	.word	0x08008e27
 8008d70:	08008e27 	.word	0x08008e27
 8008d74:	08008e27 	.word	0x08008e27
 8008d78:	08008df3 	.word	0x08008df3
 8008d7c:	08008e27 	.word	0x08008e27
 8008d80:	08008e27 	.word	0x08008e27
 8008d84:	08008e27 	.word	0x08008e27
 8008d88:	08008e27 	.word	0x08008e27
 8008d8c:	08008e27 	.word	0x08008e27
 8008d90:	08008e27 	.word	0x08008e27
 8008d94:	08008e27 	.word	0x08008e27
 8008d98:	08008e27 	.word	0x08008e27
 8008d9c:	08008e27 	.word	0x08008e27
 8008da0:	08008e27 	.word	0x08008e27
 8008da4:	08008e27 	.word	0x08008e27
 8008da8:	08008e27 	.word	0x08008e27
 8008dac:	08008e27 	.word	0x08008e27
 8008db0:	08008e27 	.word	0x08008e27
 8008db4:	08008e27 	.word	0x08008e27
 8008db8:	08008e19 	.word	0x08008e19
 8008dbc:	2b40      	cmp	r3, #64	; 0x40
 8008dbe:	d02e      	beq.n	8008e1e <UART_SetConfig+0x8aa>
 8008dc0:	e031      	b.n	8008e26 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008dc2:	f7fc fd3d 	bl	8005840 <HAL_RCC_GetPCLK1Freq>
 8008dc6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008dc8:	e033      	b.n	8008e32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008dca:	f7fc fd4f 	bl	800586c <HAL_RCC_GetPCLK2Freq>
 8008dce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008dd0:	e02f      	b.n	8008e32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f7fd fcba 	bl	8006750 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008de0:	e027      	b.n	8008e32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008de2:	f107 0318 	add.w	r3, r7, #24
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7fd fe06 	bl	80069f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008dec:	69fb      	ldr	r3, [r7, #28]
 8008dee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008df0:	e01f      	b.n	8008e32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008df2:	4b2d      	ldr	r3, [pc, #180]	; (8008ea8 <UART_SetConfig+0x934>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f003 0320 	and.w	r3, r3, #32
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d009      	beq.n	8008e12 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008dfe:	4b2a      	ldr	r3, [pc, #168]	; (8008ea8 <UART_SetConfig+0x934>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	08db      	lsrs	r3, r3, #3
 8008e04:	f003 0303 	and.w	r3, r3, #3
 8008e08:	4a24      	ldr	r2, [pc, #144]	; (8008e9c <UART_SetConfig+0x928>)
 8008e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8008e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008e10:	e00f      	b.n	8008e32 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008e12:	4b22      	ldr	r3, [pc, #136]	; (8008e9c <UART_SetConfig+0x928>)
 8008e14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e16:	e00c      	b.n	8008e32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008e18:	4b21      	ldr	r3, [pc, #132]	; (8008ea0 <UART_SetConfig+0x92c>)
 8008e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e1c:	e009      	b.n	8008e32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e24:	e005      	b.n	8008e32 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008e26:	2300      	movs	r3, #0
 8008e28:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008e30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	f000 80e7 	beq.w	8009008 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3e:	4a19      	ldr	r2, [pc, #100]	; (8008ea4 <UART_SetConfig+0x930>)
 8008e40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e44:	461a      	mov	r2, r3
 8008e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e48:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e4c:	005a      	lsls	r2, r3, #1
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	085b      	lsrs	r3, r3, #1
 8008e54:	441a      	add	r2, r3
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e5e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e62:	2b0f      	cmp	r3, #15
 8008e64:	d916      	bls.n	8008e94 <UART_SetConfig+0x920>
 8008e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e6c:	d212      	bcs.n	8008e94 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	f023 030f 	bic.w	r3, r3, #15
 8008e76:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e7a:	085b      	lsrs	r3, r3, #1
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	f003 0307 	and.w	r3, r3, #7
 8008e82:	b29a      	uxth	r2, r3
 8008e84:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008e86:	4313      	orrs	r3, r2
 8008e88:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008e90:	60da      	str	r2, [r3, #12]
 8008e92:	e0b9      	b.n	8009008 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008e94:	2301      	movs	r3, #1
 8008e96:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008e9a:	e0b5      	b.n	8009008 <UART_SetConfig+0xa94>
 8008e9c:	03d09000 	.word	0x03d09000
 8008ea0:	003d0900 	.word	0x003d0900
 8008ea4:	08009c50 	.word	0x08009c50
 8008ea8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008eac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008eb0:	2b20      	cmp	r3, #32
 8008eb2:	dc49      	bgt.n	8008f48 <UART_SetConfig+0x9d4>
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	db7c      	blt.n	8008fb2 <UART_SetConfig+0xa3e>
 8008eb8:	2b20      	cmp	r3, #32
 8008eba:	d87a      	bhi.n	8008fb2 <UART_SetConfig+0xa3e>
 8008ebc:	a201      	add	r2, pc, #4	; (adr r2, 8008ec4 <UART_SetConfig+0x950>)
 8008ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec2:	bf00      	nop
 8008ec4:	08008f4f 	.word	0x08008f4f
 8008ec8:	08008f57 	.word	0x08008f57
 8008ecc:	08008fb3 	.word	0x08008fb3
 8008ed0:	08008fb3 	.word	0x08008fb3
 8008ed4:	08008f5f 	.word	0x08008f5f
 8008ed8:	08008fb3 	.word	0x08008fb3
 8008edc:	08008fb3 	.word	0x08008fb3
 8008ee0:	08008fb3 	.word	0x08008fb3
 8008ee4:	08008f6f 	.word	0x08008f6f
 8008ee8:	08008fb3 	.word	0x08008fb3
 8008eec:	08008fb3 	.word	0x08008fb3
 8008ef0:	08008fb3 	.word	0x08008fb3
 8008ef4:	08008fb3 	.word	0x08008fb3
 8008ef8:	08008fb3 	.word	0x08008fb3
 8008efc:	08008fb3 	.word	0x08008fb3
 8008f00:	08008fb3 	.word	0x08008fb3
 8008f04:	08008f7f 	.word	0x08008f7f
 8008f08:	08008fb3 	.word	0x08008fb3
 8008f0c:	08008fb3 	.word	0x08008fb3
 8008f10:	08008fb3 	.word	0x08008fb3
 8008f14:	08008fb3 	.word	0x08008fb3
 8008f18:	08008fb3 	.word	0x08008fb3
 8008f1c:	08008fb3 	.word	0x08008fb3
 8008f20:	08008fb3 	.word	0x08008fb3
 8008f24:	08008fb3 	.word	0x08008fb3
 8008f28:	08008fb3 	.word	0x08008fb3
 8008f2c:	08008fb3 	.word	0x08008fb3
 8008f30:	08008fb3 	.word	0x08008fb3
 8008f34:	08008fb3 	.word	0x08008fb3
 8008f38:	08008fb3 	.word	0x08008fb3
 8008f3c:	08008fb3 	.word	0x08008fb3
 8008f40:	08008fb3 	.word	0x08008fb3
 8008f44:	08008fa5 	.word	0x08008fa5
 8008f48:	2b40      	cmp	r3, #64	; 0x40
 8008f4a:	d02e      	beq.n	8008faa <UART_SetConfig+0xa36>
 8008f4c:	e031      	b.n	8008fb2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f4e:	f7fc fc77 	bl	8005840 <HAL_RCC_GetPCLK1Freq>
 8008f52:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008f54:	e033      	b.n	8008fbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f56:	f7fc fc89 	bl	800586c <HAL_RCC_GetPCLK2Freq>
 8008f5a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008f5c:	e02f      	b.n	8008fbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f62:	4618      	mov	r0, r3
 8008f64:	f7fd fbf4 	bl	8006750 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f6c:	e027      	b.n	8008fbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f6e:	f107 0318 	add.w	r3, r7, #24
 8008f72:	4618      	mov	r0, r3
 8008f74:	f7fd fd40 	bl	80069f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008f78:	69fb      	ldr	r3, [r7, #28]
 8008f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f7c:	e01f      	b.n	8008fbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f7e:	4b2d      	ldr	r3, [pc, #180]	; (8009034 <UART_SetConfig+0xac0>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f003 0320 	and.w	r3, r3, #32
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d009      	beq.n	8008f9e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008f8a:	4b2a      	ldr	r3, [pc, #168]	; (8009034 <UART_SetConfig+0xac0>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	08db      	lsrs	r3, r3, #3
 8008f90:	f003 0303 	and.w	r3, r3, #3
 8008f94:	4a28      	ldr	r2, [pc, #160]	; (8009038 <UART_SetConfig+0xac4>)
 8008f96:	fa22 f303 	lsr.w	r3, r2, r3
 8008f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008f9c:	e00f      	b.n	8008fbe <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008f9e:	4b26      	ldr	r3, [pc, #152]	; (8009038 <UART_SetConfig+0xac4>)
 8008fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fa2:	e00c      	b.n	8008fbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008fa4:	4b25      	ldr	r3, [pc, #148]	; (800903c <UART_SetConfig+0xac8>)
 8008fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fa8:	e009      	b.n	8008fbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008faa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008fae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fb0:	e005      	b.n	8008fbe <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008fbc:	bf00      	nop
    }

    if (pclk != 0U)
 8008fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d021      	beq.n	8009008 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc8:	4a1d      	ldr	r2, [pc, #116]	; (8009040 <UART_SetConfig+0xacc>)
 8008fca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fce:	461a      	mov	r2, r3
 8008fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fd2:	fbb3 f2f2 	udiv	r2, r3, r2
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	085b      	lsrs	r3, r3, #1
 8008fdc:	441a      	add	r2, r3
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fe6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fea:	2b0f      	cmp	r3, #15
 8008fec:	d909      	bls.n	8009002 <UART_SetConfig+0xa8e>
 8008fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ff4:	d205      	bcs.n	8009002 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff8:	b29a      	uxth	r2, r3
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	60da      	str	r2, [r3, #12]
 8009000:	e002      	b.n	8009008 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009002:	2301      	movs	r3, #1
 8009004:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	2201      	movs	r2, #1
 800900c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	2201      	movs	r2, #1
 8009014:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	2200      	movs	r2, #0
 800901c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	2200      	movs	r2, #0
 8009022:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009024:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009028:	4618      	mov	r0, r3
 800902a:	3748      	adds	r7, #72	; 0x48
 800902c:	46bd      	mov	sp, r7
 800902e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009032:	bf00      	nop
 8009034:	58024400 	.word	0x58024400
 8009038:	03d09000 	.word	0x03d09000
 800903c:	003d0900 	.word	0x003d0900
 8009040:	08009c50 	.word	0x08009c50

08009044 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009050:	f003 0301 	and.w	r3, r3, #1
 8009054:	2b00      	cmp	r3, #0
 8009056:	d00a      	beq.n	800906e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	430a      	orrs	r2, r1
 800906c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009072:	f003 0302 	and.w	r3, r3, #2
 8009076:	2b00      	cmp	r3, #0
 8009078:	d00a      	beq.n	8009090 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	430a      	orrs	r2, r1
 800908e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009094:	f003 0304 	and.w	r3, r3, #4
 8009098:	2b00      	cmp	r3, #0
 800909a:	d00a      	beq.n	80090b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	430a      	orrs	r2, r1
 80090b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090b6:	f003 0308 	and.w	r3, r3, #8
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d00a      	beq.n	80090d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	430a      	orrs	r2, r1
 80090d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090d8:	f003 0310 	and.w	r3, r3, #16
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d00a      	beq.n	80090f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	430a      	orrs	r2, r1
 80090f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090fa:	f003 0320 	and.w	r3, r3, #32
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d00a      	beq.n	8009118 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	689b      	ldr	r3, [r3, #8]
 8009108:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	430a      	orrs	r2, r1
 8009116:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800911c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009120:	2b00      	cmp	r3, #0
 8009122:	d01a      	beq.n	800915a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	430a      	orrs	r2, r1
 8009138:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800913e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009142:	d10a      	bne.n	800915a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	430a      	orrs	r2, r1
 8009158:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800915e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009162:	2b00      	cmp	r3, #0
 8009164:	d00a      	beq.n	800917c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	430a      	orrs	r2, r1
 800917a:	605a      	str	r2, [r3, #4]
  }
}
 800917c:	bf00      	nop
 800917e:	370c      	adds	r7, #12
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b086      	sub	sp, #24
 800918c:	af02      	add	r7, sp, #8
 800918e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2200      	movs	r2, #0
 8009194:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009198:	f7f8 fb22 	bl	80017e0 <HAL_GetTick>
 800919c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f003 0308 	and.w	r3, r3, #8
 80091a8:	2b08      	cmp	r3, #8
 80091aa:	d10e      	bne.n	80091ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80091ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80091b0:	9300      	str	r3, [sp, #0]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2200      	movs	r2, #0
 80091b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 f82f 	bl	800921e <UART_WaitOnFlagUntilTimeout>
 80091c0:	4603      	mov	r3, r0
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d001      	beq.n	80091ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80091c6:	2303      	movs	r3, #3
 80091c8:	e025      	b.n	8009216 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f003 0304 	and.w	r3, r3, #4
 80091d4:	2b04      	cmp	r3, #4
 80091d6:	d10e      	bne.n	80091f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80091d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80091dc:	9300      	str	r3, [sp, #0]
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2200      	movs	r2, #0
 80091e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f000 f819 	bl	800921e <UART_WaitOnFlagUntilTimeout>
 80091ec:	4603      	mov	r3, r0
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d001      	beq.n	80091f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80091f2:	2303      	movs	r3, #3
 80091f4:	e00f      	b.n	8009216 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2220      	movs	r2, #32
 80091fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2220      	movs	r2, #32
 8009202:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2200      	movs	r2, #0
 800920a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009214:	2300      	movs	r3, #0
}
 8009216:	4618      	mov	r0, r3
 8009218:	3710      	adds	r7, #16
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}

0800921e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800921e:	b580      	push	{r7, lr}
 8009220:	b09c      	sub	sp, #112	; 0x70
 8009222:	af00      	add	r7, sp, #0
 8009224:	60f8      	str	r0, [r7, #12]
 8009226:	60b9      	str	r1, [r7, #8]
 8009228:	603b      	str	r3, [r7, #0]
 800922a:	4613      	mov	r3, r2
 800922c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800922e:	e0a9      	b.n	8009384 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009230:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009236:	f000 80a5 	beq.w	8009384 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800923a:	f7f8 fad1 	bl	80017e0 <HAL_GetTick>
 800923e:	4602      	mov	r2, r0
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	1ad3      	subs	r3, r2, r3
 8009244:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009246:	429a      	cmp	r2, r3
 8009248:	d302      	bcc.n	8009250 <UART_WaitOnFlagUntilTimeout+0x32>
 800924a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800924c:	2b00      	cmp	r3, #0
 800924e:	d140      	bne.n	80092d2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009256:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009258:	e853 3f00 	ldrex	r3, [r3]
 800925c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800925e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009260:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009264:	667b      	str	r3, [r7, #100]	; 0x64
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	461a      	mov	r2, r3
 800926c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800926e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009270:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009272:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009274:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009276:	e841 2300 	strex	r3, r2, [r1]
 800927a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800927c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800927e:	2b00      	cmp	r3, #0
 8009280:	d1e6      	bne.n	8009250 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	3308      	adds	r3, #8
 8009288:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800928a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800928c:	e853 3f00 	ldrex	r3, [r3]
 8009290:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009294:	f023 0301 	bic.w	r3, r3, #1
 8009298:	663b      	str	r3, [r7, #96]	; 0x60
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	3308      	adds	r3, #8
 80092a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80092a2:	64ba      	str	r2, [r7, #72]	; 0x48
 80092a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80092a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092aa:	e841 2300 	strex	r3, r2, [r1]
 80092ae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80092b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d1e5      	bne.n	8009282 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2220      	movs	r2, #32
 80092ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2220      	movs	r2, #32
 80092c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2200      	movs	r2, #0
 80092ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80092ce:	2303      	movs	r3, #3
 80092d0:	e069      	b.n	80093a6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f003 0304 	and.w	r3, r3, #4
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d051      	beq.n	8009384 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	69db      	ldr	r3, [r3, #28]
 80092e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80092ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80092ee:	d149      	bne.n	8009384 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80092f8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009302:	e853 3f00 	ldrex	r3, [r3]
 8009306:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800930e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	461a      	mov	r2, r3
 8009316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009318:	637b      	str	r3, [r7, #52]	; 0x34
 800931a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800931c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800931e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009320:	e841 2300 	strex	r3, r2, [r1]
 8009324:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009328:	2b00      	cmp	r3, #0
 800932a:	d1e6      	bne.n	80092fa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	3308      	adds	r3, #8
 8009332:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	e853 3f00 	ldrex	r3, [r3]
 800933a:	613b      	str	r3, [r7, #16]
   return(result);
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	f023 0301 	bic.w	r3, r3, #1
 8009342:	66bb      	str	r3, [r7, #104]	; 0x68
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	3308      	adds	r3, #8
 800934a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800934c:	623a      	str	r2, [r7, #32]
 800934e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009350:	69f9      	ldr	r1, [r7, #28]
 8009352:	6a3a      	ldr	r2, [r7, #32]
 8009354:	e841 2300 	strex	r3, r2, [r1]
 8009358:	61bb      	str	r3, [r7, #24]
   return(result);
 800935a:	69bb      	ldr	r3, [r7, #24]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d1e5      	bne.n	800932c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2220      	movs	r2, #32
 8009364:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2220      	movs	r2, #32
 800936c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2220      	movs	r2, #32
 8009374:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2200      	movs	r2, #0
 800937c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009380:	2303      	movs	r3, #3
 8009382:	e010      	b.n	80093a6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	69da      	ldr	r2, [r3, #28]
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	4013      	ands	r3, r2
 800938e:	68ba      	ldr	r2, [r7, #8]
 8009390:	429a      	cmp	r2, r3
 8009392:	bf0c      	ite	eq
 8009394:	2301      	moveq	r3, #1
 8009396:	2300      	movne	r3, #0
 8009398:	b2db      	uxtb	r3, r3
 800939a:	461a      	mov	r2, r3
 800939c:	79fb      	ldrb	r3, [r7, #7]
 800939e:	429a      	cmp	r2, r3
 80093a0:	f43f af46 	beq.w	8009230 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80093a4:	2300      	movs	r3, #0
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3770      	adds	r7, #112	; 0x70
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}

080093ae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80093ae:	b480      	push	{r7}
 80093b0:	b085      	sub	sp, #20
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d101      	bne.n	80093c4 <HAL_UARTEx_DisableFifoMode+0x16>
 80093c0:	2302      	movs	r3, #2
 80093c2:	e027      	b.n	8009414 <HAL_UARTEx_DisableFifoMode+0x66>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2201      	movs	r2, #1
 80093c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2224      	movs	r2, #36	; 0x24
 80093d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	681a      	ldr	r2, [r3, #0]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f022 0201 	bic.w	r2, r2, #1
 80093ea:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80093f2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2200      	movs	r2, #0
 80093f8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	68fa      	ldr	r2, [r7, #12]
 8009400:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2220      	movs	r2, #32
 8009406:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2200      	movs	r2, #0
 800940e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009412:	2300      	movs	r3, #0
}
 8009414:	4618      	mov	r0, r3
 8009416:	3714      	adds	r7, #20
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr

08009420 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b084      	sub	sp, #16
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009430:	2b01      	cmp	r3, #1
 8009432:	d101      	bne.n	8009438 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009434:	2302      	movs	r3, #2
 8009436:	e02d      	b.n	8009494 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2201      	movs	r2, #1
 800943c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2224      	movs	r2, #36	; 0x24
 8009444:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	681a      	ldr	r2, [r3, #0]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f022 0201 	bic.w	r2, r2, #1
 800945e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	689b      	ldr	r3, [r3, #8]
 8009466:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	683a      	ldr	r2, [r7, #0]
 8009470:	430a      	orrs	r2, r1
 8009472:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 f84f 	bl	8009518 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	68fa      	ldr	r2, [r7, #12]
 8009480:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2220      	movs	r2, #32
 8009486:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2200      	movs	r2, #0
 800948e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009492:	2300      	movs	r3, #0
}
 8009494:	4618      	mov	r0, r3
 8009496:	3710      	adds	r7, #16
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d101      	bne.n	80094b4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80094b0:	2302      	movs	r3, #2
 80094b2:	e02d      	b.n	8009510 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2201      	movs	r2, #1
 80094b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2224      	movs	r2, #36	; 0x24
 80094c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f022 0201 	bic.w	r2, r2, #1
 80094da:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	689b      	ldr	r3, [r3, #8]
 80094e2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	683a      	ldr	r2, [r7, #0]
 80094ec:	430a      	orrs	r2, r1
 80094ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 f811 	bl	8009518 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	68fa      	ldr	r2, [r7, #12]
 80094fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2220      	movs	r2, #32
 8009502:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2200      	movs	r2, #0
 800950a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800950e:	2300      	movs	r3, #0
}
 8009510:	4618      	mov	r0, r3
 8009512:	3710      	adds	r7, #16
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}

08009518 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009518:	b480      	push	{r7}
 800951a:	b085      	sub	sp, #20
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009524:	2b00      	cmp	r3, #0
 8009526:	d108      	bne.n	800953a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2201      	movs	r2, #1
 800952c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2201      	movs	r2, #1
 8009534:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009538:	e031      	b.n	800959e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800953a:	2310      	movs	r3, #16
 800953c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800953e:	2310      	movs	r3, #16
 8009540:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	689b      	ldr	r3, [r3, #8]
 8009548:	0e5b      	lsrs	r3, r3, #25
 800954a:	b2db      	uxtb	r3, r3
 800954c:	f003 0307 	and.w	r3, r3, #7
 8009550:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	689b      	ldr	r3, [r3, #8]
 8009558:	0f5b      	lsrs	r3, r3, #29
 800955a:	b2db      	uxtb	r3, r3
 800955c:	f003 0307 	and.w	r3, r3, #7
 8009560:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009562:	7bbb      	ldrb	r3, [r7, #14]
 8009564:	7b3a      	ldrb	r2, [r7, #12]
 8009566:	4911      	ldr	r1, [pc, #68]	; (80095ac <UARTEx_SetNbDataToProcess+0x94>)
 8009568:	5c8a      	ldrb	r2, [r1, r2]
 800956a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800956e:	7b3a      	ldrb	r2, [r7, #12]
 8009570:	490f      	ldr	r1, [pc, #60]	; (80095b0 <UARTEx_SetNbDataToProcess+0x98>)
 8009572:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009574:	fb93 f3f2 	sdiv	r3, r3, r2
 8009578:	b29a      	uxth	r2, r3
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009580:	7bfb      	ldrb	r3, [r7, #15]
 8009582:	7b7a      	ldrb	r2, [r7, #13]
 8009584:	4909      	ldr	r1, [pc, #36]	; (80095ac <UARTEx_SetNbDataToProcess+0x94>)
 8009586:	5c8a      	ldrb	r2, [r1, r2]
 8009588:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800958c:	7b7a      	ldrb	r2, [r7, #13]
 800958e:	4908      	ldr	r1, [pc, #32]	; (80095b0 <UARTEx_SetNbDataToProcess+0x98>)
 8009590:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009592:	fb93 f3f2 	sdiv	r3, r3, r2
 8009596:	b29a      	uxth	r2, r3
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800959e:	bf00      	nop
 80095a0:	3714      	adds	r7, #20
 80095a2:	46bd      	mov	sp, r7
 80095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a8:	4770      	bx	lr
 80095aa:	bf00      	nop
 80095ac:	08009c68 	.word	0x08009c68
 80095b0:	08009c70 	.word	0x08009c70

080095b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80095b4:	b084      	sub	sp, #16
 80095b6:	b580      	push	{r7, lr}
 80095b8:	b084      	sub	sp, #16
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
 80095be:	f107 001c 	add.w	r0, r7, #28
 80095c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80095c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	d120      	bne.n	800960e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	68da      	ldr	r2, [r3, #12]
 80095dc:	4b2a      	ldr	r3, [pc, #168]	; (8009688 <USB_CoreInit+0xd4>)
 80095de:	4013      	ands	r3, r2
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	68db      	ldr	r3, [r3, #12]
 80095e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80095f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d105      	bne.n	8009602 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	68db      	ldr	r3, [r3, #12]
 80095fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 faac 	bl	8009b60 <USB_CoreReset>
 8009608:	4603      	mov	r3, r0
 800960a:	73fb      	strb	r3, [r7, #15]
 800960c:	e01a      	b.n	8009644 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	68db      	ldr	r3, [r3, #12]
 8009612:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f000 faa0 	bl	8009b60 <USB_CoreReset>
 8009620:	4603      	mov	r3, r0
 8009622:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009626:	2b00      	cmp	r3, #0
 8009628:	d106      	bne.n	8009638 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800962e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	639a      	str	r2, [r3, #56]	; 0x38
 8009636:	e005      	b.n	8009644 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800963c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009646:	2b01      	cmp	r3, #1
 8009648:	d116      	bne.n	8009678 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800964e:	b29a      	uxth	r2, r3
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009658:	4b0c      	ldr	r3, [pc, #48]	; (800968c <USB_CoreInit+0xd8>)
 800965a:	4313      	orrs	r3, r2
 800965c:	687a      	ldr	r2, [r7, #4]
 800965e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	689b      	ldr	r3, [r3, #8]
 8009664:	f043 0206 	orr.w	r2, r3, #6
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	689b      	ldr	r3, [r3, #8]
 8009670:	f043 0220 	orr.w	r2, r3, #32
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009678:	7bfb      	ldrb	r3, [r7, #15]
}
 800967a:	4618      	mov	r0, r3
 800967c:	3710      	adds	r7, #16
 800967e:	46bd      	mov	sp, r7
 8009680:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009684:	b004      	add	sp, #16
 8009686:	4770      	bx	lr
 8009688:	ffbdffbf 	.word	0xffbdffbf
 800968c:	03ee0000 	.word	0x03ee0000

08009690 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009690:	b480      	push	{r7}
 8009692:	b083      	sub	sp, #12
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	689b      	ldr	r3, [r3, #8]
 800969c:	f023 0201 	bic.w	r2, r3, #1
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80096a4:	2300      	movs	r3, #0
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	370c      	adds	r7, #12
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr

080096b2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80096b2:	b580      	push	{r7, lr}
 80096b4:	b084      	sub	sp, #16
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	6078      	str	r0, [r7, #4]
 80096ba:	460b      	mov	r3, r1
 80096bc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80096be:	2300      	movs	r3, #0
 80096c0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	68db      	ldr	r3, [r3, #12]
 80096c6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80096ce:	78fb      	ldrb	r3, [r7, #3]
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d115      	bne.n	8009700 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	68db      	ldr	r3, [r3, #12]
 80096d8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80096e0:	2001      	movs	r0, #1
 80096e2:	f7f8 f889 	bl	80017f8 <HAL_Delay>
      ms++;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	3301      	adds	r3, #1
 80096ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f000 fa29 	bl	8009b44 <USB_GetMode>
 80096f2:	4603      	mov	r3, r0
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	d01e      	beq.n	8009736 <USB_SetCurrentMode+0x84>
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2b31      	cmp	r3, #49	; 0x31
 80096fc:	d9f0      	bls.n	80096e0 <USB_SetCurrentMode+0x2e>
 80096fe:	e01a      	b.n	8009736 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009700:	78fb      	ldrb	r3, [r7, #3]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d115      	bne.n	8009732 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	68db      	ldr	r3, [r3, #12]
 800970a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009712:	2001      	movs	r0, #1
 8009714:	f7f8 f870 	bl	80017f8 <HAL_Delay>
      ms++;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	3301      	adds	r3, #1
 800971c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 fa10 	bl	8009b44 <USB_GetMode>
 8009724:	4603      	mov	r3, r0
 8009726:	2b00      	cmp	r3, #0
 8009728:	d005      	beq.n	8009736 <USB_SetCurrentMode+0x84>
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2b31      	cmp	r3, #49	; 0x31
 800972e:	d9f0      	bls.n	8009712 <USB_SetCurrentMode+0x60>
 8009730:	e001      	b.n	8009736 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009732:	2301      	movs	r3, #1
 8009734:	e005      	b.n	8009742 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2b32      	cmp	r3, #50	; 0x32
 800973a:	d101      	bne.n	8009740 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800973c:	2301      	movs	r3, #1
 800973e:	e000      	b.n	8009742 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009740:	2300      	movs	r3, #0
}
 8009742:	4618      	mov	r0, r3
 8009744:	3710      	adds	r7, #16
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
	...

0800974c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800974c:	b084      	sub	sp, #16
 800974e:	b580      	push	{r7, lr}
 8009750:	b086      	sub	sp, #24
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
 8009756:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800975a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800975e:	2300      	movs	r3, #0
 8009760:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009766:	2300      	movs	r3, #0
 8009768:	613b      	str	r3, [r7, #16]
 800976a:	e009      	b.n	8009780 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800976c:	687a      	ldr	r2, [r7, #4]
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	3340      	adds	r3, #64	; 0x40
 8009772:	009b      	lsls	r3, r3, #2
 8009774:	4413      	add	r3, r2
 8009776:	2200      	movs	r2, #0
 8009778:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	3301      	adds	r3, #1
 800977e:	613b      	str	r3, [r7, #16]
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	2b0e      	cmp	r3, #14
 8009784:	d9f2      	bls.n	800976c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009788:	2b00      	cmp	r3, #0
 800978a:	d11c      	bne.n	80097c6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	68fa      	ldr	r2, [r7, #12]
 8009796:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800979a:	f043 0302 	orr.w	r3, r3, #2
 800979e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097a4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	601a      	str	r2, [r3, #0]
 80097c4:	e005      	b.n	80097d2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80097d8:	461a      	mov	r2, r3
 80097da:	2300      	movs	r3, #0
 80097dc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097e4:	4619      	mov	r1, r3
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097ec:	461a      	mov	r2, r3
 80097ee:	680b      	ldr	r3, [r1, #0]
 80097f0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80097f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d10c      	bne.n	8009812 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80097f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d104      	bne.n	8009808 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80097fe:	2100      	movs	r1, #0
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f000 f965 	bl	8009ad0 <USB_SetDevSpeed>
 8009806:	e008      	b.n	800981a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009808:	2101      	movs	r1, #1
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f000 f960 	bl	8009ad0 <USB_SetDevSpeed>
 8009810:	e003      	b.n	800981a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009812:	2103      	movs	r1, #3
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f000 f95b 	bl	8009ad0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800981a:	2110      	movs	r1, #16
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f000 f8f3 	bl	8009a08 <USB_FlushTxFifo>
 8009822:	4603      	mov	r3, r0
 8009824:	2b00      	cmp	r3, #0
 8009826:	d001      	beq.n	800982c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8009828:	2301      	movs	r3, #1
 800982a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 f91f 	bl	8009a70 <USB_FlushRxFifo>
 8009832:	4603      	mov	r3, r0
 8009834:	2b00      	cmp	r3, #0
 8009836:	d001      	beq.n	800983c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009838:	2301      	movs	r3, #1
 800983a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009842:	461a      	mov	r2, r3
 8009844:	2300      	movs	r3, #0
 8009846:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800984e:	461a      	mov	r2, r3
 8009850:	2300      	movs	r3, #0
 8009852:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800985a:	461a      	mov	r2, r3
 800985c:	2300      	movs	r3, #0
 800985e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009860:	2300      	movs	r3, #0
 8009862:	613b      	str	r3, [r7, #16]
 8009864:	e043      	b.n	80098ee <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	015a      	lsls	r2, r3, #5
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	4413      	add	r3, r2
 800986e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009878:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800987c:	d118      	bne.n	80098b0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d10a      	bne.n	800989a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	015a      	lsls	r2, r3, #5
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	4413      	add	r3, r2
 800988c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009890:	461a      	mov	r2, r3
 8009892:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009896:	6013      	str	r3, [r2, #0]
 8009898:	e013      	b.n	80098c2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	015a      	lsls	r2, r3, #5
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	4413      	add	r3, r2
 80098a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098a6:	461a      	mov	r2, r3
 80098a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80098ac:	6013      	str	r3, [r2, #0]
 80098ae:	e008      	b.n	80098c2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	015a      	lsls	r2, r3, #5
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	4413      	add	r3, r2
 80098b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098bc:	461a      	mov	r2, r3
 80098be:	2300      	movs	r3, #0
 80098c0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	015a      	lsls	r2, r3, #5
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	4413      	add	r3, r2
 80098ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ce:	461a      	mov	r2, r3
 80098d0:	2300      	movs	r3, #0
 80098d2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	015a      	lsls	r2, r3, #5
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	4413      	add	r3, r2
 80098dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098e0:	461a      	mov	r2, r3
 80098e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80098e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	3301      	adds	r3, #1
 80098ec:	613b      	str	r3, [r7, #16]
 80098ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f0:	693a      	ldr	r2, [r7, #16]
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d3b7      	bcc.n	8009866 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80098f6:	2300      	movs	r3, #0
 80098f8:	613b      	str	r3, [r7, #16]
 80098fa:	e043      	b.n	8009984 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	015a      	lsls	r2, r3, #5
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	4413      	add	r3, r2
 8009904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800990e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009912:	d118      	bne.n	8009946 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d10a      	bne.n	8009930 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	015a      	lsls	r2, r3, #5
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	4413      	add	r3, r2
 8009922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009926:	461a      	mov	r2, r3
 8009928:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800992c:	6013      	str	r3, [r2, #0]
 800992e:	e013      	b.n	8009958 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	015a      	lsls	r2, r3, #5
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	4413      	add	r3, r2
 8009938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800993c:	461a      	mov	r2, r3
 800993e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009942:	6013      	str	r3, [r2, #0]
 8009944:	e008      	b.n	8009958 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	015a      	lsls	r2, r3, #5
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	4413      	add	r3, r2
 800994e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009952:	461a      	mov	r2, r3
 8009954:	2300      	movs	r3, #0
 8009956:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	015a      	lsls	r2, r3, #5
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	4413      	add	r3, r2
 8009960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009964:	461a      	mov	r2, r3
 8009966:	2300      	movs	r3, #0
 8009968:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	015a      	lsls	r2, r3, #5
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	4413      	add	r3, r2
 8009972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009976:	461a      	mov	r2, r3
 8009978:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800997c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	3301      	adds	r3, #1
 8009982:	613b      	str	r3, [r7, #16]
 8009984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009986:	693a      	ldr	r2, [r7, #16]
 8009988:	429a      	cmp	r2, r3
 800998a:	d3b7      	bcc.n	80098fc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009992:	691b      	ldr	r3, [r3, #16]
 8009994:	68fa      	ldr	r2, [r7, #12]
 8009996:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800999a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800999e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2200      	movs	r2, #0
 80099a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80099ac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80099ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d105      	bne.n	80099c0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	699b      	ldr	r3, [r3, #24]
 80099b8:	f043 0210 	orr.w	r2, r3, #16
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	699a      	ldr	r2, [r3, #24]
 80099c4:	4b0e      	ldr	r3, [pc, #56]	; (8009a00 <USB_DevInit+0x2b4>)
 80099c6:	4313      	orrs	r3, r2
 80099c8:	687a      	ldr	r2, [r7, #4]
 80099ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80099cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d005      	beq.n	80099de <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	699b      	ldr	r3, [r3, #24]
 80099d6:	f043 0208 	orr.w	r2, r3, #8
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80099de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d105      	bne.n	80099f0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	699a      	ldr	r2, [r3, #24]
 80099e8:	4b06      	ldr	r3, [pc, #24]	; (8009a04 <USB_DevInit+0x2b8>)
 80099ea:	4313      	orrs	r3, r2
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80099f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3718      	adds	r7, #24
 80099f6:	46bd      	mov	sp, r7
 80099f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80099fc:	b004      	add	sp, #16
 80099fe:	4770      	bx	lr
 8009a00:	803c3800 	.word	0x803c3800
 8009a04:	40000004 	.word	0x40000004

08009a08 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b085      	sub	sp, #20
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009a12:	2300      	movs	r3, #0
 8009a14:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	3301      	adds	r3, #1
 8009a1a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	4a13      	ldr	r2, [pc, #76]	; (8009a6c <USB_FlushTxFifo+0x64>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d901      	bls.n	8009a28 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009a24:	2303      	movs	r3, #3
 8009a26:	e01b      	b.n	8009a60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	691b      	ldr	r3, [r3, #16]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	daf2      	bge.n	8009a16 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009a30:	2300      	movs	r3, #0
 8009a32:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	019b      	lsls	r3, r3, #6
 8009a38:	f043 0220 	orr.w	r2, r3, #32
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	3301      	adds	r3, #1
 8009a44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	4a08      	ldr	r2, [pc, #32]	; (8009a6c <USB_FlushTxFifo+0x64>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d901      	bls.n	8009a52 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009a4e:	2303      	movs	r3, #3
 8009a50:	e006      	b.n	8009a60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	691b      	ldr	r3, [r3, #16]
 8009a56:	f003 0320 	and.w	r3, r3, #32
 8009a5a:	2b20      	cmp	r3, #32
 8009a5c:	d0f0      	beq.n	8009a40 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009a5e:	2300      	movs	r3, #0
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3714      	adds	r7, #20
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr
 8009a6c:	00030d40 	.word	0x00030d40

08009a70 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b085      	sub	sp, #20
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	3301      	adds	r3, #1
 8009a80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	4a11      	ldr	r2, [pc, #68]	; (8009acc <USB_FlushRxFifo+0x5c>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d901      	bls.n	8009a8e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009a8a:	2303      	movs	r3, #3
 8009a8c:	e018      	b.n	8009ac0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	691b      	ldr	r3, [r3, #16]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	daf2      	bge.n	8009a7c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009a96:	2300      	movs	r3, #0
 8009a98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2210      	movs	r2, #16
 8009a9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	3301      	adds	r3, #1
 8009aa4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	4a08      	ldr	r2, [pc, #32]	; (8009acc <USB_FlushRxFifo+0x5c>)
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	d901      	bls.n	8009ab2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009aae:	2303      	movs	r3, #3
 8009ab0:	e006      	b.n	8009ac0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	691b      	ldr	r3, [r3, #16]
 8009ab6:	f003 0310 	and.w	r3, r3, #16
 8009aba:	2b10      	cmp	r3, #16
 8009abc:	d0f0      	beq.n	8009aa0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009abe:	2300      	movs	r3, #0
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3714      	adds	r7, #20
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr
 8009acc:	00030d40 	.word	0x00030d40

08009ad0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	b085      	sub	sp, #20
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
 8009ad8:	460b      	mov	r3, r1
 8009ada:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ae6:	681a      	ldr	r2, [r3, #0]
 8009ae8:	78fb      	ldrb	r3, [r7, #3]
 8009aea:	68f9      	ldr	r1, [r7, #12]
 8009aec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009af0:	4313      	orrs	r3, r2
 8009af2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009af4:	2300      	movs	r3, #0
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3714      	adds	r7, #20
 8009afa:	46bd      	mov	sp, r7
 8009afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b00:	4770      	bx	lr

08009b02 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009b02:	b480      	push	{r7}
 8009b04:	b085      	sub	sp, #20
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	68fa      	ldr	r2, [r7, #12]
 8009b18:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009b1c:	f023 0303 	bic.w	r3, r3, #3
 8009b20:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	68fa      	ldr	r2, [r7, #12]
 8009b2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b30:	f043 0302 	orr.w	r3, r3, #2
 8009b34:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009b36:	2300      	movs	r3, #0
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3714      	adds	r7, #20
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr

08009b44 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	695b      	ldr	r3, [r3, #20]
 8009b50:	f003 0301 	and.w	r3, r3, #1
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	370c      	adds	r7, #12
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr

08009b60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b085      	sub	sp, #20
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	3301      	adds	r3, #1
 8009b70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	4a13      	ldr	r2, [pc, #76]	; (8009bc4 <USB_CoreReset+0x64>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d901      	bls.n	8009b7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009b7a:	2303      	movs	r3, #3
 8009b7c:	e01b      	b.n	8009bb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	691b      	ldr	r3, [r3, #16]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	daf2      	bge.n	8009b6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009b86:	2300      	movs	r3, #0
 8009b88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	691b      	ldr	r3, [r3, #16]
 8009b8e:	f043 0201 	orr.w	r2, r3, #1
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	3301      	adds	r3, #1
 8009b9a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	4a09      	ldr	r2, [pc, #36]	; (8009bc4 <USB_CoreReset+0x64>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d901      	bls.n	8009ba8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009ba4:	2303      	movs	r3, #3
 8009ba6:	e006      	b.n	8009bb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	691b      	ldr	r3, [r3, #16]
 8009bac:	f003 0301 	and.w	r3, r3, #1
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	d0f0      	beq.n	8009b96 <USB_CoreReset+0x36>

  return HAL_OK;
 8009bb4:	2300      	movs	r3, #0
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3714      	adds	r7, #20
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc0:	4770      	bx	lr
 8009bc2:	bf00      	nop
 8009bc4:	00030d40 	.word	0x00030d40

08009bc8 <__libc_init_array>:
 8009bc8:	b570      	push	{r4, r5, r6, lr}
 8009bca:	4d0d      	ldr	r5, [pc, #52]	; (8009c00 <__libc_init_array+0x38>)
 8009bcc:	4c0d      	ldr	r4, [pc, #52]	; (8009c04 <__libc_init_array+0x3c>)
 8009bce:	1b64      	subs	r4, r4, r5
 8009bd0:	10a4      	asrs	r4, r4, #2
 8009bd2:	2600      	movs	r6, #0
 8009bd4:	42a6      	cmp	r6, r4
 8009bd6:	d109      	bne.n	8009bec <__libc_init_array+0x24>
 8009bd8:	4d0b      	ldr	r5, [pc, #44]	; (8009c08 <__libc_init_array+0x40>)
 8009bda:	4c0c      	ldr	r4, [pc, #48]	; (8009c0c <__libc_init_array+0x44>)
 8009bdc:	f000 f820 	bl	8009c20 <_init>
 8009be0:	1b64      	subs	r4, r4, r5
 8009be2:	10a4      	asrs	r4, r4, #2
 8009be4:	2600      	movs	r6, #0
 8009be6:	42a6      	cmp	r6, r4
 8009be8:	d105      	bne.n	8009bf6 <__libc_init_array+0x2e>
 8009bea:	bd70      	pop	{r4, r5, r6, pc}
 8009bec:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bf0:	4798      	blx	r3
 8009bf2:	3601      	adds	r6, #1
 8009bf4:	e7ee      	b.n	8009bd4 <__libc_init_array+0xc>
 8009bf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bfa:	4798      	blx	r3
 8009bfc:	3601      	adds	r6, #1
 8009bfe:	e7f2      	b.n	8009be6 <__libc_init_array+0x1e>
 8009c00:	08009c80 	.word	0x08009c80
 8009c04:	08009c80 	.word	0x08009c80
 8009c08:	08009c80 	.word	0x08009c80
 8009c0c:	08009c84 	.word	0x08009c84

08009c10 <memset>:
 8009c10:	4402      	add	r2, r0
 8009c12:	4603      	mov	r3, r0
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d100      	bne.n	8009c1a <memset+0xa>
 8009c18:	4770      	bx	lr
 8009c1a:	f803 1b01 	strb.w	r1, [r3], #1
 8009c1e:	e7f9      	b.n	8009c14 <memset+0x4>

08009c20 <_init>:
 8009c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c22:	bf00      	nop
 8009c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c26:	bc08      	pop	{r3}
 8009c28:	469e      	mov	lr, r3
 8009c2a:	4770      	bx	lr

08009c2c <_fini>:
 8009c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c2e:	bf00      	nop
 8009c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c32:	bc08      	pop	{r3}
 8009c34:	469e      	mov	lr, r3
 8009c36:	4770      	bx	lr
