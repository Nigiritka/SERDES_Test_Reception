
SERDES_Test_Reception.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cfc  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005f94  08005f94  00015f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005fcc  08005fcc  00015fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005fd4  08005fd4  00015fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005fd8  08005fd8  00015fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08005fdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  08005fec  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  0800604c  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006ac  240000d0  080060ac  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400077c  080060ac  0002077c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018758  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026f4  00000000  00000000  00038856  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  0003af50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e60  00000000  00000000  0003be88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000376af  00000000  00000000  0003cce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013636  00000000  00000000  00074397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00160aa0  00000000  00000000  000879cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001e846d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004090  00000000  00000000  001e84c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005f7c 	.word	0x08005f7c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08005f7c 	.word	0x08005f7c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f000 fcca 	bl	8000f78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f80a 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 f956 	bl	8000898 <MX_GPIO_Init>
  MX_ETH_Init();
 80005ec:	f000 f88a 	bl	8000704 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005f0:	f000 f8d4 	bl	800079c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f4:	f000 f91e 	bl	8000834 <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <main+0x1c>
	...

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b09c      	sub	sp, #112	; 0x70
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000606:	224c      	movs	r2, #76	; 0x4c
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f005 fcae 	bl	8005f6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2220      	movs	r2, #32
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f005 fca8 	bl	8005f6c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800061c:	2002      	movs	r0, #2
 800061e:	f001 fd9b 	bl	8002158 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000622:	2300      	movs	r3, #0
 8000624:	603b      	str	r3, [r7, #0]
 8000626:	4b34      	ldr	r3, [pc, #208]	; (80006f8 <SystemClock_Config+0xfc>)
 8000628:	699b      	ldr	r3, [r3, #24]
 800062a:	4a33      	ldr	r2, [pc, #204]	; (80006f8 <SystemClock_Config+0xfc>)
 800062c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000630:	6193      	str	r3, [r2, #24]
 8000632:	4b31      	ldr	r3, [pc, #196]	; (80006f8 <SystemClock_Config+0xfc>)
 8000634:	699b      	ldr	r3, [r3, #24]
 8000636:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800063a:	603b      	str	r3, [r7, #0]
 800063c:	4b2f      	ldr	r3, [pc, #188]	; (80006fc <SystemClock_Config+0x100>)
 800063e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000640:	4a2e      	ldr	r2, [pc, #184]	; (80006fc <SystemClock_Config+0x100>)
 8000642:	f043 0301 	orr.w	r3, r3, #1
 8000646:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000648:	4b2c      	ldr	r3, [pc, #176]	; (80006fc <SystemClock_Config+0x100>)
 800064a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800064c:	f003 0301 	and.w	r3, r3, #1
 8000650:	603b      	str	r3, [r7, #0]
 8000652:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000654:	bf00      	nop
 8000656:	4b28      	ldr	r3, [pc, #160]	; (80006f8 <SystemClock_Config+0xfc>)
 8000658:	699b      	ldr	r3, [r3, #24]
 800065a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800065e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000662:	d1f8      	bne.n	8000656 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000664:	4b26      	ldr	r3, [pc, #152]	; (8000700 <SystemClock_Config+0x104>)
 8000666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000668:	f023 0303 	bic.w	r3, r3, #3
 800066c:	4a24      	ldr	r2, [pc, #144]	; (8000700 <SystemClock_Config+0x104>)
 800066e:	f043 0302 	orr.w	r3, r3, #2
 8000672:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000674:	2301      	movs	r3, #1
 8000676:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000678:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800067c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067e:	2302      	movs	r3, #2
 8000680:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000682:	2302      	movs	r3, #2
 8000684:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000686:	2301      	movs	r3, #1
 8000688:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 800068a:	2378      	movs	r3, #120	; 0x78
 800068c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800068e:	2302      	movs	r3, #2
 8000690:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000692:	2304      	movs	r3, #4
 8000694:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000696:	2302      	movs	r3, #2
 8000698:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800069a:	230c      	movs	r3, #12
 800069c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800069e:	2300      	movs	r3, #0
 80006a0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006aa:	4618      	mov	r0, r3
 80006ac:	f001 fd9e 	bl	80021ec <HAL_RCC_OscConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80006b6:	f000 f9a7 	bl	8000a08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ba:	233f      	movs	r3, #63	; 0x3f
 80006bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006be:	2303      	movs	r3, #3
 80006c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80006c6:	2308      	movs	r3, #8
 80006c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80006ca:	2340      	movs	r3, #64	; 0x40
 80006cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006ce:	2340      	movs	r3, #64	; 0x40
 80006d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80006d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006d6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006d8:	2340      	movs	r3, #64	; 0x40
 80006da:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	2104      	movs	r1, #4
 80006e0:	4618      	mov	r0, r3
 80006e2:	f002 f9b1 	bl	8002a48 <HAL_RCC_ClockConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80006ec:	f000 f98c 	bl	8000a08 <Error_Handler>
  }
}
 80006f0:	bf00      	nop
 80006f2:	3770      	adds	r7, #112	; 0x70
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	58024800 	.word	0x58024800
 80006fc:	58000400 	.word	0x58000400
 8000700:	58024400 	.word	0x58024400

08000704 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000708:	4b1e      	ldr	r3, [pc, #120]	; (8000784 <MX_ETH_Init+0x80>)
 800070a:	4a1f      	ldr	r2, [pc, #124]	; (8000788 <MX_ETH_Init+0x84>)
 800070c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800070e:	4b1f      	ldr	r3, [pc, #124]	; (800078c <MX_ETH_Init+0x88>)
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000714:	4b1d      	ldr	r3, [pc, #116]	; (800078c <MX_ETH_Init+0x88>)
 8000716:	2280      	movs	r2, #128	; 0x80
 8000718:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800071a:	4b1c      	ldr	r3, [pc, #112]	; (800078c <MX_ETH_Init+0x88>)
 800071c:	22e1      	movs	r2, #225	; 0xe1
 800071e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000720:	4b1a      	ldr	r3, [pc, #104]	; (800078c <MX_ETH_Init+0x88>)
 8000722:	2200      	movs	r2, #0
 8000724:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000726:	4b19      	ldr	r3, [pc, #100]	; (800078c <MX_ETH_Init+0x88>)
 8000728:	2200      	movs	r2, #0
 800072a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <MX_ETH_Init+0x88>)
 800072e:	2200      	movs	r2, #0
 8000730:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000732:	4b14      	ldr	r3, [pc, #80]	; (8000784 <MX_ETH_Init+0x80>)
 8000734:	4a15      	ldr	r2, [pc, #84]	; (800078c <MX_ETH_Init+0x88>)
 8000736:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000738:	4b12      	ldr	r3, [pc, #72]	; (8000784 <MX_ETH_Init+0x80>)
 800073a:	2201      	movs	r2, #1
 800073c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800073e:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_ETH_Init+0x80>)
 8000740:	4a13      	ldr	r2, [pc, #76]	; (8000790 <MX_ETH_Init+0x8c>)
 8000742:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_ETH_Init+0x80>)
 8000746:	4a13      	ldr	r2, [pc, #76]	; (8000794 <MX_ETH_Init+0x90>)
 8000748:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <MX_ETH_Init+0x80>)
 800074c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000750:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000752:	480c      	ldr	r0, [pc, #48]	; (8000784 <MX_ETH_Init+0x80>)
 8000754:	f000 fdca 	bl	80012ec <HAL_ETH_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800075e:	f000 f953 	bl	8000a08 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000762:	2238      	movs	r2, #56	; 0x38
 8000764:	2100      	movs	r1, #0
 8000766:	480c      	ldr	r0, [pc, #48]	; (8000798 <MX_ETH_Init+0x94>)
 8000768:	f005 fc00 	bl	8005f6c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800076c:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <MX_ETH_Init+0x94>)
 800076e:	2221      	movs	r2, #33	; 0x21
 8000770:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_ETH_Init+0x94>)
 8000774:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000778:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800077a:	4b07      	ldr	r3, [pc, #28]	; (8000798 <MX_ETH_Init+0x94>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	24000124 	.word	0x24000124
 8000788:	40028000 	.word	0x40028000
 800078c:	24000770 	.word	0x24000770
 8000790:	24000070 	.word	0x24000070
 8000794:	24000010 	.word	0x24000010
 8000798:	240000ec 	.word	0x240000ec

0800079c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007a0:	4b22      	ldr	r3, [pc, #136]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007a2:	4a23      	ldr	r2, [pc, #140]	; (8000830 <MX_USART3_UART_Init+0x94>)
 80007a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007a6:	4b21      	ldr	r3, [pc, #132]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007ae:	4b1f      	ldr	r3, [pc, #124]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007b4:	4b1d      	ldr	r3, [pc, #116]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ba:	4b1c      	ldr	r3, [pc, #112]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007c0:	4b1a      	ldr	r3, [pc, #104]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007c2:	220c      	movs	r2, #12
 80007c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c6:	4b19      	ldr	r3, [pc, #100]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007cc:	4b17      	ldr	r3, [pc, #92]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007d2:	4b16      	ldr	r3, [pc, #88]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007d8:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007da:	2200      	movs	r2, #0
 80007dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007de:	4b13      	ldr	r3, [pc, #76]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007e4:	4811      	ldr	r0, [pc, #68]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007e6:	f004 f823 	bl	8004830 <HAL_UART_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80007f0:	f000 f90a 	bl	8000a08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007f4:	2100      	movs	r1, #0
 80007f6:	480d      	ldr	r0, [pc, #52]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007f8:	f004 ffc0 	bl	800577c <HAL_UARTEx_SetTxFifoThreshold>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000802:	f000 f901 	bl	8000a08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000806:	2100      	movs	r1, #0
 8000808:	4808      	ldr	r0, [pc, #32]	; (800082c <MX_USART3_UART_Init+0x90>)
 800080a:	f004 fff5 	bl	80057f8 <HAL_UARTEx_SetRxFifoThreshold>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000814:	f000 f8f8 	bl	8000a08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000818:	4804      	ldr	r0, [pc, #16]	; (800082c <MX_USART3_UART_Init+0x90>)
 800081a:	f004 ff76 	bl	800570a <HAL_UARTEx_DisableFifoMode>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000824:	f000 f8f0 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	240001d4 	.word	0x240001d4
 8000830:	40004800 	.word	0x40004800

08000834 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000838:	4b15      	ldr	r3, [pc, #84]	; (8000890 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800083a:	4a16      	ldr	r2, [pc, #88]	; (8000894 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800083c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800083e:	4b14      	ldr	r3, [pc, #80]	; (8000890 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000840:	2209      	movs	r2, #9
 8000842:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000844:	4b12      	ldr	r3, [pc, #72]	; (8000890 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000846:	2202      	movs	r2, #2
 8000848:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000852:	2202      	movs	r2, #2
 8000854:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000858:	2201      	movs	r2, #1
 800085a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800085c:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800085e:	2200      	movs	r2, #0
 8000860:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000862:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000864:	2200      	movs	r2, #0
 8000866:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000868:	4b09      	ldr	r3, [pc, #36]	; (8000890 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800086a:	2201      	movs	r2, #1
 800086c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000870:	2201      	movs	r2, #1
 8000872:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000876:	2200      	movs	r2, #0
 8000878:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800087a:	4805      	ldr	r0, [pc, #20]	; (8000890 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800087c:	f001 fb23 	bl	8001ec6 <HAL_PCD_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000886:	f000 f8bf 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	24000264 	.word	0x24000264
 8000894:	40080000 	.word	0x40080000

08000898 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08c      	sub	sp, #48	; 0x30
 800089c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
 80008ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ae:	4b51      	ldr	r3, [pc, #324]	; (80009f4 <MX_GPIO_Init+0x15c>)
 80008b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b4:	4a4f      	ldr	r2, [pc, #316]	; (80009f4 <MX_GPIO_Init+0x15c>)
 80008b6:	f043 0304 	orr.w	r3, r3, #4
 80008ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008be:	4b4d      	ldr	r3, [pc, #308]	; (80009f4 <MX_GPIO_Init+0x15c>)
 80008c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c4:	f003 0304 	and.w	r3, r3, #4
 80008c8:	61bb      	str	r3, [r7, #24]
 80008ca:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008cc:	4b49      	ldr	r3, [pc, #292]	; (80009f4 <MX_GPIO_Init+0x15c>)
 80008ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d2:	4a48      	ldr	r2, [pc, #288]	; (80009f4 <MX_GPIO_Init+0x15c>)
 80008d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008dc:	4b45      	ldr	r3, [pc, #276]	; (80009f4 <MX_GPIO_Init+0x15c>)
 80008de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008e6:	617b      	str	r3, [r7, #20]
 80008e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	4b42      	ldr	r3, [pc, #264]	; (80009f4 <MX_GPIO_Init+0x15c>)
 80008ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f0:	4a40      	ldr	r2, [pc, #256]	; (80009f4 <MX_GPIO_Init+0x15c>)
 80008f2:	f043 0301 	orr.w	r3, r3, #1
 80008f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008fa:	4b3e      	ldr	r3, [pc, #248]	; (80009f4 <MX_GPIO_Init+0x15c>)
 80008fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000900:	f003 0301 	and.w	r3, r3, #1
 8000904:	613b      	str	r3, [r7, #16]
 8000906:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000908:	4b3a      	ldr	r3, [pc, #232]	; (80009f4 <MX_GPIO_Init+0x15c>)
 800090a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800090e:	4a39      	ldr	r2, [pc, #228]	; (80009f4 <MX_GPIO_Init+0x15c>)
 8000910:	f043 0302 	orr.w	r3, r3, #2
 8000914:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000918:	4b36      	ldr	r3, [pc, #216]	; (80009f4 <MX_GPIO_Init+0x15c>)
 800091a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000926:	4b33      	ldr	r3, [pc, #204]	; (80009f4 <MX_GPIO_Init+0x15c>)
 8000928:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800092c:	4a31      	ldr	r2, [pc, #196]	; (80009f4 <MX_GPIO_Init+0x15c>)
 800092e:	f043 0308 	orr.w	r3, r3, #8
 8000932:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000936:	4b2f      	ldr	r3, [pc, #188]	; (80009f4 <MX_GPIO_Init+0x15c>)
 8000938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800093c:	f003 0308 	and.w	r3, r3, #8
 8000940:	60bb      	str	r3, [r7, #8]
 8000942:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000944:	4b2b      	ldr	r3, [pc, #172]	; (80009f4 <MX_GPIO_Init+0x15c>)
 8000946:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800094a:	4a2a      	ldr	r2, [pc, #168]	; (80009f4 <MX_GPIO_Init+0x15c>)
 800094c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000950:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000954:	4b27      	ldr	r3, [pc, #156]	; (80009f4 <MX_GPIO_Init+0x15c>)
 8000956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800095a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	f244 0101 	movw	r1, #16385	; 0x4001
 8000968:	4823      	ldr	r0, [pc, #140]	; (80009f8 <MX_GPIO_Init+0x160>)
 800096a:	f001 fa93 	bl	8001e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000974:	4821      	ldr	r0, [pc, #132]	; (80009fc <MX_GPIO_Init+0x164>)
 8000976:	f001 fa8d 	bl	8001e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800097a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000980:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	481b      	ldr	r0, [pc, #108]	; (8000a00 <MX_GPIO_Init+0x168>)
 8000992:	f001 f8cf 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000996:	f244 0301 	movw	r3, #16385	; 0x4001
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099c:	2301      	movs	r3, #1
 800099e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4619      	mov	r1, r3
 80009ae:	4812      	ldr	r0, [pc, #72]	; (80009f8 <MX_GPIO_Init+0x160>)
 80009b0:	f001 f8c0 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80009b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ba:	2301      	movs	r3, #1
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	480b      	ldr	r0, [pc, #44]	; (80009fc <MX_GPIO_Init+0x164>)
 80009ce:	f001 f8b1 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80009d2:	2380      	movs	r3, #128	; 0x80
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80009e0:	f107 031c 	add.w	r3, r7, #28
 80009e4:	4619      	mov	r1, r3
 80009e6:	4807      	ldr	r0, [pc, #28]	; (8000a04 <MX_GPIO_Init+0x16c>)
 80009e8:	f001 f8a4 	bl	8001b34 <HAL_GPIO_Init>

}
 80009ec:	bf00      	nop
 80009ee:	3730      	adds	r7, #48	; 0x30
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	58024400 	.word	0x58024400
 80009f8:	58020400 	.word	0x58020400
 80009fc:	58020c00 	.word	0x58020c00
 8000a00:	58020800 	.word	0x58020800
 8000a04:	58021800 	.word	0x58021800

08000a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a0c:	b672      	cpsid	i
}
 8000a0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <Error_Handler+0x8>
	...

08000a14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1a:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <HAL_MspInit+0x30>)
 8000a1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a20:	4a08      	ldr	r2, [pc, #32]	; (8000a44 <HAL_MspInit+0x30>)
 8000a22:	f043 0302 	orr.w	r3, r3, #2
 8000a26:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_MspInit+0x30>)
 8000a2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a30:	f003 0302 	and.w	r3, r3, #2
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	58024400 	.word	0x58024400

08000a48 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08e      	sub	sp, #56	; 0x38
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a59      	ldr	r2, [pc, #356]	; (8000bcc <HAL_ETH_MspInit+0x184>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	f040 80ab 	bne.w	8000bc2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000a6c:	4b58      	ldr	r3, [pc, #352]	; (8000bd0 <HAL_ETH_MspInit+0x188>)
 8000a6e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a72:	4a57      	ldr	r2, [pc, #348]	; (8000bd0 <HAL_ETH_MspInit+0x188>)
 8000a74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a78:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a7c:	4b54      	ldr	r3, [pc, #336]	; (8000bd0 <HAL_ETH_MspInit+0x188>)
 8000a7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a86:	623b      	str	r3, [r7, #32]
 8000a88:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000a8a:	4b51      	ldr	r3, [pc, #324]	; (8000bd0 <HAL_ETH_MspInit+0x188>)
 8000a8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a90:	4a4f      	ldr	r2, [pc, #316]	; (8000bd0 <HAL_ETH_MspInit+0x188>)
 8000a92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a96:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a9a:	4b4d      	ldr	r3, [pc, #308]	; (8000bd0 <HAL_ETH_MspInit+0x188>)
 8000a9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aa4:	61fb      	str	r3, [r7, #28]
 8000aa6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000aa8:	4b49      	ldr	r3, [pc, #292]	; (8000bd0 <HAL_ETH_MspInit+0x188>)
 8000aaa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000aae:	4a48      	ldr	r2, [pc, #288]	; (8000bd0 <HAL_ETH_MspInit+0x188>)
 8000ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ab8:	4b45      	ldr	r3, [pc, #276]	; (8000bd0 <HAL_ETH_MspInit+0x188>)
 8000aba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ac2:	61bb      	str	r3, [r7, #24]
 8000ac4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac6:	4b42      	ldr	r3, [pc, #264]	; (8000bd0 <HAL_ETH_MspInit+0x188>)
 8000ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000acc:	4a40      	ldr	r2, [pc, #256]	; (8000bd0 <HAL_ETH_MspInit+0x188>)
 8000ace:	f043 0304 	orr.w	r3, r3, #4
 8000ad2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ad6:	4b3e      	ldr	r3, [pc, #248]	; (8000bd0 <HAL_ETH_MspInit+0x188>)
 8000ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000adc:	f003 0304 	and.w	r3, r3, #4
 8000ae0:	617b      	str	r3, [r7, #20]
 8000ae2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae4:	4b3a      	ldr	r3, [pc, #232]	; (8000bd0 <HAL_ETH_MspInit+0x188>)
 8000ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aea:	4a39      	ldr	r2, [pc, #228]	; (8000bd0 <HAL_ETH_MspInit+0x188>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000af4:	4b36      	ldr	r3, [pc, #216]	; (8000bd0 <HAL_ETH_MspInit+0x188>)
 8000af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	613b      	str	r3, [r7, #16]
 8000b00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b02:	4b33      	ldr	r3, [pc, #204]	; (8000bd0 <HAL_ETH_MspInit+0x188>)
 8000b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b08:	4a31      	ldr	r2, [pc, #196]	; (8000bd0 <HAL_ETH_MspInit+0x188>)
 8000b0a:	f043 0302 	orr.w	r3, r3, #2
 8000b0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b12:	4b2f      	ldr	r3, [pc, #188]	; (8000bd0 <HAL_ETH_MspInit+0x188>)
 8000b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b18:	f003 0302 	and.w	r3, r3, #2
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b20:	4b2b      	ldr	r3, [pc, #172]	; (8000bd0 <HAL_ETH_MspInit+0x188>)
 8000b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b26:	4a2a      	ldr	r2, [pc, #168]	; (8000bd0 <HAL_ETH_MspInit+0x188>)
 8000b28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b30:	4b27      	ldr	r3, [pc, #156]	; (8000bd0 <HAL_ETH_MspInit+0x188>)
 8000b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b3a:	60bb      	str	r3, [r7, #8]
 8000b3c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000b3e:	2332      	movs	r3, #50	; 0x32
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b42:	2302      	movs	r3, #2
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b4e:	230b      	movs	r3, #11
 8000b50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b56:	4619      	mov	r1, r3
 8000b58:	481e      	ldr	r0, [pc, #120]	; (8000bd4 <HAL_ETH_MspInit+0x18c>)
 8000b5a:	f000 ffeb 	bl	8001b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000b5e:	2386      	movs	r3, #134	; 0x86
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	2302      	movs	r3, #2
 8000b64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b6e:	230b      	movs	r3, #11
 8000b70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b76:	4619      	mov	r1, r3
 8000b78:	4817      	ldr	r0, [pc, #92]	; (8000bd8 <HAL_ETH_MspInit+0x190>)
 8000b7a:	f000 ffdb 	bl	8001b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b84:	2302      	movs	r3, #2
 8000b86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b90:	230b      	movs	r3, #11
 8000b92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4810      	ldr	r0, [pc, #64]	; (8000bdc <HAL_ETH_MspInit+0x194>)
 8000b9c:	f000 ffca 	bl	8001b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000ba0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bb2:	230b      	movs	r3, #11
 8000bb4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4808      	ldr	r0, [pc, #32]	; (8000be0 <HAL_ETH_MspInit+0x198>)
 8000bbe:	f000 ffb9 	bl	8001b34 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000bc2:	bf00      	nop
 8000bc4:	3738      	adds	r7, #56	; 0x38
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40028000 	.word	0x40028000
 8000bd0:	58024400 	.word	0x58024400
 8000bd4:	58020800 	.word	0x58020800
 8000bd8:	58020000 	.word	0x58020000
 8000bdc:	58020400 	.word	0x58020400
 8000be0:	58021800 	.word	0x58021800

08000be4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b0b8      	sub	sp, #224	; 0xe0
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bfc:	f107 0310 	add.w	r3, r7, #16
 8000c00:	22bc      	movs	r2, #188	; 0xbc
 8000c02:	2100      	movs	r1, #0
 8000c04:	4618      	mov	r0, r3
 8000c06:	f005 f9b1 	bl	8005f6c <memset>
  if(huart->Instance==USART3)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a25      	ldr	r2, [pc, #148]	; (8000ca4 <HAL_UART_MspInit+0xc0>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d142      	bne.n	8000c9a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c14:	2302      	movs	r3, #2
 8000c16:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c1e:	f107 0310 	add.w	r3, r7, #16
 8000c22:	4618      	mov	r0, r3
 8000c24:	f002 fa9c 	bl	8003160 <HAL_RCCEx_PeriphCLKConfig>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c2e:	f7ff feeb 	bl	8000a08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c32:	4b1d      	ldr	r3, [pc, #116]	; (8000ca8 <HAL_UART_MspInit+0xc4>)
 8000c34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c38:	4a1b      	ldr	r2, [pc, #108]	; (8000ca8 <HAL_UART_MspInit+0xc4>)
 8000c3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c3e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c42:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <HAL_UART_MspInit+0xc4>)
 8000c44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c50:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <HAL_UART_MspInit+0xc4>)
 8000c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c56:	4a14      	ldr	r2, [pc, #80]	; (8000ca8 <HAL_UART_MspInit+0xc4>)
 8000c58:	f043 0308 	orr.w	r3, r3, #8
 8000c5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c60:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <HAL_UART_MspInit+0xc4>)
 8000c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c66:	f003 0308 	and.w	r3, r3, #8
 8000c6a:	60bb      	str	r3, [r7, #8]
 8000c6c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000c6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c72:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c82:	2300      	movs	r3, #0
 8000c84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c88:	2307      	movs	r3, #7
 8000c8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c8e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c92:	4619      	mov	r1, r3
 8000c94:	4805      	ldr	r0, [pc, #20]	; (8000cac <HAL_UART_MspInit+0xc8>)
 8000c96:	f000 ff4d 	bl	8001b34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c9a:	bf00      	nop
 8000c9c:	37e0      	adds	r7, #224	; 0xe0
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40004800 	.word	0x40004800
 8000ca8:	58024400 	.word	0x58024400
 8000cac:	58020c00 	.word	0x58020c00

08000cb0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b0b8      	sub	sp, #224	; 0xe0
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cc8:	f107 0310 	add.w	r3, r7, #16
 8000ccc:	22bc      	movs	r2, #188	; 0xbc
 8000cce:	2100      	movs	r1, #0
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f005 f94b 	bl	8005f6c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a36      	ldr	r2, [pc, #216]	; (8000db4 <HAL_PCD_MspInit+0x104>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d165      	bne.n	8000dac <HAL_PCD_MspInit+0xfc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000ce0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000ce4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 4;
 8000ce6:	2304      	movs	r3, #4
 8000ce8:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 100;
 8000cea:	2364      	movs	r3, #100	; 0x64
 8000cec:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000cf2:	2304      	movs	r3, #4
 8000cf4:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 8000cfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cfe:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000d04:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000d08:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d0c:	f107 0310 	add.w	r3, r7, #16
 8000d10:	4618      	mov	r0, r3
 8000d12:	f002 fa25 	bl	8003160 <HAL_RCCEx_PeriphCLKConfig>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8000d1c:	f7ff fe74 	bl	8000a08 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000d20:	f001 fa54 	bl	80021cc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d24:	4b24      	ldr	r3, [pc, #144]	; (8000db8 <HAL_PCD_MspInit+0x108>)
 8000d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d2a:	4a23      	ldr	r2, [pc, #140]	; (8000db8 <HAL_PCD_MspInit+0x108>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d34:	4b20      	ldr	r3, [pc, #128]	; (8000db8 <HAL_PCD_MspInit+0x108>)
 8000d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000d42:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000d46:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d56:	2300      	movs	r3, #0
 8000d58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000d5c:	230a      	movs	r3, #10
 8000d5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d62:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d66:	4619      	mov	r1, r3
 8000d68:	4814      	ldr	r0, [pc, #80]	; (8000dbc <HAL_PCD_MspInit+0x10c>)
 8000d6a:	f000 fee3 	bl	8001b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d72:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d76:	2300      	movs	r3, #0
 8000d78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d82:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d86:	4619      	mov	r1, r3
 8000d88:	480c      	ldr	r0, [pc, #48]	; (8000dbc <HAL_PCD_MspInit+0x10c>)
 8000d8a:	f000 fed3 	bl	8001b34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <HAL_PCD_MspInit+0x108>)
 8000d90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d94:	4a08      	ldr	r2, [pc, #32]	; (8000db8 <HAL_PCD_MspInit+0x108>)
 8000d96:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000d9a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_PCD_MspInit+0x108>)
 8000da0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000da4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000dac:	bf00      	nop
 8000dae:	37e0      	adds	r7, #224	; 0xe0
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40080000 	.word	0x40080000
 8000db8:	58024400 	.word	0x58024400
 8000dbc:	58020000 	.word	0x58020000

08000dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <NMI_Handler+0x4>

08000dc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dca:	e7fe      	b.n	8000dca <HardFault_Handler+0x4>

08000dcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <MemManage_Handler+0x4>

08000dd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <BusFault_Handler+0x4>

08000dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <UsageFault_Handler+0x4>

08000dde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e0c:	f000 f926 	bl	800105c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e18:	4b37      	ldr	r3, [pc, #220]	; (8000ef8 <SystemInit+0xe4>)
 8000e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e1e:	4a36      	ldr	r2, [pc, #216]	; (8000ef8 <SystemInit+0xe4>)
 8000e20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e28:	4b34      	ldr	r3, [pc, #208]	; (8000efc <SystemInit+0xe8>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f003 030f 	and.w	r3, r3, #15
 8000e30:	2b06      	cmp	r3, #6
 8000e32:	d807      	bhi.n	8000e44 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e34:	4b31      	ldr	r3, [pc, #196]	; (8000efc <SystemInit+0xe8>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f023 030f 	bic.w	r3, r3, #15
 8000e3c:	4a2f      	ldr	r2, [pc, #188]	; (8000efc <SystemInit+0xe8>)
 8000e3e:	f043 0307 	orr.w	r3, r3, #7
 8000e42:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e44:	4b2e      	ldr	r3, [pc, #184]	; (8000f00 <SystemInit+0xec>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a2d      	ldr	r2, [pc, #180]	; (8000f00 <SystemInit+0xec>)
 8000e4a:	f043 0301 	orr.w	r3, r3, #1
 8000e4e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e50:	4b2b      	ldr	r3, [pc, #172]	; (8000f00 <SystemInit+0xec>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e56:	4b2a      	ldr	r3, [pc, #168]	; (8000f00 <SystemInit+0xec>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	4929      	ldr	r1, [pc, #164]	; (8000f00 <SystemInit+0xec>)
 8000e5c:	4b29      	ldr	r3, [pc, #164]	; (8000f04 <SystemInit+0xf0>)
 8000e5e:	4013      	ands	r3, r2
 8000e60:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e62:	4b26      	ldr	r3, [pc, #152]	; (8000efc <SystemInit+0xe8>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f003 0308 	and.w	r3, r3, #8
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d007      	beq.n	8000e7e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e6e:	4b23      	ldr	r3, [pc, #140]	; (8000efc <SystemInit+0xe8>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f023 030f 	bic.w	r3, r3, #15
 8000e76:	4a21      	ldr	r2, [pc, #132]	; (8000efc <SystemInit+0xe8>)
 8000e78:	f043 0307 	orr.w	r3, r3, #7
 8000e7c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000e7e:	4b20      	ldr	r3, [pc, #128]	; (8000f00 <SystemInit+0xec>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000e84:	4b1e      	ldr	r3, [pc, #120]	; (8000f00 <SystemInit+0xec>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000e8a:	4b1d      	ldr	r3, [pc, #116]	; (8000f00 <SystemInit+0xec>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000e90:	4b1b      	ldr	r3, [pc, #108]	; (8000f00 <SystemInit+0xec>)
 8000e92:	4a1d      	ldr	r2, [pc, #116]	; (8000f08 <SystemInit+0xf4>)
 8000e94:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000e96:	4b1a      	ldr	r3, [pc, #104]	; (8000f00 <SystemInit+0xec>)
 8000e98:	4a1c      	ldr	r2, [pc, #112]	; (8000f0c <SystemInit+0xf8>)
 8000e9a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e9c:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <SystemInit+0xec>)
 8000e9e:	4a1c      	ldr	r2, [pc, #112]	; (8000f10 <SystemInit+0xfc>)
 8000ea0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000ea2:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <SystemInit+0xec>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ea8:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <SystemInit+0xec>)
 8000eaa:	4a19      	ldr	r2, [pc, #100]	; (8000f10 <SystemInit+0xfc>)
 8000eac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000eae:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <SystemInit+0xec>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000eb4:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <SystemInit+0xec>)
 8000eb6:	4a16      	ldr	r2, [pc, #88]	; (8000f10 <SystemInit+0xfc>)
 8000eb8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000eba:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <SystemInit+0xec>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <SystemInit+0xec>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a0e      	ldr	r2, [pc, #56]	; (8000f00 <SystemInit+0xec>)
 8000ec6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <SystemInit+0xec>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000ed2:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <SystemInit+0x100>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <SystemInit+0x104>)
 8000ed8:	4013      	ands	r3, r2
 8000eda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ede:	d202      	bcs.n	8000ee6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000ee0:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <SystemInit+0x108>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <SystemInit+0x10c>)
 8000ee8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000eec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000ed00 	.word	0xe000ed00
 8000efc:	52002000 	.word	0x52002000
 8000f00:	58024400 	.word	0x58024400
 8000f04:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f08:	02020200 	.word	0x02020200
 8000f0c:	01ff0000 	.word	0x01ff0000
 8000f10:	01010280 	.word	0x01010280
 8000f14:	5c001000 	.word	0x5c001000
 8000f18:	ffff0000 	.word	0xffff0000
 8000f1c:	51008108 	.word	0x51008108
 8000f20:	52004000 	.word	0x52004000

08000f24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f5c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f28:	f7ff ff74 	bl	8000e14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f2c:	480c      	ldr	r0, [pc, #48]	; (8000f60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f2e:	490d      	ldr	r1, [pc, #52]	; (8000f64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f30:	4a0d      	ldr	r2, [pc, #52]	; (8000f68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f34:	e002      	b.n	8000f3c <LoopCopyDataInit>

08000f36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f3a:	3304      	adds	r3, #4

08000f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f40:	d3f9      	bcc.n	8000f36 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f42:	4a0a      	ldr	r2, [pc, #40]	; (8000f6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f44:	4c0a      	ldr	r4, [pc, #40]	; (8000f70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f48:	e001      	b.n	8000f4e <LoopFillZerobss>

08000f4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f4c:	3204      	adds	r2, #4

08000f4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f50:	d3fb      	bcc.n	8000f4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f52:	f004 ffe7 	bl	8005f24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f56:	f7ff fb41 	bl	80005dc <main>
  bx  lr
 8000f5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f5c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f60:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f64:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000f68:	08005fdc 	.word	0x08005fdc
  ldr r2, =_sbss
 8000f6c:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8000f70:	2400077c 	.word	0x2400077c

08000f74 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f74:	e7fe      	b.n	8000f74 <ADC3_IRQHandler>
	...

08000f78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f7e:	2003      	movs	r0, #3
 8000f80:	f000 f982 	bl	8001288 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f84:	f001 ff16 	bl	8002db4 <HAL_RCC_GetSysClockFreq>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	4b15      	ldr	r3, [pc, #84]	; (8000fe0 <HAL_Init+0x68>)
 8000f8c:	699b      	ldr	r3, [r3, #24]
 8000f8e:	0a1b      	lsrs	r3, r3, #8
 8000f90:	f003 030f 	and.w	r3, r3, #15
 8000f94:	4913      	ldr	r1, [pc, #76]	; (8000fe4 <HAL_Init+0x6c>)
 8000f96:	5ccb      	ldrb	r3, [r1, r3]
 8000f98:	f003 031f 	and.w	r3, r3, #31
 8000f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8000fa0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000fa2:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <HAL_Init+0x68>)
 8000fa4:	699b      	ldr	r3, [r3, #24]
 8000fa6:	f003 030f 	and.w	r3, r3, #15
 8000faa:	4a0e      	ldr	r2, [pc, #56]	; (8000fe4 <HAL_Init+0x6c>)
 8000fac:	5cd3      	ldrb	r3, [r2, r3]
 8000fae:	f003 031f 	and.w	r3, r3, #31
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8000fb8:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <HAL_Init+0x70>)
 8000fba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000fbc:	4a0b      	ldr	r2, [pc, #44]	; (8000fec <HAL_Init+0x74>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	f000 f814 	bl	8000ff0 <HAL_InitTick>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e002      	b.n	8000fd8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd2:	f7ff fd1f 	bl	8000a14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd6:	2300      	movs	r3, #0
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	58024400 	.word	0x58024400
 8000fe4:	08005f94 	.word	0x08005f94
 8000fe8:	24000004 	.word	0x24000004
 8000fec:	24000000 	.word	0x24000000

08000ff0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ff8:	4b15      	ldr	r3, [pc, #84]	; (8001050 <HAL_InitTick+0x60>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d101      	bne.n	8001004 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	e021      	b.n	8001048 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001004:	4b13      	ldr	r3, [pc, #76]	; (8001054 <HAL_InitTick+0x64>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	4b11      	ldr	r3, [pc, #68]	; (8001050 <HAL_InitTick+0x60>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	4619      	mov	r1, r3
 800100e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001012:	fbb3 f3f1 	udiv	r3, r3, r1
 8001016:	fbb2 f3f3 	udiv	r3, r2, r3
 800101a:	4618      	mov	r0, r3
 800101c:	f000 f959 	bl	80012d2 <HAL_SYSTICK_Config>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e00e      	b.n	8001048 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2b0f      	cmp	r3, #15
 800102e:	d80a      	bhi.n	8001046 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001030:	2200      	movs	r2, #0
 8001032:	6879      	ldr	r1, [r7, #4]
 8001034:	f04f 30ff 	mov.w	r0, #4294967295
 8001038:	f000 f931 	bl	800129e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800103c:	4a06      	ldr	r2, [pc, #24]	; (8001058 <HAL_InitTick+0x68>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001042:	2300      	movs	r3, #0
 8001044:	e000      	b.n	8001048 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
}
 8001048:	4618      	mov	r0, r3
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	2400000c 	.word	0x2400000c
 8001054:	24000000 	.word	0x24000000
 8001058:	24000008 	.word	0x24000008

0800105c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_IncTick+0x20>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	461a      	mov	r2, r3
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_IncTick+0x24>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4413      	add	r3, r2
 800106c:	4a04      	ldr	r2, [pc, #16]	; (8001080 <HAL_IncTick+0x24>)
 800106e:	6013      	str	r3, [r2, #0]
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	2400000c 	.word	0x2400000c
 8001080:	24000778 	.word	0x24000778

08001084 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  return uwTick;
 8001088:	4b03      	ldr	r3, [pc, #12]	; (8001098 <HAL_GetTick+0x14>)
 800108a:	681b      	ldr	r3, [r3, #0]
}
 800108c:	4618      	mov	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	24000778 	.word	0x24000778

0800109c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010a4:	f7ff ffee 	bl	8001084 <HAL_GetTick>
 80010a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b4:	d005      	beq.n	80010c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010b6:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <HAL_Delay+0x44>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	461a      	mov	r2, r3
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	4413      	add	r3, r2
 80010c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010c2:	bf00      	nop
 80010c4:	f7ff ffde 	bl	8001084 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d8f7      	bhi.n	80010c4 <HAL_Delay+0x28>
  {
  }
}
 80010d4:	bf00      	nop
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	2400000c 	.word	0x2400000c

080010e4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80010e8:	4b03      	ldr	r3, [pc, #12]	; (80010f8 <HAL_GetREVID+0x14>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	0c1b      	lsrs	r3, r3, #16
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	5c001000 	.word	0x5c001000

080010fc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800110c:	4904      	ldr	r1, [pc, #16]	; (8001120 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4313      	orrs	r3, r2
 8001112:	604b      	str	r3, [r1, #4]
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	58000400 	.word	0x58000400

08001124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001134:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <__NVIC_SetPriorityGrouping+0x40>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001140:	4013      	ands	r3, r2
 8001142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <__NVIC_SetPriorityGrouping+0x44>)
 800114e:	4313      	orrs	r3, r2
 8001150:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001152:	4a04      	ldr	r2, [pc, #16]	; (8001164 <__NVIC_SetPriorityGrouping+0x40>)
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	60d3      	str	r3, [r2, #12]
}
 8001158:	bf00      	nop
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000ed00 	.word	0xe000ed00
 8001168:	05fa0000 	.word	0x05fa0000

0800116c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001170:	4b04      	ldr	r3, [pc, #16]	; (8001184 <__NVIC_GetPriorityGrouping+0x18>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	0a1b      	lsrs	r3, r3, #8
 8001176:	f003 0307 	and.w	r3, r3, #7
}
 800117a:	4618      	mov	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	6039      	str	r1, [r7, #0]
 8001192:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001194:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001198:	2b00      	cmp	r3, #0
 800119a:	db0a      	blt.n	80011b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	490c      	ldr	r1, [pc, #48]	; (80011d4 <__NVIC_SetPriority+0x4c>)
 80011a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011a6:	0112      	lsls	r2, r2, #4
 80011a8:	b2d2      	uxtb	r2, r2
 80011aa:	440b      	add	r3, r1
 80011ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b0:	e00a      	b.n	80011c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	4908      	ldr	r1, [pc, #32]	; (80011d8 <__NVIC_SetPriority+0x50>)
 80011b8:	88fb      	ldrh	r3, [r7, #6]
 80011ba:	f003 030f 	and.w	r3, r3, #15
 80011be:	3b04      	subs	r3, #4
 80011c0:	0112      	lsls	r2, r2, #4
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	440b      	add	r3, r1
 80011c6:	761a      	strb	r2, [r3, #24]
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000e100 	.word	0xe000e100
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011dc:	b480      	push	{r7}
 80011de:	b089      	sub	sp, #36	; 0x24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	f1c3 0307 	rsb	r3, r3, #7
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	bf28      	it	cs
 80011fa:	2304      	movcs	r3, #4
 80011fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3304      	adds	r3, #4
 8001202:	2b06      	cmp	r3, #6
 8001204:	d902      	bls.n	800120c <NVIC_EncodePriority+0x30>
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	3b03      	subs	r3, #3
 800120a:	e000      	b.n	800120e <NVIC_EncodePriority+0x32>
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001210:	f04f 32ff 	mov.w	r2, #4294967295
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43da      	mvns	r2, r3
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	401a      	ands	r2, r3
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001224:	f04f 31ff 	mov.w	r1, #4294967295
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	fa01 f303 	lsl.w	r3, r1, r3
 800122e:	43d9      	mvns	r1, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001234:	4313      	orrs	r3, r2
         );
}
 8001236:	4618      	mov	r0, r3
 8001238:	3724      	adds	r7, #36	; 0x24
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
	...

08001244 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3b01      	subs	r3, #1
 8001250:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001254:	d301      	bcc.n	800125a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001256:	2301      	movs	r3, #1
 8001258:	e00f      	b.n	800127a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800125a:	4a0a      	ldr	r2, [pc, #40]	; (8001284 <SysTick_Config+0x40>)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3b01      	subs	r3, #1
 8001260:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001262:	210f      	movs	r1, #15
 8001264:	f04f 30ff 	mov.w	r0, #4294967295
 8001268:	f7ff ff8e 	bl	8001188 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800126c:	4b05      	ldr	r3, [pc, #20]	; (8001284 <SysTick_Config+0x40>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001272:	4b04      	ldr	r3, [pc, #16]	; (8001284 <SysTick_Config+0x40>)
 8001274:	2207      	movs	r2, #7
 8001276:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	e000e010 	.word	0xe000e010

08001288 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff ff47 	bl	8001124 <__NVIC_SetPriorityGrouping>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b086      	sub	sp, #24
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	4603      	mov	r3, r0
 80012a6:	60b9      	str	r1, [r7, #8]
 80012a8:	607a      	str	r2, [r7, #4]
 80012aa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012ac:	f7ff ff5e 	bl	800116c <__NVIC_GetPriorityGrouping>
 80012b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	68b9      	ldr	r1, [r7, #8]
 80012b6:	6978      	ldr	r0, [r7, #20]
 80012b8:	f7ff ff90 	bl	80011dc <NVIC_EncodePriority>
 80012bc:	4602      	mov	r2, r0
 80012be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012c2:	4611      	mov	r1, r2
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ff5f 	bl	8001188 <__NVIC_SetPriority>
}
 80012ca:	bf00      	nop
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff ffb2 	bl	8001244 <SysTick_Config>
 80012e0:	4603      	mov	r3, r0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d101      	bne.n	80012fe <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e0cf      	b.n	800149e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001304:	2b00      	cmp	r3, #0
 8001306:	d106      	bne.n	8001316 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2223      	movs	r2, #35	; 0x23
 800130c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7ff fb99 	bl	8000a48 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001316:	4b64      	ldr	r3, [pc, #400]	; (80014a8 <HAL_ETH_Init+0x1bc>)
 8001318:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800131c:	4a62      	ldr	r2, [pc, #392]	; (80014a8 <HAL_ETH_Init+0x1bc>)
 800131e:	f043 0302 	orr.w	r3, r3, #2
 8001322:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001326:	4b60      	ldr	r3, [pc, #384]	; (80014a8 <HAL_ETH_Init+0x1bc>)
 8001328:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	7a1b      	ldrb	r3, [r3, #8]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d103      	bne.n	8001344 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800133c:	2000      	movs	r0, #0
 800133e:	f7ff fedd 	bl	80010fc <HAL_SYSCFG_ETHInterfaceSelect>
 8001342:	e003      	b.n	800134c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001344:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001348:	f7ff fed8 	bl	80010fc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800134c:	4b57      	ldr	r3, [pc, #348]	; (80014ac <HAL_ETH_Init+0x1c0>)
 800134e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	6812      	ldr	r2, [r2, #0]
 800135e:	f043 0301 	orr.w	r3, r3, #1
 8001362:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001366:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001368:	f7ff fe8c 	bl	8001084 <HAL_GetTick>
 800136c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800136e:	e011      	b.n	8001394 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001370:	f7ff fe88 	bl	8001084 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800137e:	d909      	bls.n	8001394 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2204      	movs	r2, #4
 8001384:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	22e0      	movs	r2, #224	; 0xe0
 800138c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e084      	b.n	800149e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1e4      	bne.n	8001370 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f000 f886 	bl	80014b8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80013ac:	f001 fe7c 	bl	80030a8 <HAL_RCC_GetHCLKFreq>
 80013b0:	4603      	mov	r3, r0
 80013b2:	4a3f      	ldr	r2, [pc, #252]	; (80014b0 <HAL_ETH_Init+0x1c4>)
 80013b4:	fba2 2303 	umull	r2, r3, r2, r3
 80013b8:	0c9a      	lsrs	r2, r3, #18
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	3a01      	subs	r2, #1
 80013c0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f000 fa71 	bl	80018ac <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013d2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80013d6:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	6812      	ldr	r2, [r2, #0]
 80013de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80013e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013e6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	f003 0303 	and.w	r3, r3, #3
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d009      	beq.n	800140a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2201      	movs	r2, #1
 80013fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	22e0      	movs	r2, #224	; 0xe0
 8001402:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e049      	b.n	800149e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001412:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001416:	4b27      	ldr	r3, [pc, #156]	; (80014b4 <HAL_ETH_Init+0x1c8>)
 8001418:	4013      	ands	r3, r2
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	6952      	ldr	r2, [r2, #20]
 800141e:	0051      	lsls	r1, r2, #1
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	6812      	ldr	r2, [r2, #0]
 8001424:	430b      	orrs	r3, r1
 8001426:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800142a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f000 fad9 	bl	80019e6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f000 fb1f 	bl	8001a78 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	3305      	adds	r3, #5
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	021a      	lsls	r2, r3, #8
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	3304      	adds	r3, #4
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	4619      	mov	r1, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	430a      	orrs	r2, r1
 8001454:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	3303      	adds	r3, #3
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	061a      	lsls	r2, r3, #24
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	3302      	adds	r3, #2
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	041b      	lsls	r3, r3, #16
 800146c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	3301      	adds	r3, #1
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001478:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001486:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001488:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2210      	movs	r2, #16
 8001498:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	58024400 	.word	0x58024400
 80014ac:	58000400 	.word	0x58000400
 80014b0:	431bde83 	.word	0x431bde83
 80014b4:	ffff8001 	.word	0xffff8001

080014b8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80014c8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80014d0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80014d2:	f001 fde9 	bl	80030a8 <HAL_RCC_GetHCLKFreq>
 80014d6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	4a1e      	ldr	r2, [pc, #120]	; (8001554 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d908      	bls.n	80014f2 <HAL_ETH_SetMDIOClockRange+0x3a>
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	4a1d      	ldr	r2, [pc, #116]	; (8001558 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d804      	bhi.n	80014f2 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	e027      	b.n	8001542 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	4a18      	ldr	r2, [pc, #96]	; (8001558 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d908      	bls.n	800150c <HAL_ETH_SetMDIOClockRange+0x54>
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	4a17      	ldr	r2, [pc, #92]	; (800155c <HAL_ETH_SetMDIOClockRange+0xa4>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d204      	bcs.n	800150c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	e01a      	b.n	8001542 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	4a13      	ldr	r2, [pc, #76]	; (800155c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d303      	bcc.n	800151c <HAL_ETH_SetMDIOClockRange+0x64>
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	4a12      	ldr	r2, [pc, #72]	; (8001560 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d911      	bls.n	8001540 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	4a10      	ldr	r2, [pc, #64]	; (8001560 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d908      	bls.n	8001536 <HAL_ETH_SetMDIOClockRange+0x7e>
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	4a0f      	ldr	r2, [pc, #60]	; (8001564 <HAL_ETH_SetMDIOClockRange+0xac>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d804      	bhi.n	8001536 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	e005      	b.n	8001542 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	e000      	b.n	8001542 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001540:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800154c:	bf00      	nop
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	01312cff 	.word	0x01312cff
 8001558:	02160ebf 	.word	0x02160ebf
 800155c:	03938700 	.word	0x03938700
 8001560:	05f5e0ff 	.word	0x05f5e0ff
 8001564:	08f0d17f 	.word	0x08f0d17f

08001568 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800157a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	791b      	ldrb	r3, [r3, #4]
 8001580:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001582:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	7b1b      	ldrb	r3, [r3, #12]
 8001588:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800158a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	7b5b      	ldrb	r3, [r3, #13]
 8001590:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001592:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	7b9b      	ldrb	r3, [r3, #14]
 8001598:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800159a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	7bdb      	ldrb	r3, [r3, #15]
 80015a0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80015a2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	7c12      	ldrb	r2, [r2, #16]
 80015a8:	2a00      	cmp	r2, #0
 80015aa:	d102      	bne.n	80015b2 <ETH_SetMACConfig+0x4a>
 80015ac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80015b0:	e000      	b.n	80015b4 <ETH_SetMACConfig+0x4c>
 80015b2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80015b4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	7c52      	ldrb	r2, [r2, #17]
 80015ba:	2a00      	cmp	r2, #0
 80015bc:	d102      	bne.n	80015c4 <ETH_SetMACConfig+0x5c>
 80015be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015c2:	e000      	b.n	80015c6 <ETH_SetMACConfig+0x5e>
 80015c4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80015c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	7c9b      	ldrb	r3, [r3, #18]
 80015cc:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80015ce:	431a      	orrs	r2, r3
               macconf->Speed |
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80015d4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80015da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	7f1b      	ldrb	r3, [r3, #28]
 80015e0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80015e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	7f5b      	ldrb	r3, [r3, #29]
 80015e8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80015ea:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80015ec:	683a      	ldr	r2, [r7, #0]
 80015ee:	7f92      	ldrb	r2, [r2, #30]
 80015f0:	2a00      	cmp	r2, #0
 80015f2:	d102      	bne.n	80015fa <ETH_SetMACConfig+0x92>
 80015f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015f8:	e000      	b.n	80015fc <ETH_SetMACConfig+0x94>
 80015fa:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80015fc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	7fdb      	ldrb	r3, [r3, #31]
 8001602:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001604:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	f892 2020 	ldrb.w	r2, [r2, #32]
 800160c:	2a00      	cmp	r2, #0
 800160e:	d102      	bne.n	8001616 <ETH_SetMACConfig+0xae>
 8001610:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001614:	e000      	b.n	8001618 <ETH_SetMACConfig+0xb0>
 8001616:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001618:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800161e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001626:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001628:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800162e:	4313      	orrs	r3, r2
 8001630:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4b56      	ldr	r3, [pc, #344]	; (8001794 <ETH_SetMACConfig+0x22c>)
 800163a:	4013      	ands	r3, r2
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	6812      	ldr	r2, [r2, #0]
 8001640:	68f9      	ldr	r1, [r7, #12]
 8001642:	430b      	orrs	r3, r1
 8001644:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800164a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001652:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001654:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800165c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800165e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001666:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001668:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001670:	2a00      	cmp	r2, #0
 8001672:	d102      	bne.n	800167a <ETH_SetMACConfig+0x112>
 8001674:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001678:	e000      	b.n	800167c <ETH_SetMACConfig+0x114>
 800167a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800167c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001682:	4313      	orrs	r3, r2
 8001684:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	685a      	ldr	r2, [r3, #4]
 800168c:	4b42      	ldr	r3, [pc, #264]	; (8001798 <ETH_SetMACConfig+0x230>)
 800168e:	4013      	ands	r3, r2
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	6812      	ldr	r2, [r2, #0]
 8001694:	68f9      	ldr	r1, [r7, #12]
 8001696:	430b      	orrs	r3, r1
 8001698:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016a0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80016a6:	4313      	orrs	r3, r2
 80016a8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	68da      	ldr	r2, [r3, #12]
 80016b0:	4b3a      	ldr	r3, [pc, #232]	; (800179c <ETH_SetMACConfig+0x234>)
 80016b2:	4013      	ands	r3, r2
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	6812      	ldr	r2, [r2, #0]
 80016b8:	68f9      	ldr	r1, [r7, #12]
 80016ba:	430b      	orrs	r3, r1
 80016bc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80016c4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80016ca:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80016d2:	2a00      	cmp	r2, #0
 80016d4:	d101      	bne.n	80016da <ETH_SetMACConfig+0x172>
 80016d6:	2280      	movs	r2, #128	; 0x80
 80016d8:	e000      	b.n	80016dc <ETH_SetMACConfig+0x174>
 80016da:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80016dc:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016e2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80016e4:	4313      	orrs	r3, r2
 80016e6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80016ee:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80016f2:	4013      	ands	r3, r2
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	6812      	ldr	r2, [r2, #0]
 80016f8:	68f9      	ldr	r1, [r7, #12]
 80016fa:	430b      	orrs	r3, r1
 80016fc:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001704:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800170c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800170e:	4313      	orrs	r3, r2
 8001710:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800171a:	f023 0103 	bic.w	r1, r3, #3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	430a      	orrs	r2, r1
 8001726:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001732:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	430a      	orrs	r2, r1
 8001740:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800174e:	2a00      	cmp	r2, #0
 8001750:	d101      	bne.n	8001756 <ETH_SetMACConfig+0x1ee>
 8001752:	2240      	movs	r2, #64	; 0x40
 8001754:	e000      	b.n	8001758 <ETH_SetMACConfig+0x1f0>
 8001756:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001758:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001760:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001762:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800176a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800176c:	4313      	orrs	r3, r2
 800176e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001778:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	68fa      	ldr	r2, [r7, #12]
 8001782:	430a      	orrs	r2, r1
 8001784:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001788:	bf00      	nop
 800178a:	3714      	adds	r7, #20
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	00048083 	.word	0x00048083
 8001798:	c0f88000 	.word	0xc0f88000
 800179c:	fffffef0 	.word	0xfffffef0

080017a0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	4b38      	ldr	r3, [pc, #224]	; (8001898 <ETH_SetDMAConfig+0xf8>)
 80017b6:	4013      	ands	r3, r2
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	6811      	ldr	r1, [r2, #0]
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	6812      	ldr	r2, [r2, #0]
 80017c0:	430b      	orrs	r3, r1
 80017c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017c6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	791b      	ldrb	r3, [r3, #4]
 80017cc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80017d2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	7b1b      	ldrb	r3, [r3, #12]
 80017d8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80017da:	4313      	orrs	r3, r2
 80017dc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	4b2c      	ldr	r3, [pc, #176]	; (800189c <ETH_SetDMAConfig+0xfc>)
 80017ea:	4013      	ands	r3, r2
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	6812      	ldr	r2, [r2, #0]
 80017f0:	68f9      	ldr	r1, [r7, #12]
 80017f2:	430b      	orrs	r3, r1
 80017f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017f8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	7b5b      	ldrb	r3, [r3, #13]
 80017fe:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001804:	4313      	orrs	r3, r2
 8001806:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001810:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001814:	4b22      	ldr	r3, [pc, #136]	; (80018a0 <ETH_SetDMAConfig+0x100>)
 8001816:	4013      	ands	r3, r2
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	6812      	ldr	r2, [r2, #0]
 800181c:	68f9      	ldr	r1, [r7, #12]
 800181e:	430b      	orrs	r3, r1
 8001820:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001824:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	7d1b      	ldrb	r3, [r3, #20]
 8001830:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001832:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	7f5b      	ldrb	r3, [r3, #29]
 8001838:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800183a:	4313      	orrs	r3, r2
 800183c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001846:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800184a:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <ETH_SetDMAConfig+0x104>)
 800184c:	4013      	ands	r3, r2
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	6812      	ldr	r2, [r2, #0]
 8001852:	68f9      	ldr	r1, [r7, #12]
 8001854:	430b      	orrs	r3, r1
 8001856:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800185a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	7f1b      	ldrb	r3, [r3, #28]
 8001862:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001868:	4313      	orrs	r3, r2
 800186a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001874:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001878:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <ETH_SetDMAConfig+0x108>)
 800187a:	4013      	ands	r3, r2
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	6812      	ldr	r2, [r2, #0]
 8001880:	68f9      	ldr	r1, [r7, #12]
 8001882:	430b      	orrs	r3, r1
 8001884:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001888:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 800188c:	bf00      	nop
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	ffff87fd 	.word	0xffff87fd
 800189c:	ffff2ffe 	.word	0xffff2ffe
 80018a0:	fffec000 	.word	0xfffec000
 80018a4:	ffc0efef 	.word	0xffc0efef
 80018a8:	7fc0ffff 	.word	0x7fc0ffff

080018ac <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b0a4      	sub	sp, #144	; 0x90
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80018b4:	2301      	movs	r3, #1
 80018b6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80018ba:	2300      	movs	r3, #0
 80018bc:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80018be:	2300      	movs	r3, #0
 80018c0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80018c4:	2300      	movs	r3, #0
 80018c6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80018ca:	2301      	movs	r3, #1
 80018cc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80018d0:	2301      	movs	r3, #1
 80018d2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80018d6:	2301      	movs	r3, #1
 80018d8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80018dc:	2300      	movs	r3, #0
 80018de:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80018e2:	2301      	movs	r3, #1
 80018e4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80018e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ec:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80018f8:	2300      	movs	r3, #0
 80018fa:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80018fe:	2300      	movs	r3, #0
 8001900:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001904:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001908:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800190a:	2300      	movs	r3, #0
 800190c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001910:	2300      	movs	r3, #0
 8001912:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001914:	2301      	movs	r3, #1
 8001916:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800191a:	2300      	movs	r3, #0
 800191c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001920:	2300      	movs	r3, #0
 8001922:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001926:	2300      	movs	r3, #0
 8001928:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800192a:	2300      	movs	r3, #0
 800192c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800192e:	2300      	movs	r3, #0
 8001930:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001932:	2300      	movs	r3, #0
 8001934:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001938:	2300      	movs	r3, #0
 800193a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800193e:	2301      	movs	r3, #1
 8001940:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001944:	2320      	movs	r3, #32
 8001946:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800194a:	2301      	movs	r3, #1
 800194c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001950:	2300      	movs	r3, #0
 8001952:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001956:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800195a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800195c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001960:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001962:	2300      	movs	r3, #0
 8001964:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001968:	2302      	movs	r3, #2
 800196a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800196e:	2300      	movs	r3, #0
 8001970:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001974:	2300      	movs	r3, #0
 8001976:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800197a:	2300      	movs	r3, #0
 800197c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001980:	2301      	movs	r3, #1
 8001982:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001986:	2300      	movs	r3, #0
 8001988:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800198a:	2301      	movs	r3, #1
 800198c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001990:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001994:	4619      	mov	r1, r3
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff fde6 	bl	8001568 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800199c:	2301      	movs	r3, #1
 800199e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80019a0:	2301      	movs	r3, #1
 80019a2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80019a4:	2300      	movs	r3, #0
 80019a6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80019a8:	2300      	movs	r3, #0
 80019aa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80019ae:	2300      	movs	r3, #0
 80019b0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80019b2:	2300      	movs	r3, #0
 80019b4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80019b6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80019ba:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80019bc:	2300      	movs	r3, #0
 80019be:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80019c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80019c4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80019c6:	2300      	movs	r3, #0
 80019c8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80019cc:	f44f 7306 	mov.w	r3, #536	; 0x218
 80019d0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80019d2:	f107 0308 	add.w	r3, r7, #8
 80019d6:	4619      	mov	r1, r3
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f7ff fee1 	bl	80017a0 <ETH_SetDMAConfig>
}
 80019de:	bf00      	nop
 80019e0:	3790      	adds	r7, #144	; 0x90
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b085      	sub	sp, #20
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	e01d      	b.n	8001a30 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	68d9      	ldr	r1, [r3, #12]
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	4613      	mov	r3, r2
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	4413      	add	r3, r2
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	440b      	add	r3, r1
 8001a04:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	2200      	movs	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001a1e:	68b9      	ldr	r1, [r7, #8]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	3206      	adds	r2, #6
 8001a26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2b03      	cmp	r3, #3
 8001a34:	d9de      	bls.n	80019f4 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a44:	461a      	mov	r2, r3
 8001a46:	2303      	movs	r3, #3
 8001a48:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68da      	ldr	r2, [r3, #12]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a58:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	68da      	ldr	r2, [r3, #12]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a68:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001a6c:	bf00      	nop
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001a80:	2300      	movs	r3, #0
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	e023      	b.n	8001ace <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6919      	ldr	r1, [r3, #16]
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	4413      	add	r3, r2
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	440b      	add	r3, r1
 8001a96:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	2200      	movs	r2, #0
 8001aae:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001abc:	68b9      	ldr	r1, [r7, #8]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	3212      	adds	r2, #18
 8001ac4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	3301      	adds	r3, #1
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2b03      	cmp	r3, #3
 8001ad2:	d9d8      	bls.n	8001a86 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001afa:	461a      	mov	r2, r3
 8001afc:	2303      	movs	r3, #3
 8001afe:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	691a      	ldr	r2, [r3, #16]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b0e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b22:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8001b26:	bf00      	nop
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
	...

08001b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b089      	sub	sp, #36	; 0x24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001b42:	4b89      	ldr	r3, [pc, #548]	; (8001d68 <HAL_GPIO_Init+0x234>)
 8001b44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b46:	e194      	b.n	8001e72 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	fa01 f303 	lsl.w	r3, r1, r3
 8001b54:	4013      	ands	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f000 8186 	beq.w	8001e6c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 0303 	and.w	r3, r3, #3
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d005      	beq.n	8001b78 <HAL_GPIO_Init+0x44>
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 0303 	and.w	r3, r3, #3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d130      	bne.n	8001bda <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	2203      	movs	r2, #3
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	68da      	ldr	r2, [r3, #12]
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bae:	2201      	movs	r2, #1
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	091b      	lsrs	r3, r3, #4
 8001bc4:	f003 0201 	and.w	r2, r3, #1
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f003 0303 	and.w	r3, r3, #3
 8001be2:	2b03      	cmp	r3, #3
 8001be4:	d017      	beq.n	8001c16 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	2203      	movs	r2, #3
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f003 0303 	and.w	r3, r3, #3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d123      	bne.n	8001c6a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	08da      	lsrs	r2, r3, #3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	3208      	adds	r2, #8
 8001c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	220f      	movs	r2, #15
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4013      	ands	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	691a      	ldr	r2, [r3, #16]
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	f003 0307 	and.w	r3, r3, #7
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	08da      	lsrs	r2, r3, #3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3208      	adds	r2, #8
 8001c64:	69b9      	ldr	r1, [r7, #24]
 8001c66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	2203      	movs	r2, #3
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f003 0203 	and.w	r2, r3, #3
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f000 80e0 	beq.w	8001e6c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cac:	4b2f      	ldr	r3, [pc, #188]	; (8001d6c <HAL_GPIO_Init+0x238>)
 8001cae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cb2:	4a2e      	ldr	r2, [pc, #184]	; (8001d6c <HAL_GPIO_Init+0x238>)
 8001cb4:	f043 0302 	orr.w	r3, r3, #2
 8001cb8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001cbc:	4b2b      	ldr	r3, [pc, #172]	; (8001d6c <HAL_GPIO_Init+0x238>)
 8001cbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cca:	4a29      	ldr	r2, [pc, #164]	; (8001d70 <HAL_GPIO_Init+0x23c>)
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	089b      	lsrs	r3, r3, #2
 8001cd0:	3302      	adds	r3, #2
 8001cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	220f      	movs	r2, #15
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4013      	ands	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a20      	ldr	r2, [pc, #128]	; (8001d74 <HAL_GPIO_Init+0x240>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d052      	beq.n	8001d9c <HAL_GPIO_Init+0x268>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a1f      	ldr	r2, [pc, #124]	; (8001d78 <HAL_GPIO_Init+0x244>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d031      	beq.n	8001d62 <HAL_GPIO_Init+0x22e>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a1e      	ldr	r2, [pc, #120]	; (8001d7c <HAL_GPIO_Init+0x248>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d02b      	beq.n	8001d5e <HAL_GPIO_Init+0x22a>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a1d      	ldr	r2, [pc, #116]	; (8001d80 <HAL_GPIO_Init+0x24c>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d025      	beq.n	8001d5a <HAL_GPIO_Init+0x226>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a1c      	ldr	r2, [pc, #112]	; (8001d84 <HAL_GPIO_Init+0x250>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d01f      	beq.n	8001d56 <HAL_GPIO_Init+0x222>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a1b      	ldr	r2, [pc, #108]	; (8001d88 <HAL_GPIO_Init+0x254>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d019      	beq.n	8001d52 <HAL_GPIO_Init+0x21e>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a1a      	ldr	r2, [pc, #104]	; (8001d8c <HAL_GPIO_Init+0x258>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d013      	beq.n	8001d4e <HAL_GPIO_Init+0x21a>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a19      	ldr	r2, [pc, #100]	; (8001d90 <HAL_GPIO_Init+0x25c>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d00d      	beq.n	8001d4a <HAL_GPIO_Init+0x216>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a18      	ldr	r2, [pc, #96]	; (8001d94 <HAL_GPIO_Init+0x260>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d007      	beq.n	8001d46 <HAL_GPIO_Init+0x212>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a17      	ldr	r2, [pc, #92]	; (8001d98 <HAL_GPIO_Init+0x264>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d101      	bne.n	8001d42 <HAL_GPIO_Init+0x20e>
 8001d3e:	2309      	movs	r3, #9
 8001d40:	e02d      	b.n	8001d9e <HAL_GPIO_Init+0x26a>
 8001d42:	230a      	movs	r3, #10
 8001d44:	e02b      	b.n	8001d9e <HAL_GPIO_Init+0x26a>
 8001d46:	2308      	movs	r3, #8
 8001d48:	e029      	b.n	8001d9e <HAL_GPIO_Init+0x26a>
 8001d4a:	2307      	movs	r3, #7
 8001d4c:	e027      	b.n	8001d9e <HAL_GPIO_Init+0x26a>
 8001d4e:	2306      	movs	r3, #6
 8001d50:	e025      	b.n	8001d9e <HAL_GPIO_Init+0x26a>
 8001d52:	2305      	movs	r3, #5
 8001d54:	e023      	b.n	8001d9e <HAL_GPIO_Init+0x26a>
 8001d56:	2304      	movs	r3, #4
 8001d58:	e021      	b.n	8001d9e <HAL_GPIO_Init+0x26a>
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e01f      	b.n	8001d9e <HAL_GPIO_Init+0x26a>
 8001d5e:	2302      	movs	r3, #2
 8001d60:	e01d      	b.n	8001d9e <HAL_GPIO_Init+0x26a>
 8001d62:	2301      	movs	r3, #1
 8001d64:	e01b      	b.n	8001d9e <HAL_GPIO_Init+0x26a>
 8001d66:	bf00      	nop
 8001d68:	58000080 	.word	0x58000080
 8001d6c:	58024400 	.word	0x58024400
 8001d70:	58000400 	.word	0x58000400
 8001d74:	58020000 	.word	0x58020000
 8001d78:	58020400 	.word	0x58020400
 8001d7c:	58020800 	.word	0x58020800
 8001d80:	58020c00 	.word	0x58020c00
 8001d84:	58021000 	.word	0x58021000
 8001d88:	58021400 	.word	0x58021400
 8001d8c:	58021800 	.word	0x58021800
 8001d90:	58021c00 	.word	0x58021c00
 8001d94:	58022000 	.word	0x58022000
 8001d98:	58022400 	.word	0x58022400
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	69fa      	ldr	r2, [r7, #28]
 8001da0:	f002 0203 	and.w	r2, r2, #3
 8001da4:	0092      	lsls	r2, r2, #2
 8001da6:	4093      	lsls	r3, r2
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dae:	4938      	ldr	r1, [pc, #224]	; (8001e90 <HAL_GPIO_Init+0x35c>)
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	089b      	lsrs	r3, r3, #2
 8001db4:	3302      	adds	r3, #2
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001de2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001dea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	43db      	mvns	r3, r3
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d003      	beq.n	8001e10 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001e10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	43db      	mvns	r3, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	fa22 f303 	lsr.w	r3, r2, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f47f ae63 	bne.w	8001b48 <HAL_GPIO_Init+0x14>
  }
}
 8001e82:	bf00      	nop
 8001e84:	bf00      	nop
 8001e86:	3724      	adds	r7, #36	; 0x24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	58000400 	.word	0x58000400

08001e94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	807b      	strh	r3, [r7, #2]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ea4:	787b      	ldrb	r3, [r7, #1]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eaa:	887a      	ldrh	r2, [r7, #2]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001eb0:	e003      	b.n	8001eba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001eb2:	887b      	ldrh	r3, [r7, #2]
 8001eb4:	041a      	lsls	r2, r3, #16
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	619a      	str	r2, [r3, #24]
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ec6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ec8:	b08f      	sub	sp, #60	; 0x3c
 8001eca:	af0a      	add	r7, sp, #40	; 0x28
 8001ecc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d101      	bne.n	8001ed8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e116      	b.n	8002106 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d106      	bne.n	8001ef8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7fe fedc 	bl	8000cb0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2203      	movs	r2, #3
 8001efc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d102      	bne.n	8001f12 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f003 fd68 	bl	80059ec <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	603b      	str	r3, [r7, #0]
 8001f22:	687e      	ldr	r6, [r7, #4]
 8001f24:	466d      	mov	r5, sp
 8001f26:	f106 0410 	add.w	r4, r6, #16
 8001f2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f32:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f36:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f3a:	1d33      	adds	r3, r6, #4
 8001f3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f3e:	6838      	ldr	r0, [r7, #0]
 8001f40:	f003 fce6 	bl	8005910 <USB_CoreInit>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d005      	beq.n	8001f56 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2202      	movs	r2, #2
 8001f4e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e0d7      	b.n	8002106 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f003 fd56 	bl	8005a0e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f62:	2300      	movs	r3, #0
 8001f64:	73fb      	strb	r3, [r7, #15]
 8001f66:	e04a      	b.n	8001ffe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f68:	7bfa      	ldrb	r2, [r7, #15]
 8001f6a:	6879      	ldr	r1, [r7, #4]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	4413      	add	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	440b      	add	r3, r1
 8001f76:	333d      	adds	r3, #61	; 0x3d
 8001f78:	2201      	movs	r2, #1
 8001f7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f7c:	7bfa      	ldrb	r2, [r7, #15]
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	4613      	mov	r3, r2
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	4413      	add	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	440b      	add	r3, r1
 8001f8a:	333c      	adds	r3, #60	; 0x3c
 8001f8c:	7bfa      	ldrb	r2, [r7, #15]
 8001f8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f90:	7bfa      	ldrb	r2, [r7, #15]
 8001f92:	7bfb      	ldrb	r3, [r7, #15]
 8001f94:	b298      	uxth	r0, r3
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	3344      	adds	r3, #68	; 0x44
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fa8:	7bfa      	ldrb	r2, [r7, #15]
 8001faa:	6879      	ldr	r1, [r7, #4]
 8001fac:	4613      	mov	r3, r2
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	3340      	adds	r3, #64	; 0x40
 8001fb8:	2200      	movs	r2, #0
 8001fba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fbc:	7bfa      	ldrb	r2, [r7, #15]
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	4413      	add	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	440b      	add	r3, r1
 8001fca:	3348      	adds	r3, #72	; 0x48
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fd0:	7bfa      	ldrb	r2, [r7, #15]
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	4413      	add	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	440b      	add	r3, r1
 8001fde:	334c      	adds	r3, #76	; 0x4c
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001fe4:	7bfa      	ldrb	r2, [r7, #15]
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	4413      	add	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	440b      	add	r3, r1
 8001ff2:	3354      	adds	r3, #84	; 0x54
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	73fb      	strb	r3, [r7, #15]
 8001ffe:	7bfa      	ldrb	r2, [r7, #15]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	429a      	cmp	r2, r3
 8002006:	d3af      	bcc.n	8001f68 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002008:	2300      	movs	r3, #0
 800200a:	73fb      	strb	r3, [r7, #15]
 800200c:	e044      	b.n	8002098 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800200e:	7bfa      	ldrb	r2, [r7, #15]
 8002010:	6879      	ldr	r1, [r7, #4]
 8002012:	4613      	mov	r3, r2
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	4413      	add	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	440b      	add	r3, r1
 800201c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002020:	2200      	movs	r2, #0
 8002022:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002024:	7bfa      	ldrb	r2, [r7, #15]
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	4613      	mov	r3, r2
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	4413      	add	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	440b      	add	r3, r1
 8002032:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002036:	7bfa      	ldrb	r2, [r7, #15]
 8002038:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800203a:	7bfa      	ldrb	r2, [r7, #15]
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4413      	add	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	440b      	add	r3, r1
 8002048:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800204c:	2200      	movs	r2, #0
 800204e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002050:	7bfa      	ldrb	r2, [r7, #15]
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	4613      	mov	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	4413      	add	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	440b      	add	r3, r1
 800205e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002066:	7bfa      	ldrb	r2, [r7, #15]
 8002068:	6879      	ldr	r1, [r7, #4]
 800206a:	4613      	mov	r3, r2
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	4413      	add	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	440b      	add	r3, r1
 8002074:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800207c:	7bfa      	ldrb	r2, [r7, #15]
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	4613      	mov	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	4413      	add	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002092:	7bfb      	ldrb	r3, [r7, #15]
 8002094:	3301      	adds	r3, #1
 8002096:	73fb      	strb	r3, [r7, #15]
 8002098:	7bfa      	ldrb	r2, [r7, #15]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d3b5      	bcc.n	800200e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	603b      	str	r3, [r7, #0]
 80020a8:	687e      	ldr	r6, [r7, #4]
 80020aa:	466d      	mov	r5, sp
 80020ac:	f106 0410 	add.w	r4, r6, #16
 80020b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80020c0:	1d33      	adds	r3, r6, #4
 80020c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020c4:	6838      	ldr	r0, [r7, #0]
 80020c6:	f003 fcef 	bl	8005aa8 <USB_DevInit>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2202      	movs	r2, #2
 80020d4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e014      	b.n	8002106 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d102      	bne.n	80020fa <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 f80b 	bl	8002110 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f003 fead 	bl	8005e5e <USB_DevDisconnect>

  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002110 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2201      	movs	r2, #1
 8002122:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800213e:	4b05      	ldr	r3, [pc, #20]	; (8002154 <HAL_PCDEx_ActivateLPM+0x44>)
 8002140:	4313      	orrs	r3, r2
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	10000003 	.word	0x10000003

08002158 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002160:	4b19      	ldr	r3, [pc, #100]	; (80021c8 <HAL_PWREx_ConfigSupply+0x70>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	f003 0304 	and.w	r3, r3, #4
 8002168:	2b04      	cmp	r3, #4
 800216a:	d00a      	beq.n	8002182 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800216c:	4b16      	ldr	r3, [pc, #88]	; (80021c8 <HAL_PWREx_ConfigSupply+0x70>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	f003 0307 	and.w	r3, r3, #7
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	429a      	cmp	r2, r3
 8002178:	d001      	beq.n	800217e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e01f      	b.n	80021be <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800217e:	2300      	movs	r3, #0
 8002180:	e01d      	b.n	80021be <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002182:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <HAL_PWREx_ConfigSupply+0x70>)
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	f023 0207 	bic.w	r2, r3, #7
 800218a:	490f      	ldr	r1, [pc, #60]	; (80021c8 <HAL_PWREx_ConfigSupply+0x70>)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4313      	orrs	r3, r2
 8002190:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002192:	f7fe ff77 	bl	8001084 <HAL_GetTick>
 8002196:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002198:	e009      	b.n	80021ae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800219a:	f7fe ff73 	bl	8001084 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021a8:	d901      	bls.n	80021ae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e007      	b.n	80021be <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80021ae:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <HAL_PWREx_ConfigSupply+0x70>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021ba:	d1ee      	bne.n	800219a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	58024800 	.word	0x58024800

080021cc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80021d0:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	4a04      	ldr	r2, [pc, #16]	; (80021e8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80021d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021da:	60d3      	str	r3, [r2, #12]
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	58024800 	.word	0x58024800

080021ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b08c      	sub	sp, #48	; 0x30
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d102      	bne.n	8002200 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	f000 bc1d 	b.w	8002a3a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 8087 	beq.w	800231c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800220e:	4b99      	ldr	r3, [pc, #612]	; (8002474 <HAL_RCC_OscConfig+0x288>)
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002216:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002218:	4b96      	ldr	r3, [pc, #600]	; (8002474 <HAL_RCC_OscConfig+0x288>)
 800221a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800221e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002220:	2b10      	cmp	r3, #16
 8002222:	d007      	beq.n	8002234 <HAL_RCC_OscConfig+0x48>
 8002224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002226:	2b18      	cmp	r3, #24
 8002228:	d110      	bne.n	800224c <HAL_RCC_OscConfig+0x60>
 800222a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800222c:	f003 0303 	and.w	r3, r3, #3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d10b      	bne.n	800224c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002234:	4b8f      	ldr	r3, [pc, #572]	; (8002474 <HAL_RCC_OscConfig+0x288>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d06c      	beq.n	800231a <HAL_RCC_OscConfig+0x12e>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d168      	bne.n	800231a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e3f6      	b.n	8002a3a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002254:	d106      	bne.n	8002264 <HAL_RCC_OscConfig+0x78>
 8002256:	4b87      	ldr	r3, [pc, #540]	; (8002474 <HAL_RCC_OscConfig+0x288>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a86      	ldr	r2, [pc, #536]	; (8002474 <HAL_RCC_OscConfig+0x288>)
 800225c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	e02e      	b.n	80022c2 <HAL_RCC_OscConfig+0xd6>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10c      	bne.n	8002286 <HAL_RCC_OscConfig+0x9a>
 800226c:	4b81      	ldr	r3, [pc, #516]	; (8002474 <HAL_RCC_OscConfig+0x288>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a80      	ldr	r2, [pc, #512]	; (8002474 <HAL_RCC_OscConfig+0x288>)
 8002272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002276:	6013      	str	r3, [r2, #0]
 8002278:	4b7e      	ldr	r3, [pc, #504]	; (8002474 <HAL_RCC_OscConfig+0x288>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a7d      	ldr	r2, [pc, #500]	; (8002474 <HAL_RCC_OscConfig+0x288>)
 800227e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002282:	6013      	str	r3, [r2, #0]
 8002284:	e01d      	b.n	80022c2 <HAL_RCC_OscConfig+0xd6>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800228e:	d10c      	bne.n	80022aa <HAL_RCC_OscConfig+0xbe>
 8002290:	4b78      	ldr	r3, [pc, #480]	; (8002474 <HAL_RCC_OscConfig+0x288>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a77      	ldr	r2, [pc, #476]	; (8002474 <HAL_RCC_OscConfig+0x288>)
 8002296:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800229a:	6013      	str	r3, [r2, #0]
 800229c:	4b75      	ldr	r3, [pc, #468]	; (8002474 <HAL_RCC_OscConfig+0x288>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a74      	ldr	r2, [pc, #464]	; (8002474 <HAL_RCC_OscConfig+0x288>)
 80022a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a6:	6013      	str	r3, [r2, #0]
 80022a8:	e00b      	b.n	80022c2 <HAL_RCC_OscConfig+0xd6>
 80022aa:	4b72      	ldr	r3, [pc, #456]	; (8002474 <HAL_RCC_OscConfig+0x288>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a71      	ldr	r2, [pc, #452]	; (8002474 <HAL_RCC_OscConfig+0x288>)
 80022b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	4b6f      	ldr	r3, [pc, #444]	; (8002474 <HAL_RCC_OscConfig+0x288>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a6e      	ldr	r2, [pc, #440]	; (8002474 <HAL_RCC_OscConfig+0x288>)
 80022bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022c0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d013      	beq.n	80022f2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ca:	f7fe fedb 	bl	8001084 <HAL_GetTick>
 80022ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022d0:	e008      	b.n	80022e4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022d2:	f7fe fed7 	bl	8001084 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b64      	cmp	r3, #100	; 0x64
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e3aa      	b.n	8002a3a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022e4:	4b63      	ldr	r3, [pc, #396]	; (8002474 <HAL_RCC_OscConfig+0x288>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d0f0      	beq.n	80022d2 <HAL_RCC_OscConfig+0xe6>
 80022f0:	e014      	b.n	800231c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f2:	f7fe fec7 	bl	8001084 <HAL_GetTick>
 80022f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80022f8:	e008      	b.n	800230c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022fa:	f7fe fec3 	bl	8001084 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b64      	cmp	r3, #100	; 0x64
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e396      	b.n	8002a3a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800230c:	4b59      	ldr	r3, [pc, #356]	; (8002474 <HAL_RCC_OscConfig+0x288>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1f0      	bne.n	80022fa <HAL_RCC_OscConfig+0x10e>
 8002318:	e000      	b.n	800231c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800231a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	f000 80cb 	beq.w	80024c0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800232a:	4b52      	ldr	r3, [pc, #328]	; (8002474 <HAL_RCC_OscConfig+0x288>)
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002332:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002334:	4b4f      	ldr	r3, [pc, #316]	; (8002474 <HAL_RCC_OscConfig+0x288>)
 8002336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002338:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800233a:	6a3b      	ldr	r3, [r7, #32]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d007      	beq.n	8002350 <HAL_RCC_OscConfig+0x164>
 8002340:	6a3b      	ldr	r3, [r7, #32]
 8002342:	2b18      	cmp	r3, #24
 8002344:	d156      	bne.n	80023f4 <HAL_RCC_OscConfig+0x208>
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	f003 0303 	and.w	r3, r3, #3
 800234c:	2b00      	cmp	r3, #0
 800234e:	d151      	bne.n	80023f4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002350:	4b48      	ldr	r3, [pc, #288]	; (8002474 <HAL_RCC_OscConfig+0x288>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b00      	cmp	r3, #0
 800235a:	d005      	beq.n	8002368 <HAL_RCC_OscConfig+0x17c>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e368      	b.n	8002a3a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002368:	4b42      	ldr	r3, [pc, #264]	; (8002474 <HAL_RCC_OscConfig+0x288>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f023 0219 	bic.w	r2, r3, #25
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	493f      	ldr	r1, [pc, #252]	; (8002474 <HAL_RCC_OscConfig+0x288>)
 8002376:	4313      	orrs	r3, r2
 8002378:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800237a:	f7fe fe83 	bl	8001084 <HAL_GetTick>
 800237e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002380:	e008      	b.n	8002394 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002382:	f7fe fe7f 	bl	8001084 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e352      	b.n	8002a3a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002394:	4b37      	ldr	r3, [pc, #220]	; (8002474 <HAL_RCC_OscConfig+0x288>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0f0      	beq.n	8002382 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a0:	f7fe fea0 	bl	80010e4 <HAL_GetREVID>
 80023a4:	4603      	mov	r3, r0
 80023a6:	f241 0203 	movw	r2, #4099	; 0x1003
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d817      	bhi.n	80023de <HAL_RCC_OscConfig+0x1f2>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	2b40      	cmp	r3, #64	; 0x40
 80023b4:	d108      	bne.n	80023c8 <HAL_RCC_OscConfig+0x1dc>
 80023b6:	4b2f      	ldr	r3, [pc, #188]	; (8002474 <HAL_RCC_OscConfig+0x288>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80023be:	4a2d      	ldr	r2, [pc, #180]	; (8002474 <HAL_RCC_OscConfig+0x288>)
 80023c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023c4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023c6:	e07b      	b.n	80024c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c8:	4b2a      	ldr	r3, [pc, #168]	; (8002474 <HAL_RCC_OscConfig+0x288>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	031b      	lsls	r3, r3, #12
 80023d6:	4927      	ldr	r1, [pc, #156]	; (8002474 <HAL_RCC_OscConfig+0x288>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023dc:	e070      	b.n	80024c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023de:	4b25      	ldr	r3, [pc, #148]	; (8002474 <HAL_RCC_OscConfig+0x288>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	061b      	lsls	r3, r3, #24
 80023ec:	4921      	ldr	r1, [pc, #132]	; (8002474 <HAL_RCC_OscConfig+0x288>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023f2:	e065      	b.n	80024c0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d048      	beq.n	800248e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80023fc:	4b1d      	ldr	r3, [pc, #116]	; (8002474 <HAL_RCC_OscConfig+0x288>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f023 0219 	bic.w	r2, r3, #25
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	491a      	ldr	r1, [pc, #104]	; (8002474 <HAL_RCC_OscConfig+0x288>)
 800240a:	4313      	orrs	r3, r2
 800240c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240e:	f7fe fe39 	bl	8001084 <HAL_GetTick>
 8002412:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002416:	f7fe fe35 	bl	8001084 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e308      	b.n	8002a3a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002428:	4b12      	ldr	r3, [pc, #72]	; (8002474 <HAL_RCC_OscConfig+0x288>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0f0      	beq.n	8002416 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002434:	f7fe fe56 	bl	80010e4 <HAL_GetREVID>
 8002438:	4603      	mov	r3, r0
 800243a:	f241 0203 	movw	r2, #4099	; 0x1003
 800243e:	4293      	cmp	r3, r2
 8002440:	d81a      	bhi.n	8002478 <HAL_RCC_OscConfig+0x28c>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	2b40      	cmp	r3, #64	; 0x40
 8002448:	d108      	bne.n	800245c <HAL_RCC_OscConfig+0x270>
 800244a:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <HAL_RCC_OscConfig+0x288>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002452:	4a08      	ldr	r2, [pc, #32]	; (8002474 <HAL_RCC_OscConfig+0x288>)
 8002454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002458:	6053      	str	r3, [r2, #4]
 800245a:	e031      	b.n	80024c0 <HAL_RCC_OscConfig+0x2d4>
 800245c:	4b05      	ldr	r3, [pc, #20]	; (8002474 <HAL_RCC_OscConfig+0x288>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	031b      	lsls	r3, r3, #12
 800246a:	4902      	ldr	r1, [pc, #8]	; (8002474 <HAL_RCC_OscConfig+0x288>)
 800246c:	4313      	orrs	r3, r2
 800246e:	604b      	str	r3, [r1, #4]
 8002470:	e026      	b.n	80024c0 <HAL_RCC_OscConfig+0x2d4>
 8002472:	bf00      	nop
 8002474:	58024400 	.word	0x58024400
 8002478:	4b9a      	ldr	r3, [pc, #616]	; (80026e4 <HAL_RCC_OscConfig+0x4f8>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	061b      	lsls	r3, r3, #24
 8002486:	4997      	ldr	r1, [pc, #604]	; (80026e4 <HAL_RCC_OscConfig+0x4f8>)
 8002488:	4313      	orrs	r3, r2
 800248a:	604b      	str	r3, [r1, #4]
 800248c:	e018      	b.n	80024c0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800248e:	4b95      	ldr	r3, [pc, #596]	; (80026e4 <HAL_RCC_OscConfig+0x4f8>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a94      	ldr	r2, [pc, #592]	; (80026e4 <HAL_RCC_OscConfig+0x4f8>)
 8002494:	f023 0301 	bic.w	r3, r3, #1
 8002498:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249a:	f7fe fdf3 	bl	8001084 <HAL_GetTick>
 800249e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80024a0:	e008      	b.n	80024b4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024a2:	f7fe fdef 	bl	8001084 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e2c2      	b.n	8002a3a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80024b4:	4b8b      	ldr	r3, [pc, #556]	; (80026e4 <HAL_RCC_OscConfig+0x4f8>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1f0      	bne.n	80024a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0310 	and.w	r3, r3, #16
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 80a9 	beq.w	8002620 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024ce:	4b85      	ldr	r3, [pc, #532]	; (80026e4 <HAL_RCC_OscConfig+0x4f8>)
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024d6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024d8:	4b82      	ldr	r3, [pc, #520]	; (80026e4 <HAL_RCC_OscConfig+0x4f8>)
 80024da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024dc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	2b08      	cmp	r3, #8
 80024e2:	d007      	beq.n	80024f4 <HAL_RCC_OscConfig+0x308>
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	2b18      	cmp	r3, #24
 80024e8:	d13a      	bne.n	8002560 <HAL_RCC_OscConfig+0x374>
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	f003 0303 	and.w	r3, r3, #3
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d135      	bne.n	8002560 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80024f4:	4b7b      	ldr	r3, [pc, #492]	; (80026e4 <HAL_RCC_OscConfig+0x4f8>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d005      	beq.n	800250c <HAL_RCC_OscConfig+0x320>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	69db      	ldr	r3, [r3, #28]
 8002504:	2b80      	cmp	r3, #128	; 0x80
 8002506:	d001      	beq.n	800250c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e296      	b.n	8002a3a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800250c:	f7fe fdea 	bl	80010e4 <HAL_GetREVID>
 8002510:	4603      	mov	r3, r0
 8002512:	f241 0203 	movw	r2, #4099	; 0x1003
 8002516:	4293      	cmp	r3, r2
 8002518:	d817      	bhi.n	800254a <HAL_RCC_OscConfig+0x35e>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	2b20      	cmp	r3, #32
 8002520:	d108      	bne.n	8002534 <HAL_RCC_OscConfig+0x348>
 8002522:	4b70      	ldr	r3, [pc, #448]	; (80026e4 <HAL_RCC_OscConfig+0x4f8>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800252a:	4a6e      	ldr	r2, [pc, #440]	; (80026e4 <HAL_RCC_OscConfig+0x4f8>)
 800252c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002530:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002532:	e075      	b.n	8002620 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002534:	4b6b      	ldr	r3, [pc, #428]	; (80026e4 <HAL_RCC_OscConfig+0x4f8>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	069b      	lsls	r3, r3, #26
 8002542:	4968      	ldr	r1, [pc, #416]	; (80026e4 <HAL_RCC_OscConfig+0x4f8>)
 8002544:	4313      	orrs	r3, r2
 8002546:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002548:	e06a      	b.n	8002620 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800254a:	4b66      	ldr	r3, [pc, #408]	; (80026e4 <HAL_RCC_OscConfig+0x4f8>)
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	061b      	lsls	r3, r3, #24
 8002558:	4962      	ldr	r1, [pc, #392]	; (80026e4 <HAL_RCC_OscConfig+0x4f8>)
 800255a:	4313      	orrs	r3, r2
 800255c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800255e:	e05f      	b.n	8002620 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	69db      	ldr	r3, [r3, #28]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d042      	beq.n	80025ee <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002568:	4b5e      	ldr	r3, [pc, #376]	; (80026e4 <HAL_RCC_OscConfig+0x4f8>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a5d      	ldr	r2, [pc, #372]	; (80026e4 <HAL_RCC_OscConfig+0x4f8>)
 800256e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002572:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002574:	f7fe fd86 	bl	8001084 <HAL_GetTick>
 8002578:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800257c:	f7fe fd82 	bl	8001084 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e255      	b.n	8002a3a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800258e:	4b55      	ldr	r3, [pc, #340]	; (80026e4 <HAL_RCC_OscConfig+0x4f8>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002596:	2b00      	cmp	r3, #0
 8002598:	d0f0      	beq.n	800257c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800259a:	f7fe fda3 	bl	80010e4 <HAL_GetREVID>
 800259e:	4603      	mov	r3, r0
 80025a0:	f241 0203 	movw	r2, #4099	; 0x1003
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d817      	bhi.n	80025d8 <HAL_RCC_OscConfig+0x3ec>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	2b20      	cmp	r3, #32
 80025ae:	d108      	bne.n	80025c2 <HAL_RCC_OscConfig+0x3d6>
 80025b0:	4b4c      	ldr	r3, [pc, #304]	; (80026e4 <HAL_RCC_OscConfig+0x4f8>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80025b8:	4a4a      	ldr	r2, [pc, #296]	; (80026e4 <HAL_RCC_OscConfig+0x4f8>)
 80025ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80025be:	6053      	str	r3, [r2, #4]
 80025c0:	e02e      	b.n	8002620 <HAL_RCC_OscConfig+0x434>
 80025c2:	4b48      	ldr	r3, [pc, #288]	; (80026e4 <HAL_RCC_OscConfig+0x4f8>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	069b      	lsls	r3, r3, #26
 80025d0:	4944      	ldr	r1, [pc, #272]	; (80026e4 <HAL_RCC_OscConfig+0x4f8>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	604b      	str	r3, [r1, #4]
 80025d6:	e023      	b.n	8002620 <HAL_RCC_OscConfig+0x434>
 80025d8:	4b42      	ldr	r3, [pc, #264]	; (80026e4 <HAL_RCC_OscConfig+0x4f8>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	061b      	lsls	r3, r3, #24
 80025e6:	493f      	ldr	r1, [pc, #252]	; (80026e4 <HAL_RCC_OscConfig+0x4f8>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	60cb      	str	r3, [r1, #12]
 80025ec:	e018      	b.n	8002620 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80025ee:	4b3d      	ldr	r3, [pc, #244]	; (80026e4 <HAL_RCC_OscConfig+0x4f8>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a3c      	ldr	r2, [pc, #240]	; (80026e4 <HAL_RCC_OscConfig+0x4f8>)
 80025f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fa:	f7fe fd43 	bl	8001084 <HAL_GetTick>
 80025fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002602:	f7fe fd3f 	bl	8001084 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e212      	b.n	8002a3a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002614:	4b33      	ldr	r3, [pc, #204]	; (80026e4 <HAL_RCC_OscConfig+0x4f8>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1f0      	bne.n	8002602 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0308 	and.w	r3, r3, #8
 8002628:	2b00      	cmp	r3, #0
 800262a:	d036      	beq.n	800269a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	695b      	ldr	r3, [r3, #20]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d019      	beq.n	8002668 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002634:	4b2b      	ldr	r3, [pc, #172]	; (80026e4 <HAL_RCC_OscConfig+0x4f8>)
 8002636:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002638:	4a2a      	ldr	r2, [pc, #168]	; (80026e4 <HAL_RCC_OscConfig+0x4f8>)
 800263a:	f043 0301 	orr.w	r3, r3, #1
 800263e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002640:	f7fe fd20 	bl	8001084 <HAL_GetTick>
 8002644:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002648:	f7fe fd1c 	bl	8001084 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e1ef      	b.n	8002a3a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800265a:	4b22      	ldr	r3, [pc, #136]	; (80026e4 <HAL_RCC_OscConfig+0x4f8>)
 800265c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0f0      	beq.n	8002648 <HAL_RCC_OscConfig+0x45c>
 8002666:	e018      	b.n	800269a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002668:	4b1e      	ldr	r3, [pc, #120]	; (80026e4 <HAL_RCC_OscConfig+0x4f8>)
 800266a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800266c:	4a1d      	ldr	r2, [pc, #116]	; (80026e4 <HAL_RCC_OscConfig+0x4f8>)
 800266e:	f023 0301 	bic.w	r3, r3, #1
 8002672:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002674:	f7fe fd06 	bl	8001084 <HAL_GetTick>
 8002678:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800267c:	f7fe fd02 	bl	8001084 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e1d5      	b.n	8002a3a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800268e:	4b15      	ldr	r3, [pc, #84]	; (80026e4 <HAL_RCC_OscConfig+0x4f8>)
 8002690:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1f0      	bne.n	800267c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0320 	and.w	r3, r3, #32
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d039      	beq.n	800271a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d01c      	beq.n	80026e8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80026ae:	4b0d      	ldr	r3, [pc, #52]	; (80026e4 <HAL_RCC_OscConfig+0x4f8>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a0c      	ldr	r2, [pc, #48]	; (80026e4 <HAL_RCC_OscConfig+0x4f8>)
 80026b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80026ba:	f7fe fce3 	bl	8001084 <HAL_GetTick>
 80026be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80026c0:	e008      	b.n	80026d4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80026c2:	f7fe fcdf 	bl	8001084 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e1b2      	b.n	8002a3a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80026d4:	4b03      	ldr	r3, [pc, #12]	; (80026e4 <HAL_RCC_OscConfig+0x4f8>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0f0      	beq.n	80026c2 <HAL_RCC_OscConfig+0x4d6>
 80026e0:	e01b      	b.n	800271a <HAL_RCC_OscConfig+0x52e>
 80026e2:	bf00      	nop
 80026e4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80026e8:	4b9b      	ldr	r3, [pc, #620]	; (8002958 <HAL_RCC_OscConfig+0x76c>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a9a      	ldr	r2, [pc, #616]	; (8002958 <HAL_RCC_OscConfig+0x76c>)
 80026ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80026f2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80026f4:	f7fe fcc6 	bl	8001084 <HAL_GetTick>
 80026f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80026fc:	f7fe fcc2 	bl	8001084 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e195      	b.n	8002a3a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800270e:	4b92      	ldr	r3, [pc, #584]	; (8002958 <HAL_RCC_OscConfig+0x76c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0304 	and.w	r3, r3, #4
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 8081 	beq.w	800282a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002728:	4b8c      	ldr	r3, [pc, #560]	; (800295c <HAL_RCC_OscConfig+0x770>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a8b      	ldr	r2, [pc, #556]	; (800295c <HAL_RCC_OscConfig+0x770>)
 800272e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002732:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002734:	f7fe fca6 	bl	8001084 <HAL_GetTick>
 8002738:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800273c:	f7fe fca2 	bl	8001084 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b64      	cmp	r3, #100	; 0x64
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e175      	b.n	8002a3a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800274e:	4b83      	ldr	r3, [pc, #524]	; (800295c <HAL_RCC_OscConfig+0x770>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0f0      	beq.n	800273c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d106      	bne.n	8002770 <HAL_RCC_OscConfig+0x584>
 8002762:	4b7d      	ldr	r3, [pc, #500]	; (8002958 <HAL_RCC_OscConfig+0x76c>)
 8002764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002766:	4a7c      	ldr	r2, [pc, #496]	; (8002958 <HAL_RCC_OscConfig+0x76c>)
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	6713      	str	r3, [r2, #112]	; 0x70
 800276e:	e02d      	b.n	80027cc <HAL_RCC_OscConfig+0x5e0>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d10c      	bne.n	8002792 <HAL_RCC_OscConfig+0x5a6>
 8002778:	4b77      	ldr	r3, [pc, #476]	; (8002958 <HAL_RCC_OscConfig+0x76c>)
 800277a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800277c:	4a76      	ldr	r2, [pc, #472]	; (8002958 <HAL_RCC_OscConfig+0x76c>)
 800277e:	f023 0301 	bic.w	r3, r3, #1
 8002782:	6713      	str	r3, [r2, #112]	; 0x70
 8002784:	4b74      	ldr	r3, [pc, #464]	; (8002958 <HAL_RCC_OscConfig+0x76c>)
 8002786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002788:	4a73      	ldr	r2, [pc, #460]	; (8002958 <HAL_RCC_OscConfig+0x76c>)
 800278a:	f023 0304 	bic.w	r3, r3, #4
 800278e:	6713      	str	r3, [r2, #112]	; 0x70
 8002790:	e01c      	b.n	80027cc <HAL_RCC_OscConfig+0x5e0>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	2b05      	cmp	r3, #5
 8002798:	d10c      	bne.n	80027b4 <HAL_RCC_OscConfig+0x5c8>
 800279a:	4b6f      	ldr	r3, [pc, #444]	; (8002958 <HAL_RCC_OscConfig+0x76c>)
 800279c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279e:	4a6e      	ldr	r2, [pc, #440]	; (8002958 <HAL_RCC_OscConfig+0x76c>)
 80027a0:	f043 0304 	orr.w	r3, r3, #4
 80027a4:	6713      	str	r3, [r2, #112]	; 0x70
 80027a6:	4b6c      	ldr	r3, [pc, #432]	; (8002958 <HAL_RCC_OscConfig+0x76c>)
 80027a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027aa:	4a6b      	ldr	r2, [pc, #428]	; (8002958 <HAL_RCC_OscConfig+0x76c>)
 80027ac:	f043 0301 	orr.w	r3, r3, #1
 80027b0:	6713      	str	r3, [r2, #112]	; 0x70
 80027b2:	e00b      	b.n	80027cc <HAL_RCC_OscConfig+0x5e0>
 80027b4:	4b68      	ldr	r3, [pc, #416]	; (8002958 <HAL_RCC_OscConfig+0x76c>)
 80027b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b8:	4a67      	ldr	r2, [pc, #412]	; (8002958 <HAL_RCC_OscConfig+0x76c>)
 80027ba:	f023 0301 	bic.w	r3, r3, #1
 80027be:	6713      	str	r3, [r2, #112]	; 0x70
 80027c0:	4b65      	ldr	r3, [pc, #404]	; (8002958 <HAL_RCC_OscConfig+0x76c>)
 80027c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c4:	4a64      	ldr	r2, [pc, #400]	; (8002958 <HAL_RCC_OscConfig+0x76c>)
 80027c6:	f023 0304 	bic.w	r3, r3, #4
 80027ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d015      	beq.n	8002800 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d4:	f7fe fc56 	bl	8001084 <HAL_GetTick>
 80027d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027da:	e00a      	b.n	80027f2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027dc:	f7fe fc52 	bl	8001084 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e123      	b.n	8002a3a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027f2:	4b59      	ldr	r3, [pc, #356]	; (8002958 <HAL_RCC_OscConfig+0x76c>)
 80027f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0ee      	beq.n	80027dc <HAL_RCC_OscConfig+0x5f0>
 80027fe:	e014      	b.n	800282a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002800:	f7fe fc40 	bl	8001084 <HAL_GetTick>
 8002804:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002806:	e00a      	b.n	800281e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002808:	f7fe fc3c 	bl	8001084 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	f241 3288 	movw	r2, #5000	; 0x1388
 8002816:	4293      	cmp	r3, r2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e10d      	b.n	8002a3a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800281e:	4b4e      	ldr	r3, [pc, #312]	; (8002958 <HAL_RCC_OscConfig+0x76c>)
 8002820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1ee      	bne.n	8002808 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282e:	2b00      	cmp	r3, #0
 8002830:	f000 8102 	beq.w	8002a38 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002834:	4b48      	ldr	r3, [pc, #288]	; (8002958 <HAL_RCC_OscConfig+0x76c>)
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800283c:	2b18      	cmp	r3, #24
 800283e:	f000 80bd 	beq.w	80029bc <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002846:	2b02      	cmp	r3, #2
 8002848:	f040 809e 	bne.w	8002988 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800284c:	4b42      	ldr	r3, [pc, #264]	; (8002958 <HAL_RCC_OscConfig+0x76c>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a41      	ldr	r2, [pc, #260]	; (8002958 <HAL_RCC_OscConfig+0x76c>)
 8002852:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002856:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002858:	f7fe fc14 	bl	8001084 <HAL_GetTick>
 800285c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002860:	f7fe fc10 	bl	8001084 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e0e3      	b.n	8002a3a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002872:	4b39      	ldr	r3, [pc, #228]	; (8002958 <HAL_RCC_OscConfig+0x76c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1f0      	bne.n	8002860 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800287e:	4b36      	ldr	r3, [pc, #216]	; (8002958 <HAL_RCC_OscConfig+0x76c>)
 8002880:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002882:	4b37      	ldr	r3, [pc, #220]	; (8002960 <HAL_RCC_OscConfig+0x774>)
 8002884:	4013      	ands	r3, r2
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800288e:	0112      	lsls	r2, r2, #4
 8002890:	430a      	orrs	r2, r1
 8002892:	4931      	ldr	r1, [pc, #196]	; (8002958 <HAL_RCC_OscConfig+0x76c>)
 8002894:	4313      	orrs	r3, r2
 8002896:	628b      	str	r3, [r1, #40]	; 0x28
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289c:	3b01      	subs	r3, #1
 800289e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a6:	3b01      	subs	r3, #1
 80028a8:	025b      	lsls	r3, r3, #9
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	431a      	orrs	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b2:	3b01      	subs	r3, #1
 80028b4:	041b      	lsls	r3, r3, #16
 80028b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c0:	3b01      	subs	r3, #1
 80028c2:	061b      	lsls	r3, r3, #24
 80028c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80028c8:	4923      	ldr	r1, [pc, #140]	; (8002958 <HAL_RCC_OscConfig+0x76c>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80028ce:	4b22      	ldr	r3, [pc, #136]	; (8002958 <HAL_RCC_OscConfig+0x76c>)
 80028d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d2:	4a21      	ldr	r2, [pc, #132]	; (8002958 <HAL_RCC_OscConfig+0x76c>)
 80028d4:	f023 0301 	bic.w	r3, r3, #1
 80028d8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80028da:	4b1f      	ldr	r3, [pc, #124]	; (8002958 <HAL_RCC_OscConfig+0x76c>)
 80028dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028de:	4b21      	ldr	r3, [pc, #132]	; (8002964 <HAL_RCC_OscConfig+0x778>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80028e6:	00d2      	lsls	r2, r2, #3
 80028e8:	491b      	ldr	r1, [pc, #108]	; (8002958 <HAL_RCC_OscConfig+0x76c>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80028ee:	4b1a      	ldr	r3, [pc, #104]	; (8002958 <HAL_RCC_OscConfig+0x76c>)
 80028f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f2:	f023 020c 	bic.w	r2, r3, #12
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	4917      	ldr	r1, [pc, #92]	; (8002958 <HAL_RCC_OscConfig+0x76c>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002900:	4b15      	ldr	r3, [pc, #84]	; (8002958 <HAL_RCC_OscConfig+0x76c>)
 8002902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002904:	f023 0202 	bic.w	r2, r3, #2
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290c:	4912      	ldr	r1, [pc, #72]	; (8002958 <HAL_RCC_OscConfig+0x76c>)
 800290e:	4313      	orrs	r3, r2
 8002910:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002912:	4b11      	ldr	r3, [pc, #68]	; (8002958 <HAL_RCC_OscConfig+0x76c>)
 8002914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002916:	4a10      	ldr	r2, [pc, #64]	; (8002958 <HAL_RCC_OscConfig+0x76c>)
 8002918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800291c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800291e:	4b0e      	ldr	r3, [pc, #56]	; (8002958 <HAL_RCC_OscConfig+0x76c>)
 8002920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002922:	4a0d      	ldr	r2, [pc, #52]	; (8002958 <HAL_RCC_OscConfig+0x76c>)
 8002924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002928:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800292a:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <HAL_RCC_OscConfig+0x76c>)
 800292c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292e:	4a0a      	ldr	r2, [pc, #40]	; (8002958 <HAL_RCC_OscConfig+0x76c>)
 8002930:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002934:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002936:	4b08      	ldr	r3, [pc, #32]	; (8002958 <HAL_RCC_OscConfig+0x76c>)
 8002938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293a:	4a07      	ldr	r2, [pc, #28]	; (8002958 <HAL_RCC_OscConfig+0x76c>)
 800293c:	f043 0301 	orr.w	r3, r3, #1
 8002940:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002942:	4b05      	ldr	r3, [pc, #20]	; (8002958 <HAL_RCC_OscConfig+0x76c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a04      	ldr	r2, [pc, #16]	; (8002958 <HAL_RCC_OscConfig+0x76c>)
 8002948:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800294c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294e:	f7fe fb99 	bl	8001084 <HAL_GetTick>
 8002952:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002954:	e011      	b.n	800297a <HAL_RCC_OscConfig+0x78e>
 8002956:	bf00      	nop
 8002958:	58024400 	.word	0x58024400
 800295c:	58024800 	.word	0x58024800
 8002960:	fffffc0c 	.word	0xfffffc0c
 8002964:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002968:	f7fe fb8c 	bl	8001084 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e05f      	b.n	8002a3a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800297a:	4b32      	ldr	r3, [pc, #200]	; (8002a44 <HAL_RCC_OscConfig+0x858>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0f0      	beq.n	8002968 <HAL_RCC_OscConfig+0x77c>
 8002986:	e057      	b.n	8002a38 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002988:	4b2e      	ldr	r3, [pc, #184]	; (8002a44 <HAL_RCC_OscConfig+0x858>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a2d      	ldr	r2, [pc, #180]	; (8002a44 <HAL_RCC_OscConfig+0x858>)
 800298e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002992:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002994:	f7fe fb76 	bl	8001084 <HAL_GetTick>
 8002998:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800299c:	f7fe fb72 	bl	8001084 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e045      	b.n	8002a3a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029ae:	4b25      	ldr	r3, [pc, #148]	; (8002a44 <HAL_RCC_OscConfig+0x858>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1f0      	bne.n	800299c <HAL_RCC_OscConfig+0x7b0>
 80029ba:	e03d      	b.n	8002a38 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80029bc:	4b21      	ldr	r3, [pc, #132]	; (8002a44 <HAL_RCC_OscConfig+0x858>)
 80029be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80029c2:	4b20      	ldr	r3, [pc, #128]	; (8002a44 <HAL_RCC_OscConfig+0x858>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d031      	beq.n	8002a34 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	f003 0203 	and.w	r2, r3, #3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029da:	429a      	cmp	r2, r3
 80029dc:	d12a      	bne.n	8002a34 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	091b      	lsrs	r3, r3, #4
 80029e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d122      	bne.n	8002a34 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d11a      	bne.n	8002a34 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	0a5b      	lsrs	r3, r3, #9
 8002a02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a0a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d111      	bne.n	8002a34 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	0c1b      	lsrs	r3, r3, #16
 8002a14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d108      	bne.n	8002a34 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	0e1b      	lsrs	r3, r3, #24
 8002a26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a2e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d001      	beq.n	8002a38 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e000      	b.n	8002a3a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3730      	adds	r7, #48	; 0x30
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	58024400 	.word	0x58024400

08002a48 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e19c      	b.n	8002d96 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a5c:	4b8a      	ldr	r3, [pc, #552]	; (8002c88 <HAL_RCC_ClockConfig+0x240>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 030f 	and.w	r3, r3, #15
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d910      	bls.n	8002a8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6a:	4b87      	ldr	r3, [pc, #540]	; (8002c88 <HAL_RCC_ClockConfig+0x240>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f023 020f 	bic.w	r2, r3, #15
 8002a72:	4985      	ldr	r1, [pc, #532]	; (8002c88 <HAL_RCC_ClockConfig+0x240>)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7a:	4b83      	ldr	r3, [pc, #524]	; (8002c88 <HAL_RCC_ClockConfig+0x240>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d001      	beq.n	8002a8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e184      	b.n	8002d96 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d010      	beq.n	8002aba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	691a      	ldr	r2, [r3, #16]
 8002a9c:	4b7b      	ldr	r3, [pc, #492]	; (8002c8c <HAL_RCC_ClockConfig+0x244>)
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d908      	bls.n	8002aba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002aa8:	4b78      	ldr	r3, [pc, #480]	; (8002c8c <HAL_RCC_ClockConfig+0x244>)
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	4975      	ldr	r1, [pc, #468]	; (8002c8c <HAL_RCC_ClockConfig+0x244>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0308 	and.w	r3, r3, #8
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d010      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	695a      	ldr	r2, [r3, #20]
 8002aca:	4b70      	ldr	r3, [pc, #448]	; (8002c8c <HAL_RCC_ClockConfig+0x244>)
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d908      	bls.n	8002ae8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ad6:	4b6d      	ldr	r3, [pc, #436]	; (8002c8c <HAL_RCC_ClockConfig+0x244>)
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	496a      	ldr	r1, [pc, #424]	; (8002c8c <HAL_RCC_ClockConfig+0x244>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0310 	and.w	r3, r3, #16
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d010      	beq.n	8002b16 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	699a      	ldr	r2, [r3, #24]
 8002af8:	4b64      	ldr	r3, [pc, #400]	; (8002c8c <HAL_RCC_ClockConfig+0x244>)
 8002afa:	69db      	ldr	r3, [r3, #28]
 8002afc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d908      	bls.n	8002b16 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002b04:	4b61      	ldr	r3, [pc, #388]	; (8002c8c <HAL_RCC_ClockConfig+0x244>)
 8002b06:	69db      	ldr	r3, [r3, #28]
 8002b08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	495e      	ldr	r1, [pc, #376]	; (8002c8c <HAL_RCC_ClockConfig+0x244>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0320 	and.w	r3, r3, #32
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d010      	beq.n	8002b44 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	69da      	ldr	r2, [r3, #28]
 8002b26:	4b59      	ldr	r3, [pc, #356]	; (8002c8c <HAL_RCC_ClockConfig+0x244>)
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d908      	bls.n	8002b44 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002b32:	4b56      	ldr	r3, [pc, #344]	; (8002c8c <HAL_RCC_ClockConfig+0x244>)
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	4953      	ldr	r1, [pc, #332]	; (8002c8c <HAL_RCC_ClockConfig+0x244>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d010      	beq.n	8002b72 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68da      	ldr	r2, [r3, #12]
 8002b54:	4b4d      	ldr	r3, [pc, #308]	; (8002c8c <HAL_RCC_ClockConfig+0x244>)
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	f003 030f 	and.w	r3, r3, #15
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d908      	bls.n	8002b72 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b60:	4b4a      	ldr	r3, [pc, #296]	; (8002c8c <HAL_RCC_ClockConfig+0x244>)
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	f023 020f 	bic.w	r2, r3, #15
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	4947      	ldr	r1, [pc, #284]	; (8002c8c <HAL_RCC_ClockConfig+0x244>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d055      	beq.n	8002c2a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002b7e:	4b43      	ldr	r3, [pc, #268]	; (8002c8c <HAL_RCC_ClockConfig+0x244>)
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	4940      	ldr	r1, [pc, #256]	; (8002c8c <HAL_RCC_ClockConfig+0x244>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d107      	bne.n	8002ba8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b98:	4b3c      	ldr	r3, [pc, #240]	; (8002c8c <HAL_RCC_ClockConfig+0x244>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d121      	bne.n	8002be8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e0f6      	b.n	8002d96 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	2b03      	cmp	r3, #3
 8002bae:	d107      	bne.n	8002bc0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bb0:	4b36      	ldr	r3, [pc, #216]	; (8002c8c <HAL_RCC_ClockConfig+0x244>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d115      	bne.n	8002be8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e0ea      	b.n	8002d96 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d107      	bne.n	8002bd8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002bc8:	4b30      	ldr	r3, [pc, #192]	; (8002c8c <HAL_RCC_ClockConfig+0x244>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d109      	bne.n	8002be8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e0de      	b.n	8002d96 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bd8:	4b2c      	ldr	r3, [pc, #176]	; (8002c8c <HAL_RCC_ClockConfig+0x244>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e0d6      	b.n	8002d96 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002be8:	4b28      	ldr	r3, [pc, #160]	; (8002c8c <HAL_RCC_ClockConfig+0x244>)
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	f023 0207 	bic.w	r2, r3, #7
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	4925      	ldr	r1, [pc, #148]	; (8002c8c <HAL_RCC_ClockConfig+0x244>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bfa:	f7fe fa43 	bl	8001084 <HAL_GetTick>
 8002bfe:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c00:	e00a      	b.n	8002c18 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c02:	f7fe fa3f 	bl	8001084 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e0be      	b.n	8002d96 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c18:	4b1c      	ldr	r3, [pc, #112]	; (8002c8c <HAL_RCC_ClockConfig+0x244>)
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d1eb      	bne.n	8002c02 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d010      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	68da      	ldr	r2, [r3, #12]
 8002c3a:	4b14      	ldr	r3, [pc, #80]	; (8002c8c <HAL_RCC_ClockConfig+0x244>)
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	f003 030f 	and.w	r3, r3, #15
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d208      	bcs.n	8002c58 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c46:	4b11      	ldr	r3, [pc, #68]	; (8002c8c <HAL_RCC_ClockConfig+0x244>)
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	f023 020f 	bic.w	r2, r3, #15
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	490e      	ldr	r1, [pc, #56]	; (8002c8c <HAL_RCC_ClockConfig+0x244>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c58:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <HAL_RCC_ClockConfig+0x240>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 030f 	and.w	r3, r3, #15
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d214      	bcs.n	8002c90 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c66:	4b08      	ldr	r3, [pc, #32]	; (8002c88 <HAL_RCC_ClockConfig+0x240>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f023 020f 	bic.w	r2, r3, #15
 8002c6e:	4906      	ldr	r1, [pc, #24]	; (8002c88 <HAL_RCC_ClockConfig+0x240>)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c76:	4b04      	ldr	r3, [pc, #16]	; (8002c88 <HAL_RCC_ClockConfig+0x240>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 030f 	and.w	r3, r3, #15
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d005      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e086      	b.n	8002d96 <HAL_RCC_ClockConfig+0x34e>
 8002c88:	52002000 	.word	0x52002000
 8002c8c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0304 	and.w	r3, r3, #4
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d010      	beq.n	8002cbe <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	691a      	ldr	r2, [r3, #16]
 8002ca0:	4b3f      	ldr	r3, [pc, #252]	; (8002da0 <HAL_RCC_ClockConfig+0x358>)
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d208      	bcs.n	8002cbe <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002cac:	4b3c      	ldr	r3, [pc, #240]	; (8002da0 <HAL_RCC_ClockConfig+0x358>)
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	4939      	ldr	r1, [pc, #228]	; (8002da0 <HAL_RCC_ClockConfig+0x358>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0308 	and.w	r3, r3, #8
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d010      	beq.n	8002cec <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	695a      	ldr	r2, [r3, #20]
 8002cce:	4b34      	ldr	r3, [pc, #208]	; (8002da0 <HAL_RCC_ClockConfig+0x358>)
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d208      	bcs.n	8002cec <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002cda:	4b31      	ldr	r3, [pc, #196]	; (8002da0 <HAL_RCC_ClockConfig+0x358>)
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	492e      	ldr	r1, [pc, #184]	; (8002da0 <HAL_RCC_ClockConfig+0x358>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0310 	and.w	r3, r3, #16
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d010      	beq.n	8002d1a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	699a      	ldr	r2, [r3, #24]
 8002cfc:	4b28      	ldr	r3, [pc, #160]	; (8002da0 <HAL_RCC_ClockConfig+0x358>)
 8002cfe:	69db      	ldr	r3, [r3, #28]
 8002d00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d208      	bcs.n	8002d1a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d08:	4b25      	ldr	r3, [pc, #148]	; (8002da0 <HAL_RCC_ClockConfig+0x358>)
 8002d0a:	69db      	ldr	r3, [r3, #28]
 8002d0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	4922      	ldr	r1, [pc, #136]	; (8002da0 <HAL_RCC_ClockConfig+0x358>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0320 	and.w	r3, r3, #32
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d010      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	69da      	ldr	r2, [r3, #28]
 8002d2a:	4b1d      	ldr	r3, [pc, #116]	; (8002da0 <HAL_RCC_ClockConfig+0x358>)
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d208      	bcs.n	8002d48 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002d36:	4b1a      	ldr	r3, [pc, #104]	; (8002da0 <HAL_RCC_ClockConfig+0x358>)
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	69db      	ldr	r3, [r3, #28]
 8002d42:	4917      	ldr	r1, [pc, #92]	; (8002da0 <HAL_RCC_ClockConfig+0x358>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002d48:	f000 f834 	bl	8002db4 <HAL_RCC_GetSysClockFreq>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	4b14      	ldr	r3, [pc, #80]	; (8002da0 <HAL_RCC_ClockConfig+0x358>)
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	0a1b      	lsrs	r3, r3, #8
 8002d54:	f003 030f 	and.w	r3, r3, #15
 8002d58:	4912      	ldr	r1, [pc, #72]	; (8002da4 <HAL_RCC_ClockConfig+0x35c>)
 8002d5a:	5ccb      	ldrb	r3, [r1, r3]
 8002d5c:	f003 031f 	and.w	r3, r3, #31
 8002d60:	fa22 f303 	lsr.w	r3, r2, r3
 8002d64:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d66:	4b0e      	ldr	r3, [pc, #56]	; (8002da0 <HAL_RCC_ClockConfig+0x358>)
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	f003 030f 	and.w	r3, r3, #15
 8002d6e:	4a0d      	ldr	r2, [pc, #52]	; (8002da4 <HAL_RCC_ClockConfig+0x35c>)
 8002d70:	5cd3      	ldrb	r3, [r2, r3]
 8002d72:	f003 031f 	and.w	r3, r3, #31
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	fa22 f303 	lsr.w	r3, r2, r3
 8002d7c:	4a0a      	ldr	r2, [pc, #40]	; (8002da8 <HAL_RCC_ClockConfig+0x360>)
 8002d7e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d80:	4a0a      	ldr	r2, [pc, #40]	; (8002dac <HAL_RCC_ClockConfig+0x364>)
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002d86:	4b0a      	ldr	r3, [pc, #40]	; (8002db0 <HAL_RCC_ClockConfig+0x368>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7fe f930 	bl	8000ff0 <HAL_InitTick>
 8002d90:	4603      	mov	r3, r0
 8002d92:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3718      	adds	r7, #24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	58024400 	.word	0x58024400
 8002da4:	08005f94 	.word	0x08005f94
 8002da8:	24000004 	.word	0x24000004
 8002dac:	24000000 	.word	0x24000000
 8002db0:	24000008 	.word	0x24000008

08002db4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b089      	sub	sp, #36	; 0x24
 8002db8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dba:	4bb3      	ldr	r3, [pc, #716]	; (8003088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002dc2:	2b18      	cmp	r3, #24
 8002dc4:	f200 8155 	bhi.w	8003072 <HAL_RCC_GetSysClockFreq+0x2be>
 8002dc8:	a201      	add	r2, pc, #4	; (adr r2, 8002dd0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dce:	bf00      	nop
 8002dd0:	08002e35 	.word	0x08002e35
 8002dd4:	08003073 	.word	0x08003073
 8002dd8:	08003073 	.word	0x08003073
 8002ddc:	08003073 	.word	0x08003073
 8002de0:	08003073 	.word	0x08003073
 8002de4:	08003073 	.word	0x08003073
 8002de8:	08003073 	.word	0x08003073
 8002dec:	08003073 	.word	0x08003073
 8002df0:	08002e5b 	.word	0x08002e5b
 8002df4:	08003073 	.word	0x08003073
 8002df8:	08003073 	.word	0x08003073
 8002dfc:	08003073 	.word	0x08003073
 8002e00:	08003073 	.word	0x08003073
 8002e04:	08003073 	.word	0x08003073
 8002e08:	08003073 	.word	0x08003073
 8002e0c:	08003073 	.word	0x08003073
 8002e10:	08002e61 	.word	0x08002e61
 8002e14:	08003073 	.word	0x08003073
 8002e18:	08003073 	.word	0x08003073
 8002e1c:	08003073 	.word	0x08003073
 8002e20:	08003073 	.word	0x08003073
 8002e24:	08003073 	.word	0x08003073
 8002e28:	08003073 	.word	0x08003073
 8002e2c:	08003073 	.word	0x08003073
 8002e30:	08002e67 	.word	0x08002e67
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e34:	4b94      	ldr	r3, [pc, #592]	; (8003088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0320 	and.w	r3, r3, #32
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d009      	beq.n	8002e54 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002e40:	4b91      	ldr	r3, [pc, #580]	; (8003088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	08db      	lsrs	r3, r3, #3
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	4a90      	ldr	r2, [pc, #576]	; (800308c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e50:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002e52:	e111      	b.n	8003078 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002e54:	4b8d      	ldr	r3, [pc, #564]	; (800308c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e56:	61bb      	str	r3, [r7, #24]
    break;
 8002e58:	e10e      	b.n	8003078 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002e5a:	4b8d      	ldr	r3, [pc, #564]	; (8003090 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002e5c:	61bb      	str	r3, [r7, #24]
    break;
 8002e5e:	e10b      	b.n	8003078 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002e60:	4b8c      	ldr	r3, [pc, #560]	; (8003094 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002e62:	61bb      	str	r3, [r7, #24]
    break;
 8002e64:	e108      	b.n	8003078 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002e66:	4b88      	ldr	r3, [pc, #544]	; (8003088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6a:	f003 0303 	and.w	r3, r3, #3
 8002e6e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002e70:	4b85      	ldr	r3, [pc, #532]	; (8003088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e74:	091b      	lsrs	r3, r3, #4
 8002e76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e7a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002e7c:	4b82      	ldr	r3, [pc, #520]	; (8003088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e80:	f003 0301 	and.w	r3, r3, #1
 8002e84:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002e86:	4b80      	ldr	r3, [pc, #512]	; (8003088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e8a:	08db      	lsrs	r3, r3, #3
 8002e8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	fb02 f303 	mul.w	r3, r2, r3
 8002e96:	ee07 3a90 	vmov	s15, r3
 8002e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e9e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 80e1 	beq.w	800306c <HAL_RCC_GetSysClockFreq+0x2b8>
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	f000 8083 	beq.w	8002fb8 <HAL_RCC_GetSysClockFreq+0x204>
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	f200 80a1 	bhi.w	8002ffc <HAL_RCC_GetSysClockFreq+0x248>
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d003      	beq.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x114>
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d056      	beq.n	8002f74 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002ec6:	e099      	b.n	8002ffc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ec8:	4b6f      	ldr	r3, [pc, #444]	; (8003088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0320 	and.w	r3, r3, #32
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d02d      	beq.n	8002f30 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002ed4:	4b6c      	ldr	r3, [pc, #432]	; (8003088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	08db      	lsrs	r3, r3, #3
 8002eda:	f003 0303 	and.w	r3, r3, #3
 8002ede:	4a6b      	ldr	r2, [pc, #428]	; (800308c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	ee07 3a90 	vmov	s15, r3
 8002eec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	ee07 3a90 	vmov	s15, r3
 8002ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002efe:	4b62      	ldr	r3, [pc, #392]	; (8003088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f06:	ee07 3a90 	vmov	s15, r3
 8002f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f12:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003098 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f2a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002f2e:	e087      	b.n	8003040 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	ee07 3a90 	vmov	s15, r3
 8002f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f3a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800309c <HAL_RCC_GetSysClockFreq+0x2e8>
 8002f3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f42:	4b51      	ldr	r3, [pc, #324]	; (8003088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f4a:	ee07 3a90 	vmov	s15, r3
 8002f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f52:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f56:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003098 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002f72:	e065      	b.n	8003040 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	ee07 3a90 	vmov	s15, r3
 8002f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f7e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80030a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f86:	4b40      	ldr	r3, [pc, #256]	; (8003088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f8e:	ee07 3a90 	vmov	s15, r3
 8002f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f96:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f9a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003098 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002fb6:	e043      	b.n	8003040 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	ee07 3a90 	vmov	s15, r3
 8002fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fc2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80030a4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fca:	4b2f      	ldr	r3, [pc, #188]	; (8003088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fd2:	ee07 3a90 	vmov	s15, r3
 8002fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fda:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fde:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003098 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ff6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002ffa:	e021      	b.n	8003040 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	ee07 3a90 	vmov	s15, r3
 8003002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003006:	eddf 6a26 	vldr	s13, [pc, #152]	; 80030a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800300a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800300e:	4b1e      	ldr	r3, [pc, #120]	; (8003088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003016:	ee07 3a90 	vmov	s15, r3
 800301a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800301e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003022:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003098 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800302a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800302e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800303a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800303e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003040:	4b11      	ldr	r3, [pc, #68]	; (8003088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003044:	0a5b      	lsrs	r3, r3, #9
 8003046:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800304a:	3301      	adds	r3, #1
 800304c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	ee07 3a90 	vmov	s15, r3
 8003054:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003058:	edd7 6a07 	vldr	s13, [r7, #28]
 800305c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003060:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003064:	ee17 3a90 	vmov	r3, s15
 8003068:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800306a:	e005      	b.n	8003078 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800306c:	2300      	movs	r3, #0
 800306e:	61bb      	str	r3, [r7, #24]
    break;
 8003070:	e002      	b.n	8003078 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003072:	4b07      	ldr	r3, [pc, #28]	; (8003090 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003074:	61bb      	str	r3, [r7, #24]
    break;
 8003076:	bf00      	nop
  }

  return sysclockfreq;
 8003078:	69bb      	ldr	r3, [r7, #24]
}
 800307a:	4618      	mov	r0, r3
 800307c:	3724      	adds	r7, #36	; 0x24
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	58024400 	.word	0x58024400
 800308c:	03d09000 	.word	0x03d09000
 8003090:	003d0900 	.word	0x003d0900
 8003094:	007a1200 	.word	0x007a1200
 8003098:	46000000 	.word	0x46000000
 800309c:	4c742400 	.word	0x4c742400
 80030a0:	4a742400 	.word	0x4a742400
 80030a4:	4af42400 	.word	0x4af42400

080030a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80030ae:	f7ff fe81 	bl	8002db4 <HAL_RCC_GetSysClockFreq>
 80030b2:	4602      	mov	r2, r0
 80030b4:	4b10      	ldr	r3, [pc, #64]	; (80030f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	0a1b      	lsrs	r3, r3, #8
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	490f      	ldr	r1, [pc, #60]	; (80030fc <HAL_RCC_GetHCLKFreq+0x54>)
 80030c0:	5ccb      	ldrb	r3, [r1, r3]
 80030c2:	f003 031f 	and.w	r3, r3, #31
 80030c6:	fa22 f303 	lsr.w	r3, r2, r3
 80030ca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80030cc:	4b0a      	ldr	r3, [pc, #40]	; (80030f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	f003 030f 	and.w	r3, r3, #15
 80030d4:	4a09      	ldr	r2, [pc, #36]	; (80030fc <HAL_RCC_GetHCLKFreq+0x54>)
 80030d6:	5cd3      	ldrb	r3, [r2, r3]
 80030d8:	f003 031f 	and.w	r3, r3, #31
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	fa22 f303 	lsr.w	r3, r2, r3
 80030e2:	4a07      	ldr	r2, [pc, #28]	; (8003100 <HAL_RCC_GetHCLKFreq+0x58>)
 80030e4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030e6:	4a07      	ldr	r2, [pc, #28]	; (8003104 <HAL_RCC_GetHCLKFreq+0x5c>)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80030ec:	4b04      	ldr	r3, [pc, #16]	; (8003100 <HAL_RCC_GetHCLKFreq+0x58>)
 80030ee:	681b      	ldr	r3, [r3, #0]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	58024400 	.word	0x58024400
 80030fc:	08005f94 	.word	0x08005f94
 8003100:	24000004 	.word	0x24000004
 8003104:	24000000 	.word	0x24000000

08003108 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800310c:	f7ff ffcc 	bl	80030a8 <HAL_RCC_GetHCLKFreq>
 8003110:	4602      	mov	r2, r0
 8003112:	4b06      	ldr	r3, [pc, #24]	; (800312c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	091b      	lsrs	r3, r3, #4
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	4904      	ldr	r1, [pc, #16]	; (8003130 <HAL_RCC_GetPCLK1Freq+0x28>)
 800311e:	5ccb      	ldrb	r3, [r1, r3]
 8003120:	f003 031f 	and.w	r3, r3, #31
 8003124:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003128:	4618      	mov	r0, r3
 800312a:	bd80      	pop	{r7, pc}
 800312c:	58024400 	.word	0x58024400
 8003130:	08005f94 	.word	0x08005f94

08003134 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003138:	f7ff ffb6 	bl	80030a8 <HAL_RCC_GetHCLKFreq>
 800313c:	4602      	mov	r2, r0
 800313e:	4b06      	ldr	r3, [pc, #24]	; (8003158 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	0a1b      	lsrs	r3, r3, #8
 8003144:	f003 0307 	and.w	r3, r3, #7
 8003148:	4904      	ldr	r1, [pc, #16]	; (800315c <HAL_RCC_GetPCLK2Freq+0x28>)
 800314a:	5ccb      	ldrb	r3, [r1, r3]
 800314c:	f003 031f 	and.w	r3, r3, #31
 8003150:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003154:	4618      	mov	r0, r3
 8003156:	bd80      	pop	{r7, pc}
 8003158:	58024400 	.word	0x58024400
 800315c:	08005f94 	.word	0x08005f94

08003160 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003168:	2300      	movs	r3, #0
 800316a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800316c:	2300      	movs	r3, #0
 800316e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d03f      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003180:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003184:	d02a      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003186:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800318a:	d824      	bhi.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800318c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003190:	d018      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003192:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003196:	d81e      	bhi.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003198:	2b00      	cmp	r3, #0
 800319a:	d003      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800319c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031a0:	d007      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80031a2:	e018      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031a4:	4ba3      	ldr	r3, [pc, #652]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80031a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a8:	4aa2      	ldr	r2, [pc, #648]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80031aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80031b0:	e015      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	3304      	adds	r3, #4
 80031b6:	2102      	movs	r1, #2
 80031b8:	4618      	mov	r0, r3
 80031ba:	f001 f9d5 	bl	8004568 <RCCEx_PLL2_Config>
 80031be:	4603      	mov	r3, r0
 80031c0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80031c2:	e00c      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3324      	adds	r3, #36	; 0x24
 80031c8:	2102      	movs	r1, #2
 80031ca:	4618      	mov	r0, r3
 80031cc:	f001 fa7e 	bl	80046cc <RCCEx_PLL3_Config>
 80031d0:	4603      	mov	r3, r0
 80031d2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80031d4:	e003      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	75fb      	strb	r3, [r7, #23]
      break;
 80031da:	e000      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80031dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031de:	7dfb      	ldrb	r3, [r7, #23]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d109      	bne.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80031e4:	4b93      	ldr	r3, [pc, #588]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80031e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031f0:	4990      	ldr	r1, [pc, #576]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	650b      	str	r3, [r1, #80]	; 0x50
 80031f6:	e001      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031f8:	7dfb      	ldrb	r3, [r7, #23]
 80031fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003204:	2b00      	cmp	r3, #0
 8003206:	d03d      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800320c:	2b04      	cmp	r3, #4
 800320e:	d826      	bhi.n	800325e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003210:	a201      	add	r2, pc, #4	; (adr r2, 8003218 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003216:	bf00      	nop
 8003218:	0800322d 	.word	0x0800322d
 800321c:	0800323b 	.word	0x0800323b
 8003220:	0800324d 	.word	0x0800324d
 8003224:	08003265 	.word	0x08003265
 8003228:	08003265 	.word	0x08003265
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800322c:	4b81      	ldr	r3, [pc, #516]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800322e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003230:	4a80      	ldr	r2, [pc, #512]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003232:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003236:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003238:	e015      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	3304      	adds	r3, #4
 800323e:	2100      	movs	r1, #0
 8003240:	4618      	mov	r0, r3
 8003242:	f001 f991 	bl	8004568 <RCCEx_PLL2_Config>
 8003246:	4603      	mov	r3, r0
 8003248:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800324a:	e00c      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	3324      	adds	r3, #36	; 0x24
 8003250:	2100      	movs	r1, #0
 8003252:	4618      	mov	r0, r3
 8003254:	f001 fa3a 	bl	80046cc <RCCEx_PLL3_Config>
 8003258:	4603      	mov	r3, r0
 800325a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800325c:	e003      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	75fb      	strb	r3, [r7, #23]
      break;
 8003262:	e000      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003264:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003266:	7dfb      	ldrb	r3, [r7, #23]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d109      	bne.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800326c:	4b71      	ldr	r3, [pc, #452]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800326e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003270:	f023 0207 	bic.w	r2, r3, #7
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003278:	496e      	ldr	r1, [pc, #440]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800327a:	4313      	orrs	r3, r2
 800327c:	650b      	str	r3, [r1, #80]	; 0x50
 800327e:	e001      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003280:	7dfb      	ldrb	r3, [r7, #23]
 8003282:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800328c:	2b00      	cmp	r3, #0
 800328e:	d042      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003294:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003298:	d02b      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800329a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800329e:	d825      	bhi.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80032a0:	2bc0      	cmp	r3, #192	; 0xc0
 80032a2:	d028      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80032a4:	2bc0      	cmp	r3, #192	; 0xc0
 80032a6:	d821      	bhi.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80032a8:	2b80      	cmp	r3, #128	; 0x80
 80032aa:	d016      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80032ac:	2b80      	cmp	r3, #128	; 0x80
 80032ae:	d81d      	bhi.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d002      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80032b4:	2b40      	cmp	r3, #64	; 0x40
 80032b6:	d007      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80032b8:	e018      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032ba:	4b5e      	ldr	r3, [pc, #376]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80032bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032be:	4a5d      	ldr	r2, [pc, #372]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80032c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80032c6:	e017      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3304      	adds	r3, #4
 80032cc:	2100      	movs	r1, #0
 80032ce:	4618      	mov	r0, r3
 80032d0:	f001 f94a 	bl	8004568 <RCCEx_PLL2_Config>
 80032d4:	4603      	mov	r3, r0
 80032d6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80032d8:	e00e      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	3324      	adds	r3, #36	; 0x24
 80032de:	2100      	movs	r1, #0
 80032e0:	4618      	mov	r0, r3
 80032e2:	f001 f9f3 	bl	80046cc <RCCEx_PLL3_Config>
 80032e6:	4603      	mov	r3, r0
 80032e8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80032ea:	e005      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	75fb      	strb	r3, [r7, #23]
      break;
 80032f0:	e002      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80032f2:	bf00      	nop
 80032f4:	e000      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80032f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032f8:	7dfb      	ldrb	r3, [r7, #23]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d109      	bne.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80032fe:	4b4d      	ldr	r3, [pc, #308]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003302:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330a:	494a      	ldr	r1, [pc, #296]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800330c:	4313      	orrs	r3, r2
 800330e:	650b      	str	r3, [r1, #80]	; 0x50
 8003310:	e001      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003312:	7dfb      	ldrb	r3, [r7, #23]
 8003314:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800331e:	2b00      	cmp	r3, #0
 8003320:	d049      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003328:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800332c:	d030      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800332e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003332:	d82a      	bhi.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003334:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003338:	d02c      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800333a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800333e:	d824      	bhi.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003340:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003344:	d018      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003346:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800334a:	d81e      	bhi.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800334c:	2b00      	cmp	r3, #0
 800334e:	d003      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003350:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003354:	d007      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003356:	e018      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003358:	4b36      	ldr	r3, [pc, #216]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800335a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335c:	4a35      	ldr	r2, [pc, #212]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800335e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003362:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003364:	e017      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	3304      	adds	r3, #4
 800336a:	2100      	movs	r1, #0
 800336c:	4618      	mov	r0, r3
 800336e:	f001 f8fb 	bl	8004568 <RCCEx_PLL2_Config>
 8003372:	4603      	mov	r3, r0
 8003374:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003376:	e00e      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3324      	adds	r3, #36	; 0x24
 800337c:	2100      	movs	r1, #0
 800337e:	4618      	mov	r0, r3
 8003380:	f001 f9a4 	bl	80046cc <RCCEx_PLL3_Config>
 8003384:	4603      	mov	r3, r0
 8003386:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003388:	e005      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	75fb      	strb	r3, [r7, #23]
      break;
 800338e:	e002      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003390:	bf00      	nop
 8003392:	e000      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003394:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003396:	7dfb      	ldrb	r3, [r7, #23]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10a      	bne.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800339c:	4b25      	ldr	r3, [pc, #148]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800339e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80033aa:	4922      	ldr	r1, [pc, #136]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	658b      	str	r3, [r1, #88]	; 0x58
 80033b0:	e001      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b2:	7dfb      	ldrb	r3, [r7, #23]
 80033b4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d04b      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80033c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033cc:	d030      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80033ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033d2:	d82a      	bhi.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80033d4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80033d8:	d02e      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80033da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80033de:	d824      	bhi.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80033e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033e4:	d018      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80033e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033ea:	d81e      	bhi.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d003      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80033f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033f4:	d007      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80033f6:	e018      	b.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033f8:	4b0e      	ldr	r3, [pc, #56]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80033fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fc:	4a0d      	ldr	r2, [pc, #52]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80033fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003402:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003404:	e019      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	3304      	adds	r3, #4
 800340a:	2100      	movs	r1, #0
 800340c:	4618      	mov	r0, r3
 800340e:	f001 f8ab 	bl	8004568 <RCCEx_PLL2_Config>
 8003412:	4603      	mov	r3, r0
 8003414:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003416:	e010      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	3324      	adds	r3, #36	; 0x24
 800341c:	2100      	movs	r1, #0
 800341e:	4618      	mov	r0, r3
 8003420:	f001 f954 	bl	80046cc <RCCEx_PLL3_Config>
 8003424:	4603      	mov	r3, r0
 8003426:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003428:	e007      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	75fb      	strb	r3, [r7, #23]
      break;
 800342e:	e004      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8003430:	bf00      	nop
 8003432:	e002      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003434:	58024400 	.word	0x58024400
      break;
 8003438:	bf00      	nop
    }

    if(ret == HAL_OK)
 800343a:	7dfb      	ldrb	r3, [r7, #23]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10a      	bne.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003440:	4b99      	ldr	r3, [pc, #612]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003444:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800344e:	4996      	ldr	r1, [pc, #600]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003450:	4313      	orrs	r3, r2
 8003452:	658b      	str	r3, [r1, #88]	; 0x58
 8003454:	e001      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003456:	7dfb      	ldrb	r3, [r7, #23]
 8003458:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d032      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800346a:	2b30      	cmp	r3, #48	; 0x30
 800346c:	d01c      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800346e:	2b30      	cmp	r3, #48	; 0x30
 8003470:	d817      	bhi.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003472:	2b20      	cmp	r3, #32
 8003474:	d00c      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8003476:	2b20      	cmp	r3, #32
 8003478:	d813      	bhi.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800347a:	2b00      	cmp	r3, #0
 800347c:	d016      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800347e:	2b10      	cmp	r3, #16
 8003480:	d10f      	bne.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003482:	4b89      	ldr	r3, [pc, #548]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003486:	4a88      	ldr	r2, [pc, #544]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800348c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800348e:	e00e      	b.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	3304      	adds	r3, #4
 8003494:	2102      	movs	r1, #2
 8003496:	4618      	mov	r0, r3
 8003498:	f001 f866 	bl	8004568 <RCCEx_PLL2_Config>
 800349c:	4603      	mov	r3, r0
 800349e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80034a0:	e005      	b.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	75fb      	strb	r3, [r7, #23]
      break;
 80034a6:	e002      	b.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80034a8:	bf00      	nop
 80034aa:	e000      	b.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80034ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034ae:	7dfb      	ldrb	r3, [r7, #23]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d109      	bne.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80034b4:	4b7c      	ldr	r3, [pc, #496]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80034b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034c0:	4979      	ldr	r1, [pc, #484]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80034c6:	e001      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c8:	7dfb      	ldrb	r3, [r7, #23]
 80034ca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d047      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034e0:	d030      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80034e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034e6:	d82a      	bhi.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80034e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034ec:	d02c      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80034ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034f2:	d824      	bhi.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80034f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034f8:	d018      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80034fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034fe:	d81e      	bhi.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003504:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003508:	d007      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800350a:	e018      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800350c:	4b66      	ldr	r3, [pc, #408]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800350e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003510:	4a65      	ldr	r2, [pc, #404]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003512:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003516:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003518:	e017      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	3304      	adds	r3, #4
 800351e:	2100      	movs	r1, #0
 8003520:	4618      	mov	r0, r3
 8003522:	f001 f821 	bl	8004568 <RCCEx_PLL2_Config>
 8003526:	4603      	mov	r3, r0
 8003528:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800352a:	e00e      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	3324      	adds	r3, #36	; 0x24
 8003530:	2100      	movs	r1, #0
 8003532:	4618      	mov	r0, r3
 8003534:	f001 f8ca 	bl	80046cc <RCCEx_PLL3_Config>
 8003538:	4603      	mov	r3, r0
 800353a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800353c:	e005      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	75fb      	strb	r3, [r7, #23]
      break;
 8003542:	e002      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003544:	bf00      	nop
 8003546:	e000      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003548:	bf00      	nop
    }

    if(ret == HAL_OK)
 800354a:	7dfb      	ldrb	r3, [r7, #23]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d109      	bne.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003550:	4b55      	ldr	r3, [pc, #340]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003554:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800355c:	4952      	ldr	r1, [pc, #328]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800355e:	4313      	orrs	r3, r2
 8003560:	650b      	str	r3, [r1, #80]	; 0x50
 8003562:	e001      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003564:	7dfb      	ldrb	r3, [r7, #23]
 8003566:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d049      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003578:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800357c:	d02e      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800357e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003582:	d828      	bhi.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003584:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003588:	d02a      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800358a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800358e:	d822      	bhi.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003590:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003594:	d026      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8003596:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800359a:	d81c      	bhi.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800359c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035a0:	d010      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80035a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035a6:	d816      	bhi.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d01d      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80035ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035b0:	d111      	bne.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	3304      	adds	r3, #4
 80035b6:	2101      	movs	r1, #1
 80035b8:	4618      	mov	r0, r3
 80035ba:	f000 ffd5 	bl	8004568 <RCCEx_PLL2_Config>
 80035be:	4603      	mov	r3, r0
 80035c0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80035c2:	e012      	b.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3324      	adds	r3, #36	; 0x24
 80035c8:	2101      	movs	r1, #1
 80035ca:	4618      	mov	r0, r3
 80035cc:	f001 f87e 	bl	80046cc <RCCEx_PLL3_Config>
 80035d0:	4603      	mov	r3, r0
 80035d2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80035d4:	e009      	b.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	75fb      	strb	r3, [r7, #23]
      break;
 80035da:	e006      	b.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80035dc:	bf00      	nop
 80035de:	e004      	b.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80035e0:	bf00      	nop
 80035e2:	e002      	b.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80035e4:	bf00      	nop
 80035e6:	e000      	b.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80035e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035ea:	7dfb      	ldrb	r3, [r7, #23]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d109      	bne.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80035f0:	4b2d      	ldr	r3, [pc, #180]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80035f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035f4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035fc:	492a      	ldr	r1, [pc, #168]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	650b      	str	r3, [r1, #80]	; 0x50
 8003602:	e001      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003604:	7dfb      	ldrb	r3, [r7, #23]
 8003606:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d04d      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800361a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800361e:	d02e      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003620:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003624:	d828      	bhi.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800362a:	d02a      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800362c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003630:	d822      	bhi.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003632:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003636:	d026      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8003638:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800363c:	d81c      	bhi.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800363e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003642:	d010      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003644:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003648:	d816      	bhi.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800364a:	2b00      	cmp	r3, #0
 800364c:	d01d      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800364e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003652:	d111      	bne.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3304      	adds	r3, #4
 8003658:	2101      	movs	r1, #1
 800365a:	4618      	mov	r0, r3
 800365c:	f000 ff84 	bl	8004568 <RCCEx_PLL2_Config>
 8003660:	4603      	mov	r3, r0
 8003662:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003664:	e012      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	3324      	adds	r3, #36	; 0x24
 800366a:	2101      	movs	r1, #1
 800366c:	4618      	mov	r0, r3
 800366e:	f001 f82d 	bl	80046cc <RCCEx_PLL3_Config>
 8003672:	4603      	mov	r3, r0
 8003674:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003676:	e009      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	75fb      	strb	r3, [r7, #23]
      break;
 800367c:	e006      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800367e:	bf00      	nop
 8003680:	e004      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003682:	bf00      	nop
 8003684:	e002      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003686:	bf00      	nop
 8003688:	e000      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800368a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800368c:	7dfb      	ldrb	r3, [r7, #23]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10c      	bne.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003692:	4b05      	ldr	r3, [pc, #20]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003696:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80036a0:	4901      	ldr	r1, [pc, #4]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	658b      	str	r3, [r1, #88]	; 0x58
 80036a6:	e003      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80036a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ac:	7dfb      	ldrb	r3, [r7, #23]
 80036ae:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d02f      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036c4:	d00e      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80036c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036ca:	d814      	bhi.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d015      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80036d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036d4:	d10f      	bne.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036d6:	4baf      	ldr	r3, [pc, #700]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80036d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036da:	4aae      	ldr	r2, [pc, #696]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80036dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80036e2:	e00c      	b.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	3304      	adds	r3, #4
 80036e8:	2101      	movs	r1, #1
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 ff3c 	bl	8004568 <RCCEx_PLL2_Config>
 80036f0:	4603      	mov	r3, r0
 80036f2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80036f4:	e003      	b.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	75fb      	strb	r3, [r7, #23]
      break;
 80036fa:	e000      	b.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80036fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036fe:	7dfb      	ldrb	r3, [r7, #23]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d109      	bne.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003704:	4ba3      	ldr	r3, [pc, #652]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003708:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003710:	49a0      	ldr	r1, [pc, #640]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003712:	4313      	orrs	r3, r2
 8003714:	650b      	str	r3, [r1, #80]	; 0x50
 8003716:	e001      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003718:	7dfb      	ldrb	r3, [r7, #23]
 800371a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d032      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372c:	2b03      	cmp	r3, #3
 800372e:	d81b      	bhi.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003730:	a201      	add	r2, pc, #4	; (adr r2, 8003738 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8003732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003736:	bf00      	nop
 8003738:	0800376f 	.word	0x0800376f
 800373c:	08003749 	.word	0x08003749
 8003740:	08003757 	.word	0x08003757
 8003744:	0800376f 	.word	0x0800376f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003748:	4b92      	ldr	r3, [pc, #584]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800374a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374c:	4a91      	ldr	r2, [pc, #580]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800374e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003752:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003754:	e00c      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	3304      	adds	r3, #4
 800375a:	2102      	movs	r1, #2
 800375c:	4618      	mov	r0, r3
 800375e:	f000 ff03 	bl	8004568 <RCCEx_PLL2_Config>
 8003762:	4603      	mov	r3, r0
 8003764:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003766:	e003      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	75fb      	strb	r3, [r7, #23]
      break;
 800376c:	e000      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800376e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003770:	7dfb      	ldrb	r3, [r7, #23]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d109      	bne.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003776:	4b87      	ldr	r3, [pc, #540]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800377a:	f023 0203 	bic.w	r2, r3, #3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003782:	4984      	ldr	r1, [pc, #528]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003784:	4313      	orrs	r3, r2
 8003786:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003788:	e001      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800378a:	7dfb      	ldrb	r3, [r7, #23]
 800378c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003796:	2b00      	cmp	r3, #0
 8003798:	f000 8086 	beq.w	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800379c:	4b7e      	ldr	r3, [pc, #504]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a7d      	ldr	r2, [pc, #500]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80037a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037a8:	f7fd fc6c 	bl	8001084 <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037ae:	e009      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037b0:	f7fd fc68 	bl	8001084 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b64      	cmp	r3, #100	; 0x64
 80037bc:	d902      	bls.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	75fb      	strb	r3, [r7, #23]
        break;
 80037c2:	e005      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037c4:	4b74      	ldr	r3, [pc, #464]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d0ef      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80037d0:	7dfb      	ldrb	r3, [r7, #23]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d166      	bne.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80037d6:	4b6f      	ldr	r3, [pc, #444]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80037d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80037e0:	4053      	eors	r3, r2
 80037e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d013      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037ea:	4b6a      	ldr	r3, [pc, #424]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80037ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037f2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037f4:	4b67      	ldr	r3, [pc, #412]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80037f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f8:	4a66      	ldr	r2, [pc, #408]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80037fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037fe:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003800:	4b64      	ldr	r3, [pc, #400]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003804:	4a63      	ldr	r2, [pc, #396]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800380a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800380c:	4a61      	ldr	r2, [pc, #388]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003818:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800381c:	d115      	bne.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800381e:	f7fd fc31 	bl	8001084 <HAL_GetTick>
 8003822:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003824:	e00b      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003826:	f7fd fc2d 	bl	8001084 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	f241 3288 	movw	r2, #5000	; 0x1388
 8003834:	4293      	cmp	r3, r2
 8003836:	d902      	bls.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	75fb      	strb	r3, [r7, #23]
            break;
 800383c:	e005      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800383e:	4b55      	ldr	r3, [pc, #340]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d0ed      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800384a:	7dfb      	ldrb	r3, [r7, #23]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d126      	bne.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800385a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800385e:	d10d      	bne.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003860:	4b4c      	ldr	r3, [pc, #304]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800386e:	0919      	lsrs	r1, r3, #4
 8003870:	4b4a      	ldr	r3, [pc, #296]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8003872:	400b      	ands	r3, r1
 8003874:	4947      	ldr	r1, [pc, #284]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003876:	4313      	orrs	r3, r2
 8003878:	610b      	str	r3, [r1, #16]
 800387a:	e005      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800387c:	4b45      	ldr	r3, [pc, #276]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	4a44      	ldr	r2, [pc, #272]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003882:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003886:	6113      	str	r3, [r2, #16]
 8003888:	4b42      	ldr	r3, [pc, #264]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800388a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003892:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003896:	493f      	ldr	r1, [pc, #252]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003898:	4313      	orrs	r3, r2
 800389a:	670b      	str	r3, [r1, #112]	; 0x70
 800389c:	e004      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800389e:	7dfb      	ldrb	r3, [r7, #23]
 80038a0:	75bb      	strb	r3, [r7, #22]
 80038a2:	e001      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038a4:	7dfb      	ldrb	r3, [r7, #23]
 80038a6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0301 	and.w	r3, r3, #1
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 8085 	beq.w	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038ba:	2b28      	cmp	r3, #40	; 0x28
 80038bc:	d866      	bhi.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80038be:	a201      	add	r2, pc, #4	; (adr r2, 80038c4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80038c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c4:	080039a1 	.word	0x080039a1
 80038c8:	0800398d 	.word	0x0800398d
 80038cc:	0800398d 	.word	0x0800398d
 80038d0:	0800398d 	.word	0x0800398d
 80038d4:	0800398d 	.word	0x0800398d
 80038d8:	0800398d 	.word	0x0800398d
 80038dc:	0800398d 	.word	0x0800398d
 80038e0:	0800398d 	.word	0x0800398d
 80038e4:	08003969 	.word	0x08003969
 80038e8:	0800398d 	.word	0x0800398d
 80038ec:	0800398d 	.word	0x0800398d
 80038f0:	0800398d 	.word	0x0800398d
 80038f4:	0800398d 	.word	0x0800398d
 80038f8:	0800398d 	.word	0x0800398d
 80038fc:	0800398d 	.word	0x0800398d
 8003900:	0800398d 	.word	0x0800398d
 8003904:	0800397b 	.word	0x0800397b
 8003908:	0800398d 	.word	0x0800398d
 800390c:	0800398d 	.word	0x0800398d
 8003910:	0800398d 	.word	0x0800398d
 8003914:	0800398d 	.word	0x0800398d
 8003918:	0800398d 	.word	0x0800398d
 800391c:	0800398d 	.word	0x0800398d
 8003920:	0800398d 	.word	0x0800398d
 8003924:	080039a1 	.word	0x080039a1
 8003928:	0800398d 	.word	0x0800398d
 800392c:	0800398d 	.word	0x0800398d
 8003930:	0800398d 	.word	0x0800398d
 8003934:	0800398d 	.word	0x0800398d
 8003938:	0800398d 	.word	0x0800398d
 800393c:	0800398d 	.word	0x0800398d
 8003940:	0800398d 	.word	0x0800398d
 8003944:	080039a1 	.word	0x080039a1
 8003948:	0800398d 	.word	0x0800398d
 800394c:	0800398d 	.word	0x0800398d
 8003950:	0800398d 	.word	0x0800398d
 8003954:	0800398d 	.word	0x0800398d
 8003958:	0800398d 	.word	0x0800398d
 800395c:	0800398d 	.word	0x0800398d
 8003960:	0800398d 	.word	0x0800398d
 8003964:	080039a1 	.word	0x080039a1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	3304      	adds	r3, #4
 800396c:	2101      	movs	r1, #1
 800396e:	4618      	mov	r0, r3
 8003970:	f000 fdfa 	bl	8004568 <RCCEx_PLL2_Config>
 8003974:	4603      	mov	r3, r0
 8003976:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003978:	e013      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	3324      	adds	r3, #36	; 0x24
 800397e:	2101      	movs	r1, #1
 8003980:	4618      	mov	r0, r3
 8003982:	f000 fea3 	bl	80046cc <RCCEx_PLL3_Config>
 8003986:	4603      	mov	r3, r0
 8003988:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800398a:	e00a      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	75fb      	strb	r3, [r7, #23]
      break;
 8003990:	e007      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003992:	bf00      	nop
 8003994:	58024400 	.word	0x58024400
 8003998:	58024800 	.word	0x58024800
 800399c:	00ffffcf 	.word	0x00ffffcf
      break;
 80039a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039a2:	7dfb      	ldrb	r3, [r7, #23]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d109      	bne.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80039a8:	4b96      	ldr	r3, [pc, #600]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80039aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ac:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039b4:	4993      	ldr	r1, [pc, #588]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	654b      	str	r3, [r1, #84]	; 0x54
 80039ba:	e001      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039bc:	7dfb      	ldrb	r3, [r7, #23]
 80039be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d038      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039d0:	2b05      	cmp	r3, #5
 80039d2:	d821      	bhi.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80039d4:	a201      	add	r2, pc, #4	; (adr r2, 80039dc <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80039d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039da:	bf00      	nop
 80039dc:	08003a1f 	.word	0x08003a1f
 80039e0:	080039f5 	.word	0x080039f5
 80039e4:	08003a07 	.word	0x08003a07
 80039e8:	08003a1f 	.word	0x08003a1f
 80039ec:	08003a1f 	.word	0x08003a1f
 80039f0:	08003a1f 	.word	0x08003a1f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	3304      	adds	r3, #4
 80039f8:	2101      	movs	r1, #1
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 fdb4 	bl	8004568 <RCCEx_PLL2_Config>
 8003a00:	4603      	mov	r3, r0
 8003a02:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003a04:	e00c      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	3324      	adds	r3, #36	; 0x24
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 fe5d 	bl	80046cc <RCCEx_PLL3_Config>
 8003a12:	4603      	mov	r3, r0
 8003a14:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003a16:	e003      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a1c:	e000      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003a1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a20:	7dfb      	ldrb	r3, [r7, #23]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d109      	bne.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003a26:	4b77      	ldr	r3, [pc, #476]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a2a:	f023 0207 	bic.w	r2, r3, #7
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a32:	4974      	ldr	r1, [pc, #464]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	654b      	str	r3, [r1, #84]	; 0x54
 8003a38:	e001      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a3a:	7dfb      	ldrb	r3, [r7, #23]
 8003a3c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0304 	and.w	r3, r3, #4
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d03a      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a50:	2b05      	cmp	r3, #5
 8003a52:	d821      	bhi.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8003a54:	a201      	add	r2, pc, #4	; (adr r2, 8003a5c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8003a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5a:	bf00      	nop
 8003a5c:	08003a9f 	.word	0x08003a9f
 8003a60:	08003a75 	.word	0x08003a75
 8003a64:	08003a87 	.word	0x08003a87
 8003a68:	08003a9f 	.word	0x08003a9f
 8003a6c:	08003a9f 	.word	0x08003a9f
 8003a70:	08003a9f 	.word	0x08003a9f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3304      	adds	r3, #4
 8003a78:	2101      	movs	r1, #1
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 fd74 	bl	8004568 <RCCEx_PLL2_Config>
 8003a80:	4603      	mov	r3, r0
 8003a82:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003a84:	e00c      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	3324      	adds	r3, #36	; 0x24
 8003a8a:	2101      	movs	r1, #1
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f000 fe1d 	bl	80046cc <RCCEx_PLL3_Config>
 8003a92:	4603      	mov	r3, r0
 8003a94:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003a96:	e003      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a9c:	e000      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003a9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aa0:	7dfb      	ldrb	r3, [r7, #23]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10a      	bne.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003aa6:	4b57      	ldr	r3, [pc, #348]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aaa:	f023 0207 	bic.w	r2, r3, #7
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab4:	4953      	ldr	r1, [pc, #332]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	658b      	str	r3, [r1, #88]	; 0x58
 8003aba:	e001      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003abc:	7dfb      	ldrb	r3, [r7, #23]
 8003abe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0320 	and.w	r3, r3, #32
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d04b      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ad2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ad6:	d02e      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003ad8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003adc:	d828      	bhi.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae2:	d02a      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae8:	d822      	bhi.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003aea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003aee:	d026      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003af0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003af4:	d81c      	bhi.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003af6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003afa:	d010      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003afc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b00:	d816      	bhi.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d01d      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8003b06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b0a:	d111      	bne.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	3304      	adds	r3, #4
 8003b10:	2100      	movs	r1, #0
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 fd28 	bl	8004568 <RCCEx_PLL2_Config>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003b1c:	e012      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	3324      	adds	r3, #36	; 0x24
 8003b22:	2102      	movs	r1, #2
 8003b24:	4618      	mov	r0, r3
 8003b26:	f000 fdd1 	bl	80046cc <RCCEx_PLL3_Config>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003b2e:	e009      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	75fb      	strb	r3, [r7, #23]
      break;
 8003b34:	e006      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003b36:	bf00      	nop
 8003b38:	e004      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003b3a:	bf00      	nop
 8003b3c:	e002      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003b3e:	bf00      	nop
 8003b40:	e000      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003b42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b44:	7dfb      	ldrb	r3, [r7, #23]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d10a      	bne.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b4a:	4b2e      	ldr	r3, [pc, #184]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b4e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b58:	492a      	ldr	r1, [pc, #168]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	654b      	str	r3, [r1, #84]	; 0x54
 8003b5e:	e001      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b60:	7dfb      	ldrb	r3, [r7, #23]
 8003b62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d04d      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b76:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003b7a:	d02e      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003b7c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003b80:	d828      	bhi.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003b82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b86:	d02a      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b8c:	d822      	bhi.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003b8e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b92:	d026      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003b94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b98:	d81c      	bhi.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003b9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b9e:	d010      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003ba0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ba4:	d816      	bhi.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d01d      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003baa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bae:	d111      	bne.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	3304      	adds	r3, #4
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 fcd6 	bl	8004568 <RCCEx_PLL2_Config>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003bc0:	e012      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	3324      	adds	r3, #36	; 0x24
 8003bc6:	2102      	movs	r1, #2
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f000 fd7f 	bl	80046cc <RCCEx_PLL3_Config>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003bd2:	e009      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	75fb      	strb	r3, [r7, #23]
      break;
 8003bd8:	e006      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003bda:	bf00      	nop
 8003bdc:	e004      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003bde:	bf00      	nop
 8003be0:	e002      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003be2:	bf00      	nop
 8003be4:	e000      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003be6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003be8:	7dfb      	ldrb	r3, [r7, #23]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10c      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003bee:	4b05      	ldr	r3, [pc, #20]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bfc:	4901      	ldr	r1, [pc, #4]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	658b      	str	r3, [r1, #88]	; 0x58
 8003c02:	e003      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003c04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c08:	7dfb      	ldrb	r3, [r7, #23]
 8003c0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d04b      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c1e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003c22:	d02e      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003c24:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003c28:	d828      	bhi.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003c2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c2e:	d02a      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003c30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c34:	d822      	bhi.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003c36:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003c3a:	d026      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003c3c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003c40:	d81c      	bhi.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003c42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c46:	d010      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003c48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c4c:	d816      	bhi.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d01d      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8003c52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c56:	d111      	bne.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	3304      	adds	r3, #4
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 fc82 	bl	8004568 <RCCEx_PLL2_Config>
 8003c64:	4603      	mov	r3, r0
 8003c66:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003c68:	e012      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	3324      	adds	r3, #36	; 0x24
 8003c6e:	2102      	movs	r1, #2
 8003c70:	4618      	mov	r0, r3
 8003c72:	f000 fd2b 	bl	80046cc <RCCEx_PLL3_Config>
 8003c76:	4603      	mov	r3, r0
 8003c78:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003c7a:	e009      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	75fb      	strb	r3, [r7, #23]
      break;
 8003c80:	e006      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003c82:	bf00      	nop
 8003c84:	e004      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003c86:	bf00      	nop
 8003c88:	e002      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003c8a:	bf00      	nop
 8003c8c:	e000      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003c8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c90:	7dfb      	ldrb	r3, [r7, #23]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10a      	bne.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003c96:	4b9d      	ldr	r3, [pc, #628]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ca4:	4999      	ldr	r1, [pc, #612]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	658b      	str	r3, [r1, #88]	; 0x58
 8003caa:	e001      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cac:	7dfb      	ldrb	r3, [r7, #23]
 8003cae:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0308 	and.w	r3, r3, #8
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d01a      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cc6:	d10a      	bne.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	3324      	adds	r3, #36	; 0x24
 8003ccc:	2102      	movs	r1, #2
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 fcfc 	bl	80046cc <RCCEx_PLL3_Config>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003cde:	4b8b      	ldr	r3, [pc, #556]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cec:	4987      	ldr	r1, [pc, #540]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0310 	and.w	r3, r3, #16
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d01a      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d08:	d10a      	bne.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	3324      	adds	r3, #36	; 0x24
 8003d0e:	2102      	movs	r1, #2
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 fcdb 	bl	80046cc <RCCEx_PLL3_Config>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d20:	4b7a      	ldr	r3, [pc, #488]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d2e:	4977      	ldr	r1, [pc, #476]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d034      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003d46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d4a:	d01d      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003d4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d50:	d817      	bhi.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003d56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d5a:	d009      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003d5c:	e011      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	3304      	adds	r3, #4
 8003d62:	2100      	movs	r1, #0
 8003d64:	4618      	mov	r0, r3
 8003d66:	f000 fbff 	bl	8004568 <RCCEx_PLL2_Config>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003d6e:	e00c      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3324      	adds	r3, #36	; 0x24
 8003d74:	2102      	movs	r1, #2
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 fca8 	bl	80046cc <RCCEx_PLL3_Config>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003d80:	e003      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	75fb      	strb	r3, [r7, #23]
      break;
 8003d86:	e000      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003d88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d8a:	7dfb      	ldrb	r3, [r7, #23]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10a      	bne.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d90:	4b5e      	ldr	r3, [pc, #376]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003d9e:	495b      	ldr	r1, [pc, #364]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	658b      	str	r3, [r1, #88]	; 0x58
 8003da4:	e001      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003da6:	7dfb      	ldrb	r3, [r7, #23]
 8003da8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d033      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dbc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003dc0:	d01c      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8003dc2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003dc6:	d816      	bhi.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8003dc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dcc:	d003      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8003dce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003dd2:	d007      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8003dd4:	e00f      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dd6:	4b4d      	ldr	r3, [pc, #308]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dda:	4a4c      	ldr	r2, [pc, #304]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003de0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003de2:	e00c      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	3324      	adds	r3, #36	; 0x24
 8003de8:	2101      	movs	r1, #1
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 fc6e 	bl	80046cc <RCCEx_PLL3_Config>
 8003df0:	4603      	mov	r3, r0
 8003df2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003df4:	e003      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	75fb      	strb	r3, [r7, #23]
      break;
 8003dfa:	e000      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8003dfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dfe:	7dfb      	ldrb	r3, [r7, #23]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10a      	bne.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e04:	4b41      	ldr	r3, [pc, #260]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e12:	493e      	ldr	r1, [pc, #248]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	654b      	str	r3, [r1, #84]	; 0x54
 8003e18:	e001      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e1a:	7dfb      	ldrb	r3, [r7, #23]
 8003e1c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d029      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8003e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e36:	d007      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8003e38:	e00f      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e3a:	4b34      	ldr	r3, [pc, #208]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3e:	4a33      	ldr	r2, [pc, #204]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003e46:	e00b      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	3304      	adds	r3, #4
 8003e4c:	2102      	movs	r1, #2
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 fb8a 	bl	8004568 <RCCEx_PLL2_Config>
 8003e54:	4603      	mov	r3, r0
 8003e56:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003e58:	e002      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	75fb      	strb	r3, [r7, #23]
      break;
 8003e5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e60:	7dfb      	ldrb	r3, [r7, #23]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d109      	bne.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003e66:	4b29      	ldr	r3, [pc, #164]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e72:	4926      	ldr	r1, [pc, #152]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003e78:	e001      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7a:	7dfb      	ldrb	r3, [r7, #23]
 8003e7c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00a      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	3324      	adds	r3, #36	; 0x24
 8003e8e:	2102      	movs	r1, #2
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 fc1b 	bl	80046cc <RCCEx_PLL3_Config>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d001      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d033      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003eb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eb4:	d017      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8003eb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eba:	d811      	bhi.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003ebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ec0:	d013      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003ec2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ec6:	d80b      	bhi.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d010      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8003ecc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ed0:	d106      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ed2:	4b0e      	ldr	r3, [pc, #56]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed6:	4a0d      	ldr	r2, [pc, #52]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003edc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003ede:	e007      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ee4:	e004      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003ee6:	bf00      	nop
 8003ee8:	e002      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003eea:	bf00      	nop
 8003eec:	e000      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003eee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ef0:	7dfb      	ldrb	r3, [r7, #23]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10c      	bne.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ef6:	4b05      	ldr	r3, [pc, #20]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003efa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f02:	4902      	ldr	r1, [pc, #8]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	654b      	str	r3, [r1, #84]	; 0x54
 8003f08:	e004      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8003f0a:	bf00      	nop
 8003f0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f10:	7dfb      	ldrb	r3, [r7, #23]
 8003f12:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d008      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f20:	4b31      	ldr	r3, [pc, #196]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f24:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2c:	492e      	ldr	r1, [pc, #184]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d009      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003f3e:	4b2a      	ldr	r3, [pc, #168]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003f4c:	4926      	ldr	r1, [pc, #152]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d008      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f5e:	4b22      	ldr	r3, [pc, #136]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f62:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f6a:	491f      	ldr	r1, [pc, #124]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00d      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f7c:	4b1a      	ldr	r3, [pc, #104]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	4a19      	ldr	r2, [pc, #100]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003f82:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003f86:	6113      	str	r3, [r2, #16]
 8003f88:	4b17      	ldr	r3, [pc, #92]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003f8a:	691a      	ldr	r2, [r3, #16]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003f92:	4915      	ldr	r1, [pc, #84]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	da08      	bge.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003fa0:	4b11      	ldr	r3, [pc, #68]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fa4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fac:	490e      	ldr	r1, [pc, #56]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d009      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003fbe:	4b0a      	ldr	r3, [pc, #40]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fcc:	4906      	ldr	r1, [pc, #24]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003fd2:	7dbb      	ldrb	r3, [r7, #22]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d101      	bne.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	e000      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3718      	adds	r7, #24
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	58024400 	.word	0x58024400

08003fec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003ff0:	f7ff f85a 	bl	80030a8 <HAL_RCC_GetHCLKFreq>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	4b06      	ldr	r3, [pc, #24]	; (8004010 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	091b      	lsrs	r3, r3, #4
 8003ffc:	f003 0307 	and.w	r3, r3, #7
 8004000:	4904      	ldr	r1, [pc, #16]	; (8004014 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004002:	5ccb      	ldrb	r3, [r1, r3]
 8004004:	f003 031f 	and.w	r3, r3, #31
 8004008:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800400c:	4618      	mov	r0, r3
 800400e:	bd80      	pop	{r7, pc}
 8004010:	58024400 	.word	0x58024400
 8004014:	08005f94 	.word	0x08005f94

08004018 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004018:	b480      	push	{r7}
 800401a:	b089      	sub	sp, #36	; 0x24
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004020:	4ba1      	ldr	r3, [pc, #644]	; (80042a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004024:	f003 0303 	and.w	r3, r3, #3
 8004028:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800402a:	4b9f      	ldr	r3, [pc, #636]	; (80042a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800402c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402e:	0b1b      	lsrs	r3, r3, #12
 8004030:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004034:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004036:	4b9c      	ldr	r3, [pc, #624]	; (80042a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403a:	091b      	lsrs	r3, r3, #4
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004042:	4b99      	ldr	r3, [pc, #612]	; (80042a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004046:	08db      	lsrs	r3, r3, #3
 8004048:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	fb02 f303 	mul.w	r3, r2, r3
 8004052:	ee07 3a90 	vmov	s15, r3
 8004056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800405a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 8111 	beq.w	8004288 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	2b02      	cmp	r3, #2
 800406a:	f000 8083 	beq.w	8004174 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	2b02      	cmp	r3, #2
 8004072:	f200 80a1 	bhi.w	80041b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d003      	beq.n	8004084 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d056      	beq.n	8004130 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004082:	e099      	b.n	80041b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004084:	4b88      	ldr	r3, [pc, #544]	; (80042a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0320 	and.w	r3, r3, #32
 800408c:	2b00      	cmp	r3, #0
 800408e:	d02d      	beq.n	80040ec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004090:	4b85      	ldr	r3, [pc, #532]	; (80042a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	08db      	lsrs	r3, r3, #3
 8004096:	f003 0303 	and.w	r3, r3, #3
 800409a:	4a84      	ldr	r2, [pc, #528]	; (80042ac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800409c:	fa22 f303 	lsr.w	r3, r2, r3
 80040a0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	ee07 3a90 	vmov	s15, r3
 80040a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	ee07 3a90 	vmov	s15, r3
 80040b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040ba:	4b7b      	ldr	r3, [pc, #492]	; (80042a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040c2:	ee07 3a90 	vmov	s15, r3
 80040c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80040ce:	eddf 5a78 	vldr	s11, [pc, #480]	; 80042b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040e6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80040ea:	e087      	b.n	80041fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	ee07 3a90 	vmov	s15, r3
 80040f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040f6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80042b4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80040fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040fe:	4b6a      	ldr	r3, [pc, #424]	; (80042a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004106:	ee07 3a90 	vmov	s15, r3
 800410a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800410e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004112:	eddf 5a67 	vldr	s11, [pc, #412]	; 80042b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800411a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800411e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800412a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800412e:	e065      	b.n	80041fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	ee07 3a90 	vmov	s15, r3
 8004136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800413a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80042b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800413e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004142:	4b59      	ldr	r3, [pc, #356]	; (80042a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800414a:	ee07 3a90 	vmov	s15, r3
 800414e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004152:	ed97 6a03 	vldr	s12, [r7, #12]
 8004156:	eddf 5a56 	vldr	s11, [pc, #344]	; 80042b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800415a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800415e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004162:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800416a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800416e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004172:	e043      	b.n	80041fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	ee07 3a90 	vmov	s15, r3
 800417a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800417e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80042bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004186:	4b48      	ldr	r3, [pc, #288]	; (80042a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800418e:	ee07 3a90 	vmov	s15, r3
 8004192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004196:	ed97 6a03 	vldr	s12, [r7, #12]
 800419a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80042b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800419e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80041b6:	e021      	b.n	80041fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	ee07 3a90 	vmov	s15, r3
 80041be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041c2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80042b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80041c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041ca:	4b37      	ldr	r3, [pc, #220]	; (80042a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041d2:	ee07 3a90 	vmov	s15, r3
 80041d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041da:	ed97 6a03 	vldr	s12, [r7, #12]
 80041de:	eddf 5a34 	vldr	s11, [pc, #208]	; 80042b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80041e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80041fa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80041fc:	4b2a      	ldr	r3, [pc, #168]	; (80042a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004200:	0a5b      	lsrs	r3, r3, #9
 8004202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004206:	ee07 3a90 	vmov	s15, r3
 800420a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800420e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004212:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004216:	edd7 6a07 	vldr	s13, [r7, #28]
 800421a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800421e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004222:	ee17 2a90 	vmov	r2, s15
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800422a:	4b1f      	ldr	r3, [pc, #124]	; (80042a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800422c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422e:	0c1b      	lsrs	r3, r3, #16
 8004230:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004234:	ee07 3a90 	vmov	s15, r3
 8004238:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800423c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004240:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004244:	edd7 6a07 	vldr	s13, [r7, #28]
 8004248:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800424c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004250:	ee17 2a90 	vmov	r2, s15
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004258:	4b13      	ldr	r3, [pc, #76]	; (80042a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800425a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425c:	0e1b      	lsrs	r3, r3, #24
 800425e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004262:	ee07 3a90 	vmov	s15, r3
 8004266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800426a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800426e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004272:	edd7 6a07 	vldr	s13, [r7, #28]
 8004276:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800427a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800427e:	ee17 2a90 	vmov	r2, s15
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004286:	e008      	b.n	800429a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	609a      	str	r2, [r3, #8]
}
 800429a:	bf00      	nop
 800429c:	3724      	adds	r7, #36	; 0x24
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	58024400 	.word	0x58024400
 80042ac:	03d09000 	.word	0x03d09000
 80042b0:	46000000 	.word	0x46000000
 80042b4:	4c742400 	.word	0x4c742400
 80042b8:	4a742400 	.word	0x4a742400
 80042bc:	4af42400 	.word	0x4af42400

080042c0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b089      	sub	sp, #36	; 0x24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80042c8:	4ba1      	ldr	r3, [pc, #644]	; (8004550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042cc:	f003 0303 	and.w	r3, r3, #3
 80042d0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80042d2:	4b9f      	ldr	r3, [pc, #636]	; (8004550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d6:	0d1b      	lsrs	r3, r3, #20
 80042d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042dc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80042de:	4b9c      	ldr	r3, [pc, #624]	; (8004550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e2:	0a1b      	lsrs	r3, r3, #8
 80042e4:	f003 0301 	and.w	r3, r3, #1
 80042e8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80042ea:	4b99      	ldr	r3, [pc, #612]	; (8004550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ee:	08db      	lsrs	r3, r3, #3
 80042f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	fb02 f303 	mul.w	r3, r2, r3
 80042fa:	ee07 3a90 	vmov	s15, r3
 80042fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004302:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	2b00      	cmp	r3, #0
 800430a:	f000 8111 	beq.w	8004530 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	2b02      	cmp	r3, #2
 8004312:	f000 8083 	beq.w	800441c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	2b02      	cmp	r3, #2
 800431a:	f200 80a1 	bhi.w	8004460 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d003      	beq.n	800432c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d056      	beq.n	80043d8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800432a:	e099      	b.n	8004460 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800432c:	4b88      	ldr	r3, [pc, #544]	; (8004550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0320 	and.w	r3, r3, #32
 8004334:	2b00      	cmp	r3, #0
 8004336:	d02d      	beq.n	8004394 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004338:	4b85      	ldr	r3, [pc, #532]	; (8004550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	08db      	lsrs	r3, r3, #3
 800433e:	f003 0303 	and.w	r3, r3, #3
 8004342:	4a84      	ldr	r2, [pc, #528]	; (8004554 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004344:	fa22 f303 	lsr.w	r3, r2, r3
 8004348:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	ee07 3a90 	vmov	s15, r3
 8004350:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	ee07 3a90 	vmov	s15, r3
 800435a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800435e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004362:	4b7b      	ldr	r3, [pc, #492]	; (8004550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800436a:	ee07 3a90 	vmov	s15, r3
 800436e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004372:	ed97 6a03 	vldr	s12, [r7, #12]
 8004376:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004558 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800437a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800437e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004382:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800438a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800438e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004392:	e087      	b.n	80044a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	ee07 3a90 	vmov	s15, r3
 800439a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800439e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800455c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80043a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043a6:	4b6a      	ldr	r3, [pc, #424]	; (8004550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ae:	ee07 3a90 	vmov	s15, r3
 80043b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80043ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004558 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80043be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80043d6:	e065      	b.n	80044a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	ee07 3a90 	vmov	s15, r3
 80043de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004560 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80043e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043ea:	4b59      	ldr	r3, [pc, #356]	; (8004550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043f2:	ee07 3a90 	vmov	s15, r3
 80043f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80043fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004558 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800440a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800440e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004416:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800441a:	e043      	b.n	80044a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	ee07 3a90 	vmov	s15, r3
 8004422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004426:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004564 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800442a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800442e:	4b48      	ldr	r3, [pc, #288]	; (8004550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004436:	ee07 3a90 	vmov	s15, r3
 800443a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800443e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004442:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004558 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800444a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800444e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800445a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800445e:	e021      	b.n	80044a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	ee07 3a90 	vmov	s15, r3
 8004466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800446a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004560 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800446e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004472:	4b37      	ldr	r3, [pc, #220]	; (8004550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800447a:	ee07 3a90 	vmov	s15, r3
 800447e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004482:	ed97 6a03 	vldr	s12, [r7, #12]
 8004486:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004558 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800448a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800448e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004492:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800449a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800449e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044a2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80044a4:	4b2a      	ldr	r3, [pc, #168]	; (8004550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a8:	0a5b      	lsrs	r3, r3, #9
 80044aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044ae:	ee07 3a90 	vmov	s15, r3
 80044b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044be:	edd7 6a07 	vldr	s13, [r7, #28]
 80044c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044ca:	ee17 2a90 	vmov	r2, s15
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80044d2:	4b1f      	ldr	r3, [pc, #124]	; (8004550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	0c1b      	lsrs	r3, r3, #16
 80044d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044dc:	ee07 3a90 	vmov	s15, r3
 80044e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80044f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044f8:	ee17 2a90 	vmov	r2, s15
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004500:	4b13      	ldr	r3, [pc, #76]	; (8004550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004504:	0e1b      	lsrs	r3, r3, #24
 8004506:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800450a:	ee07 3a90 	vmov	s15, r3
 800450e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004512:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004516:	ee37 7a87 	vadd.f32	s14, s15, s14
 800451a:	edd7 6a07 	vldr	s13, [r7, #28]
 800451e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004522:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004526:	ee17 2a90 	vmov	r2, s15
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800452e:	e008      	b.n	8004542 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	609a      	str	r2, [r3, #8]
}
 8004542:	bf00      	nop
 8004544:	3724      	adds	r7, #36	; 0x24
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	58024400 	.word	0x58024400
 8004554:	03d09000 	.word	0x03d09000
 8004558:	46000000 	.word	0x46000000
 800455c:	4c742400 	.word	0x4c742400
 8004560:	4a742400 	.word	0x4a742400
 8004564:	4af42400 	.word	0x4af42400

08004568 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004572:	2300      	movs	r3, #0
 8004574:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004576:	4b53      	ldr	r3, [pc, #332]	; (80046c4 <RCCEx_PLL2_Config+0x15c>)
 8004578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457a:	f003 0303 	and.w	r3, r3, #3
 800457e:	2b03      	cmp	r3, #3
 8004580:	d101      	bne.n	8004586 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e099      	b.n	80046ba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004586:	4b4f      	ldr	r3, [pc, #316]	; (80046c4 <RCCEx_PLL2_Config+0x15c>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a4e      	ldr	r2, [pc, #312]	; (80046c4 <RCCEx_PLL2_Config+0x15c>)
 800458c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004590:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004592:	f7fc fd77 	bl	8001084 <HAL_GetTick>
 8004596:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004598:	e008      	b.n	80045ac <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800459a:	f7fc fd73 	bl	8001084 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d901      	bls.n	80045ac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e086      	b.n	80046ba <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80045ac:	4b45      	ldr	r3, [pc, #276]	; (80046c4 <RCCEx_PLL2_Config+0x15c>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1f0      	bne.n	800459a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80045b8:	4b42      	ldr	r3, [pc, #264]	; (80046c4 <RCCEx_PLL2_Config+0x15c>)
 80045ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045bc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	031b      	lsls	r3, r3, #12
 80045c6:	493f      	ldr	r1, [pc, #252]	; (80046c4 <RCCEx_PLL2_Config+0x15c>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	628b      	str	r3, [r1, #40]	; 0x28
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	3b01      	subs	r3, #1
 80045d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	3b01      	subs	r3, #1
 80045dc:	025b      	lsls	r3, r3, #9
 80045de:	b29b      	uxth	r3, r3
 80045e0:	431a      	orrs	r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	3b01      	subs	r3, #1
 80045e8:	041b      	lsls	r3, r3, #16
 80045ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80045ee:	431a      	orrs	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	3b01      	subs	r3, #1
 80045f6:	061b      	lsls	r3, r3, #24
 80045f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80045fc:	4931      	ldr	r1, [pc, #196]	; (80046c4 <RCCEx_PLL2_Config+0x15c>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004602:	4b30      	ldr	r3, [pc, #192]	; (80046c4 <RCCEx_PLL2_Config+0x15c>)
 8004604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004606:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	492d      	ldr	r1, [pc, #180]	; (80046c4 <RCCEx_PLL2_Config+0x15c>)
 8004610:	4313      	orrs	r3, r2
 8004612:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004614:	4b2b      	ldr	r3, [pc, #172]	; (80046c4 <RCCEx_PLL2_Config+0x15c>)
 8004616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004618:	f023 0220 	bic.w	r2, r3, #32
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	4928      	ldr	r1, [pc, #160]	; (80046c4 <RCCEx_PLL2_Config+0x15c>)
 8004622:	4313      	orrs	r3, r2
 8004624:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004626:	4b27      	ldr	r3, [pc, #156]	; (80046c4 <RCCEx_PLL2_Config+0x15c>)
 8004628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462a:	4a26      	ldr	r2, [pc, #152]	; (80046c4 <RCCEx_PLL2_Config+0x15c>)
 800462c:	f023 0310 	bic.w	r3, r3, #16
 8004630:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004632:	4b24      	ldr	r3, [pc, #144]	; (80046c4 <RCCEx_PLL2_Config+0x15c>)
 8004634:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004636:	4b24      	ldr	r3, [pc, #144]	; (80046c8 <RCCEx_PLL2_Config+0x160>)
 8004638:	4013      	ands	r3, r2
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	69d2      	ldr	r2, [r2, #28]
 800463e:	00d2      	lsls	r2, r2, #3
 8004640:	4920      	ldr	r1, [pc, #128]	; (80046c4 <RCCEx_PLL2_Config+0x15c>)
 8004642:	4313      	orrs	r3, r2
 8004644:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004646:	4b1f      	ldr	r3, [pc, #124]	; (80046c4 <RCCEx_PLL2_Config+0x15c>)
 8004648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464a:	4a1e      	ldr	r2, [pc, #120]	; (80046c4 <RCCEx_PLL2_Config+0x15c>)
 800464c:	f043 0310 	orr.w	r3, r3, #16
 8004650:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d106      	bne.n	8004666 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004658:	4b1a      	ldr	r3, [pc, #104]	; (80046c4 <RCCEx_PLL2_Config+0x15c>)
 800465a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465c:	4a19      	ldr	r2, [pc, #100]	; (80046c4 <RCCEx_PLL2_Config+0x15c>)
 800465e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004662:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004664:	e00f      	b.n	8004686 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d106      	bne.n	800467a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800466c:	4b15      	ldr	r3, [pc, #84]	; (80046c4 <RCCEx_PLL2_Config+0x15c>)
 800466e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004670:	4a14      	ldr	r2, [pc, #80]	; (80046c4 <RCCEx_PLL2_Config+0x15c>)
 8004672:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004676:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004678:	e005      	b.n	8004686 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800467a:	4b12      	ldr	r3, [pc, #72]	; (80046c4 <RCCEx_PLL2_Config+0x15c>)
 800467c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467e:	4a11      	ldr	r2, [pc, #68]	; (80046c4 <RCCEx_PLL2_Config+0x15c>)
 8004680:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004684:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004686:	4b0f      	ldr	r3, [pc, #60]	; (80046c4 <RCCEx_PLL2_Config+0x15c>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a0e      	ldr	r2, [pc, #56]	; (80046c4 <RCCEx_PLL2_Config+0x15c>)
 800468c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004690:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004692:	f7fc fcf7 	bl	8001084 <HAL_GetTick>
 8004696:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004698:	e008      	b.n	80046ac <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800469a:	f7fc fcf3 	bl	8001084 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d901      	bls.n	80046ac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e006      	b.n	80046ba <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80046ac:	4b05      	ldr	r3, [pc, #20]	; (80046c4 <RCCEx_PLL2_Config+0x15c>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d0f0      	beq.n	800469a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80046b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	58024400 	.word	0x58024400
 80046c8:	ffff0007 	.word	0xffff0007

080046cc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046d6:	2300      	movs	r3, #0
 80046d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80046da:	4b53      	ldr	r3, [pc, #332]	; (8004828 <RCCEx_PLL3_Config+0x15c>)
 80046dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046de:	f003 0303 	and.w	r3, r3, #3
 80046e2:	2b03      	cmp	r3, #3
 80046e4:	d101      	bne.n	80046ea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e099      	b.n	800481e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80046ea:	4b4f      	ldr	r3, [pc, #316]	; (8004828 <RCCEx_PLL3_Config+0x15c>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a4e      	ldr	r2, [pc, #312]	; (8004828 <RCCEx_PLL3_Config+0x15c>)
 80046f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046f6:	f7fc fcc5 	bl	8001084 <HAL_GetTick>
 80046fa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80046fc:	e008      	b.n	8004710 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80046fe:	f7fc fcc1 	bl	8001084 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	2b02      	cmp	r3, #2
 800470a:	d901      	bls.n	8004710 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e086      	b.n	800481e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004710:	4b45      	ldr	r3, [pc, #276]	; (8004828 <RCCEx_PLL3_Config+0x15c>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1f0      	bne.n	80046fe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800471c:	4b42      	ldr	r3, [pc, #264]	; (8004828 <RCCEx_PLL3_Config+0x15c>)
 800471e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004720:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	051b      	lsls	r3, r3, #20
 800472a:	493f      	ldr	r1, [pc, #252]	; (8004828 <RCCEx_PLL3_Config+0x15c>)
 800472c:	4313      	orrs	r3, r2
 800472e:	628b      	str	r3, [r1, #40]	; 0x28
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	3b01      	subs	r3, #1
 8004736:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	3b01      	subs	r3, #1
 8004740:	025b      	lsls	r3, r3, #9
 8004742:	b29b      	uxth	r3, r3
 8004744:	431a      	orrs	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	3b01      	subs	r3, #1
 800474c:	041b      	lsls	r3, r3, #16
 800474e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004752:	431a      	orrs	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	3b01      	subs	r3, #1
 800475a:	061b      	lsls	r3, r3, #24
 800475c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004760:	4931      	ldr	r1, [pc, #196]	; (8004828 <RCCEx_PLL3_Config+0x15c>)
 8004762:	4313      	orrs	r3, r2
 8004764:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004766:	4b30      	ldr	r3, [pc, #192]	; (8004828 <RCCEx_PLL3_Config+0x15c>)
 8004768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	492d      	ldr	r1, [pc, #180]	; (8004828 <RCCEx_PLL3_Config+0x15c>)
 8004774:	4313      	orrs	r3, r2
 8004776:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004778:	4b2b      	ldr	r3, [pc, #172]	; (8004828 <RCCEx_PLL3_Config+0x15c>)
 800477a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	4928      	ldr	r1, [pc, #160]	; (8004828 <RCCEx_PLL3_Config+0x15c>)
 8004786:	4313      	orrs	r3, r2
 8004788:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800478a:	4b27      	ldr	r3, [pc, #156]	; (8004828 <RCCEx_PLL3_Config+0x15c>)
 800478c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478e:	4a26      	ldr	r2, [pc, #152]	; (8004828 <RCCEx_PLL3_Config+0x15c>)
 8004790:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004794:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004796:	4b24      	ldr	r3, [pc, #144]	; (8004828 <RCCEx_PLL3_Config+0x15c>)
 8004798:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800479a:	4b24      	ldr	r3, [pc, #144]	; (800482c <RCCEx_PLL3_Config+0x160>)
 800479c:	4013      	ands	r3, r2
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	69d2      	ldr	r2, [r2, #28]
 80047a2:	00d2      	lsls	r2, r2, #3
 80047a4:	4920      	ldr	r1, [pc, #128]	; (8004828 <RCCEx_PLL3_Config+0x15c>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80047aa:	4b1f      	ldr	r3, [pc, #124]	; (8004828 <RCCEx_PLL3_Config+0x15c>)
 80047ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ae:	4a1e      	ldr	r2, [pc, #120]	; (8004828 <RCCEx_PLL3_Config+0x15c>)
 80047b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d106      	bne.n	80047ca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80047bc:	4b1a      	ldr	r3, [pc, #104]	; (8004828 <RCCEx_PLL3_Config+0x15c>)
 80047be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c0:	4a19      	ldr	r2, [pc, #100]	; (8004828 <RCCEx_PLL3_Config+0x15c>)
 80047c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80047c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80047c8:	e00f      	b.n	80047ea <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d106      	bne.n	80047de <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80047d0:	4b15      	ldr	r3, [pc, #84]	; (8004828 <RCCEx_PLL3_Config+0x15c>)
 80047d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d4:	4a14      	ldr	r2, [pc, #80]	; (8004828 <RCCEx_PLL3_Config+0x15c>)
 80047d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80047da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80047dc:	e005      	b.n	80047ea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80047de:	4b12      	ldr	r3, [pc, #72]	; (8004828 <RCCEx_PLL3_Config+0x15c>)
 80047e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e2:	4a11      	ldr	r2, [pc, #68]	; (8004828 <RCCEx_PLL3_Config+0x15c>)
 80047e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80047ea:	4b0f      	ldr	r3, [pc, #60]	; (8004828 <RCCEx_PLL3_Config+0x15c>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a0e      	ldr	r2, [pc, #56]	; (8004828 <RCCEx_PLL3_Config+0x15c>)
 80047f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047f6:	f7fc fc45 	bl	8001084 <HAL_GetTick>
 80047fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80047fc:	e008      	b.n	8004810 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80047fe:	f7fc fc41 	bl	8001084 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	2b02      	cmp	r3, #2
 800480a:	d901      	bls.n	8004810 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e006      	b.n	800481e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004810:	4b05      	ldr	r3, [pc, #20]	; (8004828 <RCCEx_PLL3_Config+0x15c>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d0f0      	beq.n	80047fe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800481c:	7bfb      	ldrb	r3, [r7, #15]
}
 800481e:	4618      	mov	r0, r3
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	58024400 	.word	0x58024400
 800482c:	ffff0007 	.word	0xffff0007

08004830 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d101      	bne.n	8004842 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e042      	b.n	80048c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004848:	2b00      	cmp	r3, #0
 800484a:	d106      	bne.n	800485a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7fc f9c5 	bl	8000be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2224      	movs	r2, #36	; 0x24
 800485e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f022 0201 	bic.w	r2, r2, #1
 8004870:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f82c 	bl	80048d0 <UART_SetConfig>
 8004878:	4603      	mov	r3, r0
 800487a:	2b01      	cmp	r3, #1
 800487c:	d101      	bne.n	8004882 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e022      	b.n	80048c8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004886:	2b00      	cmp	r3, #0
 8004888:	d002      	beq.n	8004890 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 fd88 	bl	80053a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	685a      	ldr	r2, [r3, #4]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800489e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	689a      	ldr	r2, [r3, #8]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f042 0201 	orr.w	r2, r2, #1
 80048be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 fe0f 	bl	80054e4 <UART_CheckIdleState>
 80048c6:	4603      	mov	r3, r0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3708      	adds	r7, #8
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048d4:	b092      	sub	sp, #72	; 0x48
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048da:	2300      	movs	r3, #0
 80048dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	689a      	ldr	r2, [r3, #8]
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	431a      	orrs	r2, r3
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	695b      	ldr	r3, [r3, #20]
 80048ee:	431a      	orrs	r2, r3
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	69db      	ldr	r3, [r3, #28]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	4bbe      	ldr	r3, [pc, #760]	; (8004bf8 <UART_SetConfig+0x328>)
 8004900:	4013      	ands	r3, r2
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	6812      	ldr	r2, [r2, #0]
 8004906:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004908:	430b      	orrs	r3, r1
 800490a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	68da      	ldr	r2, [r3, #12]
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4ab3      	ldr	r2, [pc, #716]	; (8004bfc <UART_SetConfig+0x32c>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d004      	beq.n	800493c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004938:	4313      	orrs	r3, r2
 800493a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	689a      	ldr	r2, [r3, #8]
 8004942:	4baf      	ldr	r3, [pc, #700]	; (8004c00 <UART_SetConfig+0x330>)
 8004944:	4013      	ands	r3, r2
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	6812      	ldr	r2, [r2, #0]
 800494a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800494c:	430b      	orrs	r3, r1
 800494e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004956:	f023 010f 	bic.w	r1, r3, #15
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	430a      	orrs	r2, r1
 8004964:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4aa6      	ldr	r2, [pc, #664]	; (8004c04 <UART_SetConfig+0x334>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d177      	bne.n	8004a60 <UART_SetConfig+0x190>
 8004970:	4ba5      	ldr	r3, [pc, #660]	; (8004c08 <UART_SetConfig+0x338>)
 8004972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004974:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004978:	2b28      	cmp	r3, #40	; 0x28
 800497a:	d86d      	bhi.n	8004a58 <UART_SetConfig+0x188>
 800497c:	a201      	add	r2, pc, #4	; (adr r2, 8004984 <UART_SetConfig+0xb4>)
 800497e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004982:	bf00      	nop
 8004984:	08004a29 	.word	0x08004a29
 8004988:	08004a59 	.word	0x08004a59
 800498c:	08004a59 	.word	0x08004a59
 8004990:	08004a59 	.word	0x08004a59
 8004994:	08004a59 	.word	0x08004a59
 8004998:	08004a59 	.word	0x08004a59
 800499c:	08004a59 	.word	0x08004a59
 80049a0:	08004a59 	.word	0x08004a59
 80049a4:	08004a31 	.word	0x08004a31
 80049a8:	08004a59 	.word	0x08004a59
 80049ac:	08004a59 	.word	0x08004a59
 80049b0:	08004a59 	.word	0x08004a59
 80049b4:	08004a59 	.word	0x08004a59
 80049b8:	08004a59 	.word	0x08004a59
 80049bc:	08004a59 	.word	0x08004a59
 80049c0:	08004a59 	.word	0x08004a59
 80049c4:	08004a39 	.word	0x08004a39
 80049c8:	08004a59 	.word	0x08004a59
 80049cc:	08004a59 	.word	0x08004a59
 80049d0:	08004a59 	.word	0x08004a59
 80049d4:	08004a59 	.word	0x08004a59
 80049d8:	08004a59 	.word	0x08004a59
 80049dc:	08004a59 	.word	0x08004a59
 80049e0:	08004a59 	.word	0x08004a59
 80049e4:	08004a41 	.word	0x08004a41
 80049e8:	08004a59 	.word	0x08004a59
 80049ec:	08004a59 	.word	0x08004a59
 80049f0:	08004a59 	.word	0x08004a59
 80049f4:	08004a59 	.word	0x08004a59
 80049f8:	08004a59 	.word	0x08004a59
 80049fc:	08004a59 	.word	0x08004a59
 8004a00:	08004a59 	.word	0x08004a59
 8004a04:	08004a49 	.word	0x08004a49
 8004a08:	08004a59 	.word	0x08004a59
 8004a0c:	08004a59 	.word	0x08004a59
 8004a10:	08004a59 	.word	0x08004a59
 8004a14:	08004a59 	.word	0x08004a59
 8004a18:	08004a59 	.word	0x08004a59
 8004a1c:	08004a59 	.word	0x08004a59
 8004a20:	08004a59 	.word	0x08004a59
 8004a24:	08004a51 	.word	0x08004a51
 8004a28:	2301      	movs	r3, #1
 8004a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a2e:	e222      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004a30:	2304      	movs	r3, #4
 8004a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a36:	e21e      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004a38:	2308      	movs	r3, #8
 8004a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a3e:	e21a      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004a40:	2310      	movs	r3, #16
 8004a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a46:	e216      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004a48:	2320      	movs	r3, #32
 8004a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a4e:	e212      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004a50:	2340      	movs	r3, #64	; 0x40
 8004a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a56:	e20e      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004a58:	2380      	movs	r3, #128	; 0x80
 8004a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a5e:	e20a      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a69      	ldr	r2, [pc, #420]	; (8004c0c <UART_SetConfig+0x33c>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d130      	bne.n	8004acc <UART_SetConfig+0x1fc>
 8004a6a:	4b67      	ldr	r3, [pc, #412]	; (8004c08 <UART_SetConfig+0x338>)
 8004a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a6e:	f003 0307 	and.w	r3, r3, #7
 8004a72:	2b05      	cmp	r3, #5
 8004a74:	d826      	bhi.n	8004ac4 <UART_SetConfig+0x1f4>
 8004a76:	a201      	add	r2, pc, #4	; (adr r2, 8004a7c <UART_SetConfig+0x1ac>)
 8004a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a7c:	08004a95 	.word	0x08004a95
 8004a80:	08004a9d 	.word	0x08004a9d
 8004a84:	08004aa5 	.word	0x08004aa5
 8004a88:	08004aad 	.word	0x08004aad
 8004a8c:	08004ab5 	.word	0x08004ab5
 8004a90:	08004abd 	.word	0x08004abd
 8004a94:	2300      	movs	r3, #0
 8004a96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a9a:	e1ec      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004a9c:	2304      	movs	r3, #4
 8004a9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004aa2:	e1e8      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004aa4:	2308      	movs	r3, #8
 8004aa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004aaa:	e1e4      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004aac:	2310      	movs	r3, #16
 8004aae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ab2:	e1e0      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004ab4:	2320      	movs	r3, #32
 8004ab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004aba:	e1dc      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004abc:	2340      	movs	r3, #64	; 0x40
 8004abe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ac2:	e1d8      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004ac4:	2380      	movs	r3, #128	; 0x80
 8004ac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004aca:	e1d4      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a4f      	ldr	r2, [pc, #316]	; (8004c10 <UART_SetConfig+0x340>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d130      	bne.n	8004b38 <UART_SetConfig+0x268>
 8004ad6:	4b4c      	ldr	r3, [pc, #304]	; (8004c08 <UART_SetConfig+0x338>)
 8004ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ada:	f003 0307 	and.w	r3, r3, #7
 8004ade:	2b05      	cmp	r3, #5
 8004ae0:	d826      	bhi.n	8004b30 <UART_SetConfig+0x260>
 8004ae2:	a201      	add	r2, pc, #4	; (adr r2, 8004ae8 <UART_SetConfig+0x218>)
 8004ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae8:	08004b01 	.word	0x08004b01
 8004aec:	08004b09 	.word	0x08004b09
 8004af0:	08004b11 	.word	0x08004b11
 8004af4:	08004b19 	.word	0x08004b19
 8004af8:	08004b21 	.word	0x08004b21
 8004afc:	08004b29 	.word	0x08004b29
 8004b00:	2300      	movs	r3, #0
 8004b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b06:	e1b6      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004b08:	2304      	movs	r3, #4
 8004b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b0e:	e1b2      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004b10:	2308      	movs	r3, #8
 8004b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b16:	e1ae      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004b18:	2310      	movs	r3, #16
 8004b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b1e:	e1aa      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004b20:	2320      	movs	r3, #32
 8004b22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b26:	e1a6      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004b28:	2340      	movs	r3, #64	; 0x40
 8004b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b2e:	e1a2      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004b30:	2380      	movs	r3, #128	; 0x80
 8004b32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b36:	e19e      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a35      	ldr	r2, [pc, #212]	; (8004c14 <UART_SetConfig+0x344>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d130      	bne.n	8004ba4 <UART_SetConfig+0x2d4>
 8004b42:	4b31      	ldr	r3, [pc, #196]	; (8004c08 <UART_SetConfig+0x338>)
 8004b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b46:	f003 0307 	and.w	r3, r3, #7
 8004b4a:	2b05      	cmp	r3, #5
 8004b4c:	d826      	bhi.n	8004b9c <UART_SetConfig+0x2cc>
 8004b4e:	a201      	add	r2, pc, #4	; (adr r2, 8004b54 <UART_SetConfig+0x284>)
 8004b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b54:	08004b6d 	.word	0x08004b6d
 8004b58:	08004b75 	.word	0x08004b75
 8004b5c:	08004b7d 	.word	0x08004b7d
 8004b60:	08004b85 	.word	0x08004b85
 8004b64:	08004b8d 	.word	0x08004b8d
 8004b68:	08004b95 	.word	0x08004b95
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b72:	e180      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004b74:	2304      	movs	r3, #4
 8004b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b7a:	e17c      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004b7c:	2308      	movs	r3, #8
 8004b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b82:	e178      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004b84:	2310      	movs	r3, #16
 8004b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b8a:	e174      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004b8c:	2320      	movs	r3, #32
 8004b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b92:	e170      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004b94:	2340      	movs	r3, #64	; 0x40
 8004b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b9a:	e16c      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004b9c:	2380      	movs	r3, #128	; 0x80
 8004b9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ba2:	e168      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a1b      	ldr	r2, [pc, #108]	; (8004c18 <UART_SetConfig+0x348>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d142      	bne.n	8004c34 <UART_SetConfig+0x364>
 8004bae:	4b16      	ldr	r3, [pc, #88]	; (8004c08 <UART_SetConfig+0x338>)
 8004bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb2:	f003 0307 	and.w	r3, r3, #7
 8004bb6:	2b05      	cmp	r3, #5
 8004bb8:	d838      	bhi.n	8004c2c <UART_SetConfig+0x35c>
 8004bba:	a201      	add	r2, pc, #4	; (adr r2, 8004bc0 <UART_SetConfig+0x2f0>)
 8004bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc0:	08004bd9 	.word	0x08004bd9
 8004bc4:	08004be1 	.word	0x08004be1
 8004bc8:	08004be9 	.word	0x08004be9
 8004bcc:	08004bf1 	.word	0x08004bf1
 8004bd0:	08004c1d 	.word	0x08004c1d
 8004bd4:	08004c25 	.word	0x08004c25
 8004bd8:	2300      	movs	r3, #0
 8004bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bde:	e14a      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004be0:	2304      	movs	r3, #4
 8004be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004be6:	e146      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004be8:	2308      	movs	r3, #8
 8004bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bee:	e142      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004bf0:	2310      	movs	r3, #16
 8004bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bf6:	e13e      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004bf8:	cfff69f3 	.word	0xcfff69f3
 8004bfc:	58000c00 	.word	0x58000c00
 8004c00:	11fff4ff 	.word	0x11fff4ff
 8004c04:	40011000 	.word	0x40011000
 8004c08:	58024400 	.word	0x58024400
 8004c0c:	40004400 	.word	0x40004400
 8004c10:	40004800 	.word	0x40004800
 8004c14:	40004c00 	.word	0x40004c00
 8004c18:	40005000 	.word	0x40005000
 8004c1c:	2320      	movs	r3, #32
 8004c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c22:	e128      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004c24:	2340      	movs	r3, #64	; 0x40
 8004c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c2a:	e124      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004c2c:	2380      	movs	r3, #128	; 0x80
 8004c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c32:	e120      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4acb      	ldr	r2, [pc, #812]	; (8004f68 <UART_SetConfig+0x698>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d176      	bne.n	8004d2c <UART_SetConfig+0x45c>
 8004c3e:	4bcb      	ldr	r3, [pc, #812]	; (8004f6c <UART_SetConfig+0x69c>)
 8004c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c46:	2b28      	cmp	r3, #40	; 0x28
 8004c48:	d86c      	bhi.n	8004d24 <UART_SetConfig+0x454>
 8004c4a:	a201      	add	r2, pc, #4	; (adr r2, 8004c50 <UART_SetConfig+0x380>)
 8004c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c50:	08004cf5 	.word	0x08004cf5
 8004c54:	08004d25 	.word	0x08004d25
 8004c58:	08004d25 	.word	0x08004d25
 8004c5c:	08004d25 	.word	0x08004d25
 8004c60:	08004d25 	.word	0x08004d25
 8004c64:	08004d25 	.word	0x08004d25
 8004c68:	08004d25 	.word	0x08004d25
 8004c6c:	08004d25 	.word	0x08004d25
 8004c70:	08004cfd 	.word	0x08004cfd
 8004c74:	08004d25 	.word	0x08004d25
 8004c78:	08004d25 	.word	0x08004d25
 8004c7c:	08004d25 	.word	0x08004d25
 8004c80:	08004d25 	.word	0x08004d25
 8004c84:	08004d25 	.word	0x08004d25
 8004c88:	08004d25 	.word	0x08004d25
 8004c8c:	08004d25 	.word	0x08004d25
 8004c90:	08004d05 	.word	0x08004d05
 8004c94:	08004d25 	.word	0x08004d25
 8004c98:	08004d25 	.word	0x08004d25
 8004c9c:	08004d25 	.word	0x08004d25
 8004ca0:	08004d25 	.word	0x08004d25
 8004ca4:	08004d25 	.word	0x08004d25
 8004ca8:	08004d25 	.word	0x08004d25
 8004cac:	08004d25 	.word	0x08004d25
 8004cb0:	08004d0d 	.word	0x08004d0d
 8004cb4:	08004d25 	.word	0x08004d25
 8004cb8:	08004d25 	.word	0x08004d25
 8004cbc:	08004d25 	.word	0x08004d25
 8004cc0:	08004d25 	.word	0x08004d25
 8004cc4:	08004d25 	.word	0x08004d25
 8004cc8:	08004d25 	.word	0x08004d25
 8004ccc:	08004d25 	.word	0x08004d25
 8004cd0:	08004d15 	.word	0x08004d15
 8004cd4:	08004d25 	.word	0x08004d25
 8004cd8:	08004d25 	.word	0x08004d25
 8004cdc:	08004d25 	.word	0x08004d25
 8004ce0:	08004d25 	.word	0x08004d25
 8004ce4:	08004d25 	.word	0x08004d25
 8004ce8:	08004d25 	.word	0x08004d25
 8004cec:	08004d25 	.word	0x08004d25
 8004cf0:	08004d1d 	.word	0x08004d1d
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cfa:	e0bc      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004cfc:	2304      	movs	r3, #4
 8004cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d02:	e0b8      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004d04:	2308      	movs	r3, #8
 8004d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d0a:	e0b4      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004d0c:	2310      	movs	r3, #16
 8004d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d12:	e0b0      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004d14:	2320      	movs	r3, #32
 8004d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d1a:	e0ac      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004d1c:	2340      	movs	r3, #64	; 0x40
 8004d1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d22:	e0a8      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004d24:	2380      	movs	r3, #128	; 0x80
 8004d26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d2a:	e0a4      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a8f      	ldr	r2, [pc, #572]	; (8004f70 <UART_SetConfig+0x6a0>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d130      	bne.n	8004d98 <UART_SetConfig+0x4c8>
 8004d36:	4b8d      	ldr	r3, [pc, #564]	; (8004f6c <UART_SetConfig+0x69c>)
 8004d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d3a:	f003 0307 	and.w	r3, r3, #7
 8004d3e:	2b05      	cmp	r3, #5
 8004d40:	d826      	bhi.n	8004d90 <UART_SetConfig+0x4c0>
 8004d42:	a201      	add	r2, pc, #4	; (adr r2, 8004d48 <UART_SetConfig+0x478>)
 8004d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d48:	08004d61 	.word	0x08004d61
 8004d4c:	08004d69 	.word	0x08004d69
 8004d50:	08004d71 	.word	0x08004d71
 8004d54:	08004d79 	.word	0x08004d79
 8004d58:	08004d81 	.word	0x08004d81
 8004d5c:	08004d89 	.word	0x08004d89
 8004d60:	2300      	movs	r3, #0
 8004d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d66:	e086      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004d68:	2304      	movs	r3, #4
 8004d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d6e:	e082      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004d70:	2308      	movs	r3, #8
 8004d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d76:	e07e      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004d78:	2310      	movs	r3, #16
 8004d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d7e:	e07a      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004d80:	2320      	movs	r3, #32
 8004d82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d86:	e076      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004d88:	2340      	movs	r3, #64	; 0x40
 8004d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d8e:	e072      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004d90:	2380      	movs	r3, #128	; 0x80
 8004d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d96:	e06e      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a75      	ldr	r2, [pc, #468]	; (8004f74 <UART_SetConfig+0x6a4>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d130      	bne.n	8004e04 <UART_SetConfig+0x534>
 8004da2:	4b72      	ldr	r3, [pc, #456]	; (8004f6c <UART_SetConfig+0x69c>)
 8004da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da6:	f003 0307 	and.w	r3, r3, #7
 8004daa:	2b05      	cmp	r3, #5
 8004dac:	d826      	bhi.n	8004dfc <UART_SetConfig+0x52c>
 8004dae:	a201      	add	r2, pc, #4	; (adr r2, 8004db4 <UART_SetConfig+0x4e4>)
 8004db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db4:	08004dcd 	.word	0x08004dcd
 8004db8:	08004dd5 	.word	0x08004dd5
 8004dbc:	08004ddd 	.word	0x08004ddd
 8004dc0:	08004de5 	.word	0x08004de5
 8004dc4:	08004ded 	.word	0x08004ded
 8004dc8:	08004df5 	.word	0x08004df5
 8004dcc:	2300      	movs	r3, #0
 8004dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dd2:	e050      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004dd4:	2304      	movs	r3, #4
 8004dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dda:	e04c      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004ddc:	2308      	movs	r3, #8
 8004dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004de2:	e048      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004de4:	2310      	movs	r3, #16
 8004de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dea:	e044      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004dec:	2320      	movs	r3, #32
 8004dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004df2:	e040      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004df4:	2340      	movs	r3, #64	; 0x40
 8004df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dfa:	e03c      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004dfc:	2380      	movs	r3, #128	; 0x80
 8004dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e02:	e038      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a5b      	ldr	r2, [pc, #364]	; (8004f78 <UART_SetConfig+0x6a8>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d130      	bne.n	8004e70 <UART_SetConfig+0x5a0>
 8004e0e:	4b57      	ldr	r3, [pc, #348]	; (8004f6c <UART_SetConfig+0x69c>)
 8004e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e12:	f003 0307 	and.w	r3, r3, #7
 8004e16:	2b05      	cmp	r3, #5
 8004e18:	d826      	bhi.n	8004e68 <UART_SetConfig+0x598>
 8004e1a:	a201      	add	r2, pc, #4	; (adr r2, 8004e20 <UART_SetConfig+0x550>)
 8004e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e20:	08004e39 	.word	0x08004e39
 8004e24:	08004e41 	.word	0x08004e41
 8004e28:	08004e49 	.word	0x08004e49
 8004e2c:	08004e51 	.word	0x08004e51
 8004e30:	08004e59 	.word	0x08004e59
 8004e34:	08004e61 	.word	0x08004e61
 8004e38:	2302      	movs	r3, #2
 8004e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e3e:	e01a      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004e40:	2304      	movs	r3, #4
 8004e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e46:	e016      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004e48:	2308      	movs	r3, #8
 8004e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e4e:	e012      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004e50:	2310      	movs	r3, #16
 8004e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e56:	e00e      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004e58:	2320      	movs	r3, #32
 8004e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e5e:	e00a      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004e60:	2340      	movs	r3, #64	; 0x40
 8004e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e66:	e006      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004e68:	2380      	movs	r3, #128	; 0x80
 8004e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e6e:	e002      	b.n	8004e76 <UART_SetConfig+0x5a6>
 8004e70:	2380      	movs	r3, #128	; 0x80
 8004e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a3f      	ldr	r2, [pc, #252]	; (8004f78 <UART_SetConfig+0x6a8>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	f040 80f8 	bne.w	8005072 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e82:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004e86:	2b20      	cmp	r3, #32
 8004e88:	dc46      	bgt.n	8004f18 <UART_SetConfig+0x648>
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	f2c0 8082 	blt.w	8004f94 <UART_SetConfig+0x6c4>
 8004e90:	3b02      	subs	r3, #2
 8004e92:	2b1e      	cmp	r3, #30
 8004e94:	d87e      	bhi.n	8004f94 <UART_SetConfig+0x6c4>
 8004e96:	a201      	add	r2, pc, #4	; (adr r2, 8004e9c <UART_SetConfig+0x5cc>)
 8004e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e9c:	08004f1f 	.word	0x08004f1f
 8004ea0:	08004f95 	.word	0x08004f95
 8004ea4:	08004f27 	.word	0x08004f27
 8004ea8:	08004f95 	.word	0x08004f95
 8004eac:	08004f95 	.word	0x08004f95
 8004eb0:	08004f95 	.word	0x08004f95
 8004eb4:	08004f37 	.word	0x08004f37
 8004eb8:	08004f95 	.word	0x08004f95
 8004ebc:	08004f95 	.word	0x08004f95
 8004ec0:	08004f95 	.word	0x08004f95
 8004ec4:	08004f95 	.word	0x08004f95
 8004ec8:	08004f95 	.word	0x08004f95
 8004ecc:	08004f95 	.word	0x08004f95
 8004ed0:	08004f95 	.word	0x08004f95
 8004ed4:	08004f47 	.word	0x08004f47
 8004ed8:	08004f95 	.word	0x08004f95
 8004edc:	08004f95 	.word	0x08004f95
 8004ee0:	08004f95 	.word	0x08004f95
 8004ee4:	08004f95 	.word	0x08004f95
 8004ee8:	08004f95 	.word	0x08004f95
 8004eec:	08004f95 	.word	0x08004f95
 8004ef0:	08004f95 	.word	0x08004f95
 8004ef4:	08004f95 	.word	0x08004f95
 8004ef8:	08004f95 	.word	0x08004f95
 8004efc:	08004f95 	.word	0x08004f95
 8004f00:	08004f95 	.word	0x08004f95
 8004f04:	08004f95 	.word	0x08004f95
 8004f08:	08004f95 	.word	0x08004f95
 8004f0c:	08004f95 	.word	0x08004f95
 8004f10:	08004f95 	.word	0x08004f95
 8004f14:	08004f87 	.word	0x08004f87
 8004f18:	2b40      	cmp	r3, #64	; 0x40
 8004f1a:	d037      	beq.n	8004f8c <UART_SetConfig+0x6bc>
 8004f1c:	e03a      	b.n	8004f94 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004f1e:	f7ff f865 	bl	8003fec <HAL_RCCEx_GetD3PCLK1Freq>
 8004f22:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004f24:	e03c      	b.n	8004fa0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7ff f874 	bl	8004018 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f34:	e034      	b.n	8004fa0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f36:	f107 0318 	add.w	r3, r7, #24
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7ff f9c0 	bl	80042c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f44:	e02c      	b.n	8004fa0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f46:	4b09      	ldr	r3, [pc, #36]	; (8004f6c <UART_SetConfig+0x69c>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0320 	and.w	r3, r3, #32
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d016      	beq.n	8004f80 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004f52:	4b06      	ldr	r3, [pc, #24]	; (8004f6c <UART_SetConfig+0x69c>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	08db      	lsrs	r3, r3, #3
 8004f58:	f003 0303 	and.w	r3, r3, #3
 8004f5c:	4a07      	ldr	r2, [pc, #28]	; (8004f7c <UART_SetConfig+0x6ac>)
 8004f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004f64:	e01c      	b.n	8004fa0 <UART_SetConfig+0x6d0>
 8004f66:	bf00      	nop
 8004f68:	40011400 	.word	0x40011400
 8004f6c:	58024400 	.word	0x58024400
 8004f70:	40007800 	.word	0x40007800
 8004f74:	40007c00 	.word	0x40007c00
 8004f78:	58000c00 	.word	0x58000c00
 8004f7c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004f80:	4b9d      	ldr	r3, [pc, #628]	; (80051f8 <UART_SetConfig+0x928>)
 8004f82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f84:	e00c      	b.n	8004fa0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004f86:	4b9d      	ldr	r3, [pc, #628]	; (80051fc <UART_SetConfig+0x92c>)
 8004f88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f8a:	e009      	b.n	8004fa0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f92:	e005      	b.n	8004fa0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004f94:	2300      	movs	r3, #0
 8004f96:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004f9e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f000 81de 	beq.w	8005364 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fac:	4a94      	ldr	r2, [pc, #592]	; (8005200 <UART_SetConfig+0x930>)
 8004fae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fb6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fba:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	685a      	ldr	r2, [r3, #4]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	005b      	lsls	r3, r3, #1
 8004fc4:	4413      	add	r3, r2
 8004fc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d305      	bcc.n	8004fd8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004fd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d903      	bls.n	8004fe0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004fde:	e1c1      	b.n	8005364 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	60bb      	str	r3, [r7, #8]
 8004fe6:	60fa      	str	r2, [r7, #12]
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fec:	4a84      	ldr	r2, [pc, #528]	; (8005200 <UART_SetConfig+0x930>)
 8004fee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	603b      	str	r3, [r7, #0]
 8004ff8:	607a      	str	r2, [r7, #4]
 8004ffa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ffe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005002:	f7fb f969 	bl	80002d8 <__aeabi_uldivmod>
 8005006:	4602      	mov	r2, r0
 8005008:	460b      	mov	r3, r1
 800500a:	4610      	mov	r0, r2
 800500c:	4619      	mov	r1, r3
 800500e:	f04f 0200 	mov.w	r2, #0
 8005012:	f04f 0300 	mov.w	r3, #0
 8005016:	020b      	lsls	r3, r1, #8
 8005018:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800501c:	0202      	lsls	r2, r0, #8
 800501e:	6979      	ldr	r1, [r7, #20]
 8005020:	6849      	ldr	r1, [r1, #4]
 8005022:	0849      	lsrs	r1, r1, #1
 8005024:	2000      	movs	r0, #0
 8005026:	460c      	mov	r4, r1
 8005028:	4605      	mov	r5, r0
 800502a:	eb12 0804 	adds.w	r8, r2, r4
 800502e:	eb43 0905 	adc.w	r9, r3, r5
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	469a      	mov	sl, r3
 800503a:	4693      	mov	fp, r2
 800503c:	4652      	mov	r2, sl
 800503e:	465b      	mov	r3, fp
 8005040:	4640      	mov	r0, r8
 8005042:	4649      	mov	r1, r9
 8005044:	f7fb f948 	bl	80002d8 <__aeabi_uldivmod>
 8005048:	4602      	mov	r2, r0
 800504a:	460b      	mov	r3, r1
 800504c:	4613      	mov	r3, r2
 800504e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005052:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005056:	d308      	bcc.n	800506a <UART_SetConfig+0x79a>
 8005058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800505e:	d204      	bcs.n	800506a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005066:	60da      	str	r2, [r3, #12]
 8005068:	e17c      	b.n	8005364 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005070:	e178      	b.n	8005364 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	69db      	ldr	r3, [r3, #28]
 8005076:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800507a:	f040 80c5 	bne.w	8005208 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800507e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005082:	2b20      	cmp	r3, #32
 8005084:	dc48      	bgt.n	8005118 <UART_SetConfig+0x848>
 8005086:	2b00      	cmp	r3, #0
 8005088:	db7b      	blt.n	8005182 <UART_SetConfig+0x8b2>
 800508a:	2b20      	cmp	r3, #32
 800508c:	d879      	bhi.n	8005182 <UART_SetConfig+0x8b2>
 800508e:	a201      	add	r2, pc, #4	; (adr r2, 8005094 <UART_SetConfig+0x7c4>)
 8005090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005094:	0800511f 	.word	0x0800511f
 8005098:	08005127 	.word	0x08005127
 800509c:	08005183 	.word	0x08005183
 80050a0:	08005183 	.word	0x08005183
 80050a4:	0800512f 	.word	0x0800512f
 80050a8:	08005183 	.word	0x08005183
 80050ac:	08005183 	.word	0x08005183
 80050b0:	08005183 	.word	0x08005183
 80050b4:	0800513f 	.word	0x0800513f
 80050b8:	08005183 	.word	0x08005183
 80050bc:	08005183 	.word	0x08005183
 80050c0:	08005183 	.word	0x08005183
 80050c4:	08005183 	.word	0x08005183
 80050c8:	08005183 	.word	0x08005183
 80050cc:	08005183 	.word	0x08005183
 80050d0:	08005183 	.word	0x08005183
 80050d4:	0800514f 	.word	0x0800514f
 80050d8:	08005183 	.word	0x08005183
 80050dc:	08005183 	.word	0x08005183
 80050e0:	08005183 	.word	0x08005183
 80050e4:	08005183 	.word	0x08005183
 80050e8:	08005183 	.word	0x08005183
 80050ec:	08005183 	.word	0x08005183
 80050f0:	08005183 	.word	0x08005183
 80050f4:	08005183 	.word	0x08005183
 80050f8:	08005183 	.word	0x08005183
 80050fc:	08005183 	.word	0x08005183
 8005100:	08005183 	.word	0x08005183
 8005104:	08005183 	.word	0x08005183
 8005108:	08005183 	.word	0x08005183
 800510c:	08005183 	.word	0x08005183
 8005110:	08005183 	.word	0x08005183
 8005114:	08005175 	.word	0x08005175
 8005118:	2b40      	cmp	r3, #64	; 0x40
 800511a:	d02e      	beq.n	800517a <UART_SetConfig+0x8aa>
 800511c:	e031      	b.n	8005182 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800511e:	f7fd fff3 	bl	8003108 <HAL_RCC_GetPCLK1Freq>
 8005122:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005124:	e033      	b.n	800518e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005126:	f7fe f805 	bl	8003134 <HAL_RCC_GetPCLK2Freq>
 800512a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800512c:	e02f      	b.n	800518e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800512e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005132:	4618      	mov	r0, r3
 8005134:	f7fe ff70 	bl	8004018 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800513c:	e027      	b.n	800518e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800513e:	f107 0318 	add.w	r3, r7, #24
 8005142:	4618      	mov	r0, r3
 8005144:	f7ff f8bc 	bl	80042c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800514c:	e01f      	b.n	800518e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800514e:	4b2d      	ldr	r3, [pc, #180]	; (8005204 <UART_SetConfig+0x934>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0320 	and.w	r3, r3, #32
 8005156:	2b00      	cmp	r3, #0
 8005158:	d009      	beq.n	800516e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800515a:	4b2a      	ldr	r3, [pc, #168]	; (8005204 <UART_SetConfig+0x934>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	08db      	lsrs	r3, r3, #3
 8005160:	f003 0303 	and.w	r3, r3, #3
 8005164:	4a24      	ldr	r2, [pc, #144]	; (80051f8 <UART_SetConfig+0x928>)
 8005166:	fa22 f303 	lsr.w	r3, r2, r3
 800516a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800516c:	e00f      	b.n	800518e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800516e:	4b22      	ldr	r3, [pc, #136]	; (80051f8 <UART_SetConfig+0x928>)
 8005170:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005172:	e00c      	b.n	800518e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005174:	4b21      	ldr	r3, [pc, #132]	; (80051fc <UART_SetConfig+0x92c>)
 8005176:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005178:	e009      	b.n	800518e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800517a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800517e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005180:	e005      	b.n	800518e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005182:	2300      	movs	r3, #0
 8005184:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800518c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800518e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005190:	2b00      	cmp	r3, #0
 8005192:	f000 80e7 	beq.w	8005364 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519a:	4a19      	ldr	r2, [pc, #100]	; (8005200 <UART_SetConfig+0x930>)
 800519c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051a0:	461a      	mov	r2, r3
 80051a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80051a8:	005a      	lsls	r2, r3, #1
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	085b      	lsrs	r3, r3, #1
 80051b0:	441a      	add	r2, r3
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ba:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051be:	2b0f      	cmp	r3, #15
 80051c0:	d916      	bls.n	80051f0 <UART_SetConfig+0x920>
 80051c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051c8:	d212      	bcs.n	80051f0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	f023 030f 	bic.w	r3, r3, #15
 80051d2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d6:	085b      	lsrs	r3, r3, #1
 80051d8:	b29b      	uxth	r3, r3
 80051da:	f003 0307 	and.w	r3, r3, #7
 80051de:	b29a      	uxth	r2, r3
 80051e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80051e2:	4313      	orrs	r3, r2
 80051e4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80051ec:	60da      	str	r2, [r3, #12]
 80051ee:	e0b9      	b.n	8005364 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80051f6:	e0b5      	b.n	8005364 <UART_SetConfig+0xa94>
 80051f8:	03d09000 	.word	0x03d09000
 80051fc:	003d0900 	.word	0x003d0900
 8005200:	08005fa4 	.word	0x08005fa4
 8005204:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005208:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800520c:	2b20      	cmp	r3, #32
 800520e:	dc49      	bgt.n	80052a4 <UART_SetConfig+0x9d4>
 8005210:	2b00      	cmp	r3, #0
 8005212:	db7c      	blt.n	800530e <UART_SetConfig+0xa3e>
 8005214:	2b20      	cmp	r3, #32
 8005216:	d87a      	bhi.n	800530e <UART_SetConfig+0xa3e>
 8005218:	a201      	add	r2, pc, #4	; (adr r2, 8005220 <UART_SetConfig+0x950>)
 800521a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800521e:	bf00      	nop
 8005220:	080052ab 	.word	0x080052ab
 8005224:	080052b3 	.word	0x080052b3
 8005228:	0800530f 	.word	0x0800530f
 800522c:	0800530f 	.word	0x0800530f
 8005230:	080052bb 	.word	0x080052bb
 8005234:	0800530f 	.word	0x0800530f
 8005238:	0800530f 	.word	0x0800530f
 800523c:	0800530f 	.word	0x0800530f
 8005240:	080052cb 	.word	0x080052cb
 8005244:	0800530f 	.word	0x0800530f
 8005248:	0800530f 	.word	0x0800530f
 800524c:	0800530f 	.word	0x0800530f
 8005250:	0800530f 	.word	0x0800530f
 8005254:	0800530f 	.word	0x0800530f
 8005258:	0800530f 	.word	0x0800530f
 800525c:	0800530f 	.word	0x0800530f
 8005260:	080052db 	.word	0x080052db
 8005264:	0800530f 	.word	0x0800530f
 8005268:	0800530f 	.word	0x0800530f
 800526c:	0800530f 	.word	0x0800530f
 8005270:	0800530f 	.word	0x0800530f
 8005274:	0800530f 	.word	0x0800530f
 8005278:	0800530f 	.word	0x0800530f
 800527c:	0800530f 	.word	0x0800530f
 8005280:	0800530f 	.word	0x0800530f
 8005284:	0800530f 	.word	0x0800530f
 8005288:	0800530f 	.word	0x0800530f
 800528c:	0800530f 	.word	0x0800530f
 8005290:	0800530f 	.word	0x0800530f
 8005294:	0800530f 	.word	0x0800530f
 8005298:	0800530f 	.word	0x0800530f
 800529c:	0800530f 	.word	0x0800530f
 80052a0:	08005301 	.word	0x08005301
 80052a4:	2b40      	cmp	r3, #64	; 0x40
 80052a6:	d02e      	beq.n	8005306 <UART_SetConfig+0xa36>
 80052a8:	e031      	b.n	800530e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052aa:	f7fd ff2d 	bl	8003108 <HAL_RCC_GetPCLK1Freq>
 80052ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80052b0:	e033      	b.n	800531a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052b2:	f7fd ff3f 	bl	8003134 <HAL_RCC_GetPCLK2Freq>
 80052b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80052b8:	e02f      	b.n	800531a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052be:	4618      	mov	r0, r3
 80052c0:	f7fe feaa 	bl	8004018 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80052c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80052c8:	e027      	b.n	800531a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052ca:	f107 0318 	add.w	r3, r7, #24
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7fe fff6 	bl	80042c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80052d8:	e01f      	b.n	800531a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052da:	4b2d      	ldr	r3, [pc, #180]	; (8005390 <UART_SetConfig+0xac0>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 0320 	and.w	r3, r3, #32
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d009      	beq.n	80052fa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80052e6:	4b2a      	ldr	r3, [pc, #168]	; (8005390 <UART_SetConfig+0xac0>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	08db      	lsrs	r3, r3, #3
 80052ec:	f003 0303 	and.w	r3, r3, #3
 80052f0:	4a28      	ldr	r2, [pc, #160]	; (8005394 <UART_SetConfig+0xac4>)
 80052f2:	fa22 f303 	lsr.w	r3, r2, r3
 80052f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80052f8:	e00f      	b.n	800531a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80052fa:	4b26      	ldr	r3, [pc, #152]	; (8005394 <UART_SetConfig+0xac4>)
 80052fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80052fe:	e00c      	b.n	800531a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005300:	4b25      	ldr	r3, [pc, #148]	; (8005398 <UART_SetConfig+0xac8>)
 8005302:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005304:	e009      	b.n	800531a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800530a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800530c:	e005      	b.n	800531a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800530e:	2300      	movs	r3, #0
 8005310:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005318:	bf00      	nop
    }

    if (pclk != 0U)
 800531a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800531c:	2b00      	cmp	r3, #0
 800531e:	d021      	beq.n	8005364 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005324:	4a1d      	ldr	r2, [pc, #116]	; (800539c <UART_SetConfig+0xacc>)
 8005326:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800532a:	461a      	mov	r2, r3
 800532c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800532e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	085b      	lsrs	r3, r3, #1
 8005338:	441a      	add	r2, r3
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005342:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005346:	2b0f      	cmp	r3, #15
 8005348:	d909      	bls.n	800535e <UART_SetConfig+0xa8e>
 800534a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800534c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005350:	d205      	bcs.n	800535e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005354:	b29a      	uxth	r2, r3
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	60da      	str	r2, [r3, #12]
 800535c:	e002      	b.n	8005364 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	2201      	movs	r2, #1
 8005368:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	2201      	movs	r2, #1
 8005370:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	2200      	movs	r2, #0
 8005378:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	2200      	movs	r2, #0
 800537e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005380:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005384:	4618      	mov	r0, r3
 8005386:	3748      	adds	r7, #72	; 0x48
 8005388:	46bd      	mov	sp, r7
 800538a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800538e:	bf00      	nop
 8005390:	58024400 	.word	0x58024400
 8005394:	03d09000 	.word	0x03d09000
 8005398:	003d0900 	.word	0x003d0900
 800539c:	08005fa4 	.word	0x08005fa4

080053a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00a      	beq.n	80053ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	430a      	orrs	r2, r1
 80053c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00a      	beq.n	80053ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	430a      	orrs	r2, r1
 80053ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f0:	f003 0304 	and.w	r3, r3, #4
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00a      	beq.n	800540e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	430a      	orrs	r2, r1
 800540c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005412:	f003 0308 	and.w	r3, r3, #8
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00a      	beq.n	8005430 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	430a      	orrs	r2, r1
 800542e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005434:	f003 0310 	and.w	r3, r3, #16
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00a      	beq.n	8005452 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	430a      	orrs	r2, r1
 8005450:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005456:	f003 0320 	and.w	r3, r3, #32
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00a      	beq.n	8005474 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	430a      	orrs	r2, r1
 8005472:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800547c:	2b00      	cmp	r3, #0
 800547e:	d01a      	beq.n	80054b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	430a      	orrs	r2, r1
 8005494:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800549a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800549e:	d10a      	bne.n	80054b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	430a      	orrs	r2, r1
 80054b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00a      	beq.n	80054d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	430a      	orrs	r2, r1
 80054d6:	605a      	str	r2, [r3, #4]
  }
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b086      	sub	sp, #24
 80054e8:	af02      	add	r7, sp, #8
 80054ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054f4:	f7fb fdc6 	bl	8001084 <HAL_GetTick>
 80054f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0308 	and.w	r3, r3, #8
 8005504:	2b08      	cmp	r3, #8
 8005506:	d10e      	bne.n	8005526 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005508:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f82f 	bl	800557a <UART_WaitOnFlagUntilTimeout>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d001      	beq.n	8005526 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e025      	b.n	8005572 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0304 	and.w	r3, r3, #4
 8005530:	2b04      	cmp	r3, #4
 8005532:	d10e      	bne.n	8005552 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005534:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005538:	9300      	str	r3, [sp, #0]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 f819 	bl	800557a <UART_WaitOnFlagUntilTimeout>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d001      	beq.n	8005552 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e00f      	b.n	8005572 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2220      	movs	r2, #32
 8005556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2220      	movs	r2, #32
 800555e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b09c      	sub	sp, #112	; 0x70
 800557e:	af00      	add	r7, sp, #0
 8005580:	60f8      	str	r0, [r7, #12]
 8005582:	60b9      	str	r1, [r7, #8]
 8005584:	603b      	str	r3, [r7, #0]
 8005586:	4613      	mov	r3, r2
 8005588:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800558a:	e0a9      	b.n	80056e0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800558c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800558e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005592:	f000 80a5 	beq.w	80056e0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005596:	f7fb fd75 	bl	8001084 <HAL_GetTick>
 800559a:	4602      	mov	r2, r0
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d302      	bcc.n	80055ac <UART_WaitOnFlagUntilTimeout+0x32>
 80055a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d140      	bne.n	800562e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055b4:	e853 3f00 	ldrex	r3, [r3]
 80055b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80055ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055c0:	667b      	str	r3, [r7, #100]	; 0x64
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	461a      	mov	r2, r3
 80055c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055cc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80055d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80055d2:	e841 2300 	strex	r3, r2, [r1]
 80055d6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80055d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d1e6      	bne.n	80055ac <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	3308      	adds	r3, #8
 80055e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055e8:	e853 3f00 	ldrex	r3, [r3]
 80055ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f0:	f023 0301 	bic.w	r3, r3, #1
 80055f4:	663b      	str	r3, [r7, #96]	; 0x60
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	3308      	adds	r3, #8
 80055fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80055fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8005600:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005602:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005604:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005606:	e841 2300 	strex	r3, r2, [r1]
 800560a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800560c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1e5      	bne.n	80055de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2220      	movs	r2, #32
 8005616:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2220      	movs	r2, #32
 800561e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e069      	b.n	8005702 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0304 	and.w	r3, r3, #4
 8005638:	2b00      	cmp	r3, #0
 800563a:	d051      	beq.n	80056e0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	69db      	ldr	r3, [r3, #28]
 8005642:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005646:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800564a:	d149      	bne.n	80056e0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005654:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565e:	e853 3f00 	ldrex	r3, [r3]
 8005662:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005666:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800566a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	461a      	mov	r2, r3
 8005672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005674:	637b      	str	r3, [r7, #52]	; 0x34
 8005676:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005678:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800567a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800567c:	e841 2300 	strex	r3, r2, [r1]
 8005680:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1e6      	bne.n	8005656 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	3308      	adds	r3, #8
 800568e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	e853 3f00 	ldrex	r3, [r3]
 8005696:	613b      	str	r3, [r7, #16]
   return(result);
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	f023 0301 	bic.w	r3, r3, #1
 800569e:	66bb      	str	r3, [r7, #104]	; 0x68
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	3308      	adds	r3, #8
 80056a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80056a8:	623a      	str	r2, [r7, #32]
 80056aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ac:	69f9      	ldr	r1, [r7, #28]
 80056ae:	6a3a      	ldr	r2, [r7, #32]
 80056b0:	e841 2300 	strex	r3, r2, [r1]
 80056b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d1e5      	bne.n	8005688 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2220      	movs	r2, #32
 80056c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2220      	movs	r2, #32
 80056c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2220      	movs	r2, #32
 80056d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e010      	b.n	8005702 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	69da      	ldr	r2, [r3, #28]
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	4013      	ands	r3, r2
 80056ea:	68ba      	ldr	r2, [r7, #8]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	bf0c      	ite	eq
 80056f0:	2301      	moveq	r3, #1
 80056f2:	2300      	movne	r3, #0
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	461a      	mov	r2, r3
 80056f8:	79fb      	ldrb	r3, [r7, #7]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	f43f af46 	beq.w	800558c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	3770      	adds	r7, #112	; 0x70
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800570a:	b480      	push	{r7}
 800570c:	b085      	sub	sp, #20
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005718:	2b01      	cmp	r3, #1
 800571a:	d101      	bne.n	8005720 <HAL_UARTEx_DisableFifoMode+0x16>
 800571c:	2302      	movs	r3, #2
 800571e:	e027      	b.n	8005770 <HAL_UARTEx_DisableFifoMode+0x66>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2224      	movs	r2, #36	; 0x24
 800572c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f022 0201 	bic.w	r2, r2, #1
 8005746:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800574e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2220      	movs	r2, #32
 8005762:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3714      	adds	r7, #20
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800578c:	2b01      	cmp	r3, #1
 800578e:	d101      	bne.n	8005794 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005790:	2302      	movs	r3, #2
 8005792:	e02d      	b.n	80057f0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2224      	movs	r2, #36	; 0x24
 80057a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f022 0201 	bic.w	r2, r2, #1
 80057ba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	683a      	ldr	r2, [r7, #0]
 80057cc:	430a      	orrs	r2, r1
 80057ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 f84f 	bl	8005874 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2220      	movs	r2, #32
 80057e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3710      	adds	r7, #16
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005808:	2b01      	cmp	r3, #1
 800580a:	d101      	bne.n	8005810 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800580c:	2302      	movs	r3, #2
 800580e:	e02d      	b.n	800586c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2224      	movs	r2, #36	; 0x24
 800581c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f022 0201 	bic.w	r2, r2, #1
 8005836:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	683a      	ldr	r2, [r7, #0]
 8005848:	430a      	orrs	r2, r1
 800584a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 f811 	bl	8005874 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2220      	movs	r2, #32
 800585e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	3710      	adds	r7, #16
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005874:	b480      	push	{r7}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005880:	2b00      	cmp	r3, #0
 8005882:	d108      	bne.n	8005896 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005894:	e031      	b.n	80058fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005896:	2310      	movs	r3, #16
 8005898:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800589a:	2310      	movs	r3, #16
 800589c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	0e5b      	lsrs	r3, r3, #25
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	f003 0307 	and.w	r3, r3, #7
 80058ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	0f5b      	lsrs	r3, r3, #29
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	f003 0307 	and.w	r3, r3, #7
 80058bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80058be:	7bbb      	ldrb	r3, [r7, #14]
 80058c0:	7b3a      	ldrb	r2, [r7, #12]
 80058c2:	4911      	ldr	r1, [pc, #68]	; (8005908 <UARTEx_SetNbDataToProcess+0x94>)
 80058c4:	5c8a      	ldrb	r2, [r1, r2]
 80058c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80058ca:	7b3a      	ldrb	r2, [r7, #12]
 80058cc:	490f      	ldr	r1, [pc, #60]	; (800590c <UARTEx_SetNbDataToProcess+0x98>)
 80058ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80058d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80058d4:	b29a      	uxth	r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058dc:	7bfb      	ldrb	r3, [r7, #15]
 80058de:	7b7a      	ldrb	r2, [r7, #13]
 80058e0:	4909      	ldr	r1, [pc, #36]	; (8005908 <UARTEx_SetNbDataToProcess+0x94>)
 80058e2:	5c8a      	ldrb	r2, [r1, r2]
 80058e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80058e8:	7b7a      	ldrb	r2, [r7, #13]
 80058ea:	4908      	ldr	r1, [pc, #32]	; (800590c <UARTEx_SetNbDataToProcess+0x98>)
 80058ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80058fa:	bf00      	nop
 80058fc:	3714      	adds	r7, #20
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	08005fbc 	.word	0x08005fbc
 800590c:	08005fc4 	.word	0x08005fc4

08005910 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005910:	b084      	sub	sp, #16
 8005912:	b580      	push	{r7, lr}
 8005914:	b084      	sub	sp, #16
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
 800591a:	f107 001c 	add.w	r0, r7, #28
 800591e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005924:	2b01      	cmp	r3, #1
 8005926:	d120      	bne.n	800596a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	68da      	ldr	r2, [r3, #12]
 8005938:	4b2a      	ldr	r3, [pc, #168]	; (80059e4 <USB_CoreInit+0xd4>)
 800593a:	4013      	ands	r3, r2
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800594c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800594e:	2b01      	cmp	r3, #1
 8005950:	d105      	bne.n	800595e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 faac 	bl	8005ebc <USB_CoreReset>
 8005964:	4603      	mov	r3, r0
 8005966:	73fb      	strb	r3, [r7, #15]
 8005968:	e01a      	b.n	80059a0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 faa0 	bl	8005ebc <USB_CoreReset>
 800597c:	4603      	mov	r3, r0
 800597e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005982:	2b00      	cmp	r3, #0
 8005984:	d106      	bne.n	8005994 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	639a      	str	r2, [r3, #56]	; 0x38
 8005992:	e005      	b.n	80059a0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005998:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80059a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d116      	bne.n	80059d4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059aa:	b29a      	uxth	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80059b4:	4b0c      	ldr	r3, [pc, #48]	; (80059e8 <USB_CoreInit+0xd8>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f043 0206 	orr.w	r2, r3, #6
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	f043 0220 	orr.w	r2, r3, #32
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80059d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059e0:	b004      	add	sp, #16
 80059e2:	4770      	bx	lr
 80059e4:	ffbdffbf 	.word	0xffbdffbf
 80059e8:	03ee0000 	.word	0x03ee0000

080059ec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f023 0201 	bic.w	r2, r3, #1
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	370c      	adds	r7, #12
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr

08005a0e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b084      	sub	sp, #16
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
 8005a16:	460b      	mov	r3, r1
 8005a18:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a2a:	78fb      	ldrb	r3, [r7, #3]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d115      	bne.n	8005a5c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005a3c:	2001      	movs	r0, #1
 8005a3e:	f7fb fb2d 	bl	800109c <HAL_Delay>
      ms++;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	3301      	adds	r3, #1
 8005a46:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 fa29 	bl	8005ea0 <USB_GetMode>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d01e      	beq.n	8005a92 <USB_SetCurrentMode+0x84>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2b31      	cmp	r3, #49	; 0x31
 8005a58:	d9f0      	bls.n	8005a3c <USB_SetCurrentMode+0x2e>
 8005a5a:	e01a      	b.n	8005a92 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005a5c:	78fb      	ldrb	r3, [r7, #3]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d115      	bne.n	8005a8e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005a6e:	2001      	movs	r0, #1
 8005a70:	f7fb fb14 	bl	800109c <HAL_Delay>
      ms++;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	3301      	adds	r3, #1
 8005a78:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 fa10 	bl	8005ea0 <USB_GetMode>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d005      	beq.n	8005a92 <USB_SetCurrentMode+0x84>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2b31      	cmp	r3, #49	; 0x31
 8005a8a:	d9f0      	bls.n	8005a6e <USB_SetCurrentMode+0x60>
 8005a8c:	e001      	b.n	8005a92 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e005      	b.n	8005a9e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2b32      	cmp	r3, #50	; 0x32
 8005a96:	d101      	bne.n	8005a9c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e000      	b.n	8005a9e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3710      	adds	r7, #16
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
	...

08005aa8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005aa8:	b084      	sub	sp, #16
 8005aaa:	b580      	push	{r7, lr}
 8005aac:	b086      	sub	sp, #24
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
 8005ab2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005ab6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005aba:	2300      	movs	r3, #0
 8005abc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	613b      	str	r3, [r7, #16]
 8005ac6:	e009      	b.n	8005adc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	3340      	adds	r3, #64	; 0x40
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	4413      	add	r3, r2
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	3301      	adds	r3, #1
 8005ada:	613b      	str	r3, [r7, #16]
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	2b0e      	cmp	r3, #14
 8005ae0:	d9f2      	bls.n	8005ac8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d11c      	bne.n	8005b22 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005af6:	f043 0302 	orr.w	r3, r3, #2
 8005afa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b00:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	601a      	str	r2, [r3, #0]
 8005b20:	e005      	b.n	8005b2e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b26:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b34:	461a      	mov	r2, r3
 8005b36:	2300      	movs	r3, #0
 8005b38:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b40:	4619      	mov	r1, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b48:	461a      	mov	r2, r3
 8005b4a:	680b      	ldr	r3, [r1, #0]
 8005b4c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d10c      	bne.n	8005b6e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d104      	bne.n	8005b64 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005b5a:	2100      	movs	r1, #0
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 f965 	bl	8005e2c <USB_SetDevSpeed>
 8005b62:	e008      	b.n	8005b76 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005b64:	2101      	movs	r1, #1
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f960 	bl	8005e2c <USB_SetDevSpeed>
 8005b6c:	e003      	b.n	8005b76 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005b6e:	2103      	movs	r1, #3
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 f95b 	bl	8005e2c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005b76:	2110      	movs	r1, #16
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 f8f3 	bl	8005d64 <USB_FlushTxFifo>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d001      	beq.n	8005b88 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 f91f 	bl	8005dcc <USB_FlushRxFifo>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d001      	beq.n	8005b98 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005baa:	461a      	mov	r2, r3
 8005bac:	2300      	movs	r3, #0
 8005bae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	2300      	movs	r3, #0
 8005bba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	613b      	str	r3, [r7, #16]
 8005bc0:	e043      	b.n	8005c4a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	015a      	lsls	r2, r3, #5
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	4413      	add	r3, r2
 8005bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bd8:	d118      	bne.n	8005c0c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10a      	bne.n	8005bf6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	015a      	lsls	r2, r3, #5
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	4413      	add	r3, r2
 8005be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bec:	461a      	mov	r2, r3
 8005bee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005bf2:	6013      	str	r3, [r2, #0]
 8005bf4:	e013      	b.n	8005c1e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	015a      	lsls	r2, r3, #5
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c02:	461a      	mov	r2, r3
 8005c04:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005c08:	6013      	str	r3, [r2, #0]
 8005c0a:	e008      	b.n	8005c1e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	015a      	lsls	r2, r3, #5
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	4413      	add	r3, r2
 8005c14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c18:	461a      	mov	r2, r3
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	015a      	lsls	r2, r3, #5
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	4413      	add	r3, r2
 8005c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	015a      	lsls	r2, r3, #5
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c42:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	3301      	adds	r3, #1
 8005c48:	613b      	str	r3, [r7, #16]
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4c:	693a      	ldr	r2, [r7, #16]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d3b7      	bcc.n	8005bc2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c52:	2300      	movs	r3, #0
 8005c54:	613b      	str	r3, [r7, #16]
 8005c56:	e043      	b.n	8005ce0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	015a      	lsls	r2, r3, #5
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	4413      	add	r3, r2
 8005c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c6e:	d118      	bne.n	8005ca2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d10a      	bne.n	8005c8c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	015a      	lsls	r2, r3, #5
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c82:	461a      	mov	r2, r3
 8005c84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c88:	6013      	str	r3, [r2, #0]
 8005c8a:	e013      	b.n	8005cb4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	015a      	lsls	r2, r3, #5
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	4413      	add	r3, r2
 8005c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c98:	461a      	mov	r2, r3
 8005c9a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005c9e:	6013      	str	r3, [r2, #0]
 8005ca0:	e008      	b.n	8005cb4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	015a      	lsls	r2, r3, #5
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	4413      	add	r3, r2
 8005caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cae:	461a      	mov	r2, r3
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	015a      	lsls	r2, r3, #5
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	4413      	add	r3, r2
 8005cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	015a      	lsls	r2, r3, #5
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005cd8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	3301      	adds	r3, #1
 8005cde:	613b      	str	r3, [r7, #16]
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce2:	693a      	ldr	r2, [r7, #16]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d3b7      	bcc.n	8005c58 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cf6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cfa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005d08:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d105      	bne.n	8005d1c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	699b      	ldr	r3, [r3, #24]
 8005d14:	f043 0210 	orr.w	r2, r3, #16
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	699a      	ldr	r2, [r3, #24]
 8005d20:	4b0e      	ldr	r3, [pc, #56]	; (8005d5c <USB_DevInit+0x2b4>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d005      	beq.n	8005d3a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	f043 0208 	orr.w	r2, r3, #8
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005d3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d105      	bne.n	8005d4c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	699a      	ldr	r2, [r3, #24]
 8005d44:	4b06      	ldr	r3, [pc, #24]	; (8005d60 <USB_DevInit+0x2b8>)
 8005d46:	4313      	orrs	r3, r2
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005d4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3718      	adds	r7, #24
 8005d52:	46bd      	mov	sp, r7
 8005d54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d58:	b004      	add	sp, #16
 8005d5a:	4770      	bx	lr
 8005d5c:	803c3800 	.word	0x803c3800
 8005d60:	40000004 	.word	0x40000004

08005d64 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	3301      	adds	r3, #1
 8005d76:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	4a13      	ldr	r2, [pc, #76]	; (8005dc8 <USB_FlushTxFifo+0x64>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d901      	bls.n	8005d84 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	e01b      	b.n	8005dbc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	daf2      	bge.n	8005d72 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	019b      	lsls	r3, r3, #6
 8005d94:	f043 0220 	orr.w	r2, r3, #32
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	4a08      	ldr	r2, [pc, #32]	; (8005dc8 <USB_FlushTxFifo+0x64>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d901      	bls.n	8005dae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e006      	b.n	8005dbc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	f003 0320 	and.w	r3, r3, #32
 8005db6:	2b20      	cmp	r3, #32
 8005db8:	d0f0      	beq.n	8005d9c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3714      	adds	r7, #20
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr
 8005dc8:	00030d40 	.word	0x00030d40

08005dcc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b085      	sub	sp, #20
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	3301      	adds	r3, #1
 8005ddc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	4a11      	ldr	r2, [pc, #68]	; (8005e28 <USB_FlushRxFifo+0x5c>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d901      	bls.n	8005dea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e018      	b.n	8005e1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	daf2      	bge.n	8005dd8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005df2:	2300      	movs	r3, #0
 8005df4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2210      	movs	r2, #16
 8005dfa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	4a08      	ldr	r2, [pc, #32]	; (8005e28 <USB_FlushRxFifo+0x5c>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d901      	bls.n	8005e0e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e006      	b.n	8005e1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	f003 0310 	and.w	r3, r3, #16
 8005e16:	2b10      	cmp	r3, #16
 8005e18:	d0f0      	beq.n	8005dfc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3714      	adds	r7, #20
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr
 8005e28:	00030d40 	.word	0x00030d40

08005e2c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	460b      	mov	r3, r1
 8005e36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	78fb      	ldrb	r3, [r7, #3]
 8005e46:	68f9      	ldr	r1, [r7, #12]
 8005e48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3714      	adds	r7, #20
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr

08005e5e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005e5e:	b480      	push	{r7}
 8005e60:	b085      	sub	sp, #20
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005e78:	f023 0303 	bic.w	r3, r3, #3
 8005e7c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e8c:	f043 0302 	orr.w	r3, r3, #2
 8005e90:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3714      	adds	r7, #20
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	695b      	ldr	r3, [r3, #20]
 8005eac:	f003 0301 	and.w	r3, r3, #1
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b085      	sub	sp, #20
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	3301      	adds	r3, #1
 8005ecc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	4a13      	ldr	r2, [pc, #76]	; (8005f20 <USB_CoreReset+0x64>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d901      	bls.n	8005eda <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e01b      	b.n	8005f12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	daf2      	bge.n	8005ec8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	f043 0201 	orr.w	r2, r3, #1
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	4a09      	ldr	r2, [pc, #36]	; (8005f20 <USB_CoreReset+0x64>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d901      	bls.n	8005f04 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005f00:	2303      	movs	r3, #3
 8005f02:	e006      	b.n	8005f12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	f003 0301 	and.w	r3, r3, #1
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d0f0      	beq.n	8005ef2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3714      	adds	r7, #20
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	00030d40 	.word	0x00030d40

08005f24 <__libc_init_array>:
 8005f24:	b570      	push	{r4, r5, r6, lr}
 8005f26:	4d0d      	ldr	r5, [pc, #52]	; (8005f5c <__libc_init_array+0x38>)
 8005f28:	4c0d      	ldr	r4, [pc, #52]	; (8005f60 <__libc_init_array+0x3c>)
 8005f2a:	1b64      	subs	r4, r4, r5
 8005f2c:	10a4      	asrs	r4, r4, #2
 8005f2e:	2600      	movs	r6, #0
 8005f30:	42a6      	cmp	r6, r4
 8005f32:	d109      	bne.n	8005f48 <__libc_init_array+0x24>
 8005f34:	4d0b      	ldr	r5, [pc, #44]	; (8005f64 <__libc_init_array+0x40>)
 8005f36:	4c0c      	ldr	r4, [pc, #48]	; (8005f68 <__libc_init_array+0x44>)
 8005f38:	f000 f820 	bl	8005f7c <_init>
 8005f3c:	1b64      	subs	r4, r4, r5
 8005f3e:	10a4      	asrs	r4, r4, #2
 8005f40:	2600      	movs	r6, #0
 8005f42:	42a6      	cmp	r6, r4
 8005f44:	d105      	bne.n	8005f52 <__libc_init_array+0x2e>
 8005f46:	bd70      	pop	{r4, r5, r6, pc}
 8005f48:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f4c:	4798      	blx	r3
 8005f4e:	3601      	adds	r6, #1
 8005f50:	e7ee      	b.n	8005f30 <__libc_init_array+0xc>
 8005f52:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f56:	4798      	blx	r3
 8005f58:	3601      	adds	r6, #1
 8005f5a:	e7f2      	b.n	8005f42 <__libc_init_array+0x1e>
 8005f5c:	08005fd4 	.word	0x08005fd4
 8005f60:	08005fd4 	.word	0x08005fd4
 8005f64:	08005fd4 	.word	0x08005fd4
 8005f68:	08005fd8 	.word	0x08005fd8

08005f6c <memset>:
 8005f6c:	4402      	add	r2, r0
 8005f6e:	4603      	mov	r3, r0
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d100      	bne.n	8005f76 <memset+0xa>
 8005f74:	4770      	bx	lr
 8005f76:	f803 1b01 	strb.w	r1, [r3], #1
 8005f7a:	e7f9      	b.n	8005f70 <memset+0x4>

08005f7c <_init>:
 8005f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f7e:	bf00      	nop
 8005f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f82:	bc08      	pop	{r3}
 8005f84:	469e      	mov	lr, r3
 8005f86:	4770      	bx	lr

08005f88 <_fini>:
 8005f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f8a:	bf00      	nop
 8005f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f8e:	bc08      	pop	{r3}
 8005f90:	469e      	mov	lr, r3
 8005f92:	4770      	bx	lr
