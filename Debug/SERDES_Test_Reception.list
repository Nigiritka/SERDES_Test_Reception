
SERDES_Test_Reception.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d74  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800900c  0800900c  0001900c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800904c  0800904c  0001904c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009054  08009054  00019054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009058  08009058  00019058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  0800905c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  0800906c  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  080090cc  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b5c  240000d0  0800912c  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000c2c  0800912c  00020c2c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f629  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f1d  00000000  00000000  0003f727  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001580  00000000  00000000  00042648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001478  00000000  00000000  00043bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038ed1  00000000  00000000  00045040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c010  00000000  00000000  0007df11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016d5c6  00000000  00000000  00099f21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002074e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d4c  00000000  00000000  00207538  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08008ff4 	.word	0x08008ff4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08008ff4 	.word	0x08008ff4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f000 fec6 	bl	8001370 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f8ba 	bl	800075c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 fa7a 	bl	8000ae0 <MX_GPIO_Init>
  MX_ETH_Init();
 80005ec:	f000 f93a 	bl	8000864 <MX_ETH_Init>
  MX_DMA_Init();
 80005f0:	f000 fa56 	bl	8000aa0 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f4:	f000 fa22 	bl	8000a3c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 80005f8:	f000 f980 	bl	80008fc <MX_TIM2_Init>
  MX_USART3_UART_Init();
 80005fc:	f000 f9d2 	bl	80009a4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  	  hdma_tim2_ch4.XferCpltCallback = TransferComplete;
 8000600:	4b40      	ldr	r3, [pc, #256]	; (8000704 <main+0x128>)
 8000602:	4a41      	ldr	r2, [pc, #260]	; (8000708 <main+0x12c>)
 8000604:	63da      	str	r2, [r3, #60]	; 0x3c

	// Enable interrupt for DMA (Transfer completed)
	__HAL_DMA_ENABLE_IT(&hdma_tim2_ch4, DMA_IT_TC);
 8000606:	4b3f      	ldr	r3, [pc, #252]	; (8000704 <main+0x128>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a40      	ldr	r2, [pc, #256]	; (800070c <main+0x130>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d04a      	beq.n	80006a6 <main+0xca>
 8000610:	4b3c      	ldr	r3, [pc, #240]	; (8000704 <main+0x128>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a3e      	ldr	r2, [pc, #248]	; (8000710 <main+0x134>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d045      	beq.n	80006a6 <main+0xca>
 800061a:	4b3a      	ldr	r3, [pc, #232]	; (8000704 <main+0x128>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a3d      	ldr	r2, [pc, #244]	; (8000714 <main+0x138>)
 8000620:	4293      	cmp	r3, r2
 8000622:	d040      	beq.n	80006a6 <main+0xca>
 8000624:	4b37      	ldr	r3, [pc, #220]	; (8000704 <main+0x128>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a3b      	ldr	r2, [pc, #236]	; (8000718 <main+0x13c>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d03b      	beq.n	80006a6 <main+0xca>
 800062e:	4b35      	ldr	r3, [pc, #212]	; (8000704 <main+0x128>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a3a      	ldr	r2, [pc, #232]	; (800071c <main+0x140>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d036      	beq.n	80006a6 <main+0xca>
 8000638:	4b32      	ldr	r3, [pc, #200]	; (8000704 <main+0x128>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a38      	ldr	r2, [pc, #224]	; (8000720 <main+0x144>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d031      	beq.n	80006a6 <main+0xca>
 8000642:	4b30      	ldr	r3, [pc, #192]	; (8000704 <main+0x128>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a37      	ldr	r2, [pc, #220]	; (8000724 <main+0x148>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d02c      	beq.n	80006a6 <main+0xca>
 800064c:	4b2d      	ldr	r3, [pc, #180]	; (8000704 <main+0x128>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a35      	ldr	r2, [pc, #212]	; (8000728 <main+0x14c>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d027      	beq.n	80006a6 <main+0xca>
 8000656:	4b2b      	ldr	r3, [pc, #172]	; (8000704 <main+0x128>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a34      	ldr	r2, [pc, #208]	; (800072c <main+0x150>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d022      	beq.n	80006a6 <main+0xca>
 8000660:	4b28      	ldr	r3, [pc, #160]	; (8000704 <main+0x128>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a32      	ldr	r2, [pc, #200]	; (8000730 <main+0x154>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d01d      	beq.n	80006a6 <main+0xca>
 800066a:	4b26      	ldr	r3, [pc, #152]	; (8000704 <main+0x128>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a31      	ldr	r2, [pc, #196]	; (8000734 <main+0x158>)
 8000670:	4293      	cmp	r3, r2
 8000672:	d018      	beq.n	80006a6 <main+0xca>
 8000674:	4b23      	ldr	r3, [pc, #140]	; (8000704 <main+0x128>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a2f      	ldr	r2, [pc, #188]	; (8000738 <main+0x15c>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d013      	beq.n	80006a6 <main+0xca>
 800067e:	4b21      	ldr	r3, [pc, #132]	; (8000704 <main+0x128>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4a2e      	ldr	r2, [pc, #184]	; (800073c <main+0x160>)
 8000684:	4293      	cmp	r3, r2
 8000686:	d00e      	beq.n	80006a6 <main+0xca>
 8000688:	4b1e      	ldr	r3, [pc, #120]	; (8000704 <main+0x128>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a2c      	ldr	r2, [pc, #176]	; (8000740 <main+0x164>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d009      	beq.n	80006a6 <main+0xca>
 8000692:	4b1c      	ldr	r3, [pc, #112]	; (8000704 <main+0x128>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4a2b      	ldr	r2, [pc, #172]	; (8000744 <main+0x168>)
 8000698:	4293      	cmp	r3, r2
 800069a:	d004      	beq.n	80006a6 <main+0xca>
 800069c:	4b19      	ldr	r3, [pc, #100]	; (8000704 <main+0x128>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a29      	ldr	r2, [pc, #164]	; (8000748 <main+0x16c>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d108      	bne.n	80006b8 <main+0xdc>
 80006a6:	4b17      	ldr	r3, [pc, #92]	; (8000704 <main+0x128>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	681a      	ldr	r2, [r3, #0]
 80006ac:	4b15      	ldr	r3, [pc, #84]	; (8000704 <main+0x128>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f042 0210 	orr.w	r2, r2, #16
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	e007      	b.n	80006c8 <main+0xec>
 80006b8:	4b12      	ldr	r3, [pc, #72]	; (8000704 <main+0x128>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <main+0x128>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	f042 0202 	orr.w	r2, r2, #2
 80006c6:	601a      	str	r2, [r3, #0]

	// Start DMA transfer from GPIO Port E
	HAL_DMA_Start(&hdma_tim2_ch4, (uint32_t) &GPIOE->IDR, (uint32_t) RecievedData, 1000);
 80006c8:	4a20      	ldr	r2, [pc, #128]	; (800074c <main+0x170>)
 80006ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ce:	4920      	ldr	r1, [pc, #128]	; (8000750 <main+0x174>)
 80006d0:	480c      	ldr	r0, [pc, #48]	; (8000704 <main+0x128>)
 80006d2:	f001 fb8f 	bl	8001df4 <HAL_DMA_Start>

	// Start input capture of the TIMER 2 at pin PA3 (Channel 4 of the TIMER)
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_4);
 80006d6:	210c      	movs	r1, #12
 80006d8:	481e      	ldr	r0, [pc, #120]	; (8000754 <main+0x178>)
 80006da:	f006 fad1 	bl	8006c80 <HAL_TIM_IC_Start>

	// Enable DMA interrupt for input capture event
	TIM2->DIER |= (1<<12);
 80006de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006e2:	68db      	ldr	r3, [r3, #12]
 80006e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006ec:	60d3      	str	r3, [r2, #12]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80006ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006f2:	4819      	ldr	r0, [pc, #100]	; (8000758 <main+0x17c>)
 80006f4:	f003 fd9d 	bl	8004232 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80006f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006fc:	f000 feca 	bl	8001494 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000700:	e7f5      	b.n	80006ee <main+0x112>
 8000702:	bf00      	nop
 8000704:	24000220 	.word	0x24000220
 8000708:	08000c8d 	.word	0x08000c8d
 800070c:	40020010 	.word	0x40020010
 8000710:	40020028 	.word	0x40020028
 8000714:	40020040 	.word	0x40020040
 8000718:	40020058 	.word	0x40020058
 800071c:	40020070 	.word	0x40020070
 8000720:	40020088 	.word	0x40020088
 8000724:	400200a0 	.word	0x400200a0
 8000728:	400200b8 	.word	0x400200b8
 800072c:	40020410 	.word	0x40020410
 8000730:	40020428 	.word	0x40020428
 8000734:	40020440 	.word	0x40020440
 8000738:	40020458 	.word	0x40020458
 800073c:	40020470 	.word	0x40020470
 8000740:	40020488 	.word	0x40020488
 8000744:	400204a0 	.word	0x400204a0
 8000748:	400204b8 	.word	0x400204b8
 800074c:	24000838 	.word	0x24000838
 8000750:	58021010 	.word	0x58021010
 8000754:	240001d4 	.word	0x240001d4
 8000758:	58020400 	.word	0x58020400

0800075c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b09c      	sub	sp, #112	; 0x70
 8000760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000766:	224c      	movs	r2, #76	; 0x4c
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f008 fc3a 	bl	8008fe4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	2220      	movs	r2, #32
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f008 fc34 	bl	8008fe4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800077c:	2002      	movs	r0, #2
 800077e:	f003 febb 	bl	80044f8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000782:	2300      	movs	r3, #0
 8000784:	603b      	str	r3, [r7, #0]
 8000786:	4b34      	ldr	r3, [pc, #208]	; (8000858 <SystemClock_Config+0xfc>)
 8000788:	699b      	ldr	r3, [r3, #24]
 800078a:	4a33      	ldr	r2, [pc, #204]	; (8000858 <SystemClock_Config+0xfc>)
 800078c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000790:	6193      	str	r3, [r2, #24]
 8000792:	4b31      	ldr	r3, [pc, #196]	; (8000858 <SystemClock_Config+0xfc>)
 8000794:	699b      	ldr	r3, [r3, #24]
 8000796:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	4b2f      	ldr	r3, [pc, #188]	; (800085c <SystemClock_Config+0x100>)
 800079e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007a0:	4a2e      	ldr	r2, [pc, #184]	; (800085c <SystemClock_Config+0x100>)
 80007a2:	f043 0301 	orr.w	r3, r3, #1
 80007a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007a8:	4b2c      	ldr	r3, [pc, #176]	; (800085c <SystemClock_Config+0x100>)
 80007aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ac:	f003 0301 	and.w	r3, r3, #1
 80007b0:	603b      	str	r3, [r7, #0]
 80007b2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007b4:	bf00      	nop
 80007b6:	4b28      	ldr	r3, [pc, #160]	; (8000858 <SystemClock_Config+0xfc>)
 80007b8:	699b      	ldr	r3, [r3, #24]
 80007ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007c2:	d1f8      	bne.n	80007b6 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80007c4:	4b26      	ldr	r3, [pc, #152]	; (8000860 <SystemClock_Config+0x104>)
 80007c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007c8:	f023 0303 	bic.w	r3, r3, #3
 80007cc:	4a24      	ldr	r2, [pc, #144]	; (8000860 <SystemClock_Config+0x104>)
 80007ce:	f043 0302 	orr.w	r3, r3, #2
 80007d2:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007d4:	2301      	movs	r3, #1
 80007d6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007d8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007de:	2302      	movs	r3, #2
 80007e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007e2:	2302      	movs	r3, #2
 80007e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007e6:	2301      	movs	r3, #1
 80007e8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 80007ea:	2378      	movs	r3, #120	; 0x78
 80007ec:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007ee:	2302      	movs	r3, #2
 80007f0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007f2:	2304      	movs	r3, #4
 80007f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007f6:	2302      	movs	r3, #2
 80007f8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007fa:	230c      	movs	r3, #12
 80007fc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007fe:	2300      	movs	r3, #0
 8000800:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800080a:	4618      	mov	r0, r3
 800080c:	f003 febe 	bl	800458c <HAL_RCC_OscConfig>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000816:	f000 fa5f 	bl	8000cd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081a:	233f      	movs	r3, #63	; 0x3f
 800081c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081e:	2303      	movs	r3, #3
 8000820:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000826:	2308      	movs	r3, #8
 8000828:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800082a:	2340      	movs	r3, #64	; 0x40
 800082c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800082e:	2340      	movs	r3, #64	; 0x40
 8000830:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000832:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000836:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000838:	2340      	movs	r3, #64	; 0x40
 800083a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	2104      	movs	r1, #4
 8000840:	4618      	mov	r0, r3
 8000842:	f004 fad1 	bl	8004de8 <HAL_RCC_ClockConfig>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800084c:	f000 fa44 	bl	8000cd8 <Error_Handler>
  }
}
 8000850:	bf00      	nop
 8000852:	3770      	adds	r7, #112	; 0x70
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	58024800 	.word	0x58024800
 800085c:	58000400 	.word	0x58000400
 8000860:	58024400 	.word	0x58024400

08000864 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000868:	4b1e      	ldr	r3, [pc, #120]	; (80008e4 <MX_ETH_Init+0x80>)
 800086a:	4a1f      	ldr	r2, [pc, #124]	; (80008e8 <MX_ETH_Init+0x84>)
 800086c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800086e:	4b1f      	ldr	r3, [pc, #124]	; (80008ec <MX_ETH_Init+0x88>)
 8000870:	2200      	movs	r2, #0
 8000872:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000874:	4b1d      	ldr	r3, [pc, #116]	; (80008ec <MX_ETH_Init+0x88>)
 8000876:	2280      	movs	r2, #128	; 0x80
 8000878:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800087a:	4b1c      	ldr	r3, [pc, #112]	; (80008ec <MX_ETH_Init+0x88>)
 800087c:	22e1      	movs	r2, #225	; 0xe1
 800087e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000880:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <MX_ETH_Init+0x88>)
 8000882:	2200      	movs	r2, #0
 8000884:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000886:	4b19      	ldr	r3, [pc, #100]	; (80008ec <MX_ETH_Init+0x88>)
 8000888:	2200      	movs	r2, #0
 800088a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800088c:	4b17      	ldr	r3, [pc, #92]	; (80008ec <MX_ETH_Init+0x88>)
 800088e:	2200      	movs	r2, #0
 8000890:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000892:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <MX_ETH_Init+0x80>)
 8000894:	4a15      	ldr	r2, [pc, #84]	; (80008ec <MX_ETH_Init+0x88>)
 8000896:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <MX_ETH_Init+0x80>)
 800089a:	2201      	movs	r2, #1
 800089c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_ETH_Init+0x80>)
 80008a0:	4a13      	ldr	r2, [pc, #76]	; (80008f0 <MX_ETH_Init+0x8c>)
 80008a2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <MX_ETH_Init+0x80>)
 80008a6:	4a13      	ldr	r2, [pc, #76]	; (80008f4 <MX_ETH_Init+0x90>)
 80008a8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_ETH_Init+0x80>)
 80008ac:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80008b0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008b2:	480c      	ldr	r0, [pc, #48]	; (80008e4 <MX_ETH_Init+0x80>)
 80008b4:	f002 fed0 	bl	8003658 <HAL_ETH_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80008be:	f000 fa0b 	bl	8000cd8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008c2:	2238      	movs	r2, #56	; 0x38
 80008c4:	2100      	movs	r1, #0
 80008c6:	480c      	ldr	r0, [pc, #48]	; (80008f8 <MX_ETH_Init+0x94>)
 80008c8:	f008 fb8c 	bl	8008fe4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008cc:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <MX_ETH_Init+0x94>)
 80008ce:	2221      	movs	r2, #33	; 0x21
 80008d0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_ETH_Init+0x94>)
 80008d4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80008d8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008da:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <MX_ETH_Init+0x94>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	24000124 	.word	0x24000124
 80008e8:	40028000 	.word	0x40028000
 80008ec:	24000c20 	.word	0x24000c20
 80008f0:	24000070 	.word	0x24000070
 80008f4:	24000010 	.word	0x24000010
 80008f8:	240000ec 	.word	0x240000ec

080008fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b088      	sub	sp, #32
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800091a:	4b21      	ldr	r3, [pc, #132]	; (80009a0 <MX_TIM2_Init+0xa4>)
 800091c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000920:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000922:	4b1f      	ldr	r3, [pc, #124]	; (80009a0 <MX_TIM2_Init+0xa4>)
 8000924:	2200      	movs	r2, #0
 8000926:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000928:	4b1d      	ldr	r3, [pc, #116]	; (80009a0 <MX_TIM2_Init+0xa4>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800092e:	4b1c      	ldr	r3, [pc, #112]	; (80009a0 <MX_TIM2_Init+0xa4>)
 8000930:	f04f 32ff 	mov.w	r2, #4294967295
 8000934:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000936:	4b1a      	ldr	r3, [pc, #104]	; (80009a0 <MX_TIM2_Init+0xa4>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800093c:	4b18      	ldr	r3, [pc, #96]	; (80009a0 <MX_TIM2_Init+0xa4>)
 800093e:	2200      	movs	r2, #0
 8000940:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000942:	4817      	ldr	r0, [pc, #92]	; (80009a0 <MX_TIM2_Init+0xa4>)
 8000944:	f006 f944 	bl	8006bd0 <HAL_TIM_IC_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800094e:	f000 f9c3 	bl	8000cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000952:	2300      	movs	r3, #0
 8000954:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000956:	2380      	movs	r3, #128	; 0x80
 8000958:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	4619      	mov	r1, r3
 8000960:	480f      	ldr	r0, [pc, #60]	; (80009a0 <MX_TIM2_Init+0xa4>)
 8000962:	f006 fe5f 	bl	8007624 <HAL_TIMEx_MasterConfigSynchronization>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800096c:	f000 f9b4 	bl	8000cd8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000970:	2302      	movs	r3, #2
 8000972:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000974:	2301      	movs	r3, #1
 8000976:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	220c      	movs	r2, #12
 8000984:	4619      	mov	r1, r3
 8000986:	4806      	ldr	r0, [pc, #24]	; (80009a0 <MX_TIM2_Init+0xa4>)
 8000988:	f006 fb9d 	bl	80070c6 <HAL_TIM_IC_ConfigChannel>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000992:	f000 f9a1 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	3720      	adds	r7, #32
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	240001d4 	.word	0x240001d4

080009a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009a8:	4b22      	ldr	r3, [pc, #136]	; (8000a34 <MX_USART3_UART_Init+0x90>)
 80009aa:	4a23      	ldr	r2, [pc, #140]	; (8000a38 <MX_USART3_UART_Init+0x94>)
 80009ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009ae:	4b21      	ldr	r3, [pc, #132]	; (8000a34 <MX_USART3_UART_Init+0x90>)
 80009b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009b6:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <MX_USART3_UART_Init+0x90>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009bc:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <MX_USART3_UART_Init+0x90>)
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009c2:	4b1c      	ldr	r3, [pc, #112]	; (8000a34 <MX_USART3_UART_Init+0x90>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009c8:	4b1a      	ldr	r3, [pc, #104]	; (8000a34 <MX_USART3_UART_Init+0x90>)
 80009ca:	220c      	movs	r2, #12
 80009cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ce:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <MX_USART3_UART_Init+0x90>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d4:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <MX_USART3_UART_Init+0x90>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009da:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <MX_USART3_UART_Init+0x90>)
 80009dc:	2200      	movs	r2, #0
 80009de:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009e0:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MX_USART3_UART_Init+0x90>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009e6:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <MX_USART3_UART_Init+0x90>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009ec:	4811      	ldr	r0, [pc, #68]	; (8000a34 <MX_USART3_UART_Init+0x90>)
 80009ee:	f006 fec5 	bl	800777c <HAL_UART_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009f8:	f000 f96e 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009fc:	2100      	movs	r1, #0
 80009fe:	480d      	ldr	r0, [pc, #52]	; (8000a34 <MX_USART3_UART_Init+0x90>)
 8000a00:	f007 fef8 	bl	80087f4 <HAL_UARTEx_SetTxFifoThreshold>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a0a:	f000 f965 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4808      	ldr	r0, [pc, #32]	; (8000a34 <MX_USART3_UART_Init+0x90>)
 8000a12:	f007 ff2d 	bl	8008870 <HAL_UARTEx_SetRxFifoThreshold>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a1c:	f000 f95c 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a20:	4804      	ldr	r0, [pc, #16]	; (8000a34 <MX_USART3_UART_Init+0x90>)
 8000a22:	f007 feae 	bl	8008782 <HAL_UARTEx_DisableFifoMode>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a2c:	f000 f954 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	24000298 	.word	0x24000298
 8000a38:	40004800 	.word	0x40004800

08000a3c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a40:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a42:	4a16      	ldr	r2, [pc, #88]	; (8000a9c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000a44:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000a46:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a48:	2209      	movs	r2, #9
 8000a4a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a4e:	2202      	movs	r2, #2
 8000a50:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a5a:	2202      	movs	r2, #2
 8000a5c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a84:	f003 fbef 	bl	8004266 <HAL_PCD_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000a8e:	f000 f923 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	24000328 	.word	0x24000328
 8000a9c:	40080000 	.word	0x40080000

08000aa0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aa6:	4b0d      	ldr	r3, [pc, #52]	; (8000adc <MX_DMA_Init+0x3c>)
 8000aa8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000aac:	4a0b      	ldr	r2, [pc, #44]	; (8000adc <MX_DMA_Init+0x3c>)
 8000aae:	f043 0301 	orr.w	r3, r3, #1
 8000ab2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ab6:	4b09      	ldr	r3, [pc, #36]	; (8000adc <MX_DMA_Init+0x3c>)
 8000ab8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000abc:	f003 0301 	and.w	r3, r3, #1
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	200c      	movs	r0, #12
 8000aca:	f000 fe02 	bl	80016d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ace:	200c      	movs	r0, #12
 8000ad0:	f000 fe19 	bl	8001706 <HAL_NVIC_EnableIRQ>

}
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	58024400 	.word	0x58024400

08000ae0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08c      	sub	sp, #48	; 0x30
 8000ae4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae6:	f107 031c 	add.w	r3, r7, #28
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]
 8000af4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000af6:	4b5f      	ldr	r3, [pc, #380]	; (8000c74 <MX_GPIO_Init+0x194>)
 8000af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afc:	4a5d      	ldr	r2, [pc, #372]	; (8000c74 <MX_GPIO_Init+0x194>)
 8000afe:	f043 0310 	orr.w	r3, r3, #16
 8000b02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b06:	4b5b      	ldr	r3, [pc, #364]	; (8000c74 <MX_GPIO_Init+0x194>)
 8000b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b0c:	f003 0310 	and.w	r3, r3, #16
 8000b10:	61bb      	str	r3, [r7, #24]
 8000b12:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b14:	4b57      	ldr	r3, [pc, #348]	; (8000c74 <MX_GPIO_Init+0x194>)
 8000b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1a:	4a56      	ldr	r2, [pc, #344]	; (8000c74 <MX_GPIO_Init+0x194>)
 8000b1c:	f043 0304 	orr.w	r3, r3, #4
 8000b20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b24:	4b53      	ldr	r3, [pc, #332]	; (8000c74 <MX_GPIO_Init+0x194>)
 8000b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2a:	f003 0304 	and.w	r3, r3, #4
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b32:	4b50      	ldr	r3, [pc, #320]	; (8000c74 <MX_GPIO_Init+0x194>)
 8000b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b38:	4a4e      	ldr	r2, [pc, #312]	; (8000c74 <MX_GPIO_Init+0x194>)
 8000b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b42:	4b4c      	ldr	r3, [pc, #304]	; (8000c74 <MX_GPIO_Init+0x194>)
 8000b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b50:	4b48      	ldr	r3, [pc, #288]	; (8000c74 <MX_GPIO_Init+0x194>)
 8000b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b56:	4a47      	ldr	r2, [pc, #284]	; (8000c74 <MX_GPIO_Init+0x194>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b60:	4b44      	ldr	r3, [pc, #272]	; (8000c74 <MX_GPIO_Init+0x194>)
 8000b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6e:	4b41      	ldr	r3, [pc, #260]	; (8000c74 <MX_GPIO_Init+0x194>)
 8000b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b74:	4a3f      	ldr	r2, [pc, #252]	; (8000c74 <MX_GPIO_Init+0x194>)
 8000b76:	f043 0302 	orr.w	r3, r3, #2
 8000b7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b7e:	4b3d      	ldr	r3, [pc, #244]	; (8000c74 <MX_GPIO_Init+0x194>)
 8000b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b84:	f003 0302 	and.w	r3, r3, #2
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b8c:	4b39      	ldr	r3, [pc, #228]	; (8000c74 <MX_GPIO_Init+0x194>)
 8000b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b92:	4a38      	ldr	r2, [pc, #224]	; (8000c74 <MX_GPIO_Init+0x194>)
 8000b94:	f043 0308 	orr.w	r3, r3, #8
 8000b98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b9c:	4b35      	ldr	r3, [pc, #212]	; (8000c74 <MX_GPIO_Init+0x194>)
 8000b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba2:	f003 0308 	and.w	r3, r3, #8
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000baa:	4b32      	ldr	r3, [pc, #200]	; (8000c74 <MX_GPIO_Init+0x194>)
 8000bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb0:	4a30      	ldr	r2, [pc, #192]	; (8000c74 <MX_GPIO_Init+0x194>)
 8000bb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bba:	4b2e      	ldr	r3, [pc, #184]	; (8000c74 <MX_GPIO_Init+0x194>)
 8000bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bc4:	603b      	str	r3, [r7, #0]
 8000bc6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f244 0101 	movw	r1, #16385	; 0x4001
 8000bce:	482a      	ldr	r0, [pc, #168]	; (8000c78 <MX_GPIO_Init+0x198>)
 8000bd0:	f003 fb16 	bl	8004200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bda:	4828      	ldr	r0, [pc, #160]	; (8000c7c <MX_GPIO_Init+0x19c>)
 8000bdc:	f003 fb10 	bl	8004200 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DATA_IN_2_Pin DATA_IN_3_Pin DATA_IN_4_Pin DATA_IN_5_Pin
                           DATA_IN_6_Pin DATA_IN_7_Pin DATA_IN_0_Pin DATA_IN_1_Pin */
  GPIO_InitStruct.Pin = DATA_IN_2_Pin|DATA_IN_3_Pin|DATA_IN_4_Pin|DATA_IN_5_Pin
 8000be0:	23ff      	movs	r3, #255	; 0xff
 8000be2:	61fb      	str	r3, [r7, #28]
                          |DATA_IN_6_Pin|DATA_IN_7_Pin|DATA_IN_0_Pin|DATA_IN_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be4:	2300      	movs	r3, #0
 8000be6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000be8:	2302      	movs	r3, #2
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bec:	f107 031c 	add.w	r3, r7, #28
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4823      	ldr	r0, [pc, #140]	; (8000c80 <MX_GPIO_Init+0x1a0>)
 8000bf4:	f003 f954 	bl	8003ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bf8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bfe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c08:	f107 031c 	add.w	r3, r7, #28
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	481d      	ldr	r0, [pc, #116]	; (8000c84 <MX_GPIO_Init+0x1a4>)
 8000c10:	f003 f946 	bl	8003ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000c14:	f244 0301 	movw	r3, #16385	; 0x4001
 8000c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c26:	f107 031c 	add.w	r3, r7, #28
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4812      	ldr	r0, [pc, #72]	; (8000c78 <MX_GPIO_Init+0x198>)
 8000c2e:	f003 f937 	bl	8003ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000c32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c44:	f107 031c 	add.w	r3, r7, #28
 8000c48:	4619      	mov	r1, r3
 8000c4a:	480c      	ldr	r0, [pc, #48]	; (8000c7c <MX_GPIO_Init+0x19c>)
 8000c4c:	f003 f928 	bl	8003ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000c50:	2380      	movs	r3, #128	; 0x80
 8000c52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c54:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c5e:	f107 031c 	add.w	r3, r7, #28
 8000c62:	4619      	mov	r1, r3
 8000c64:	4808      	ldr	r0, [pc, #32]	; (8000c88 <MX_GPIO_Init+0x1a8>)
 8000c66:	f003 f91b 	bl	8003ea0 <HAL_GPIO_Init>

}
 8000c6a:	bf00      	nop
 8000c6c:	3730      	adds	r7, #48	; 0x30
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	58024400 	.word	0x58024400
 8000c78:	58020400 	.word	0x58020400
 8000c7c:	58020c00 	.word	0x58020c00
 8000c80:	58021000 	.word	0x58021000
 8000c84:	58020800 	.word	0x58020800
 8000c88:	58021800 	.word	0x58021800

08000c8c <TransferComplete>:

/* USER CODE BEGIN 4 */


static void TransferComplete(DMA_HandleTypeDef *DmaHandle)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, RecievedData, 1000, 10);
 8000c94:	230a      	movs	r3, #10
 8000c96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c9a:	4904      	ldr	r1, [pc, #16]	; (8000cac <TransferComplete+0x20>)
 8000c9c:	4804      	ldr	r0, [pc, #16]	; (8000cb0 <TransferComplete+0x24>)
 8000c9e:	f006 fdbd 	bl	800781c <HAL_UART_Transmit>
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	24000838 	.word	0x24000838
 8000cb0:	24000298 	.word	0x24000298

08000cb4 <HAL_TIM_IC_CaptureCallback>:




void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]

	Counter++;
 8000cbc:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <HAL_TIM_IC_CaptureCallback+0x20>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	4a04      	ldr	r2, [pc, #16]	; (8000cd4 <HAL_TIM_IC_CaptureCallback+0x20>)
 8000cc4:	6013      	str	r3, [r2, #0]

}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	24000834 	.word	0x24000834

08000cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cdc:	b672      	cpsid	i
}
 8000cde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <Error_Handler+0x8>
	...

08000ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cea:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <HAL_MspInit+0x30>)
 8000cec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cf0:	4a08      	ldr	r2, [pc, #32]	; (8000d14 <HAL_MspInit+0x30>)
 8000cf2:	f043 0302 	orr.w	r3, r3, #2
 8000cf6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <HAL_MspInit+0x30>)
 8000cfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d00:	f003 0302 	and.w	r3, r3, #2
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	58024400 	.word	0x58024400

08000d18 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08e      	sub	sp, #56	; 0x38
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a59      	ldr	r2, [pc, #356]	; (8000e9c <HAL_ETH_MspInit+0x184>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	f040 80ab 	bne.w	8000e92 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000d3c:	4b58      	ldr	r3, [pc, #352]	; (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000d3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d42:	4a57      	ldr	r2, [pc, #348]	; (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000d44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d48:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d4c:	4b54      	ldr	r3, [pc, #336]	; (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000d4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d56:	623b      	str	r3, [r7, #32]
 8000d58:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000d5a:	4b51      	ldr	r3, [pc, #324]	; (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000d5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d60:	4a4f      	ldr	r2, [pc, #316]	; (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000d62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d66:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d6a:	4b4d      	ldr	r3, [pc, #308]	; (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000d6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d74:	61fb      	str	r3, [r7, #28]
 8000d76:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000d78:	4b49      	ldr	r3, [pc, #292]	; (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000d7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d7e:	4a48      	ldr	r2, [pc, #288]	; (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d84:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d88:	4b45      	ldr	r3, [pc, #276]	; (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000d8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d92:	61bb      	str	r3, [r7, #24]
 8000d94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d96:	4b42      	ldr	r3, [pc, #264]	; (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9c:	4a40      	ldr	r2, [pc, #256]	; (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000d9e:	f043 0304 	orr.w	r3, r3, #4
 8000da2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000da6:	4b3e      	ldr	r3, [pc, #248]	; (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dac:	f003 0304 	and.w	r3, r3, #4
 8000db0:	617b      	str	r3, [r7, #20]
 8000db2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db4:	4b3a      	ldr	r3, [pc, #232]	; (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dba:	4a39      	ldr	r2, [pc, #228]	; (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dc4:	4b36      	ldr	r3, [pc, #216]	; (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd2:	4b33      	ldr	r3, [pc, #204]	; (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd8:	4a31      	ldr	r2, [pc, #196]	; (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000dda:	f043 0302 	orr.w	r3, r3, #2
 8000dde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000de2:	4b2f      	ldr	r3, [pc, #188]	; (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de8:	f003 0302 	and.w	r3, r3, #2
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000df0:	4b2b      	ldr	r3, [pc, #172]	; (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df6:	4a2a      	ldr	r2, [pc, #168]	; (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000df8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e00:	4b27      	ldr	r3, [pc, #156]	; (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e0a:	60bb      	str	r3, [r7, #8]
 8000e0c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e0e:	2332      	movs	r3, #50	; 0x32
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e12:	2302      	movs	r3, #2
 8000e14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e1e:	230b      	movs	r3, #11
 8000e20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e26:	4619      	mov	r1, r3
 8000e28:	481e      	ldr	r0, [pc, #120]	; (8000ea4 <HAL_ETH_MspInit+0x18c>)
 8000e2a:	f003 f839 	bl	8003ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000e2e:	2386      	movs	r3, #134	; 0x86
 8000e30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	2302      	movs	r3, #2
 8000e34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e3e:	230b      	movs	r3, #11
 8000e40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e46:	4619      	mov	r1, r3
 8000e48:	4817      	ldr	r0, [pc, #92]	; (8000ea8 <HAL_ETH_MspInit+0x190>)
 8000e4a:	f003 f829 	bl	8003ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e60:	230b      	movs	r3, #11
 8000e62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4810      	ldr	r0, [pc, #64]	; (8000eac <HAL_ETH_MspInit+0x194>)
 8000e6c:	f003 f818 	bl	8003ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000e70:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e82:	230b      	movs	r3, #11
 8000e84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4808      	ldr	r0, [pc, #32]	; (8000eb0 <HAL_ETH_MspInit+0x198>)
 8000e8e:	f003 f807 	bl	8003ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000e92:	bf00      	nop
 8000e94:	3738      	adds	r7, #56	; 0x38
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40028000 	.word	0x40028000
 8000ea0:	58024400 	.word	0x58024400
 8000ea4:	58020800 	.word	0x58020800
 8000ea8:	58020000 	.word	0x58020000
 8000eac:	58020400 	.word	0x58020400
 8000eb0:	58021800 	.word	0x58021800

08000eb4 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08a      	sub	sp, #40	; 0x28
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ed4:	d162      	bne.n	8000f9c <HAL_TIM_IC_MspInit+0xe8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ed6:	4b33      	ldr	r3, [pc, #204]	; (8000fa4 <HAL_TIM_IC_MspInit+0xf0>)
 8000ed8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000edc:	4a31      	ldr	r2, [pc, #196]	; (8000fa4 <HAL_TIM_IC_MspInit+0xf0>)
 8000ede:	f043 0301 	orr.w	r3, r3, #1
 8000ee2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ee6:	4b2f      	ldr	r3, [pc, #188]	; (8000fa4 <HAL_TIM_IC_MspInit+0xf0>)
 8000ee8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	613b      	str	r3, [r7, #16]
 8000ef2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef4:	4b2b      	ldr	r3, [pc, #172]	; (8000fa4 <HAL_TIM_IC_MspInit+0xf0>)
 8000ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000efa:	4a2a      	ldr	r2, [pc, #168]	; (8000fa4 <HAL_TIM_IC_MspInit+0xf0>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f04:	4b27      	ldr	r3, [pc, #156]	; (8000fa4 <HAL_TIM_IC_MspInit+0xf0>)
 8000f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f12:	2308      	movs	r3, #8
 8000f14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f16:	2302      	movs	r3, #2
 8000f18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f22:	2301      	movs	r3, #1
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f26:	f107 0314 	add.w	r3, r7, #20
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	481e      	ldr	r0, [pc, #120]	; (8000fa8 <HAL_TIM_IC_MspInit+0xf4>)
 8000f2e:	f002 ffb7 	bl	8003ea0 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH4 Init */
    hdma_tim2_ch4.Instance = DMA1_Stream1;
 8000f32:	4b1e      	ldr	r3, [pc, #120]	; (8000fac <HAL_TIM_IC_MspInit+0xf8>)
 8000f34:	4a1e      	ldr	r2, [pc, #120]	; (8000fb0 <HAL_TIM_IC_MspInit+0xfc>)
 8000f36:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch4.Init.Request = DMA_REQUEST_TIM2_CH4;
 8000f38:	4b1c      	ldr	r3, [pc, #112]	; (8000fac <HAL_TIM_IC_MspInit+0xf8>)
 8000f3a:	2215      	movs	r2, #21
 8000f3c:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f3e:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <HAL_TIM_IC_MspInit+0xf8>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f44:	4b19      	ldr	r3, [pc, #100]	; (8000fac <HAL_TIM_IC_MspInit+0xf8>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8000f4a:	4b18      	ldr	r3, [pc, #96]	; (8000fac <HAL_TIM_IC_MspInit+0xf8>)
 8000f4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f50:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f52:	4b16      	ldr	r3, [pc, #88]	; (8000fac <HAL_TIM_IC_MspInit+0xf8>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f58:	4b14      	ldr	r3, [pc, #80]	; (8000fac <HAL_TIM_IC_MspInit+0xf8>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch4.Init.Mode = DMA_NORMAL;
 8000f5e:	4b13      	ldr	r3, [pc, #76]	; (8000fac <HAL_TIM_IC_MspInit+0xf8>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8000f64:	4b11      	ldr	r3, [pc, #68]	; (8000fac <HAL_TIM_IC_MspInit+0xf8>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f6a:	4b10      	ldr	r3, [pc, #64]	; (8000fac <HAL_TIM_IC_MspInit+0xf8>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch4) != HAL_OK)
 8000f70:	480e      	ldr	r0, [pc, #56]	; (8000fac <HAL_TIM_IC_MspInit+0xf8>)
 8000f72:	f000 fbe3 	bl	800173c <HAL_DMA_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <HAL_TIM_IC_MspInit+0xcc>
    {
      Error_Handler();
 8000f7c:	f7ff feac 	bl	8000cd8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_ic,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch4);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a0a      	ldr	r2, [pc, #40]	; (8000fac <HAL_TIM_IC_MspInit+0xf8>)
 8000f84:	631a      	str	r2, [r3, #48]	; 0x30
 8000f86:	4a09      	ldr	r2, [pc, #36]	; (8000fac <HAL_TIM_IC_MspInit+0xf8>)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2100      	movs	r1, #0
 8000f90:	201c      	movs	r0, #28
 8000f92:	f000 fb9e 	bl	80016d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f96:	201c      	movs	r0, #28
 8000f98:	f000 fbb5 	bl	8001706 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f9c:	bf00      	nop
 8000f9e:	3728      	adds	r7, #40	; 0x28
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	58024400 	.word	0x58024400
 8000fa8:	58020000 	.word	0x58020000
 8000fac:	24000220 	.word	0x24000220
 8000fb0:	40020028 	.word	0x40020028

08000fb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b0b8      	sub	sp, #224	; 0xe0
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fcc:	f107 0310 	add.w	r3, r7, #16
 8000fd0:	22bc      	movs	r2, #188	; 0xbc
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f008 f805 	bl	8008fe4 <memset>
  if(huart->Instance==USART3)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a25      	ldr	r2, [pc, #148]	; (8001074 <HAL_UART_MspInit+0xc0>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d142      	bne.n	800106a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fee:	f107 0310 	add.w	r3, r7, #16
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f004 fa84 	bl	8005500 <HAL_RCCEx_PeriphCLKConfig>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ffe:	f7ff fe6b 	bl	8000cd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001002:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <HAL_UART_MspInit+0xc4>)
 8001004:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001008:	4a1b      	ldr	r2, [pc, #108]	; (8001078 <HAL_UART_MspInit+0xc4>)
 800100a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800100e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001012:	4b19      	ldr	r3, [pc, #100]	; (8001078 <HAL_UART_MspInit+0xc4>)
 8001014:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001018:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001020:	4b15      	ldr	r3, [pc, #84]	; (8001078 <HAL_UART_MspInit+0xc4>)
 8001022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001026:	4a14      	ldr	r2, [pc, #80]	; (8001078 <HAL_UART_MspInit+0xc4>)
 8001028:	f043 0308 	orr.w	r3, r3, #8
 800102c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001030:	4b11      	ldr	r3, [pc, #68]	; (8001078 <HAL_UART_MspInit+0xc4>)
 8001032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001036:	f003 0308 	and.w	r3, r3, #8
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800103e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001042:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	2302      	movs	r3, #2
 8001048:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001052:	2300      	movs	r3, #0
 8001054:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001058:	2307      	movs	r3, #7
 800105a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800105e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001062:	4619      	mov	r1, r3
 8001064:	4805      	ldr	r0, [pc, #20]	; (800107c <HAL_UART_MspInit+0xc8>)
 8001066:	f002 ff1b 	bl	8003ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800106a:	bf00      	nop
 800106c:	37e0      	adds	r7, #224	; 0xe0
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40004800 	.word	0x40004800
 8001078:	58024400 	.word	0x58024400
 800107c:	58020c00 	.word	0x58020c00

08001080 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b0b8      	sub	sp, #224	; 0xe0
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001088:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001098:	f107 0310 	add.w	r3, r7, #16
 800109c:	22bc      	movs	r2, #188	; 0xbc
 800109e:	2100      	movs	r1, #0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f007 ff9f 	bl	8008fe4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a36      	ldr	r2, [pc, #216]	; (8001184 <HAL_PCD_MspInit+0x104>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d165      	bne.n	800117c <HAL_PCD_MspInit+0xfc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80010b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80010b4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 4;
 80010b6:	2304      	movs	r3, #4
 80010b8:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 100;
 80010ba:	2364      	movs	r3, #100	; 0x64
 80010bc:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80010be:	2302      	movs	r3, #2
 80010c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 80010c2:	2304      	movs	r3, #4
 80010c4:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80010c6:	2302      	movs	r3, #2
 80010c8:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 80010ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010ce:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80010d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80010d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010dc:	f107 0310 	add.w	r3, r7, #16
 80010e0:	4618      	mov	r0, r3
 80010e2:	f004 fa0d 	bl	8005500 <HAL_RCCEx_PeriphCLKConfig>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80010ec:	f7ff fdf4 	bl	8000cd8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80010f0:	f003 fa3c 	bl	800456c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f4:	4b24      	ldr	r3, [pc, #144]	; (8001188 <HAL_PCD_MspInit+0x108>)
 80010f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010fa:	4a23      	ldr	r2, [pc, #140]	; (8001188 <HAL_PCD_MspInit+0x108>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001104:	4b20      	ldr	r3, [pc, #128]	; (8001188 <HAL_PCD_MspInit+0x108>)
 8001106:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001112:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001116:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	2302      	movs	r3, #2
 800111c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001126:	2300      	movs	r3, #0
 8001128:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800112c:	230a      	movs	r3, #10
 800112e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001132:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001136:	4619      	mov	r1, r3
 8001138:	4814      	ldr	r0, [pc, #80]	; (800118c <HAL_PCD_MspInit+0x10c>)
 800113a:	f002 feb1 	bl	8003ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800113e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001142:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001146:	2300      	movs	r3, #0
 8001148:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001152:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001156:	4619      	mov	r1, r3
 8001158:	480c      	ldr	r0, [pc, #48]	; (800118c <HAL_PCD_MspInit+0x10c>)
 800115a:	f002 fea1 	bl	8003ea0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800115e:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <HAL_PCD_MspInit+0x108>)
 8001160:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001164:	4a08      	ldr	r2, [pc, #32]	; (8001188 <HAL_PCD_MspInit+0x108>)
 8001166:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800116a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <HAL_PCD_MspInit+0x108>)
 8001170:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001174:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800117c:	bf00      	nop
 800117e:	37e0      	adds	r7, #224	; 0xe0
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40080000 	.word	0x40080000
 8001188:	58024400 	.word	0x58024400
 800118c:	58020000 	.word	0x58020000

08001190 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001194:	e7fe      	b.n	8001194 <NMI_Handler+0x4>

08001196 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800119a:	e7fe      	b.n	800119a <HardFault_Handler+0x4>

0800119c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a0:	e7fe      	b.n	80011a0 <MemManage_Handler+0x4>

080011a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011a6:	e7fe      	b.n	80011a6 <BusFault_Handler+0x4>

080011a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011ac:	e7fe      	b.n	80011ac <UsageFault_Handler+0x4>

080011ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011dc:	f000 f93a 	bl	8001454 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch4);
 80011e8:	4802      	ldr	r0, [pc, #8]	; (80011f4 <DMA1_Stream1_IRQHandler+0x10>)
 80011ea:	f000 ff23 	bl	8002034 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */



  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	24000220 	.word	0x24000220

080011f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011fc:	4802      	ldr	r0, [pc, #8]	; (8001208 <TIM2_IRQHandler+0x10>)
 80011fe:	f005 fe43 	bl	8006e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	240001d4 	.word	0x240001d4

0800120c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001210:	4b37      	ldr	r3, [pc, #220]	; (80012f0 <SystemInit+0xe4>)
 8001212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001216:	4a36      	ldr	r2, [pc, #216]	; (80012f0 <SystemInit+0xe4>)
 8001218:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800121c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001220:	4b34      	ldr	r3, [pc, #208]	; (80012f4 <SystemInit+0xe8>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 030f 	and.w	r3, r3, #15
 8001228:	2b06      	cmp	r3, #6
 800122a:	d807      	bhi.n	800123c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800122c:	4b31      	ldr	r3, [pc, #196]	; (80012f4 <SystemInit+0xe8>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f023 030f 	bic.w	r3, r3, #15
 8001234:	4a2f      	ldr	r2, [pc, #188]	; (80012f4 <SystemInit+0xe8>)
 8001236:	f043 0307 	orr.w	r3, r3, #7
 800123a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800123c:	4b2e      	ldr	r3, [pc, #184]	; (80012f8 <SystemInit+0xec>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a2d      	ldr	r2, [pc, #180]	; (80012f8 <SystemInit+0xec>)
 8001242:	f043 0301 	orr.w	r3, r3, #1
 8001246:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001248:	4b2b      	ldr	r3, [pc, #172]	; (80012f8 <SystemInit+0xec>)
 800124a:	2200      	movs	r2, #0
 800124c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800124e:	4b2a      	ldr	r3, [pc, #168]	; (80012f8 <SystemInit+0xec>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	4929      	ldr	r1, [pc, #164]	; (80012f8 <SystemInit+0xec>)
 8001254:	4b29      	ldr	r3, [pc, #164]	; (80012fc <SystemInit+0xf0>)
 8001256:	4013      	ands	r3, r2
 8001258:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800125a:	4b26      	ldr	r3, [pc, #152]	; (80012f4 <SystemInit+0xe8>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0308 	and.w	r3, r3, #8
 8001262:	2b00      	cmp	r3, #0
 8001264:	d007      	beq.n	8001276 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001266:	4b23      	ldr	r3, [pc, #140]	; (80012f4 <SystemInit+0xe8>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f023 030f 	bic.w	r3, r3, #15
 800126e:	4a21      	ldr	r2, [pc, #132]	; (80012f4 <SystemInit+0xe8>)
 8001270:	f043 0307 	orr.w	r3, r3, #7
 8001274:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001276:	4b20      	ldr	r3, [pc, #128]	; (80012f8 <SystemInit+0xec>)
 8001278:	2200      	movs	r2, #0
 800127a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800127c:	4b1e      	ldr	r3, [pc, #120]	; (80012f8 <SystemInit+0xec>)
 800127e:	2200      	movs	r2, #0
 8001280:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001282:	4b1d      	ldr	r3, [pc, #116]	; (80012f8 <SystemInit+0xec>)
 8001284:	2200      	movs	r2, #0
 8001286:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001288:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <SystemInit+0xec>)
 800128a:	4a1d      	ldr	r2, [pc, #116]	; (8001300 <SystemInit+0xf4>)
 800128c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800128e:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <SystemInit+0xec>)
 8001290:	4a1c      	ldr	r2, [pc, #112]	; (8001304 <SystemInit+0xf8>)
 8001292:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001294:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <SystemInit+0xec>)
 8001296:	4a1c      	ldr	r2, [pc, #112]	; (8001308 <SystemInit+0xfc>)
 8001298:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800129a:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <SystemInit+0xec>)
 800129c:	2200      	movs	r2, #0
 800129e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80012a0:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <SystemInit+0xec>)
 80012a2:	4a19      	ldr	r2, [pc, #100]	; (8001308 <SystemInit+0xfc>)
 80012a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80012a6:	4b14      	ldr	r3, [pc, #80]	; (80012f8 <SystemInit+0xec>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80012ac:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <SystemInit+0xec>)
 80012ae:	4a16      	ldr	r2, [pc, #88]	; (8001308 <SystemInit+0xfc>)
 80012b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80012b2:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <SystemInit+0xec>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012b8:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <SystemInit+0xec>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a0e      	ldr	r2, [pc, #56]	; (80012f8 <SystemInit+0xec>)
 80012be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012c2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80012c4:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <SystemInit+0xec>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80012ca:	4b10      	ldr	r3, [pc, #64]	; (800130c <SystemInit+0x100>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	4b10      	ldr	r3, [pc, #64]	; (8001310 <SystemInit+0x104>)
 80012d0:	4013      	ands	r3, r2
 80012d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80012d6:	d202      	bcs.n	80012de <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80012d8:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <SystemInit+0x108>)
 80012da:	2201      	movs	r2, #1
 80012dc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <SystemInit+0x10c>)
 80012e0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80012e4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	e000ed00 	.word	0xe000ed00
 80012f4:	52002000 	.word	0x52002000
 80012f8:	58024400 	.word	0x58024400
 80012fc:	eaf6ed7f 	.word	0xeaf6ed7f
 8001300:	02020200 	.word	0x02020200
 8001304:	01ff0000 	.word	0x01ff0000
 8001308:	01010280 	.word	0x01010280
 800130c:	5c001000 	.word	0x5c001000
 8001310:	ffff0000 	.word	0xffff0000
 8001314:	51008108 	.word	0x51008108
 8001318:	52004000 	.word	0x52004000

0800131c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800131c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001354 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001320:	f7ff ff74 	bl	800120c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001324:	480c      	ldr	r0, [pc, #48]	; (8001358 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001326:	490d      	ldr	r1, [pc, #52]	; (800135c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001328:	4a0d      	ldr	r2, [pc, #52]	; (8001360 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800132a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800132c:	e002      	b.n	8001334 <LoopCopyDataInit>

0800132e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800132e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001330:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001332:	3304      	adds	r3, #4

08001334 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001334:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001336:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001338:	d3f9      	bcc.n	800132e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800133a:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800133c:	4c0a      	ldr	r4, [pc, #40]	; (8001368 <LoopFillZerobss+0x22>)
  movs r3, #0
 800133e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001340:	e001      	b.n	8001346 <LoopFillZerobss>

08001342 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001342:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001344:	3204      	adds	r2, #4

08001346 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001346:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001348:	d3fb      	bcc.n	8001342 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800134a:	f007 fe27 	bl	8008f9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800134e:	f7ff f945 	bl	80005dc <main>
  bx  lr
 8001352:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001354:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001358:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800135c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001360:	0800905c 	.word	0x0800905c
  ldr r2, =_sbss
 8001364:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8001368:	24000c2c 	.word	0x24000c2c

0800136c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800136c:	e7fe      	b.n	800136c <ADC3_IRQHandler>
	...

08001370 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001376:	2003      	movs	r0, #3
 8001378:	f000 f9a0 	bl	80016bc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800137c:	f003 feea 	bl	8005154 <HAL_RCC_GetSysClockFreq>
 8001380:	4602      	mov	r2, r0
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <HAL_Init+0x68>)
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	0a1b      	lsrs	r3, r3, #8
 8001388:	f003 030f 	and.w	r3, r3, #15
 800138c:	4913      	ldr	r1, [pc, #76]	; (80013dc <HAL_Init+0x6c>)
 800138e:	5ccb      	ldrb	r3, [r1, r3]
 8001390:	f003 031f 	and.w	r3, r3, #31
 8001394:	fa22 f303 	lsr.w	r3, r2, r3
 8001398:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800139a:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <HAL_Init+0x68>)
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	f003 030f 	and.w	r3, r3, #15
 80013a2:	4a0e      	ldr	r2, [pc, #56]	; (80013dc <HAL_Init+0x6c>)
 80013a4:	5cd3      	ldrb	r3, [r2, r3]
 80013a6:	f003 031f 	and.w	r3, r3, #31
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	fa22 f303 	lsr.w	r3, r2, r3
 80013b0:	4a0b      	ldr	r2, [pc, #44]	; (80013e0 <HAL_Init+0x70>)
 80013b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013b4:	4a0b      	ldr	r2, [pc, #44]	; (80013e4 <HAL_Init+0x74>)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013ba:	2000      	movs	r0, #0
 80013bc:	f000 f814 	bl	80013e8 <HAL_InitTick>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e002      	b.n	80013d0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013ca:	f7ff fc8b 	bl	8000ce4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	58024400 	.word	0x58024400
 80013dc:	0800900c 	.word	0x0800900c
 80013e0:	24000004 	.word	0x24000004
 80013e4:	24000000 	.word	0x24000000

080013e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80013f0:	4b15      	ldr	r3, [pc, #84]	; (8001448 <HAL_InitTick+0x60>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d101      	bne.n	80013fc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e021      	b.n	8001440 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80013fc:	4b13      	ldr	r3, [pc, #76]	; (800144c <HAL_InitTick+0x64>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4b11      	ldr	r3, [pc, #68]	; (8001448 <HAL_InitTick+0x60>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	4619      	mov	r1, r3
 8001406:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800140a:	fbb3 f3f1 	udiv	r3, r3, r1
 800140e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001412:	4618      	mov	r0, r3
 8001414:	f000 f985 	bl	8001722 <HAL_SYSTICK_Config>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e00e      	b.n	8001440 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2b0f      	cmp	r3, #15
 8001426:	d80a      	bhi.n	800143e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001428:	2200      	movs	r2, #0
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	f04f 30ff 	mov.w	r0, #4294967295
 8001430:	f000 f94f 	bl	80016d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001434:	4a06      	ldr	r2, [pc, #24]	; (8001450 <HAL_InitTick+0x68>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800143a:	2300      	movs	r3, #0
 800143c:	e000      	b.n	8001440 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
}
 8001440:	4618      	mov	r0, r3
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	2400000c 	.word	0x2400000c
 800144c:	24000000 	.word	0x24000000
 8001450:	24000008 	.word	0x24000008

08001454 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <HAL_IncTick+0x20>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	461a      	mov	r2, r3
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_IncTick+0x24>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4413      	add	r3, r2
 8001464:	4a04      	ldr	r2, [pc, #16]	; (8001478 <HAL_IncTick+0x24>)
 8001466:	6013      	str	r3, [r2, #0]
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	2400000c 	.word	0x2400000c
 8001478:	24000c28 	.word	0x24000c28

0800147c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  return uwTick;
 8001480:	4b03      	ldr	r3, [pc, #12]	; (8001490 <HAL_GetTick+0x14>)
 8001482:	681b      	ldr	r3, [r3, #0]
}
 8001484:	4618      	mov	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	24000c28 	.word	0x24000c28

08001494 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800149c:	f7ff ffee 	bl	800147c <HAL_GetTick>
 80014a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ac:	d005      	beq.n	80014ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ae:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <HAL_Delay+0x44>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	461a      	mov	r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	4413      	add	r3, r2
 80014b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014ba:	bf00      	nop
 80014bc:	f7ff ffde 	bl	800147c <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d8f7      	bhi.n	80014bc <HAL_Delay+0x28>
  {
  }
}
 80014cc:	bf00      	nop
 80014ce:	bf00      	nop
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	2400000c 	.word	0x2400000c

080014dc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80014e0:	4b03      	ldr	r3, [pc, #12]	; (80014f0 <HAL_GetREVID+0x14>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	0c1b      	lsrs	r3, r3, #16
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	5c001000 	.word	0x5c001000

080014f4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001504:	4904      	ldr	r1, [pc, #16]	; (8001518 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4313      	orrs	r3, r2
 800150a:	604b      	str	r3, [r1, #4]
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	58000400 	.word	0x58000400

0800151c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800152c:	4b0b      	ldr	r3, [pc, #44]	; (800155c <__NVIC_SetPriorityGrouping+0x40>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001532:	68ba      	ldr	r2, [r7, #8]
 8001534:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001538:	4013      	ands	r3, r2
 800153a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <__NVIC_SetPriorityGrouping+0x44>)
 8001546:	4313      	orrs	r3, r2
 8001548:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800154a:	4a04      	ldr	r2, [pc, #16]	; (800155c <__NVIC_SetPriorityGrouping+0x40>)
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	60d3      	str	r3, [r2, #12]
}
 8001550:	bf00      	nop
 8001552:	3714      	adds	r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000ed00 	.word	0xe000ed00
 8001560:	05fa0000 	.word	0x05fa0000

08001564 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001568:	4b04      	ldr	r3, [pc, #16]	; (800157c <__NVIC_GetPriorityGrouping+0x18>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	0a1b      	lsrs	r3, r3, #8
 800156e:	f003 0307 	and.w	r3, r3, #7
}
 8001572:	4618      	mov	r0, r3
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800158a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800158e:	2b00      	cmp	r3, #0
 8001590:	db0b      	blt.n	80015aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001592:	88fb      	ldrh	r3, [r7, #6]
 8001594:	f003 021f 	and.w	r2, r3, #31
 8001598:	4907      	ldr	r1, [pc, #28]	; (80015b8 <__NVIC_EnableIRQ+0x38>)
 800159a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800159e:	095b      	lsrs	r3, r3, #5
 80015a0:	2001      	movs	r0, #1
 80015a2:	fa00 f202 	lsl.w	r2, r0, r2
 80015a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	e000e100 	.word	0xe000e100

080015bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	6039      	str	r1, [r7, #0]
 80015c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	db0a      	blt.n	80015e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	490c      	ldr	r1, [pc, #48]	; (8001608 <__NVIC_SetPriority+0x4c>)
 80015d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015da:	0112      	lsls	r2, r2, #4
 80015dc:	b2d2      	uxtb	r2, r2
 80015de:	440b      	add	r3, r1
 80015e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015e4:	e00a      	b.n	80015fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	4908      	ldr	r1, [pc, #32]	; (800160c <__NVIC_SetPriority+0x50>)
 80015ec:	88fb      	ldrh	r3, [r7, #6]
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	3b04      	subs	r3, #4
 80015f4:	0112      	lsls	r2, r2, #4
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	440b      	add	r3, r1
 80015fa:	761a      	strb	r2, [r3, #24]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	e000e100 	.word	0xe000e100
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001610:	b480      	push	{r7}
 8001612:	b089      	sub	sp, #36	; 0x24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	f1c3 0307 	rsb	r3, r3, #7
 800162a:	2b04      	cmp	r3, #4
 800162c:	bf28      	it	cs
 800162e:	2304      	movcs	r3, #4
 8001630:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3304      	adds	r3, #4
 8001636:	2b06      	cmp	r3, #6
 8001638:	d902      	bls.n	8001640 <NVIC_EncodePriority+0x30>
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	3b03      	subs	r3, #3
 800163e:	e000      	b.n	8001642 <NVIC_EncodePriority+0x32>
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001644:	f04f 32ff 	mov.w	r2, #4294967295
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43da      	mvns	r2, r3
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	401a      	ands	r2, r3
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001658:	f04f 31ff 	mov.w	r1, #4294967295
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	fa01 f303 	lsl.w	r3, r1, r3
 8001662:	43d9      	mvns	r1, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001668:	4313      	orrs	r3, r2
         );
}
 800166a:	4618      	mov	r0, r3
 800166c:	3724      	adds	r7, #36	; 0x24
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
	...

08001678 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3b01      	subs	r3, #1
 8001684:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001688:	d301      	bcc.n	800168e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800168a:	2301      	movs	r3, #1
 800168c:	e00f      	b.n	80016ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800168e:	4a0a      	ldr	r2, [pc, #40]	; (80016b8 <SysTick_Config+0x40>)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3b01      	subs	r3, #1
 8001694:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001696:	210f      	movs	r1, #15
 8001698:	f04f 30ff 	mov.w	r0, #4294967295
 800169c:	f7ff ff8e 	bl	80015bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <SysTick_Config+0x40>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016a6:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <SysTick_Config+0x40>)
 80016a8:	2207      	movs	r2, #7
 80016aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	e000e010 	.word	0xe000e010

080016bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff ff29 	bl	800151c <__NVIC_SetPriorityGrouping>
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b086      	sub	sp, #24
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	4603      	mov	r3, r0
 80016da:	60b9      	str	r1, [r7, #8]
 80016dc:	607a      	str	r2, [r7, #4]
 80016de:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016e0:	f7ff ff40 	bl	8001564 <__NVIC_GetPriorityGrouping>
 80016e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	68b9      	ldr	r1, [r7, #8]
 80016ea:	6978      	ldr	r0, [r7, #20]
 80016ec:	f7ff ff90 	bl	8001610 <NVIC_EncodePriority>
 80016f0:	4602      	mov	r2, r0
 80016f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016f6:	4611      	mov	r1, r2
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff ff5f 	bl	80015bc <__NVIC_SetPriority>
}
 80016fe:	bf00      	nop
 8001700:	3718      	adds	r7, #24
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b082      	sub	sp, #8
 800170a:	af00      	add	r7, sp, #0
 800170c:	4603      	mov	r3, r0
 800170e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001710:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ff33 	bl	8001580 <__NVIC_EnableIRQ>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7ff ffa4 	bl	8001678 <SysTick_Config>
 8001730:	4603      	mov	r3, r0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
	...

0800173c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001744:	f7ff fe9a 	bl	800147c <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d101      	bne.n	8001754 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e316      	b.n	8001d82 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a66      	ldr	r2, [pc, #408]	; (80018f4 <HAL_DMA_Init+0x1b8>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d04a      	beq.n	80017f4 <HAL_DMA_Init+0xb8>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a65      	ldr	r2, [pc, #404]	; (80018f8 <HAL_DMA_Init+0x1bc>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d045      	beq.n	80017f4 <HAL_DMA_Init+0xb8>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a63      	ldr	r2, [pc, #396]	; (80018fc <HAL_DMA_Init+0x1c0>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d040      	beq.n	80017f4 <HAL_DMA_Init+0xb8>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a62      	ldr	r2, [pc, #392]	; (8001900 <HAL_DMA_Init+0x1c4>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d03b      	beq.n	80017f4 <HAL_DMA_Init+0xb8>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a60      	ldr	r2, [pc, #384]	; (8001904 <HAL_DMA_Init+0x1c8>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d036      	beq.n	80017f4 <HAL_DMA_Init+0xb8>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a5f      	ldr	r2, [pc, #380]	; (8001908 <HAL_DMA_Init+0x1cc>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d031      	beq.n	80017f4 <HAL_DMA_Init+0xb8>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a5d      	ldr	r2, [pc, #372]	; (800190c <HAL_DMA_Init+0x1d0>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d02c      	beq.n	80017f4 <HAL_DMA_Init+0xb8>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a5c      	ldr	r2, [pc, #368]	; (8001910 <HAL_DMA_Init+0x1d4>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d027      	beq.n	80017f4 <HAL_DMA_Init+0xb8>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a5a      	ldr	r2, [pc, #360]	; (8001914 <HAL_DMA_Init+0x1d8>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d022      	beq.n	80017f4 <HAL_DMA_Init+0xb8>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a59      	ldr	r2, [pc, #356]	; (8001918 <HAL_DMA_Init+0x1dc>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d01d      	beq.n	80017f4 <HAL_DMA_Init+0xb8>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a57      	ldr	r2, [pc, #348]	; (800191c <HAL_DMA_Init+0x1e0>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d018      	beq.n	80017f4 <HAL_DMA_Init+0xb8>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a56      	ldr	r2, [pc, #344]	; (8001920 <HAL_DMA_Init+0x1e4>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d013      	beq.n	80017f4 <HAL_DMA_Init+0xb8>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a54      	ldr	r2, [pc, #336]	; (8001924 <HAL_DMA_Init+0x1e8>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d00e      	beq.n	80017f4 <HAL_DMA_Init+0xb8>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a53      	ldr	r2, [pc, #332]	; (8001928 <HAL_DMA_Init+0x1ec>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d009      	beq.n	80017f4 <HAL_DMA_Init+0xb8>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a51      	ldr	r2, [pc, #324]	; (800192c <HAL_DMA_Init+0x1f0>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d004      	beq.n	80017f4 <HAL_DMA_Init+0xb8>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a50      	ldr	r2, [pc, #320]	; (8001930 <HAL_DMA_Init+0x1f4>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d101      	bne.n	80017f8 <HAL_DMA_Init+0xbc>
 80017f4:	2301      	movs	r3, #1
 80017f6:	e000      	b.n	80017fa <HAL_DMA_Init+0xbe>
 80017f8:	2300      	movs	r3, #0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f000 813b 	beq.w	8001a76 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2202      	movs	r2, #2
 8001804:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a37      	ldr	r2, [pc, #220]	; (80018f4 <HAL_DMA_Init+0x1b8>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d04a      	beq.n	80018b0 <HAL_DMA_Init+0x174>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a36      	ldr	r2, [pc, #216]	; (80018f8 <HAL_DMA_Init+0x1bc>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d045      	beq.n	80018b0 <HAL_DMA_Init+0x174>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a34      	ldr	r2, [pc, #208]	; (80018fc <HAL_DMA_Init+0x1c0>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d040      	beq.n	80018b0 <HAL_DMA_Init+0x174>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a33      	ldr	r2, [pc, #204]	; (8001900 <HAL_DMA_Init+0x1c4>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d03b      	beq.n	80018b0 <HAL_DMA_Init+0x174>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a31      	ldr	r2, [pc, #196]	; (8001904 <HAL_DMA_Init+0x1c8>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d036      	beq.n	80018b0 <HAL_DMA_Init+0x174>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a30      	ldr	r2, [pc, #192]	; (8001908 <HAL_DMA_Init+0x1cc>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d031      	beq.n	80018b0 <HAL_DMA_Init+0x174>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a2e      	ldr	r2, [pc, #184]	; (800190c <HAL_DMA_Init+0x1d0>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d02c      	beq.n	80018b0 <HAL_DMA_Init+0x174>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a2d      	ldr	r2, [pc, #180]	; (8001910 <HAL_DMA_Init+0x1d4>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d027      	beq.n	80018b0 <HAL_DMA_Init+0x174>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a2b      	ldr	r2, [pc, #172]	; (8001914 <HAL_DMA_Init+0x1d8>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d022      	beq.n	80018b0 <HAL_DMA_Init+0x174>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a2a      	ldr	r2, [pc, #168]	; (8001918 <HAL_DMA_Init+0x1dc>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d01d      	beq.n	80018b0 <HAL_DMA_Init+0x174>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a28      	ldr	r2, [pc, #160]	; (800191c <HAL_DMA_Init+0x1e0>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d018      	beq.n	80018b0 <HAL_DMA_Init+0x174>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a27      	ldr	r2, [pc, #156]	; (8001920 <HAL_DMA_Init+0x1e4>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d013      	beq.n	80018b0 <HAL_DMA_Init+0x174>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a25      	ldr	r2, [pc, #148]	; (8001924 <HAL_DMA_Init+0x1e8>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d00e      	beq.n	80018b0 <HAL_DMA_Init+0x174>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a24      	ldr	r2, [pc, #144]	; (8001928 <HAL_DMA_Init+0x1ec>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d009      	beq.n	80018b0 <HAL_DMA_Init+0x174>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a22      	ldr	r2, [pc, #136]	; (800192c <HAL_DMA_Init+0x1f0>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d004      	beq.n	80018b0 <HAL_DMA_Init+0x174>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a21      	ldr	r2, [pc, #132]	; (8001930 <HAL_DMA_Init+0x1f4>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d108      	bne.n	80018c2 <HAL_DMA_Init+0x186>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f022 0201 	bic.w	r2, r2, #1
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	e007      	b.n	80018d2 <HAL_DMA_Init+0x196>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f022 0201 	bic.w	r2, r2, #1
 80018d0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80018d2:	e02f      	b.n	8001934 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018d4:	f7ff fdd2 	bl	800147c <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b05      	cmp	r3, #5
 80018e0:	d928      	bls.n	8001934 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2220      	movs	r2, #32
 80018e6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2203      	movs	r2, #3
 80018ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e246      	b.n	8001d82 <HAL_DMA_Init+0x646>
 80018f4:	40020010 	.word	0x40020010
 80018f8:	40020028 	.word	0x40020028
 80018fc:	40020040 	.word	0x40020040
 8001900:	40020058 	.word	0x40020058
 8001904:	40020070 	.word	0x40020070
 8001908:	40020088 	.word	0x40020088
 800190c:	400200a0 	.word	0x400200a0
 8001910:	400200b8 	.word	0x400200b8
 8001914:	40020410 	.word	0x40020410
 8001918:	40020428 	.word	0x40020428
 800191c:	40020440 	.word	0x40020440
 8001920:	40020458 	.word	0x40020458
 8001924:	40020470 	.word	0x40020470
 8001928:	40020488 	.word	0x40020488
 800192c:	400204a0 	.word	0x400204a0
 8001930:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1c8      	bne.n	80018d4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800194a:	697a      	ldr	r2, [r7, #20]
 800194c:	4b83      	ldr	r3, [pc, #524]	; (8001b5c <HAL_DMA_Init+0x420>)
 800194e:	4013      	ands	r3, r2
 8001950:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800195a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	691b      	ldr	r3, [r3, #16]
 8001960:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001966:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001972:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a1b      	ldr	r3, [r3, #32]
 8001978:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	4313      	orrs	r3, r2
 800197e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001984:	2b04      	cmp	r3, #4
 8001986:	d107      	bne.n	8001998 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001990:	4313      	orrs	r3, r2
 8001992:	697a      	ldr	r2, [r7, #20]
 8001994:	4313      	orrs	r3, r2
 8001996:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001998:	4b71      	ldr	r3, [pc, #452]	; (8001b60 <HAL_DMA_Init+0x424>)
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	4b71      	ldr	r3, [pc, #452]	; (8001b64 <HAL_DMA_Init+0x428>)
 800199e:	4013      	ands	r3, r2
 80019a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019a4:	d328      	bcc.n	80019f8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	2b28      	cmp	r3, #40	; 0x28
 80019ac:	d903      	bls.n	80019b6 <HAL_DMA_Init+0x27a>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b2e      	cmp	r3, #46	; 0x2e
 80019b4:	d917      	bls.n	80019e6 <HAL_DMA_Init+0x2aa>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b3e      	cmp	r3, #62	; 0x3e
 80019bc:	d903      	bls.n	80019c6 <HAL_DMA_Init+0x28a>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b42      	cmp	r3, #66	; 0x42
 80019c4:	d90f      	bls.n	80019e6 <HAL_DMA_Init+0x2aa>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2b46      	cmp	r3, #70	; 0x46
 80019cc:	d903      	bls.n	80019d6 <HAL_DMA_Init+0x29a>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b48      	cmp	r3, #72	; 0x48
 80019d4:	d907      	bls.n	80019e6 <HAL_DMA_Init+0x2aa>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b4e      	cmp	r3, #78	; 0x4e
 80019dc:	d905      	bls.n	80019ea <HAL_DMA_Init+0x2ae>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b52      	cmp	r3, #82	; 0x52
 80019e4:	d801      	bhi.n	80019ea <HAL_DMA_Init+0x2ae>
 80019e6:	2301      	movs	r3, #1
 80019e8:	e000      	b.n	80019ec <HAL_DMA_Init+0x2b0>
 80019ea:	2300      	movs	r3, #0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d003      	beq.n	80019f8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80019f6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	697a      	ldr	r2, [r7, #20]
 80019fe:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	f023 0307 	bic.w	r3, r3, #7
 8001a0e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a14:	697a      	ldr	r2, [r7, #20]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1e:	2b04      	cmp	r3, #4
 8001a20:	d117      	bne.n	8001a52 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a26:	697a      	ldr	r2, [r7, #20]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d00e      	beq.n	8001a52 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f001 fc85 	bl	8003344 <DMA_CheckFifoParam>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d008      	beq.n	8001a52 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2240      	movs	r2, #64	; 0x40
 8001a44:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e197      	b.n	8001d82 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f001 fbc0 	bl	80031e0 <DMA_CalcBaseAndBitshift>
 8001a60:	4603      	mov	r3, r0
 8001a62:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a68:	f003 031f 	and.w	r3, r3, #31
 8001a6c:	223f      	movs	r2, #63	; 0x3f
 8001a6e:	409a      	lsls	r2, r3
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	e0cd      	b.n	8001c12 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a3b      	ldr	r2, [pc, #236]	; (8001b68 <HAL_DMA_Init+0x42c>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d022      	beq.n	8001ac6 <HAL_DMA_Init+0x38a>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a39      	ldr	r2, [pc, #228]	; (8001b6c <HAL_DMA_Init+0x430>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d01d      	beq.n	8001ac6 <HAL_DMA_Init+0x38a>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a38      	ldr	r2, [pc, #224]	; (8001b70 <HAL_DMA_Init+0x434>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d018      	beq.n	8001ac6 <HAL_DMA_Init+0x38a>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a36      	ldr	r2, [pc, #216]	; (8001b74 <HAL_DMA_Init+0x438>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d013      	beq.n	8001ac6 <HAL_DMA_Init+0x38a>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a35      	ldr	r2, [pc, #212]	; (8001b78 <HAL_DMA_Init+0x43c>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d00e      	beq.n	8001ac6 <HAL_DMA_Init+0x38a>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a33      	ldr	r2, [pc, #204]	; (8001b7c <HAL_DMA_Init+0x440>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d009      	beq.n	8001ac6 <HAL_DMA_Init+0x38a>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a32      	ldr	r2, [pc, #200]	; (8001b80 <HAL_DMA_Init+0x444>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d004      	beq.n	8001ac6 <HAL_DMA_Init+0x38a>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a30      	ldr	r2, [pc, #192]	; (8001b84 <HAL_DMA_Init+0x448>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d101      	bne.n	8001aca <HAL_DMA_Init+0x38e>
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e000      	b.n	8001acc <HAL_DMA_Init+0x390>
 8001aca:	2300      	movs	r3, #0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f000 8097 	beq.w	8001c00 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a24      	ldr	r2, [pc, #144]	; (8001b68 <HAL_DMA_Init+0x42c>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d021      	beq.n	8001b20 <HAL_DMA_Init+0x3e4>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a22      	ldr	r2, [pc, #136]	; (8001b6c <HAL_DMA_Init+0x430>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d01c      	beq.n	8001b20 <HAL_DMA_Init+0x3e4>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a21      	ldr	r2, [pc, #132]	; (8001b70 <HAL_DMA_Init+0x434>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d017      	beq.n	8001b20 <HAL_DMA_Init+0x3e4>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a1f      	ldr	r2, [pc, #124]	; (8001b74 <HAL_DMA_Init+0x438>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d012      	beq.n	8001b20 <HAL_DMA_Init+0x3e4>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a1e      	ldr	r2, [pc, #120]	; (8001b78 <HAL_DMA_Init+0x43c>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d00d      	beq.n	8001b20 <HAL_DMA_Init+0x3e4>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a1c      	ldr	r2, [pc, #112]	; (8001b7c <HAL_DMA_Init+0x440>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d008      	beq.n	8001b20 <HAL_DMA_Init+0x3e4>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a1b      	ldr	r2, [pc, #108]	; (8001b80 <HAL_DMA_Init+0x444>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d003      	beq.n	8001b20 <HAL_DMA_Init+0x3e4>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a19      	ldr	r2, [pc, #100]	; (8001b84 <HAL_DMA_Init+0x448>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2202      	movs	r2, #2
 8001b26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001b3a:	697a      	ldr	r2, [r7, #20]
 8001b3c:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <HAL_DMA_Init+0x44c>)
 8001b3e:	4013      	ands	r3, r2
 8001b40:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2b40      	cmp	r3, #64	; 0x40
 8001b48:	d020      	beq.n	8001b8c <HAL_DMA_Init+0x450>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	2b80      	cmp	r3, #128	; 0x80
 8001b50:	d102      	bne.n	8001b58 <HAL_DMA_Init+0x41c>
 8001b52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b56:	e01a      	b.n	8001b8e <HAL_DMA_Init+0x452>
 8001b58:	2300      	movs	r3, #0
 8001b5a:	e018      	b.n	8001b8e <HAL_DMA_Init+0x452>
 8001b5c:	fe10803f 	.word	0xfe10803f
 8001b60:	5c001000 	.word	0x5c001000
 8001b64:	ffff0000 	.word	0xffff0000
 8001b68:	58025408 	.word	0x58025408
 8001b6c:	5802541c 	.word	0x5802541c
 8001b70:	58025430 	.word	0x58025430
 8001b74:	58025444 	.word	0x58025444
 8001b78:	58025458 	.word	0x58025458
 8001b7c:	5802546c 	.word	0x5802546c
 8001b80:	58025480 	.word	0x58025480
 8001b84:	58025494 	.word	0x58025494
 8001b88:	fffe000f 	.word	0xfffe000f
 8001b8c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	68d2      	ldr	r2, [r2, #12]
 8001b92:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001b9c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001ba4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001bac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001bb4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001bbc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4b6e      	ldr	r3, [pc, #440]	; (8001d8c <HAL_DMA_Init+0x650>)
 8001bd4:	4413      	add	r3, r2
 8001bd6:	4a6e      	ldr	r2, [pc, #440]	; (8001d90 <HAL_DMA_Init+0x654>)
 8001bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bdc:	091b      	lsrs	r3, r3, #4
 8001bde:	009a      	lsls	r2, r3, #2
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f001 fafb 	bl	80031e0 <DMA_CalcBaseAndBitshift>
 8001bea:	4603      	mov	r3, r0
 8001bec:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf2:	f003 031f 	and.w	r3, r3, #31
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	409a      	lsls	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	e008      	b.n	8001c12 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2240      	movs	r2, #64	; 0x40
 8001c04:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2203      	movs	r2, #3
 8001c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e0b7      	b.n	8001d82 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a5f      	ldr	r2, [pc, #380]	; (8001d94 <HAL_DMA_Init+0x658>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d072      	beq.n	8001d02 <HAL_DMA_Init+0x5c6>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a5d      	ldr	r2, [pc, #372]	; (8001d98 <HAL_DMA_Init+0x65c>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d06d      	beq.n	8001d02 <HAL_DMA_Init+0x5c6>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a5c      	ldr	r2, [pc, #368]	; (8001d9c <HAL_DMA_Init+0x660>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d068      	beq.n	8001d02 <HAL_DMA_Init+0x5c6>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a5a      	ldr	r2, [pc, #360]	; (8001da0 <HAL_DMA_Init+0x664>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d063      	beq.n	8001d02 <HAL_DMA_Init+0x5c6>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a59      	ldr	r2, [pc, #356]	; (8001da4 <HAL_DMA_Init+0x668>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d05e      	beq.n	8001d02 <HAL_DMA_Init+0x5c6>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a57      	ldr	r2, [pc, #348]	; (8001da8 <HAL_DMA_Init+0x66c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d059      	beq.n	8001d02 <HAL_DMA_Init+0x5c6>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a56      	ldr	r2, [pc, #344]	; (8001dac <HAL_DMA_Init+0x670>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d054      	beq.n	8001d02 <HAL_DMA_Init+0x5c6>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a54      	ldr	r2, [pc, #336]	; (8001db0 <HAL_DMA_Init+0x674>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d04f      	beq.n	8001d02 <HAL_DMA_Init+0x5c6>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a53      	ldr	r2, [pc, #332]	; (8001db4 <HAL_DMA_Init+0x678>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d04a      	beq.n	8001d02 <HAL_DMA_Init+0x5c6>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a51      	ldr	r2, [pc, #324]	; (8001db8 <HAL_DMA_Init+0x67c>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d045      	beq.n	8001d02 <HAL_DMA_Init+0x5c6>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a50      	ldr	r2, [pc, #320]	; (8001dbc <HAL_DMA_Init+0x680>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d040      	beq.n	8001d02 <HAL_DMA_Init+0x5c6>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a4e      	ldr	r2, [pc, #312]	; (8001dc0 <HAL_DMA_Init+0x684>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d03b      	beq.n	8001d02 <HAL_DMA_Init+0x5c6>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a4d      	ldr	r2, [pc, #308]	; (8001dc4 <HAL_DMA_Init+0x688>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d036      	beq.n	8001d02 <HAL_DMA_Init+0x5c6>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a4b      	ldr	r2, [pc, #300]	; (8001dc8 <HAL_DMA_Init+0x68c>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d031      	beq.n	8001d02 <HAL_DMA_Init+0x5c6>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a4a      	ldr	r2, [pc, #296]	; (8001dcc <HAL_DMA_Init+0x690>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d02c      	beq.n	8001d02 <HAL_DMA_Init+0x5c6>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a48      	ldr	r2, [pc, #288]	; (8001dd0 <HAL_DMA_Init+0x694>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d027      	beq.n	8001d02 <HAL_DMA_Init+0x5c6>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a47      	ldr	r2, [pc, #284]	; (8001dd4 <HAL_DMA_Init+0x698>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d022      	beq.n	8001d02 <HAL_DMA_Init+0x5c6>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a45      	ldr	r2, [pc, #276]	; (8001dd8 <HAL_DMA_Init+0x69c>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d01d      	beq.n	8001d02 <HAL_DMA_Init+0x5c6>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a44      	ldr	r2, [pc, #272]	; (8001ddc <HAL_DMA_Init+0x6a0>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d018      	beq.n	8001d02 <HAL_DMA_Init+0x5c6>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a42      	ldr	r2, [pc, #264]	; (8001de0 <HAL_DMA_Init+0x6a4>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d013      	beq.n	8001d02 <HAL_DMA_Init+0x5c6>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a41      	ldr	r2, [pc, #260]	; (8001de4 <HAL_DMA_Init+0x6a8>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d00e      	beq.n	8001d02 <HAL_DMA_Init+0x5c6>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a3f      	ldr	r2, [pc, #252]	; (8001de8 <HAL_DMA_Init+0x6ac>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d009      	beq.n	8001d02 <HAL_DMA_Init+0x5c6>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a3e      	ldr	r2, [pc, #248]	; (8001dec <HAL_DMA_Init+0x6b0>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d004      	beq.n	8001d02 <HAL_DMA_Init+0x5c6>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a3c      	ldr	r2, [pc, #240]	; (8001df0 <HAL_DMA_Init+0x6b4>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d101      	bne.n	8001d06 <HAL_DMA_Init+0x5ca>
 8001d02:	2301      	movs	r3, #1
 8001d04:	e000      	b.n	8001d08 <HAL_DMA_Init+0x5cc>
 8001d06:	2300      	movs	r3, #0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d032      	beq.n	8001d72 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f001 fb95 	bl	800343c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	2b80      	cmp	r3, #128	; 0x80
 8001d18:	d102      	bne.n	8001d20 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685a      	ldr	r2, [r3, #4]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001d34:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d010      	beq.n	8001d60 <HAL_DMA_Init+0x624>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b08      	cmp	r3, #8
 8001d44:	d80c      	bhi.n	8001d60 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f001 fc12 	bl	8003570 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	e008      	b.n	8001d72 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3718      	adds	r7, #24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	a7fdabf8 	.word	0xa7fdabf8
 8001d90:	cccccccd 	.word	0xcccccccd
 8001d94:	40020010 	.word	0x40020010
 8001d98:	40020028 	.word	0x40020028
 8001d9c:	40020040 	.word	0x40020040
 8001da0:	40020058 	.word	0x40020058
 8001da4:	40020070 	.word	0x40020070
 8001da8:	40020088 	.word	0x40020088
 8001dac:	400200a0 	.word	0x400200a0
 8001db0:	400200b8 	.word	0x400200b8
 8001db4:	40020410 	.word	0x40020410
 8001db8:	40020428 	.word	0x40020428
 8001dbc:	40020440 	.word	0x40020440
 8001dc0:	40020458 	.word	0x40020458
 8001dc4:	40020470 	.word	0x40020470
 8001dc8:	40020488 	.word	0x40020488
 8001dcc:	400204a0 	.word	0x400204a0
 8001dd0:	400204b8 	.word	0x400204b8
 8001dd4:	58025408 	.word	0x58025408
 8001dd8:	5802541c 	.word	0x5802541c
 8001ddc:	58025430 	.word	0x58025430
 8001de0:	58025444 	.word	0x58025444
 8001de4:	58025458 	.word	0x58025458
 8001de8:	5802546c 	.word	0x5802546c
 8001dec:	58025480 	.word	0x58025480
 8001df0:	58025494 	.word	0x58025494

08001df4 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
 8001e00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e02:	2300      	movs	r3, #0
 8001e04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d101      	bne.n	8001e10 <HAL_DMA_Start+0x1c>
  {
    return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e0ec      	b.n	8001fea <HAL_DMA_Start+0x1f6>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d101      	bne.n	8001e1e <HAL_DMA_Start+0x2a>
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	e0e5      	b.n	8001fea <HAL_DMA_Start+0x1f6>
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	f040 80d0 	bne.w	8001fd4 <HAL_DMA_Start+0x1e0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2202      	movs	r2, #2
 8001e38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a6b      	ldr	r2, [pc, #428]	; (8001ff4 <HAL_DMA_Start+0x200>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d04a      	beq.n	8001ee2 <HAL_DMA_Start+0xee>
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a69      	ldr	r2, [pc, #420]	; (8001ff8 <HAL_DMA_Start+0x204>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d045      	beq.n	8001ee2 <HAL_DMA_Start+0xee>
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a68      	ldr	r2, [pc, #416]	; (8001ffc <HAL_DMA_Start+0x208>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d040      	beq.n	8001ee2 <HAL_DMA_Start+0xee>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a66      	ldr	r2, [pc, #408]	; (8002000 <HAL_DMA_Start+0x20c>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d03b      	beq.n	8001ee2 <HAL_DMA_Start+0xee>
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a65      	ldr	r2, [pc, #404]	; (8002004 <HAL_DMA_Start+0x210>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d036      	beq.n	8001ee2 <HAL_DMA_Start+0xee>
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a63      	ldr	r2, [pc, #396]	; (8002008 <HAL_DMA_Start+0x214>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d031      	beq.n	8001ee2 <HAL_DMA_Start+0xee>
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a62      	ldr	r2, [pc, #392]	; (800200c <HAL_DMA_Start+0x218>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d02c      	beq.n	8001ee2 <HAL_DMA_Start+0xee>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a60      	ldr	r2, [pc, #384]	; (8002010 <HAL_DMA_Start+0x21c>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d027      	beq.n	8001ee2 <HAL_DMA_Start+0xee>
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a5f      	ldr	r2, [pc, #380]	; (8002014 <HAL_DMA_Start+0x220>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d022      	beq.n	8001ee2 <HAL_DMA_Start+0xee>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a5d      	ldr	r2, [pc, #372]	; (8002018 <HAL_DMA_Start+0x224>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d01d      	beq.n	8001ee2 <HAL_DMA_Start+0xee>
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a5c      	ldr	r2, [pc, #368]	; (800201c <HAL_DMA_Start+0x228>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d018      	beq.n	8001ee2 <HAL_DMA_Start+0xee>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a5a      	ldr	r2, [pc, #360]	; (8002020 <HAL_DMA_Start+0x22c>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d013      	beq.n	8001ee2 <HAL_DMA_Start+0xee>
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a59      	ldr	r2, [pc, #356]	; (8002024 <HAL_DMA_Start+0x230>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d00e      	beq.n	8001ee2 <HAL_DMA_Start+0xee>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a57      	ldr	r2, [pc, #348]	; (8002028 <HAL_DMA_Start+0x234>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d009      	beq.n	8001ee2 <HAL_DMA_Start+0xee>
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a56      	ldr	r2, [pc, #344]	; (800202c <HAL_DMA_Start+0x238>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d004      	beq.n	8001ee2 <HAL_DMA_Start+0xee>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a54      	ldr	r2, [pc, #336]	; (8002030 <HAL_DMA_Start+0x23c>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d108      	bne.n	8001ef4 <HAL_DMA_Start+0x100>
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f022 0201 	bic.w	r2, r2, #1
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	e007      	b.n	8001f04 <HAL_DMA_Start+0x110>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f022 0201 	bic.w	r2, r2, #1
 8001f02:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	68b9      	ldr	r1, [r7, #8]
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	f000 ffbc 	bl	8002e88 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a37      	ldr	r2, [pc, #220]	; (8001ff4 <HAL_DMA_Start+0x200>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d04a      	beq.n	8001fb0 <HAL_DMA_Start+0x1bc>
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a36      	ldr	r2, [pc, #216]	; (8001ff8 <HAL_DMA_Start+0x204>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d045      	beq.n	8001fb0 <HAL_DMA_Start+0x1bc>
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a34      	ldr	r2, [pc, #208]	; (8001ffc <HAL_DMA_Start+0x208>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d040      	beq.n	8001fb0 <HAL_DMA_Start+0x1bc>
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a33      	ldr	r2, [pc, #204]	; (8002000 <HAL_DMA_Start+0x20c>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d03b      	beq.n	8001fb0 <HAL_DMA_Start+0x1bc>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a31      	ldr	r2, [pc, #196]	; (8002004 <HAL_DMA_Start+0x210>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d036      	beq.n	8001fb0 <HAL_DMA_Start+0x1bc>
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a30      	ldr	r2, [pc, #192]	; (8002008 <HAL_DMA_Start+0x214>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d031      	beq.n	8001fb0 <HAL_DMA_Start+0x1bc>
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a2e      	ldr	r2, [pc, #184]	; (800200c <HAL_DMA_Start+0x218>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d02c      	beq.n	8001fb0 <HAL_DMA_Start+0x1bc>
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a2d      	ldr	r2, [pc, #180]	; (8002010 <HAL_DMA_Start+0x21c>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d027      	beq.n	8001fb0 <HAL_DMA_Start+0x1bc>
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a2b      	ldr	r2, [pc, #172]	; (8002014 <HAL_DMA_Start+0x220>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d022      	beq.n	8001fb0 <HAL_DMA_Start+0x1bc>
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a2a      	ldr	r2, [pc, #168]	; (8002018 <HAL_DMA_Start+0x224>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d01d      	beq.n	8001fb0 <HAL_DMA_Start+0x1bc>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a28      	ldr	r2, [pc, #160]	; (800201c <HAL_DMA_Start+0x228>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d018      	beq.n	8001fb0 <HAL_DMA_Start+0x1bc>
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a27      	ldr	r2, [pc, #156]	; (8002020 <HAL_DMA_Start+0x22c>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d013      	beq.n	8001fb0 <HAL_DMA_Start+0x1bc>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a25      	ldr	r2, [pc, #148]	; (8002024 <HAL_DMA_Start+0x230>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d00e      	beq.n	8001fb0 <HAL_DMA_Start+0x1bc>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a24      	ldr	r2, [pc, #144]	; (8002028 <HAL_DMA_Start+0x234>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d009      	beq.n	8001fb0 <HAL_DMA_Start+0x1bc>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a22      	ldr	r2, [pc, #136]	; (800202c <HAL_DMA_Start+0x238>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d004      	beq.n	8001fb0 <HAL_DMA_Start+0x1bc>
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a21      	ldr	r2, [pc, #132]	; (8002030 <HAL_DMA_Start+0x23c>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d108      	bne.n	8001fc2 <HAL_DMA_Start+0x1ce>
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f042 0201 	orr.w	r2, r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	e012      	b.n	8001fe8 <HAL_DMA_Start+0x1f4>
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f042 0201 	orr.w	r2, r2, #1
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	e009      	b.n	8001fe8 <HAL_DMA_Start+0x1f4>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fda:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001fe8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3718      	adds	r7, #24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40020010 	.word	0x40020010
 8001ff8:	40020028 	.word	0x40020028
 8001ffc:	40020040 	.word	0x40020040
 8002000:	40020058 	.word	0x40020058
 8002004:	40020070 	.word	0x40020070
 8002008:	40020088 	.word	0x40020088
 800200c:	400200a0 	.word	0x400200a0
 8002010:	400200b8 	.word	0x400200b8
 8002014:	40020410 	.word	0x40020410
 8002018:	40020428 	.word	0x40020428
 800201c:	40020440 	.word	0x40020440
 8002020:	40020458 	.word	0x40020458
 8002024:	40020470 	.word	0x40020470
 8002028:	40020488 	.word	0x40020488
 800202c:	400204a0 	.word	0x400204a0
 8002030:	400204b8 	.word	0x400204b8

08002034 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b08a      	sub	sp, #40	; 0x28
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800203c:	2300      	movs	r3, #0
 800203e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002040:	4b67      	ldr	r3, [pc, #412]	; (80021e0 <HAL_DMA_IRQHandler+0x1ac>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a67      	ldr	r2, [pc, #412]	; (80021e4 <HAL_DMA_IRQHandler+0x1b0>)
 8002046:	fba2 2303 	umull	r2, r3, r2, r3
 800204a:	0a9b      	lsrs	r3, r3, #10
 800204c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002052:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002058:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800205a:	6a3b      	ldr	r3, [r7, #32]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a5f      	ldr	r2, [pc, #380]	; (80021e8 <HAL_DMA_IRQHandler+0x1b4>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d04a      	beq.n	8002106 <HAL_DMA_IRQHandler+0xd2>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a5d      	ldr	r2, [pc, #372]	; (80021ec <HAL_DMA_IRQHandler+0x1b8>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d045      	beq.n	8002106 <HAL_DMA_IRQHandler+0xd2>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a5c      	ldr	r2, [pc, #368]	; (80021f0 <HAL_DMA_IRQHandler+0x1bc>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d040      	beq.n	8002106 <HAL_DMA_IRQHandler+0xd2>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a5a      	ldr	r2, [pc, #360]	; (80021f4 <HAL_DMA_IRQHandler+0x1c0>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d03b      	beq.n	8002106 <HAL_DMA_IRQHandler+0xd2>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a59      	ldr	r2, [pc, #356]	; (80021f8 <HAL_DMA_IRQHandler+0x1c4>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d036      	beq.n	8002106 <HAL_DMA_IRQHandler+0xd2>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a57      	ldr	r2, [pc, #348]	; (80021fc <HAL_DMA_IRQHandler+0x1c8>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d031      	beq.n	8002106 <HAL_DMA_IRQHandler+0xd2>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a56      	ldr	r2, [pc, #344]	; (8002200 <HAL_DMA_IRQHandler+0x1cc>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d02c      	beq.n	8002106 <HAL_DMA_IRQHandler+0xd2>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a54      	ldr	r2, [pc, #336]	; (8002204 <HAL_DMA_IRQHandler+0x1d0>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d027      	beq.n	8002106 <HAL_DMA_IRQHandler+0xd2>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a53      	ldr	r2, [pc, #332]	; (8002208 <HAL_DMA_IRQHandler+0x1d4>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d022      	beq.n	8002106 <HAL_DMA_IRQHandler+0xd2>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a51      	ldr	r2, [pc, #324]	; (800220c <HAL_DMA_IRQHandler+0x1d8>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d01d      	beq.n	8002106 <HAL_DMA_IRQHandler+0xd2>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a50      	ldr	r2, [pc, #320]	; (8002210 <HAL_DMA_IRQHandler+0x1dc>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d018      	beq.n	8002106 <HAL_DMA_IRQHandler+0xd2>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a4e      	ldr	r2, [pc, #312]	; (8002214 <HAL_DMA_IRQHandler+0x1e0>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d013      	beq.n	8002106 <HAL_DMA_IRQHandler+0xd2>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a4d      	ldr	r2, [pc, #308]	; (8002218 <HAL_DMA_IRQHandler+0x1e4>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d00e      	beq.n	8002106 <HAL_DMA_IRQHandler+0xd2>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a4b      	ldr	r2, [pc, #300]	; (800221c <HAL_DMA_IRQHandler+0x1e8>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d009      	beq.n	8002106 <HAL_DMA_IRQHandler+0xd2>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a4a      	ldr	r2, [pc, #296]	; (8002220 <HAL_DMA_IRQHandler+0x1ec>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d004      	beq.n	8002106 <HAL_DMA_IRQHandler+0xd2>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a48      	ldr	r2, [pc, #288]	; (8002224 <HAL_DMA_IRQHandler+0x1f0>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d101      	bne.n	800210a <HAL_DMA_IRQHandler+0xd6>
 8002106:	2301      	movs	r3, #1
 8002108:	e000      	b.n	800210c <HAL_DMA_IRQHandler+0xd8>
 800210a:	2300      	movs	r3, #0
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 842b 	beq.w	8002968 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002116:	f003 031f 	and.w	r3, r3, #31
 800211a:	2208      	movs	r2, #8
 800211c:	409a      	lsls	r2, r3
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	4013      	ands	r3, r2
 8002122:	2b00      	cmp	r3, #0
 8002124:	f000 80a2 	beq.w	800226c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a2e      	ldr	r2, [pc, #184]	; (80021e8 <HAL_DMA_IRQHandler+0x1b4>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d04a      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x194>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a2d      	ldr	r2, [pc, #180]	; (80021ec <HAL_DMA_IRQHandler+0x1b8>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d045      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x194>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a2b      	ldr	r2, [pc, #172]	; (80021f0 <HAL_DMA_IRQHandler+0x1bc>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d040      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x194>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a2a      	ldr	r2, [pc, #168]	; (80021f4 <HAL_DMA_IRQHandler+0x1c0>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d03b      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x194>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a28      	ldr	r2, [pc, #160]	; (80021f8 <HAL_DMA_IRQHandler+0x1c4>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d036      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x194>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a27      	ldr	r2, [pc, #156]	; (80021fc <HAL_DMA_IRQHandler+0x1c8>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d031      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x194>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a25      	ldr	r2, [pc, #148]	; (8002200 <HAL_DMA_IRQHandler+0x1cc>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d02c      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x194>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a24      	ldr	r2, [pc, #144]	; (8002204 <HAL_DMA_IRQHandler+0x1d0>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d027      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x194>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a22      	ldr	r2, [pc, #136]	; (8002208 <HAL_DMA_IRQHandler+0x1d4>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d022      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x194>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a21      	ldr	r2, [pc, #132]	; (800220c <HAL_DMA_IRQHandler+0x1d8>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d01d      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x194>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a1f      	ldr	r2, [pc, #124]	; (8002210 <HAL_DMA_IRQHandler+0x1dc>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d018      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x194>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a1e      	ldr	r2, [pc, #120]	; (8002214 <HAL_DMA_IRQHandler+0x1e0>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d013      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x194>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a1c      	ldr	r2, [pc, #112]	; (8002218 <HAL_DMA_IRQHandler+0x1e4>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d00e      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x194>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a1b      	ldr	r2, [pc, #108]	; (800221c <HAL_DMA_IRQHandler+0x1e8>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d009      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x194>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a19      	ldr	r2, [pc, #100]	; (8002220 <HAL_DMA_IRQHandler+0x1ec>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d004      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x194>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a18      	ldr	r2, [pc, #96]	; (8002224 <HAL_DMA_IRQHandler+0x1f0>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d12f      	bne.n	8002228 <HAL_DMA_IRQHandler+0x1f4>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0304 	and.w	r3, r3, #4
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	bf14      	ite	ne
 80021d6:	2301      	movne	r3, #1
 80021d8:	2300      	moveq	r3, #0
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	e02e      	b.n	800223c <HAL_DMA_IRQHandler+0x208>
 80021de:	bf00      	nop
 80021e0:	24000000 	.word	0x24000000
 80021e4:	1b4e81b5 	.word	0x1b4e81b5
 80021e8:	40020010 	.word	0x40020010
 80021ec:	40020028 	.word	0x40020028
 80021f0:	40020040 	.word	0x40020040
 80021f4:	40020058 	.word	0x40020058
 80021f8:	40020070 	.word	0x40020070
 80021fc:	40020088 	.word	0x40020088
 8002200:	400200a0 	.word	0x400200a0
 8002204:	400200b8 	.word	0x400200b8
 8002208:	40020410 	.word	0x40020410
 800220c:	40020428 	.word	0x40020428
 8002210:	40020440 	.word	0x40020440
 8002214:	40020458 	.word	0x40020458
 8002218:	40020470 	.word	0x40020470
 800221c:	40020488 	.word	0x40020488
 8002220:	400204a0 	.word	0x400204a0
 8002224:	400204b8 	.word	0x400204b8
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0308 	and.w	r3, r3, #8
 8002232:	2b00      	cmp	r3, #0
 8002234:	bf14      	ite	ne
 8002236:	2301      	movne	r3, #1
 8002238:	2300      	moveq	r3, #0
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b00      	cmp	r3, #0
 800223e:	d015      	beq.n	800226c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 0204 	bic.w	r2, r2, #4
 800224e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002254:	f003 031f 	and.w	r3, r3, #31
 8002258:	2208      	movs	r2, #8
 800225a:	409a      	lsls	r2, r3
 800225c:	6a3b      	ldr	r3, [r7, #32]
 800225e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002264:	f043 0201 	orr.w	r2, r3, #1
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002270:	f003 031f 	and.w	r3, r3, #31
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	fa22 f303 	lsr.w	r3, r2, r3
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d06e      	beq.n	8002360 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a69      	ldr	r2, [pc, #420]	; (800242c <HAL_DMA_IRQHandler+0x3f8>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d04a      	beq.n	8002322 <HAL_DMA_IRQHandler+0x2ee>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a67      	ldr	r2, [pc, #412]	; (8002430 <HAL_DMA_IRQHandler+0x3fc>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d045      	beq.n	8002322 <HAL_DMA_IRQHandler+0x2ee>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a66      	ldr	r2, [pc, #408]	; (8002434 <HAL_DMA_IRQHandler+0x400>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d040      	beq.n	8002322 <HAL_DMA_IRQHandler+0x2ee>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a64      	ldr	r2, [pc, #400]	; (8002438 <HAL_DMA_IRQHandler+0x404>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d03b      	beq.n	8002322 <HAL_DMA_IRQHandler+0x2ee>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a63      	ldr	r2, [pc, #396]	; (800243c <HAL_DMA_IRQHandler+0x408>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d036      	beq.n	8002322 <HAL_DMA_IRQHandler+0x2ee>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a61      	ldr	r2, [pc, #388]	; (8002440 <HAL_DMA_IRQHandler+0x40c>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d031      	beq.n	8002322 <HAL_DMA_IRQHandler+0x2ee>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a60      	ldr	r2, [pc, #384]	; (8002444 <HAL_DMA_IRQHandler+0x410>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d02c      	beq.n	8002322 <HAL_DMA_IRQHandler+0x2ee>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a5e      	ldr	r2, [pc, #376]	; (8002448 <HAL_DMA_IRQHandler+0x414>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d027      	beq.n	8002322 <HAL_DMA_IRQHandler+0x2ee>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a5d      	ldr	r2, [pc, #372]	; (800244c <HAL_DMA_IRQHandler+0x418>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d022      	beq.n	8002322 <HAL_DMA_IRQHandler+0x2ee>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a5b      	ldr	r2, [pc, #364]	; (8002450 <HAL_DMA_IRQHandler+0x41c>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d01d      	beq.n	8002322 <HAL_DMA_IRQHandler+0x2ee>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a5a      	ldr	r2, [pc, #360]	; (8002454 <HAL_DMA_IRQHandler+0x420>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d018      	beq.n	8002322 <HAL_DMA_IRQHandler+0x2ee>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a58      	ldr	r2, [pc, #352]	; (8002458 <HAL_DMA_IRQHandler+0x424>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d013      	beq.n	8002322 <HAL_DMA_IRQHandler+0x2ee>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a57      	ldr	r2, [pc, #348]	; (800245c <HAL_DMA_IRQHandler+0x428>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d00e      	beq.n	8002322 <HAL_DMA_IRQHandler+0x2ee>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a55      	ldr	r2, [pc, #340]	; (8002460 <HAL_DMA_IRQHandler+0x42c>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d009      	beq.n	8002322 <HAL_DMA_IRQHandler+0x2ee>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a54      	ldr	r2, [pc, #336]	; (8002464 <HAL_DMA_IRQHandler+0x430>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d004      	beq.n	8002322 <HAL_DMA_IRQHandler+0x2ee>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a52      	ldr	r2, [pc, #328]	; (8002468 <HAL_DMA_IRQHandler+0x434>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d10a      	bne.n	8002338 <HAL_DMA_IRQHandler+0x304>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800232c:	2b00      	cmp	r3, #0
 800232e:	bf14      	ite	ne
 8002330:	2301      	movne	r3, #1
 8002332:	2300      	moveq	r3, #0
 8002334:	b2db      	uxtb	r3, r3
 8002336:	e003      	b.n	8002340 <HAL_DMA_IRQHandler+0x30c>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2300      	movs	r3, #0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00d      	beq.n	8002360 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002348:	f003 031f 	and.w	r3, r3, #31
 800234c:	2201      	movs	r2, #1
 800234e:	409a      	lsls	r2, r3
 8002350:	6a3b      	ldr	r3, [r7, #32]
 8002352:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002358:	f043 0202 	orr.w	r2, r3, #2
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002364:	f003 031f 	and.w	r3, r3, #31
 8002368:	2204      	movs	r2, #4
 800236a:	409a      	lsls	r2, r3
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	4013      	ands	r3, r2
 8002370:	2b00      	cmp	r3, #0
 8002372:	f000 808f 	beq.w	8002494 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a2c      	ldr	r2, [pc, #176]	; (800242c <HAL_DMA_IRQHandler+0x3f8>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d04a      	beq.n	8002416 <HAL_DMA_IRQHandler+0x3e2>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a2a      	ldr	r2, [pc, #168]	; (8002430 <HAL_DMA_IRQHandler+0x3fc>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d045      	beq.n	8002416 <HAL_DMA_IRQHandler+0x3e2>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a29      	ldr	r2, [pc, #164]	; (8002434 <HAL_DMA_IRQHandler+0x400>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d040      	beq.n	8002416 <HAL_DMA_IRQHandler+0x3e2>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a27      	ldr	r2, [pc, #156]	; (8002438 <HAL_DMA_IRQHandler+0x404>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d03b      	beq.n	8002416 <HAL_DMA_IRQHandler+0x3e2>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a26      	ldr	r2, [pc, #152]	; (800243c <HAL_DMA_IRQHandler+0x408>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d036      	beq.n	8002416 <HAL_DMA_IRQHandler+0x3e2>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a24      	ldr	r2, [pc, #144]	; (8002440 <HAL_DMA_IRQHandler+0x40c>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d031      	beq.n	8002416 <HAL_DMA_IRQHandler+0x3e2>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a23      	ldr	r2, [pc, #140]	; (8002444 <HAL_DMA_IRQHandler+0x410>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d02c      	beq.n	8002416 <HAL_DMA_IRQHandler+0x3e2>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a21      	ldr	r2, [pc, #132]	; (8002448 <HAL_DMA_IRQHandler+0x414>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d027      	beq.n	8002416 <HAL_DMA_IRQHandler+0x3e2>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a20      	ldr	r2, [pc, #128]	; (800244c <HAL_DMA_IRQHandler+0x418>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d022      	beq.n	8002416 <HAL_DMA_IRQHandler+0x3e2>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a1e      	ldr	r2, [pc, #120]	; (8002450 <HAL_DMA_IRQHandler+0x41c>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d01d      	beq.n	8002416 <HAL_DMA_IRQHandler+0x3e2>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a1d      	ldr	r2, [pc, #116]	; (8002454 <HAL_DMA_IRQHandler+0x420>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d018      	beq.n	8002416 <HAL_DMA_IRQHandler+0x3e2>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a1b      	ldr	r2, [pc, #108]	; (8002458 <HAL_DMA_IRQHandler+0x424>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d013      	beq.n	8002416 <HAL_DMA_IRQHandler+0x3e2>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a1a      	ldr	r2, [pc, #104]	; (800245c <HAL_DMA_IRQHandler+0x428>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d00e      	beq.n	8002416 <HAL_DMA_IRQHandler+0x3e2>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a18      	ldr	r2, [pc, #96]	; (8002460 <HAL_DMA_IRQHandler+0x42c>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d009      	beq.n	8002416 <HAL_DMA_IRQHandler+0x3e2>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a17      	ldr	r2, [pc, #92]	; (8002464 <HAL_DMA_IRQHandler+0x430>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d004      	beq.n	8002416 <HAL_DMA_IRQHandler+0x3e2>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a15      	ldr	r2, [pc, #84]	; (8002468 <HAL_DMA_IRQHandler+0x434>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d12a      	bne.n	800246c <HAL_DMA_IRQHandler+0x438>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	bf14      	ite	ne
 8002424:	2301      	movne	r3, #1
 8002426:	2300      	moveq	r3, #0
 8002428:	b2db      	uxtb	r3, r3
 800242a:	e023      	b.n	8002474 <HAL_DMA_IRQHandler+0x440>
 800242c:	40020010 	.word	0x40020010
 8002430:	40020028 	.word	0x40020028
 8002434:	40020040 	.word	0x40020040
 8002438:	40020058 	.word	0x40020058
 800243c:	40020070 	.word	0x40020070
 8002440:	40020088 	.word	0x40020088
 8002444:	400200a0 	.word	0x400200a0
 8002448:	400200b8 	.word	0x400200b8
 800244c:	40020410 	.word	0x40020410
 8002450:	40020428 	.word	0x40020428
 8002454:	40020440 	.word	0x40020440
 8002458:	40020458 	.word	0x40020458
 800245c:	40020470 	.word	0x40020470
 8002460:	40020488 	.word	0x40020488
 8002464:	400204a0 	.word	0x400204a0
 8002468:	400204b8 	.word	0x400204b8
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2300      	movs	r3, #0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00d      	beq.n	8002494 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247c:	f003 031f 	and.w	r3, r3, #31
 8002480:	2204      	movs	r2, #4
 8002482:	409a      	lsls	r2, r3
 8002484:	6a3b      	ldr	r3, [r7, #32]
 8002486:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800248c:	f043 0204 	orr.w	r2, r3, #4
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002498:	f003 031f 	and.w	r3, r3, #31
 800249c:	2210      	movs	r2, #16
 800249e:	409a      	lsls	r2, r3
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	4013      	ands	r3, r2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f000 80a6 	beq.w	80025f6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a85      	ldr	r2, [pc, #532]	; (80026c4 <HAL_DMA_IRQHandler+0x690>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d04a      	beq.n	800254a <HAL_DMA_IRQHandler+0x516>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a83      	ldr	r2, [pc, #524]	; (80026c8 <HAL_DMA_IRQHandler+0x694>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d045      	beq.n	800254a <HAL_DMA_IRQHandler+0x516>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a82      	ldr	r2, [pc, #520]	; (80026cc <HAL_DMA_IRQHandler+0x698>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d040      	beq.n	800254a <HAL_DMA_IRQHandler+0x516>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a80      	ldr	r2, [pc, #512]	; (80026d0 <HAL_DMA_IRQHandler+0x69c>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d03b      	beq.n	800254a <HAL_DMA_IRQHandler+0x516>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a7f      	ldr	r2, [pc, #508]	; (80026d4 <HAL_DMA_IRQHandler+0x6a0>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d036      	beq.n	800254a <HAL_DMA_IRQHandler+0x516>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a7d      	ldr	r2, [pc, #500]	; (80026d8 <HAL_DMA_IRQHandler+0x6a4>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d031      	beq.n	800254a <HAL_DMA_IRQHandler+0x516>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a7c      	ldr	r2, [pc, #496]	; (80026dc <HAL_DMA_IRQHandler+0x6a8>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d02c      	beq.n	800254a <HAL_DMA_IRQHandler+0x516>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a7a      	ldr	r2, [pc, #488]	; (80026e0 <HAL_DMA_IRQHandler+0x6ac>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d027      	beq.n	800254a <HAL_DMA_IRQHandler+0x516>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a79      	ldr	r2, [pc, #484]	; (80026e4 <HAL_DMA_IRQHandler+0x6b0>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d022      	beq.n	800254a <HAL_DMA_IRQHandler+0x516>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a77      	ldr	r2, [pc, #476]	; (80026e8 <HAL_DMA_IRQHandler+0x6b4>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d01d      	beq.n	800254a <HAL_DMA_IRQHandler+0x516>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a76      	ldr	r2, [pc, #472]	; (80026ec <HAL_DMA_IRQHandler+0x6b8>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d018      	beq.n	800254a <HAL_DMA_IRQHandler+0x516>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a74      	ldr	r2, [pc, #464]	; (80026f0 <HAL_DMA_IRQHandler+0x6bc>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d013      	beq.n	800254a <HAL_DMA_IRQHandler+0x516>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a73      	ldr	r2, [pc, #460]	; (80026f4 <HAL_DMA_IRQHandler+0x6c0>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d00e      	beq.n	800254a <HAL_DMA_IRQHandler+0x516>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a71      	ldr	r2, [pc, #452]	; (80026f8 <HAL_DMA_IRQHandler+0x6c4>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d009      	beq.n	800254a <HAL_DMA_IRQHandler+0x516>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a70      	ldr	r2, [pc, #448]	; (80026fc <HAL_DMA_IRQHandler+0x6c8>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d004      	beq.n	800254a <HAL_DMA_IRQHandler+0x516>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a6e      	ldr	r2, [pc, #440]	; (8002700 <HAL_DMA_IRQHandler+0x6cc>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d10a      	bne.n	8002560 <HAL_DMA_IRQHandler+0x52c>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0308 	and.w	r3, r3, #8
 8002554:	2b00      	cmp	r3, #0
 8002556:	bf14      	ite	ne
 8002558:	2301      	movne	r3, #1
 800255a:	2300      	moveq	r3, #0
 800255c:	b2db      	uxtb	r3, r3
 800255e:	e009      	b.n	8002574 <HAL_DMA_IRQHandler+0x540>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0304 	and.w	r3, r3, #4
 800256a:	2b00      	cmp	r3, #0
 800256c:	bf14      	ite	ne
 800256e:	2301      	movne	r3, #1
 8002570:	2300      	moveq	r3, #0
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b00      	cmp	r3, #0
 8002576:	d03e      	beq.n	80025f6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800257c:	f003 031f 	and.w	r3, r3, #31
 8002580:	2210      	movs	r2, #16
 8002582:	409a      	lsls	r2, r3
 8002584:	6a3b      	ldr	r3, [r7, #32]
 8002586:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d018      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d108      	bne.n	80025b6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d024      	beq.n	80025f6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	4798      	blx	r3
 80025b4:	e01f      	b.n	80025f6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d01b      	beq.n	80025f6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	4798      	blx	r3
 80025c6:	e016      	b.n	80025f6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d107      	bne.n	80025e6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 0208 	bic.w	r2, r2, #8
 80025e4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025fa:	f003 031f 	and.w	r3, r3, #31
 80025fe:	2220      	movs	r2, #32
 8002600:	409a      	lsls	r2, r3
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	4013      	ands	r3, r2
 8002606:	2b00      	cmp	r3, #0
 8002608:	f000 8110 	beq.w	800282c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a2c      	ldr	r2, [pc, #176]	; (80026c4 <HAL_DMA_IRQHandler+0x690>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d04a      	beq.n	80026ac <HAL_DMA_IRQHandler+0x678>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a2b      	ldr	r2, [pc, #172]	; (80026c8 <HAL_DMA_IRQHandler+0x694>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d045      	beq.n	80026ac <HAL_DMA_IRQHandler+0x678>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a29      	ldr	r2, [pc, #164]	; (80026cc <HAL_DMA_IRQHandler+0x698>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d040      	beq.n	80026ac <HAL_DMA_IRQHandler+0x678>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a28      	ldr	r2, [pc, #160]	; (80026d0 <HAL_DMA_IRQHandler+0x69c>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d03b      	beq.n	80026ac <HAL_DMA_IRQHandler+0x678>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a26      	ldr	r2, [pc, #152]	; (80026d4 <HAL_DMA_IRQHandler+0x6a0>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d036      	beq.n	80026ac <HAL_DMA_IRQHandler+0x678>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a25      	ldr	r2, [pc, #148]	; (80026d8 <HAL_DMA_IRQHandler+0x6a4>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d031      	beq.n	80026ac <HAL_DMA_IRQHandler+0x678>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a23      	ldr	r2, [pc, #140]	; (80026dc <HAL_DMA_IRQHandler+0x6a8>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d02c      	beq.n	80026ac <HAL_DMA_IRQHandler+0x678>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a22      	ldr	r2, [pc, #136]	; (80026e0 <HAL_DMA_IRQHandler+0x6ac>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d027      	beq.n	80026ac <HAL_DMA_IRQHandler+0x678>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a20      	ldr	r2, [pc, #128]	; (80026e4 <HAL_DMA_IRQHandler+0x6b0>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d022      	beq.n	80026ac <HAL_DMA_IRQHandler+0x678>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a1f      	ldr	r2, [pc, #124]	; (80026e8 <HAL_DMA_IRQHandler+0x6b4>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d01d      	beq.n	80026ac <HAL_DMA_IRQHandler+0x678>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a1d      	ldr	r2, [pc, #116]	; (80026ec <HAL_DMA_IRQHandler+0x6b8>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d018      	beq.n	80026ac <HAL_DMA_IRQHandler+0x678>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a1c      	ldr	r2, [pc, #112]	; (80026f0 <HAL_DMA_IRQHandler+0x6bc>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d013      	beq.n	80026ac <HAL_DMA_IRQHandler+0x678>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a1a      	ldr	r2, [pc, #104]	; (80026f4 <HAL_DMA_IRQHandler+0x6c0>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d00e      	beq.n	80026ac <HAL_DMA_IRQHandler+0x678>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a19      	ldr	r2, [pc, #100]	; (80026f8 <HAL_DMA_IRQHandler+0x6c4>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d009      	beq.n	80026ac <HAL_DMA_IRQHandler+0x678>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a17      	ldr	r2, [pc, #92]	; (80026fc <HAL_DMA_IRQHandler+0x6c8>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d004      	beq.n	80026ac <HAL_DMA_IRQHandler+0x678>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a16      	ldr	r2, [pc, #88]	; (8002700 <HAL_DMA_IRQHandler+0x6cc>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d12b      	bne.n	8002704 <HAL_DMA_IRQHandler+0x6d0>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0310 	and.w	r3, r3, #16
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	bf14      	ite	ne
 80026ba:	2301      	movne	r3, #1
 80026bc:	2300      	moveq	r3, #0
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	e02a      	b.n	8002718 <HAL_DMA_IRQHandler+0x6e4>
 80026c2:	bf00      	nop
 80026c4:	40020010 	.word	0x40020010
 80026c8:	40020028 	.word	0x40020028
 80026cc:	40020040 	.word	0x40020040
 80026d0:	40020058 	.word	0x40020058
 80026d4:	40020070 	.word	0x40020070
 80026d8:	40020088 	.word	0x40020088
 80026dc:	400200a0 	.word	0x400200a0
 80026e0:	400200b8 	.word	0x400200b8
 80026e4:	40020410 	.word	0x40020410
 80026e8:	40020428 	.word	0x40020428
 80026ec:	40020440 	.word	0x40020440
 80026f0:	40020458 	.word	0x40020458
 80026f4:	40020470 	.word	0x40020470
 80026f8:	40020488 	.word	0x40020488
 80026fc:	400204a0 	.word	0x400204a0
 8002700:	400204b8 	.word	0x400204b8
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	bf14      	ite	ne
 8002712:	2301      	movne	r3, #1
 8002714:	2300      	moveq	r3, #0
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b00      	cmp	r3, #0
 800271a:	f000 8087 	beq.w	800282c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002722:	f003 031f 	and.w	r3, r3, #31
 8002726:	2220      	movs	r2, #32
 8002728:	409a      	lsls	r2, r3
 800272a:	6a3b      	ldr	r3, [r7, #32]
 800272c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b04      	cmp	r3, #4
 8002738:	d139      	bne.n	80027ae <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 0216 	bic.w	r2, r2, #22
 8002748:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	695a      	ldr	r2, [r3, #20]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002758:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	2b00      	cmp	r3, #0
 8002760:	d103      	bne.n	800276a <HAL_DMA_IRQHandler+0x736>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002766:	2b00      	cmp	r3, #0
 8002768:	d007      	beq.n	800277a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 0208 	bic.w	r2, r2, #8
 8002778:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800277e:	f003 031f 	and.w	r3, r3, #31
 8002782:	223f      	movs	r2, #63	; 0x3f
 8002784:	409a      	lsls	r2, r3
 8002786:	6a3b      	ldr	r3, [r7, #32]
 8002788:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 834a 	beq.w	8002e38 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	4798      	blx	r3
          }
          return;
 80027ac:	e344      	b.n	8002e38 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d018      	beq.n	80027ee <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d108      	bne.n	80027dc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d02c      	beq.n	800282c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	4798      	blx	r3
 80027da:	e027      	b.n	800282c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d023      	beq.n	800282c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	4798      	blx	r3
 80027ec:	e01e      	b.n	800282c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d10f      	bne.n	800281c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 0210 	bic.w	r2, r2, #16
 800280a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002820:	2b00      	cmp	r3, #0
 8002822:	d003      	beq.n	800282c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 8306 	beq.w	8002e42 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	2b00      	cmp	r3, #0
 8002840:	f000 8088 	beq.w	8002954 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2204      	movs	r2, #4
 8002848:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a7a      	ldr	r2, [pc, #488]	; (8002a3c <HAL_DMA_IRQHandler+0xa08>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d04a      	beq.n	80028ec <HAL_DMA_IRQHandler+0x8b8>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a79      	ldr	r2, [pc, #484]	; (8002a40 <HAL_DMA_IRQHandler+0xa0c>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d045      	beq.n	80028ec <HAL_DMA_IRQHandler+0x8b8>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a77      	ldr	r2, [pc, #476]	; (8002a44 <HAL_DMA_IRQHandler+0xa10>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d040      	beq.n	80028ec <HAL_DMA_IRQHandler+0x8b8>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a76      	ldr	r2, [pc, #472]	; (8002a48 <HAL_DMA_IRQHandler+0xa14>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d03b      	beq.n	80028ec <HAL_DMA_IRQHandler+0x8b8>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a74      	ldr	r2, [pc, #464]	; (8002a4c <HAL_DMA_IRQHandler+0xa18>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d036      	beq.n	80028ec <HAL_DMA_IRQHandler+0x8b8>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a73      	ldr	r2, [pc, #460]	; (8002a50 <HAL_DMA_IRQHandler+0xa1c>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d031      	beq.n	80028ec <HAL_DMA_IRQHandler+0x8b8>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a71      	ldr	r2, [pc, #452]	; (8002a54 <HAL_DMA_IRQHandler+0xa20>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d02c      	beq.n	80028ec <HAL_DMA_IRQHandler+0x8b8>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a70      	ldr	r2, [pc, #448]	; (8002a58 <HAL_DMA_IRQHandler+0xa24>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d027      	beq.n	80028ec <HAL_DMA_IRQHandler+0x8b8>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a6e      	ldr	r2, [pc, #440]	; (8002a5c <HAL_DMA_IRQHandler+0xa28>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d022      	beq.n	80028ec <HAL_DMA_IRQHandler+0x8b8>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a6d      	ldr	r2, [pc, #436]	; (8002a60 <HAL_DMA_IRQHandler+0xa2c>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d01d      	beq.n	80028ec <HAL_DMA_IRQHandler+0x8b8>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a6b      	ldr	r2, [pc, #428]	; (8002a64 <HAL_DMA_IRQHandler+0xa30>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d018      	beq.n	80028ec <HAL_DMA_IRQHandler+0x8b8>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a6a      	ldr	r2, [pc, #424]	; (8002a68 <HAL_DMA_IRQHandler+0xa34>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d013      	beq.n	80028ec <HAL_DMA_IRQHandler+0x8b8>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a68      	ldr	r2, [pc, #416]	; (8002a6c <HAL_DMA_IRQHandler+0xa38>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d00e      	beq.n	80028ec <HAL_DMA_IRQHandler+0x8b8>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a67      	ldr	r2, [pc, #412]	; (8002a70 <HAL_DMA_IRQHandler+0xa3c>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d009      	beq.n	80028ec <HAL_DMA_IRQHandler+0x8b8>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a65      	ldr	r2, [pc, #404]	; (8002a74 <HAL_DMA_IRQHandler+0xa40>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d004      	beq.n	80028ec <HAL_DMA_IRQHandler+0x8b8>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a64      	ldr	r2, [pc, #400]	; (8002a78 <HAL_DMA_IRQHandler+0xa44>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d108      	bne.n	80028fe <HAL_DMA_IRQHandler+0x8ca>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 0201 	bic.w	r2, r2, #1
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	e007      	b.n	800290e <HAL_DMA_IRQHandler+0x8da>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f022 0201 	bic.w	r2, r2, #1
 800290c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	3301      	adds	r3, #1
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002916:	429a      	cmp	r2, r3
 8002918:	d307      	bcc.n	800292a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1f2      	bne.n	800290e <HAL_DMA_IRQHandler+0x8da>
 8002928:	e000      	b.n	800292c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800292a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d004      	beq.n	8002944 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2203      	movs	r2, #3
 800293e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002942:	e003      	b.n	800294c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002958:	2b00      	cmp	r3, #0
 800295a:	f000 8272 	beq.w	8002e42 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	4798      	blx	r3
 8002966:	e26c      	b.n	8002e42 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a43      	ldr	r2, [pc, #268]	; (8002a7c <HAL_DMA_IRQHandler+0xa48>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d022      	beq.n	80029b8 <HAL_DMA_IRQHandler+0x984>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a42      	ldr	r2, [pc, #264]	; (8002a80 <HAL_DMA_IRQHandler+0xa4c>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d01d      	beq.n	80029b8 <HAL_DMA_IRQHandler+0x984>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a40      	ldr	r2, [pc, #256]	; (8002a84 <HAL_DMA_IRQHandler+0xa50>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d018      	beq.n	80029b8 <HAL_DMA_IRQHandler+0x984>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a3f      	ldr	r2, [pc, #252]	; (8002a88 <HAL_DMA_IRQHandler+0xa54>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d013      	beq.n	80029b8 <HAL_DMA_IRQHandler+0x984>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a3d      	ldr	r2, [pc, #244]	; (8002a8c <HAL_DMA_IRQHandler+0xa58>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d00e      	beq.n	80029b8 <HAL_DMA_IRQHandler+0x984>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a3c      	ldr	r2, [pc, #240]	; (8002a90 <HAL_DMA_IRQHandler+0xa5c>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d009      	beq.n	80029b8 <HAL_DMA_IRQHandler+0x984>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a3a      	ldr	r2, [pc, #232]	; (8002a94 <HAL_DMA_IRQHandler+0xa60>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d004      	beq.n	80029b8 <HAL_DMA_IRQHandler+0x984>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a39      	ldr	r2, [pc, #228]	; (8002a98 <HAL_DMA_IRQHandler+0xa64>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d101      	bne.n	80029bc <HAL_DMA_IRQHandler+0x988>
 80029b8:	2301      	movs	r3, #1
 80029ba:	e000      	b.n	80029be <HAL_DMA_IRQHandler+0x98a>
 80029bc:	2300      	movs	r3, #0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f000 823f 	beq.w	8002e42 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d0:	f003 031f 	and.w	r3, r3, #31
 80029d4:	2204      	movs	r2, #4
 80029d6:	409a      	lsls	r2, r3
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	4013      	ands	r3, r2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f000 80cd 	beq.w	8002b7c <HAL_DMA_IRQHandler+0xb48>
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 80c7 	beq.w	8002b7c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f2:	f003 031f 	and.w	r3, r3, #31
 80029f6:	2204      	movs	r2, #4
 80029f8:	409a      	lsls	r2, r3
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d049      	beq.n	8002a9c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d109      	bne.n	8002a26 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 8210 	beq.w	8002e3c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a24:	e20a      	b.n	8002e3c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f000 8206 	beq.w	8002e3c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a38:	e200      	b.n	8002e3c <HAL_DMA_IRQHandler+0xe08>
 8002a3a:	bf00      	nop
 8002a3c:	40020010 	.word	0x40020010
 8002a40:	40020028 	.word	0x40020028
 8002a44:	40020040 	.word	0x40020040
 8002a48:	40020058 	.word	0x40020058
 8002a4c:	40020070 	.word	0x40020070
 8002a50:	40020088 	.word	0x40020088
 8002a54:	400200a0 	.word	0x400200a0
 8002a58:	400200b8 	.word	0x400200b8
 8002a5c:	40020410 	.word	0x40020410
 8002a60:	40020428 	.word	0x40020428
 8002a64:	40020440 	.word	0x40020440
 8002a68:	40020458 	.word	0x40020458
 8002a6c:	40020470 	.word	0x40020470
 8002a70:	40020488 	.word	0x40020488
 8002a74:	400204a0 	.word	0x400204a0
 8002a78:	400204b8 	.word	0x400204b8
 8002a7c:	58025408 	.word	0x58025408
 8002a80:	5802541c 	.word	0x5802541c
 8002a84:	58025430 	.word	0x58025430
 8002a88:	58025444 	.word	0x58025444
 8002a8c:	58025458 	.word	0x58025458
 8002a90:	5802546c 	.word	0x5802546c
 8002a94:	58025480 	.word	0x58025480
 8002a98:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	f003 0320 	and.w	r3, r3, #32
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d160      	bne.n	8002b68 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a7f      	ldr	r2, [pc, #508]	; (8002ca8 <HAL_DMA_IRQHandler+0xc74>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d04a      	beq.n	8002b46 <HAL_DMA_IRQHandler+0xb12>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a7d      	ldr	r2, [pc, #500]	; (8002cac <HAL_DMA_IRQHandler+0xc78>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d045      	beq.n	8002b46 <HAL_DMA_IRQHandler+0xb12>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a7c      	ldr	r2, [pc, #496]	; (8002cb0 <HAL_DMA_IRQHandler+0xc7c>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d040      	beq.n	8002b46 <HAL_DMA_IRQHandler+0xb12>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a7a      	ldr	r2, [pc, #488]	; (8002cb4 <HAL_DMA_IRQHandler+0xc80>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d03b      	beq.n	8002b46 <HAL_DMA_IRQHandler+0xb12>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a79      	ldr	r2, [pc, #484]	; (8002cb8 <HAL_DMA_IRQHandler+0xc84>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d036      	beq.n	8002b46 <HAL_DMA_IRQHandler+0xb12>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a77      	ldr	r2, [pc, #476]	; (8002cbc <HAL_DMA_IRQHandler+0xc88>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d031      	beq.n	8002b46 <HAL_DMA_IRQHandler+0xb12>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a76      	ldr	r2, [pc, #472]	; (8002cc0 <HAL_DMA_IRQHandler+0xc8c>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d02c      	beq.n	8002b46 <HAL_DMA_IRQHandler+0xb12>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a74      	ldr	r2, [pc, #464]	; (8002cc4 <HAL_DMA_IRQHandler+0xc90>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d027      	beq.n	8002b46 <HAL_DMA_IRQHandler+0xb12>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a73      	ldr	r2, [pc, #460]	; (8002cc8 <HAL_DMA_IRQHandler+0xc94>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d022      	beq.n	8002b46 <HAL_DMA_IRQHandler+0xb12>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a71      	ldr	r2, [pc, #452]	; (8002ccc <HAL_DMA_IRQHandler+0xc98>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d01d      	beq.n	8002b46 <HAL_DMA_IRQHandler+0xb12>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a70      	ldr	r2, [pc, #448]	; (8002cd0 <HAL_DMA_IRQHandler+0xc9c>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d018      	beq.n	8002b46 <HAL_DMA_IRQHandler+0xb12>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a6e      	ldr	r2, [pc, #440]	; (8002cd4 <HAL_DMA_IRQHandler+0xca0>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d013      	beq.n	8002b46 <HAL_DMA_IRQHandler+0xb12>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a6d      	ldr	r2, [pc, #436]	; (8002cd8 <HAL_DMA_IRQHandler+0xca4>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d00e      	beq.n	8002b46 <HAL_DMA_IRQHandler+0xb12>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a6b      	ldr	r2, [pc, #428]	; (8002cdc <HAL_DMA_IRQHandler+0xca8>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d009      	beq.n	8002b46 <HAL_DMA_IRQHandler+0xb12>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a6a      	ldr	r2, [pc, #424]	; (8002ce0 <HAL_DMA_IRQHandler+0xcac>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d004      	beq.n	8002b46 <HAL_DMA_IRQHandler+0xb12>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a68      	ldr	r2, [pc, #416]	; (8002ce4 <HAL_DMA_IRQHandler+0xcb0>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d108      	bne.n	8002b58 <HAL_DMA_IRQHandler+0xb24>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 0208 	bic.w	r2, r2, #8
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	e007      	b.n	8002b68 <HAL_DMA_IRQHandler+0xb34>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 0204 	bic.w	r2, r2, #4
 8002b66:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 8165 	beq.w	8002e3c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b7a:	e15f      	b.n	8002e3c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b80:	f003 031f 	and.w	r3, r3, #31
 8002b84:	2202      	movs	r2, #2
 8002b86:	409a      	lsls	r2, r3
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f000 80c5 	beq.w	8002d1c <HAL_DMA_IRQHandler+0xce8>
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 80bf 	beq.w	8002d1c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba2:	f003 031f 	and.w	r3, r3, #31
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	409a      	lsls	r2, r3
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d018      	beq.n	8002bea <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d109      	bne.n	8002bd6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 813a 	beq.w	8002e40 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002bd4:	e134      	b.n	8002e40 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f000 8130 	beq.w	8002e40 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002be8:	e12a      	b.n	8002e40 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	f003 0320 	and.w	r3, r3, #32
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f040 8089 	bne.w	8002d08 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a2b      	ldr	r2, [pc, #172]	; (8002ca8 <HAL_DMA_IRQHandler+0xc74>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d04a      	beq.n	8002c96 <HAL_DMA_IRQHandler+0xc62>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a29      	ldr	r2, [pc, #164]	; (8002cac <HAL_DMA_IRQHandler+0xc78>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d045      	beq.n	8002c96 <HAL_DMA_IRQHandler+0xc62>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a28      	ldr	r2, [pc, #160]	; (8002cb0 <HAL_DMA_IRQHandler+0xc7c>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d040      	beq.n	8002c96 <HAL_DMA_IRQHandler+0xc62>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a26      	ldr	r2, [pc, #152]	; (8002cb4 <HAL_DMA_IRQHandler+0xc80>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d03b      	beq.n	8002c96 <HAL_DMA_IRQHandler+0xc62>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a25      	ldr	r2, [pc, #148]	; (8002cb8 <HAL_DMA_IRQHandler+0xc84>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d036      	beq.n	8002c96 <HAL_DMA_IRQHandler+0xc62>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a23      	ldr	r2, [pc, #140]	; (8002cbc <HAL_DMA_IRQHandler+0xc88>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d031      	beq.n	8002c96 <HAL_DMA_IRQHandler+0xc62>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a22      	ldr	r2, [pc, #136]	; (8002cc0 <HAL_DMA_IRQHandler+0xc8c>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d02c      	beq.n	8002c96 <HAL_DMA_IRQHandler+0xc62>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a20      	ldr	r2, [pc, #128]	; (8002cc4 <HAL_DMA_IRQHandler+0xc90>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d027      	beq.n	8002c96 <HAL_DMA_IRQHandler+0xc62>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a1f      	ldr	r2, [pc, #124]	; (8002cc8 <HAL_DMA_IRQHandler+0xc94>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d022      	beq.n	8002c96 <HAL_DMA_IRQHandler+0xc62>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a1d      	ldr	r2, [pc, #116]	; (8002ccc <HAL_DMA_IRQHandler+0xc98>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d01d      	beq.n	8002c96 <HAL_DMA_IRQHandler+0xc62>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a1c      	ldr	r2, [pc, #112]	; (8002cd0 <HAL_DMA_IRQHandler+0xc9c>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d018      	beq.n	8002c96 <HAL_DMA_IRQHandler+0xc62>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a1a      	ldr	r2, [pc, #104]	; (8002cd4 <HAL_DMA_IRQHandler+0xca0>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d013      	beq.n	8002c96 <HAL_DMA_IRQHandler+0xc62>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a19      	ldr	r2, [pc, #100]	; (8002cd8 <HAL_DMA_IRQHandler+0xca4>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d00e      	beq.n	8002c96 <HAL_DMA_IRQHandler+0xc62>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a17      	ldr	r2, [pc, #92]	; (8002cdc <HAL_DMA_IRQHandler+0xca8>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d009      	beq.n	8002c96 <HAL_DMA_IRQHandler+0xc62>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a16      	ldr	r2, [pc, #88]	; (8002ce0 <HAL_DMA_IRQHandler+0xcac>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d004      	beq.n	8002c96 <HAL_DMA_IRQHandler+0xc62>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a14      	ldr	r2, [pc, #80]	; (8002ce4 <HAL_DMA_IRQHandler+0xcb0>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d128      	bne.n	8002ce8 <HAL_DMA_IRQHandler+0xcb4>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 0214 	bic.w	r2, r2, #20
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	e027      	b.n	8002cf8 <HAL_DMA_IRQHandler+0xcc4>
 8002ca8:	40020010 	.word	0x40020010
 8002cac:	40020028 	.word	0x40020028
 8002cb0:	40020040 	.word	0x40020040
 8002cb4:	40020058 	.word	0x40020058
 8002cb8:	40020070 	.word	0x40020070
 8002cbc:	40020088 	.word	0x40020088
 8002cc0:	400200a0 	.word	0x400200a0
 8002cc4:	400200b8 	.word	0x400200b8
 8002cc8:	40020410 	.word	0x40020410
 8002ccc:	40020428 	.word	0x40020428
 8002cd0:	40020440 	.word	0x40020440
 8002cd4:	40020458 	.word	0x40020458
 8002cd8:	40020470 	.word	0x40020470
 8002cdc:	40020488 	.word	0x40020488
 8002ce0:	400204a0 	.word	0x400204a0
 8002ce4:	400204b8 	.word	0x400204b8
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 020a 	bic.w	r2, r2, #10
 8002cf6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 8097 	beq.w	8002e40 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d1a:	e091      	b.n	8002e40 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d20:	f003 031f 	and.w	r3, r3, #31
 8002d24:	2208      	movs	r2, #8
 8002d26:	409a      	lsls	r2, r3
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f000 8088 	beq.w	8002e42 <HAL_DMA_IRQHandler+0xe0e>
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	f003 0308 	and.w	r3, r3, #8
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 8082 	beq.w	8002e42 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a41      	ldr	r2, [pc, #260]	; (8002e48 <HAL_DMA_IRQHandler+0xe14>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d04a      	beq.n	8002dde <HAL_DMA_IRQHandler+0xdaa>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a3f      	ldr	r2, [pc, #252]	; (8002e4c <HAL_DMA_IRQHandler+0xe18>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d045      	beq.n	8002dde <HAL_DMA_IRQHandler+0xdaa>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a3e      	ldr	r2, [pc, #248]	; (8002e50 <HAL_DMA_IRQHandler+0xe1c>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d040      	beq.n	8002dde <HAL_DMA_IRQHandler+0xdaa>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a3c      	ldr	r2, [pc, #240]	; (8002e54 <HAL_DMA_IRQHandler+0xe20>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d03b      	beq.n	8002dde <HAL_DMA_IRQHandler+0xdaa>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a3b      	ldr	r2, [pc, #236]	; (8002e58 <HAL_DMA_IRQHandler+0xe24>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d036      	beq.n	8002dde <HAL_DMA_IRQHandler+0xdaa>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a39      	ldr	r2, [pc, #228]	; (8002e5c <HAL_DMA_IRQHandler+0xe28>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d031      	beq.n	8002dde <HAL_DMA_IRQHandler+0xdaa>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a38      	ldr	r2, [pc, #224]	; (8002e60 <HAL_DMA_IRQHandler+0xe2c>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d02c      	beq.n	8002dde <HAL_DMA_IRQHandler+0xdaa>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a36      	ldr	r2, [pc, #216]	; (8002e64 <HAL_DMA_IRQHandler+0xe30>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d027      	beq.n	8002dde <HAL_DMA_IRQHandler+0xdaa>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a35      	ldr	r2, [pc, #212]	; (8002e68 <HAL_DMA_IRQHandler+0xe34>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d022      	beq.n	8002dde <HAL_DMA_IRQHandler+0xdaa>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a33      	ldr	r2, [pc, #204]	; (8002e6c <HAL_DMA_IRQHandler+0xe38>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d01d      	beq.n	8002dde <HAL_DMA_IRQHandler+0xdaa>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a32      	ldr	r2, [pc, #200]	; (8002e70 <HAL_DMA_IRQHandler+0xe3c>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d018      	beq.n	8002dde <HAL_DMA_IRQHandler+0xdaa>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a30      	ldr	r2, [pc, #192]	; (8002e74 <HAL_DMA_IRQHandler+0xe40>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d013      	beq.n	8002dde <HAL_DMA_IRQHandler+0xdaa>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a2f      	ldr	r2, [pc, #188]	; (8002e78 <HAL_DMA_IRQHandler+0xe44>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d00e      	beq.n	8002dde <HAL_DMA_IRQHandler+0xdaa>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a2d      	ldr	r2, [pc, #180]	; (8002e7c <HAL_DMA_IRQHandler+0xe48>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d009      	beq.n	8002dde <HAL_DMA_IRQHandler+0xdaa>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a2c      	ldr	r2, [pc, #176]	; (8002e80 <HAL_DMA_IRQHandler+0xe4c>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d004      	beq.n	8002dde <HAL_DMA_IRQHandler+0xdaa>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a2a      	ldr	r2, [pc, #168]	; (8002e84 <HAL_DMA_IRQHandler+0xe50>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d108      	bne.n	8002df0 <HAL_DMA_IRQHandler+0xdbc>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 021c 	bic.w	r2, r2, #28
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	e007      	b.n	8002e00 <HAL_DMA_IRQHandler+0xdcc>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f022 020e 	bic.w	r2, r2, #14
 8002dfe:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e04:	f003 031f 	and.w	r3, r3, #31
 8002e08:	2201      	movs	r2, #1
 8002e0a:	409a      	lsls	r2, r3
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d009      	beq.n	8002e42 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	4798      	blx	r3
 8002e36:	e004      	b.n	8002e42 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002e38:	bf00      	nop
 8002e3a:	e002      	b.n	8002e42 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002e3c:	bf00      	nop
 8002e3e:	e000      	b.n	8002e42 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002e40:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002e42:	3728      	adds	r7, #40	; 0x28
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	40020010 	.word	0x40020010
 8002e4c:	40020028 	.word	0x40020028
 8002e50:	40020040 	.word	0x40020040
 8002e54:	40020058 	.word	0x40020058
 8002e58:	40020070 	.word	0x40020070
 8002e5c:	40020088 	.word	0x40020088
 8002e60:	400200a0 	.word	0x400200a0
 8002e64:	400200b8 	.word	0x400200b8
 8002e68:	40020410 	.word	0x40020410
 8002e6c:	40020428 	.word	0x40020428
 8002e70:	40020440 	.word	0x40020440
 8002e74:	40020458 	.word	0x40020458
 8002e78:	40020470 	.word	0x40020470
 8002e7c:	40020488 	.word	0x40020488
 8002e80:	400204a0 	.word	0x400204a0
 8002e84:	400204b8 	.word	0x400204b8

08002e88 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b087      	sub	sp, #28
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
 8002e94:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a7f      	ldr	r2, [pc, #508]	; (80030a4 <DMA_SetConfig+0x21c>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d072      	beq.n	8002f92 <DMA_SetConfig+0x10a>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a7d      	ldr	r2, [pc, #500]	; (80030a8 <DMA_SetConfig+0x220>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d06d      	beq.n	8002f92 <DMA_SetConfig+0x10a>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a7c      	ldr	r2, [pc, #496]	; (80030ac <DMA_SetConfig+0x224>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d068      	beq.n	8002f92 <DMA_SetConfig+0x10a>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a7a      	ldr	r2, [pc, #488]	; (80030b0 <DMA_SetConfig+0x228>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d063      	beq.n	8002f92 <DMA_SetConfig+0x10a>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a79      	ldr	r2, [pc, #484]	; (80030b4 <DMA_SetConfig+0x22c>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d05e      	beq.n	8002f92 <DMA_SetConfig+0x10a>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a77      	ldr	r2, [pc, #476]	; (80030b8 <DMA_SetConfig+0x230>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d059      	beq.n	8002f92 <DMA_SetConfig+0x10a>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a76      	ldr	r2, [pc, #472]	; (80030bc <DMA_SetConfig+0x234>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d054      	beq.n	8002f92 <DMA_SetConfig+0x10a>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a74      	ldr	r2, [pc, #464]	; (80030c0 <DMA_SetConfig+0x238>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d04f      	beq.n	8002f92 <DMA_SetConfig+0x10a>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a73      	ldr	r2, [pc, #460]	; (80030c4 <DMA_SetConfig+0x23c>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d04a      	beq.n	8002f92 <DMA_SetConfig+0x10a>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a71      	ldr	r2, [pc, #452]	; (80030c8 <DMA_SetConfig+0x240>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d045      	beq.n	8002f92 <DMA_SetConfig+0x10a>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a70      	ldr	r2, [pc, #448]	; (80030cc <DMA_SetConfig+0x244>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d040      	beq.n	8002f92 <DMA_SetConfig+0x10a>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a6e      	ldr	r2, [pc, #440]	; (80030d0 <DMA_SetConfig+0x248>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d03b      	beq.n	8002f92 <DMA_SetConfig+0x10a>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a6d      	ldr	r2, [pc, #436]	; (80030d4 <DMA_SetConfig+0x24c>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d036      	beq.n	8002f92 <DMA_SetConfig+0x10a>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a6b      	ldr	r2, [pc, #428]	; (80030d8 <DMA_SetConfig+0x250>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d031      	beq.n	8002f92 <DMA_SetConfig+0x10a>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a6a      	ldr	r2, [pc, #424]	; (80030dc <DMA_SetConfig+0x254>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d02c      	beq.n	8002f92 <DMA_SetConfig+0x10a>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a68      	ldr	r2, [pc, #416]	; (80030e0 <DMA_SetConfig+0x258>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d027      	beq.n	8002f92 <DMA_SetConfig+0x10a>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a67      	ldr	r2, [pc, #412]	; (80030e4 <DMA_SetConfig+0x25c>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d022      	beq.n	8002f92 <DMA_SetConfig+0x10a>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a65      	ldr	r2, [pc, #404]	; (80030e8 <DMA_SetConfig+0x260>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d01d      	beq.n	8002f92 <DMA_SetConfig+0x10a>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a64      	ldr	r2, [pc, #400]	; (80030ec <DMA_SetConfig+0x264>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d018      	beq.n	8002f92 <DMA_SetConfig+0x10a>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a62      	ldr	r2, [pc, #392]	; (80030f0 <DMA_SetConfig+0x268>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d013      	beq.n	8002f92 <DMA_SetConfig+0x10a>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a61      	ldr	r2, [pc, #388]	; (80030f4 <DMA_SetConfig+0x26c>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d00e      	beq.n	8002f92 <DMA_SetConfig+0x10a>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a5f      	ldr	r2, [pc, #380]	; (80030f8 <DMA_SetConfig+0x270>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d009      	beq.n	8002f92 <DMA_SetConfig+0x10a>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a5e      	ldr	r2, [pc, #376]	; (80030fc <DMA_SetConfig+0x274>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d004      	beq.n	8002f92 <DMA_SetConfig+0x10a>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a5c      	ldr	r2, [pc, #368]	; (8003100 <DMA_SetConfig+0x278>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d101      	bne.n	8002f96 <DMA_SetConfig+0x10e>
 8002f92:	2301      	movs	r3, #1
 8002f94:	e000      	b.n	8002f98 <DMA_SetConfig+0x110>
 8002f96:	2300      	movs	r3, #0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00d      	beq.n	8002fb8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002fa4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d004      	beq.n	8002fb8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002fb6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a39      	ldr	r2, [pc, #228]	; (80030a4 <DMA_SetConfig+0x21c>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d04a      	beq.n	8003058 <DMA_SetConfig+0x1d0>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a38      	ldr	r2, [pc, #224]	; (80030a8 <DMA_SetConfig+0x220>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d045      	beq.n	8003058 <DMA_SetConfig+0x1d0>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a36      	ldr	r2, [pc, #216]	; (80030ac <DMA_SetConfig+0x224>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d040      	beq.n	8003058 <DMA_SetConfig+0x1d0>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a35      	ldr	r2, [pc, #212]	; (80030b0 <DMA_SetConfig+0x228>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d03b      	beq.n	8003058 <DMA_SetConfig+0x1d0>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a33      	ldr	r2, [pc, #204]	; (80030b4 <DMA_SetConfig+0x22c>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d036      	beq.n	8003058 <DMA_SetConfig+0x1d0>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a32      	ldr	r2, [pc, #200]	; (80030b8 <DMA_SetConfig+0x230>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d031      	beq.n	8003058 <DMA_SetConfig+0x1d0>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a30      	ldr	r2, [pc, #192]	; (80030bc <DMA_SetConfig+0x234>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d02c      	beq.n	8003058 <DMA_SetConfig+0x1d0>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a2f      	ldr	r2, [pc, #188]	; (80030c0 <DMA_SetConfig+0x238>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d027      	beq.n	8003058 <DMA_SetConfig+0x1d0>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a2d      	ldr	r2, [pc, #180]	; (80030c4 <DMA_SetConfig+0x23c>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d022      	beq.n	8003058 <DMA_SetConfig+0x1d0>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a2c      	ldr	r2, [pc, #176]	; (80030c8 <DMA_SetConfig+0x240>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d01d      	beq.n	8003058 <DMA_SetConfig+0x1d0>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a2a      	ldr	r2, [pc, #168]	; (80030cc <DMA_SetConfig+0x244>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d018      	beq.n	8003058 <DMA_SetConfig+0x1d0>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a29      	ldr	r2, [pc, #164]	; (80030d0 <DMA_SetConfig+0x248>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d013      	beq.n	8003058 <DMA_SetConfig+0x1d0>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a27      	ldr	r2, [pc, #156]	; (80030d4 <DMA_SetConfig+0x24c>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d00e      	beq.n	8003058 <DMA_SetConfig+0x1d0>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a26      	ldr	r2, [pc, #152]	; (80030d8 <DMA_SetConfig+0x250>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d009      	beq.n	8003058 <DMA_SetConfig+0x1d0>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a24      	ldr	r2, [pc, #144]	; (80030dc <DMA_SetConfig+0x254>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d004      	beq.n	8003058 <DMA_SetConfig+0x1d0>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a23      	ldr	r2, [pc, #140]	; (80030e0 <DMA_SetConfig+0x258>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d101      	bne.n	800305c <DMA_SetConfig+0x1d4>
 8003058:	2301      	movs	r3, #1
 800305a:	e000      	b.n	800305e <DMA_SetConfig+0x1d6>
 800305c:	2300      	movs	r3, #0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d059      	beq.n	8003116 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003066:	f003 031f 	and.w	r3, r3, #31
 800306a:	223f      	movs	r2, #63	; 0x3f
 800306c:	409a      	lsls	r2, r3
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003080:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	2b40      	cmp	r3, #64	; 0x40
 8003090:	d138      	bne.n	8003104 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80030a2:	e086      	b.n	80031b2 <DMA_SetConfig+0x32a>
 80030a4:	40020010 	.word	0x40020010
 80030a8:	40020028 	.word	0x40020028
 80030ac:	40020040 	.word	0x40020040
 80030b0:	40020058 	.word	0x40020058
 80030b4:	40020070 	.word	0x40020070
 80030b8:	40020088 	.word	0x40020088
 80030bc:	400200a0 	.word	0x400200a0
 80030c0:	400200b8 	.word	0x400200b8
 80030c4:	40020410 	.word	0x40020410
 80030c8:	40020428 	.word	0x40020428
 80030cc:	40020440 	.word	0x40020440
 80030d0:	40020458 	.word	0x40020458
 80030d4:	40020470 	.word	0x40020470
 80030d8:	40020488 	.word	0x40020488
 80030dc:	400204a0 	.word	0x400204a0
 80030e0:	400204b8 	.word	0x400204b8
 80030e4:	58025408 	.word	0x58025408
 80030e8:	5802541c 	.word	0x5802541c
 80030ec:	58025430 	.word	0x58025430
 80030f0:	58025444 	.word	0x58025444
 80030f4:	58025458 	.word	0x58025458
 80030f8:	5802546c 	.word	0x5802546c
 80030fc:	58025480 	.word	0x58025480
 8003100:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	60da      	str	r2, [r3, #12]
}
 8003114:	e04d      	b.n	80031b2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a29      	ldr	r2, [pc, #164]	; (80031c0 <DMA_SetConfig+0x338>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d022      	beq.n	8003166 <DMA_SetConfig+0x2de>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a27      	ldr	r2, [pc, #156]	; (80031c4 <DMA_SetConfig+0x33c>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d01d      	beq.n	8003166 <DMA_SetConfig+0x2de>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a26      	ldr	r2, [pc, #152]	; (80031c8 <DMA_SetConfig+0x340>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d018      	beq.n	8003166 <DMA_SetConfig+0x2de>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a24      	ldr	r2, [pc, #144]	; (80031cc <DMA_SetConfig+0x344>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d013      	beq.n	8003166 <DMA_SetConfig+0x2de>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a23      	ldr	r2, [pc, #140]	; (80031d0 <DMA_SetConfig+0x348>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d00e      	beq.n	8003166 <DMA_SetConfig+0x2de>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a21      	ldr	r2, [pc, #132]	; (80031d4 <DMA_SetConfig+0x34c>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d009      	beq.n	8003166 <DMA_SetConfig+0x2de>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a20      	ldr	r2, [pc, #128]	; (80031d8 <DMA_SetConfig+0x350>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d004      	beq.n	8003166 <DMA_SetConfig+0x2de>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a1e      	ldr	r2, [pc, #120]	; (80031dc <DMA_SetConfig+0x354>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d101      	bne.n	800316a <DMA_SetConfig+0x2e2>
 8003166:	2301      	movs	r3, #1
 8003168:	e000      	b.n	800316c <DMA_SetConfig+0x2e4>
 800316a:	2300      	movs	r3, #0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d020      	beq.n	80031b2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003174:	f003 031f 	and.w	r3, r3, #31
 8003178:	2201      	movs	r2, #1
 800317a:	409a      	lsls	r2, r3
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	2b40      	cmp	r3, #64	; 0x40
 800318e:	d108      	bne.n	80031a2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	60da      	str	r2, [r3, #12]
}
 80031a0:	e007      	b.n	80031b2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68ba      	ldr	r2, [r7, #8]
 80031a8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	60da      	str	r2, [r3, #12]
}
 80031b2:	bf00      	nop
 80031b4:	371c      	adds	r7, #28
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	58025408 	.word	0x58025408
 80031c4:	5802541c 	.word	0x5802541c
 80031c8:	58025430 	.word	0x58025430
 80031cc:	58025444 	.word	0x58025444
 80031d0:	58025458 	.word	0x58025458
 80031d4:	5802546c 	.word	0x5802546c
 80031d8:	58025480 	.word	0x58025480
 80031dc:	58025494 	.word	0x58025494

080031e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a42      	ldr	r2, [pc, #264]	; (80032f8 <DMA_CalcBaseAndBitshift+0x118>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d04a      	beq.n	8003288 <DMA_CalcBaseAndBitshift+0xa8>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a41      	ldr	r2, [pc, #260]	; (80032fc <DMA_CalcBaseAndBitshift+0x11c>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d045      	beq.n	8003288 <DMA_CalcBaseAndBitshift+0xa8>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a3f      	ldr	r2, [pc, #252]	; (8003300 <DMA_CalcBaseAndBitshift+0x120>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d040      	beq.n	8003288 <DMA_CalcBaseAndBitshift+0xa8>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a3e      	ldr	r2, [pc, #248]	; (8003304 <DMA_CalcBaseAndBitshift+0x124>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d03b      	beq.n	8003288 <DMA_CalcBaseAndBitshift+0xa8>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a3c      	ldr	r2, [pc, #240]	; (8003308 <DMA_CalcBaseAndBitshift+0x128>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d036      	beq.n	8003288 <DMA_CalcBaseAndBitshift+0xa8>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a3b      	ldr	r2, [pc, #236]	; (800330c <DMA_CalcBaseAndBitshift+0x12c>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d031      	beq.n	8003288 <DMA_CalcBaseAndBitshift+0xa8>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a39      	ldr	r2, [pc, #228]	; (8003310 <DMA_CalcBaseAndBitshift+0x130>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d02c      	beq.n	8003288 <DMA_CalcBaseAndBitshift+0xa8>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a38      	ldr	r2, [pc, #224]	; (8003314 <DMA_CalcBaseAndBitshift+0x134>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d027      	beq.n	8003288 <DMA_CalcBaseAndBitshift+0xa8>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a36      	ldr	r2, [pc, #216]	; (8003318 <DMA_CalcBaseAndBitshift+0x138>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d022      	beq.n	8003288 <DMA_CalcBaseAndBitshift+0xa8>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a35      	ldr	r2, [pc, #212]	; (800331c <DMA_CalcBaseAndBitshift+0x13c>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d01d      	beq.n	8003288 <DMA_CalcBaseAndBitshift+0xa8>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a33      	ldr	r2, [pc, #204]	; (8003320 <DMA_CalcBaseAndBitshift+0x140>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d018      	beq.n	8003288 <DMA_CalcBaseAndBitshift+0xa8>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a32      	ldr	r2, [pc, #200]	; (8003324 <DMA_CalcBaseAndBitshift+0x144>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d013      	beq.n	8003288 <DMA_CalcBaseAndBitshift+0xa8>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a30      	ldr	r2, [pc, #192]	; (8003328 <DMA_CalcBaseAndBitshift+0x148>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d00e      	beq.n	8003288 <DMA_CalcBaseAndBitshift+0xa8>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a2f      	ldr	r2, [pc, #188]	; (800332c <DMA_CalcBaseAndBitshift+0x14c>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d009      	beq.n	8003288 <DMA_CalcBaseAndBitshift+0xa8>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a2d      	ldr	r2, [pc, #180]	; (8003330 <DMA_CalcBaseAndBitshift+0x150>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d004      	beq.n	8003288 <DMA_CalcBaseAndBitshift+0xa8>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a2c      	ldr	r2, [pc, #176]	; (8003334 <DMA_CalcBaseAndBitshift+0x154>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d101      	bne.n	800328c <DMA_CalcBaseAndBitshift+0xac>
 8003288:	2301      	movs	r3, #1
 800328a:	e000      	b.n	800328e <DMA_CalcBaseAndBitshift+0xae>
 800328c:	2300      	movs	r3, #0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d024      	beq.n	80032dc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	b2db      	uxtb	r3, r3
 8003298:	3b10      	subs	r3, #16
 800329a:	4a27      	ldr	r2, [pc, #156]	; (8003338 <DMA_CalcBaseAndBitshift+0x158>)
 800329c:	fba2 2303 	umull	r2, r3, r2, r3
 80032a0:	091b      	lsrs	r3, r3, #4
 80032a2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f003 0307 	and.w	r3, r3, #7
 80032aa:	4a24      	ldr	r2, [pc, #144]	; (800333c <DMA_CalcBaseAndBitshift+0x15c>)
 80032ac:	5cd3      	ldrb	r3, [r2, r3]
 80032ae:	461a      	mov	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2b03      	cmp	r3, #3
 80032b8:	d908      	bls.n	80032cc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	461a      	mov	r2, r3
 80032c0:	4b1f      	ldr	r3, [pc, #124]	; (8003340 <DMA_CalcBaseAndBitshift+0x160>)
 80032c2:	4013      	ands	r3, r2
 80032c4:	1d1a      	adds	r2, r3, #4
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	659a      	str	r2, [r3, #88]	; 0x58
 80032ca:	e00d      	b.n	80032e8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	461a      	mov	r2, r3
 80032d2:	4b1b      	ldr	r3, [pc, #108]	; (8003340 <DMA_CalcBaseAndBitshift+0x160>)
 80032d4:	4013      	ands	r3, r2
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	6593      	str	r3, [r2, #88]	; 0x58
 80032da:	e005      	b.n	80032e8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3714      	adds	r7, #20
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	40020010 	.word	0x40020010
 80032fc:	40020028 	.word	0x40020028
 8003300:	40020040 	.word	0x40020040
 8003304:	40020058 	.word	0x40020058
 8003308:	40020070 	.word	0x40020070
 800330c:	40020088 	.word	0x40020088
 8003310:	400200a0 	.word	0x400200a0
 8003314:	400200b8 	.word	0x400200b8
 8003318:	40020410 	.word	0x40020410
 800331c:	40020428 	.word	0x40020428
 8003320:	40020440 	.word	0x40020440
 8003324:	40020458 	.word	0x40020458
 8003328:	40020470 	.word	0x40020470
 800332c:	40020488 	.word	0x40020488
 8003330:	400204a0 	.word	0x400204a0
 8003334:	400204b8 	.word	0x400204b8
 8003338:	aaaaaaab 	.word	0xaaaaaaab
 800333c:	0800901c 	.word	0x0800901c
 8003340:	fffffc00 	.word	0xfffffc00

08003344 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800334c:	2300      	movs	r3, #0
 800334e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d120      	bne.n	800339a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335c:	2b03      	cmp	r3, #3
 800335e:	d858      	bhi.n	8003412 <DMA_CheckFifoParam+0xce>
 8003360:	a201      	add	r2, pc, #4	; (adr r2, 8003368 <DMA_CheckFifoParam+0x24>)
 8003362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003366:	bf00      	nop
 8003368:	08003379 	.word	0x08003379
 800336c:	0800338b 	.word	0x0800338b
 8003370:	08003379 	.word	0x08003379
 8003374:	08003413 	.word	0x08003413
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d048      	beq.n	8003416 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003388:	e045      	b.n	8003416 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003392:	d142      	bne.n	800341a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003398:	e03f      	b.n	800341a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033a2:	d123      	bne.n	80033ec <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a8:	2b03      	cmp	r3, #3
 80033aa:	d838      	bhi.n	800341e <DMA_CheckFifoParam+0xda>
 80033ac:	a201      	add	r2, pc, #4	; (adr r2, 80033b4 <DMA_CheckFifoParam+0x70>)
 80033ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b2:	bf00      	nop
 80033b4:	080033c5 	.word	0x080033c5
 80033b8:	080033cb 	.word	0x080033cb
 80033bc:	080033c5 	.word	0x080033c5
 80033c0:	080033dd 	.word	0x080033dd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	73fb      	strb	r3, [r7, #15]
        break;
 80033c8:	e030      	b.n	800342c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d025      	beq.n	8003422 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80033da:	e022      	b.n	8003422 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033e4:	d11f      	bne.n	8003426 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80033ea:	e01c      	b.n	8003426 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d902      	bls.n	80033fa <DMA_CheckFifoParam+0xb6>
 80033f4:	2b03      	cmp	r3, #3
 80033f6:	d003      	beq.n	8003400 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80033f8:	e018      	b.n	800342c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	73fb      	strb	r3, [r7, #15]
        break;
 80033fe:	e015      	b.n	800342c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003404:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00e      	beq.n	800342a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	73fb      	strb	r3, [r7, #15]
    break;
 8003410:	e00b      	b.n	800342a <DMA_CheckFifoParam+0xe6>
        break;
 8003412:	bf00      	nop
 8003414:	e00a      	b.n	800342c <DMA_CheckFifoParam+0xe8>
        break;
 8003416:	bf00      	nop
 8003418:	e008      	b.n	800342c <DMA_CheckFifoParam+0xe8>
        break;
 800341a:	bf00      	nop
 800341c:	e006      	b.n	800342c <DMA_CheckFifoParam+0xe8>
        break;
 800341e:	bf00      	nop
 8003420:	e004      	b.n	800342c <DMA_CheckFifoParam+0xe8>
        break;
 8003422:	bf00      	nop
 8003424:	e002      	b.n	800342c <DMA_CheckFifoParam+0xe8>
        break;
 8003426:	bf00      	nop
 8003428:	e000      	b.n	800342c <DMA_CheckFifoParam+0xe8>
    break;
 800342a:	bf00      	nop
    }
  }

  return status;
 800342c:	7bfb      	ldrb	r3, [r7, #15]
}
 800342e:	4618      	mov	r0, r3
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop

0800343c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a38      	ldr	r2, [pc, #224]	; (8003530 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d022      	beq.n	800349a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a36      	ldr	r2, [pc, #216]	; (8003534 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d01d      	beq.n	800349a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a35      	ldr	r2, [pc, #212]	; (8003538 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d018      	beq.n	800349a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a33      	ldr	r2, [pc, #204]	; (800353c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d013      	beq.n	800349a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a32      	ldr	r2, [pc, #200]	; (8003540 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d00e      	beq.n	800349a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a30      	ldr	r2, [pc, #192]	; (8003544 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d009      	beq.n	800349a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a2f      	ldr	r2, [pc, #188]	; (8003548 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d004      	beq.n	800349a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a2d      	ldr	r2, [pc, #180]	; (800354c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d101      	bne.n	800349e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800349a:	2301      	movs	r3, #1
 800349c:	e000      	b.n	80034a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800349e:	2300      	movs	r3, #0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d01a      	beq.n	80034da <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	3b08      	subs	r3, #8
 80034ac:	4a28      	ldr	r2, [pc, #160]	; (8003550 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80034ae:	fba2 2303 	umull	r2, r3, r2, r3
 80034b2:	091b      	lsrs	r3, r3, #4
 80034b4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	4b26      	ldr	r3, [pc, #152]	; (8003554 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80034ba:	4413      	add	r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	461a      	mov	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a24      	ldr	r2, [pc, #144]	; (8003558 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80034c8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f003 031f 	and.w	r3, r3, #31
 80034d0:	2201      	movs	r2, #1
 80034d2:	409a      	lsls	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80034d8:	e024      	b.n	8003524 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	3b10      	subs	r3, #16
 80034e2:	4a1e      	ldr	r2, [pc, #120]	; (800355c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80034e4:	fba2 2303 	umull	r2, r3, r2, r3
 80034e8:	091b      	lsrs	r3, r3, #4
 80034ea:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	4a1c      	ldr	r2, [pc, #112]	; (8003560 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d806      	bhi.n	8003502 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	4a1b      	ldr	r2, [pc, #108]	; (8003564 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d902      	bls.n	8003502 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	3308      	adds	r3, #8
 8003500:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	4b18      	ldr	r3, [pc, #96]	; (8003568 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003506:	4413      	add	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	461a      	mov	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a16      	ldr	r2, [pc, #88]	; (800356c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003514:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f003 031f 	and.w	r3, r3, #31
 800351c:	2201      	movs	r2, #1
 800351e:	409a      	lsls	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003524:	bf00      	nop
 8003526:	3714      	adds	r7, #20
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	58025408 	.word	0x58025408
 8003534:	5802541c 	.word	0x5802541c
 8003538:	58025430 	.word	0x58025430
 800353c:	58025444 	.word	0x58025444
 8003540:	58025458 	.word	0x58025458
 8003544:	5802546c 	.word	0x5802546c
 8003548:	58025480 	.word	0x58025480
 800354c:	58025494 	.word	0x58025494
 8003550:	cccccccd 	.word	0xcccccccd
 8003554:	16009600 	.word	0x16009600
 8003558:	58025880 	.word	0x58025880
 800355c:	aaaaaaab 	.word	0xaaaaaaab
 8003560:	400204b8 	.word	0x400204b8
 8003564:	4002040f 	.word	0x4002040f
 8003568:	10008200 	.word	0x10008200
 800356c:	40020880 	.word	0x40020880

08003570 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	b2db      	uxtb	r3, r3
 800357e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d04a      	beq.n	800361c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2b08      	cmp	r3, #8
 800358a:	d847      	bhi.n	800361c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a25      	ldr	r2, [pc, #148]	; (8003628 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d022      	beq.n	80035dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a24      	ldr	r2, [pc, #144]	; (800362c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d01d      	beq.n	80035dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a22      	ldr	r2, [pc, #136]	; (8003630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d018      	beq.n	80035dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a21      	ldr	r2, [pc, #132]	; (8003634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d013      	beq.n	80035dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a1f      	ldr	r2, [pc, #124]	; (8003638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d00e      	beq.n	80035dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a1e      	ldr	r2, [pc, #120]	; (800363c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d009      	beq.n	80035dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a1c      	ldr	r2, [pc, #112]	; (8003640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d004      	beq.n	80035dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a1b      	ldr	r2, [pc, #108]	; (8003644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d101      	bne.n	80035e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80035dc:	2301      	movs	r3, #1
 80035de:	e000      	b.n	80035e2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80035e0:	2300      	movs	r3, #0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00a      	beq.n	80035fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	4b17      	ldr	r3, [pc, #92]	; (8003648 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80035ea:	4413      	add	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	461a      	mov	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a15      	ldr	r2, [pc, #84]	; (800364c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80035f8:	671a      	str	r2, [r3, #112]	; 0x70
 80035fa:	e009      	b.n	8003610 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	4b14      	ldr	r3, [pc, #80]	; (8003650 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003600:	4413      	add	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	461a      	mov	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a11      	ldr	r2, [pc, #68]	; (8003654 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800360e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	3b01      	subs	r3, #1
 8003614:	2201      	movs	r2, #1
 8003616:	409a      	lsls	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800361c:	bf00      	nop
 800361e:	3714      	adds	r7, #20
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr
 8003628:	58025408 	.word	0x58025408
 800362c:	5802541c 	.word	0x5802541c
 8003630:	58025430 	.word	0x58025430
 8003634:	58025444 	.word	0x58025444
 8003638:	58025458 	.word	0x58025458
 800363c:	5802546c 	.word	0x5802546c
 8003640:	58025480 	.word	0x58025480
 8003644:	58025494 	.word	0x58025494
 8003648:	1600963f 	.word	0x1600963f
 800364c:	58025940 	.word	0x58025940
 8003650:	1000823f 	.word	0x1000823f
 8003654:	40020940 	.word	0x40020940

08003658 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e0cf      	b.n	800380a <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003670:	2b00      	cmp	r3, #0
 8003672:	d106      	bne.n	8003682 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2223      	movs	r2, #35	; 0x23
 8003678:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f7fd fb4b 	bl	8000d18 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003682:	4b64      	ldr	r3, [pc, #400]	; (8003814 <HAL_ETH_Init+0x1bc>)
 8003684:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003688:	4a62      	ldr	r2, [pc, #392]	; (8003814 <HAL_ETH_Init+0x1bc>)
 800368a:	f043 0302 	orr.w	r3, r3, #2
 800368e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003692:	4b60      	ldr	r3, [pc, #384]	; (8003814 <HAL_ETH_Init+0x1bc>)
 8003694:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	60bb      	str	r3, [r7, #8]
 800369e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	7a1b      	ldrb	r3, [r3, #8]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d103      	bne.n	80036b0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80036a8:	2000      	movs	r0, #0
 80036aa:	f7fd ff23 	bl	80014f4 <HAL_SYSCFG_ETHInterfaceSelect>
 80036ae:	e003      	b.n	80036b8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80036b0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80036b4:	f7fd ff1e 	bl	80014f4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80036b8:	4b57      	ldr	r3, [pc, #348]	; (8003818 <HAL_ETH_Init+0x1c0>)
 80036ba:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	6812      	ldr	r2, [r2, #0]
 80036ca:	f043 0301 	orr.w	r3, r3, #1
 80036ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80036d2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036d4:	f7fd fed2 	bl	800147c <HAL_GetTick>
 80036d8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80036da:	e011      	b.n	8003700 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80036dc:	f7fd fece 	bl	800147c <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80036ea:	d909      	bls.n	8003700 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2204      	movs	r2, #4
 80036f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	22e0      	movs	r2, #224	; 0xe0
 80036f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e084      	b.n	800380a <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1e4      	bne.n	80036dc <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 f886 	bl	8003824 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003718:	f001 fe96 	bl	8005448 <HAL_RCC_GetHCLKFreq>
 800371c:	4603      	mov	r3, r0
 800371e:	4a3f      	ldr	r2, [pc, #252]	; (800381c <HAL_ETH_Init+0x1c4>)
 8003720:	fba2 2303 	umull	r2, r3, r2, r3
 8003724:	0c9a      	lsrs	r2, r3, #18
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	3a01      	subs	r2, #1
 800372c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 fa71 	bl	8003c18 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800373e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003742:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6812      	ldr	r2, [r2, #0]
 800374a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800374e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003752:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	f003 0303 	and.w	r3, r3, #3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d009      	beq.n	8003776 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	22e0      	movs	r2, #224	; 0xe0
 800376e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e049      	b.n	800380a <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800377e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003782:	4b27      	ldr	r3, [pc, #156]	; (8003820 <HAL_ETH_Init+0x1c8>)
 8003784:	4013      	ands	r3, r2
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	6952      	ldr	r2, [r2, #20]
 800378a:	0051      	lsls	r1, r2, #1
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6812      	ldr	r2, [r2, #0]
 8003790:	430b      	orrs	r3, r1
 8003792:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003796:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 fad9 	bl	8003d52 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 fb1f 	bl	8003de4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	3305      	adds	r3, #5
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	021a      	lsls	r2, r3, #8
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	3304      	adds	r3, #4
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	4619      	mov	r1, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	430a      	orrs	r2, r1
 80037c0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	3303      	adds	r3, #3
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	061a      	lsls	r2, r3, #24
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	3302      	adds	r3, #2
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	041b      	lsls	r3, r3, #16
 80037d8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	3301      	adds	r3, #1
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80037e4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80037f2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80037f4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2210      	movs	r2, #16
 8003804:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	58024400 	.word	0x58024400
 8003818:	58000400 	.word	0x58000400
 800381c:	431bde83 	.word	0x431bde83
 8003820:	ffff8001 	.word	0xffff8001

08003824 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003834:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800383c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800383e:	f001 fe03 	bl	8005448 <HAL_RCC_GetHCLKFreq>
 8003842:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	4a1e      	ldr	r2, [pc, #120]	; (80038c0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d908      	bls.n	800385e <HAL_ETH_SetMDIOClockRange+0x3a>
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	4a1d      	ldr	r2, [pc, #116]	; (80038c4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d804      	bhi.n	800385e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	e027      	b.n	80038ae <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	4a18      	ldr	r2, [pc, #96]	; (80038c4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d908      	bls.n	8003878 <HAL_ETH_SetMDIOClockRange+0x54>
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	4a17      	ldr	r2, [pc, #92]	; (80038c8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d204      	bcs.n	8003878 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003874:	60fb      	str	r3, [r7, #12]
 8003876:	e01a      	b.n	80038ae <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	4a13      	ldr	r2, [pc, #76]	; (80038c8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d303      	bcc.n	8003888 <HAL_ETH_SetMDIOClockRange+0x64>
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	4a12      	ldr	r2, [pc, #72]	; (80038cc <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d911      	bls.n	80038ac <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	4a10      	ldr	r2, [pc, #64]	; (80038cc <HAL_ETH_SetMDIOClockRange+0xa8>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d908      	bls.n	80038a2 <HAL_ETH_SetMDIOClockRange+0x7e>
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	4a0f      	ldr	r2, [pc, #60]	; (80038d0 <HAL_ETH_SetMDIOClockRange+0xac>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d804      	bhi.n	80038a2 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800389e:	60fb      	str	r3, [r7, #12]
 80038a0:	e005      	b.n	80038ae <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038a8:	60fb      	str	r3, [r7, #12]
 80038aa:	e000      	b.n	80038ae <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80038ac:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80038b8:	bf00      	nop
 80038ba:	3710      	adds	r7, #16
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	01312cff 	.word	0x01312cff
 80038c4:	02160ebf 	.word	0x02160ebf
 80038c8:	03938700 	.word	0x03938700
 80038cc:	05f5e0ff 	.word	0x05f5e0ff
 80038d0:	08f0d17f 	.word	0x08f0d17f

080038d4 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80038e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	791b      	ldrb	r3, [r3, #4]
 80038ec:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80038ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	7b1b      	ldrb	r3, [r3, #12]
 80038f4:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80038f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	7b5b      	ldrb	r3, [r3, #13]
 80038fc:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80038fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	7b9b      	ldrb	r3, [r3, #14]
 8003904:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003906:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	7bdb      	ldrb	r3, [r3, #15]
 800390c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800390e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	7c12      	ldrb	r2, [r2, #16]
 8003914:	2a00      	cmp	r2, #0
 8003916:	d102      	bne.n	800391e <ETH_SetMACConfig+0x4a>
 8003918:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800391c:	e000      	b.n	8003920 <ETH_SetMACConfig+0x4c>
 800391e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003920:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003922:	683a      	ldr	r2, [r7, #0]
 8003924:	7c52      	ldrb	r2, [r2, #17]
 8003926:	2a00      	cmp	r2, #0
 8003928:	d102      	bne.n	8003930 <ETH_SetMACConfig+0x5c>
 800392a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800392e:	e000      	b.n	8003932 <ETH_SetMACConfig+0x5e>
 8003930:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003932:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	7c9b      	ldrb	r3, [r3, #18]
 8003938:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800393a:	431a      	orrs	r2, r3
               macconf->Speed |
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8003940:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8003946:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	7f1b      	ldrb	r3, [r3, #28]
 800394c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800394e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	7f5b      	ldrb	r3, [r3, #29]
 8003954:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003956:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	7f92      	ldrb	r2, [r2, #30]
 800395c:	2a00      	cmp	r2, #0
 800395e:	d102      	bne.n	8003966 <ETH_SetMACConfig+0x92>
 8003960:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003964:	e000      	b.n	8003968 <ETH_SetMACConfig+0x94>
 8003966:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003968:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	7fdb      	ldrb	r3, [r3, #31]
 800396e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003970:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003978:	2a00      	cmp	r2, #0
 800397a:	d102      	bne.n	8003982 <ETH_SetMACConfig+0xae>
 800397c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003980:	e000      	b.n	8003984 <ETH_SetMACConfig+0xb0>
 8003982:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003984:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800398a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003992:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8003994:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800399a:	4313      	orrs	r3, r2
 800399c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	4b56      	ldr	r3, [pc, #344]	; (8003b00 <ETH_SetMACConfig+0x22c>)
 80039a6:	4013      	ands	r3, r2
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	6812      	ldr	r2, [r2, #0]
 80039ac:	68f9      	ldr	r1, [r7, #12]
 80039ae:	430b      	orrs	r3, r1
 80039b0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039be:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80039c0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80039c8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80039ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80039d2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80039d4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80039d6:	683a      	ldr	r2, [r7, #0]
 80039d8:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80039dc:	2a00      	cmp	r2, #0
 80039de:	d102      	bne.n	80039e6 <ETH_SetMACConfig+0x112>
 80039e0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80039e4:	e000      	b.n	80039e8 <ETH_SetMACConfig+0x114>
 80039e6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80039e8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80039ee:	4313      	orrs	r3, r2
 80039f0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	4b42      	ldr	r3, [pc, #264]	; (8003b04 <ETH_SetMACConfig+0x230>)
 80039fa:	4013      	ands	r3, r2
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	6812      	ldr	r2, [r2, #0]
 8003a00:	68f9      	ldr	r1, [r7, #12]
 8003a02:	430b      	orrs	r3, r1
 8003a04:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a0c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003a12:	4313      	orrs	r3, r2
 8003a14:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68da      	ldr	r2, [r3, #12]
 8003a1c:	4b3a      	ldr	r3, [pc, #232]	; (8003b08 <ETH_SetMACConfig+0x234>)
 8003a1e:	4013      	ands	r3, r2
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	6812      	ldr	r2, [r2, #0]
 8003a24:	68f9      	ldr	r1, [r7, #12]
 8003a26:	430b      	orrs	r3, r1
 8003a28:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003a30:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003a36:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003a3e:	2a00      	cmp	r2, #0
 8003a40:	d101      	bne.n	8003a46 <ETH_SetMACConfig+0x172>
 8003a42:	2280      	movs	r2, #128	; 0x80
 8003a44:	e000      	b.n	8003a48 <ETH_SetMACConfig+0x174>
 8003a46:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003a48:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a4e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003a50:	4313      	orrs	r3, r2
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a5a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8003a5e:	4013      	ands	r3, r2
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	6812      	ldr	r2, [r2, #0]
 8003a64:	68f9      	ldr	r1, [r7, #12]
 8003a66:	430b      	orrs	r3, r1
 8003a68:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003a70:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003a78:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a86:	f023 0103 	bic.w	r1, r3, #3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	430a      	orrs	r2, r1
 8003a92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8003a9e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8003aba:	2a00      	cmp	r2, #0
 8003abc:	d101      	bne.n	8003ac2 <ETH_SetMACConfig+0x1ee>
 8003abe:	2240      	movs	r2, #64	; 0x40
 8003ac0:	e000      	b.n	8003ac4 <ETH_SetMACConfig+0x1f0>
 8003ac2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003ac4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003acc:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003ace:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8003ad6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003ae4:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8003af4:	bf00      	nop
 8003af6:	3714      	adds	r7, #20
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr
 8003b00:	00048083 	.word	0x00048083
 8003b04:	c0f88000 	.word	0xc0f88000
 8003b08:	fffffef0 	.word	0xfffffef0

08003b0c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	4b38      	ldr	r3, [pc, #224]	; (8003c04 <ETH_SetDMAConfig+0xf8>)
 8003b22:	4013      	ands	r3, r2
 8003b24:	683a      	ldr	r2, [r7, #0]
 8003b26:	6811      	ldr	r1, [r2, #0]
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	6812      	ldr	r2, [r2, #0]
 8003b2c:	430b      	orrs	r3, r1
 8003b2e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b32:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	791b      	ldrb	r3, [r3, #4]
 8003b38:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003b3e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	7b1b      	ldrb	r3, [r3, #12]
 8003b44:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003b46:	4313      	orrs	r3, r2
 8003b48:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	4b2c      	ldr	r3, [pc, #176]	; (8003c08 <ETH_SetDMAConfig+0xfc>)
 8003b56:	4013      	ands	r3, r2
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	6812      	ldr	r2, [r2, #0]
 8003b5c:	68f9      	ldr	r1, [r7, #12]
 8003b5e:	430b      	orrs	r3, r1
 8003b60:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b64:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	7b5b      	ldrb	r3, [r3, #13]
 8003b6a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003b70:	4313      	orrs	r3, r2
 8003b72:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b7c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8003b80:	4b22      	ldr	r3, [pc, #136]	; (8003c0c <ETH_SetDMAConfig+0x100>)
 8003b82:	4013      	ands	r3, r2
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	6812      	ldr	r2, [r2, #0]
 8003b88:	68f9      	ldr	r1, [r7, #12]
 8003b8a:	430b      	orrs	r3, r1
 8003b8c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b90:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	7d1b      	ldrb	r3, [r3, #20]
 8003b9c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003b9e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	7f5b      	ldrb	r3, [r3, #29]
 8003ba4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bb2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8003bb6:	4b16      	ldr	r3, [pc, #88]	; (8003c10 <ETH_SetDMAConfig+0x104>)
 8003bb8:	4013      	ands	r3, r2
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	6812      	ldr	r2, [r2, #0]
 8003bbe:	68f9      	ldr	r1, [r7, #12]
 8003bc0:	430b      	orrs	r3, r1
 8003bc2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003bc6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	7f1b      	ldrb	r3, [r3, #28]
 8003bce:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003be0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003be4:	4b0b      	ldr	r3, [pc, #44]	; (8003c14 <ETH_SetDMAConfig+0x108>)
 8003be6:	4013      	ands	r3, r2
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	6812      	ldr	r2, [r2, #0]
 8003bec:	68f9      	ldr	r1, [r7, #12]
 8003bee:	430b      	orrs	r3, r1
 8003bf0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003bf4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8003bf8:	bf00      	nop
 8003bfa:	3714      	adds	r7, #20
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr
 8003c04:	ffff87fd 	.word	0xffff87fd
 8003c08:	ffff2ffe 	.word	0xffff2ffe
 8003c0c:	fffec000 	.word	0xfffec000
 8003c10:	ffc0efef 	.word	0xffc0efef
 8003c14:	7fc0ffff 	.word	0x7fc0ffff

08003c18 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b0a4      	sub	sp, #144	; 0x90
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003c20:	2301      	movs	r3, #1
 8003c22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003c26:	2300      	movs	r3, #0
 8003c28:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003c30:	2300      	movs	r3, #0
 8003c32:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003c36:	2301      	movs	r3, #1
 8003c38:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003c42:	2301      	movs	r3, #1
 8003c44:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003c54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c58:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8003c60:	2300      	movs	r3, #0
 8003c62:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003c64:	2300      	movs	r3, #0
 8003c66:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8003c70:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8003c74:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003c76:	2300      	movs	r3, #0
 8003c78:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8003c80:	2301      	movs	r3, #1
 8003c82:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003c86:	2300      	movs	r3, #0
 8003c88:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003c92:	2300      	movs	r3, #0
 8003c94:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8003c96:	2300      	movs	r3, #0
 8003c98:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003caa:	2301      	movs	r3, #1
 8003cac:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003cb0:	2320      	movs	r3, #32
 8003cb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003cc2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8003cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003cc8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ccc:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003cec:	2301      	movs	r3, #1
 8003cee:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003cfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d00:	4619      	mov	r1, r3
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7ff fde6 	bl	80038d4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003d10:	2300      	movs	r3, #0
 8003d12:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003d14:	2300      	movs	r3, #0
 8003d16:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003d22:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003d26:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003d2c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003d30:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003d32:	2300      	movs	r3, #0
 8003d34:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8003d38:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003d3c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003d3e:	f107 0308 	add.w	r3, r7, #8
 8003d42:	4619      	mov	r1, r3
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f7ff fee1 	bl	8003b0c <ETH_SetDMAConfig>
}
 8003d4a:	bf00      	nop
 8003d4c:	3790      	adds	r7, #144	; 0x90
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b085      	sub	sp, #20
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	60fb      	str	r3, [r7, #12]
 8003d5e:	e01d      	b.n	8003d9c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68d9      	ldr	r1, [r3, #12]
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	4613      	mov	r3, r2
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	4413      	add	r3, r2
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	440b      	add	r3, r1
 8003d70:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	2200      	movs	r2, #0
 8003d76:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	2200      	movs	r2, #0
 8003d82:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	2200      	movs	r2, #0
 8003d88:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003d8a:	68b9      	ldr	r1, [r7, #8]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	3206      	adds	r2, #6
 8003d92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	60fb      	str	r3, [r7, #12]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2b03      	cmp	r3, #3
 8003da0:	d9de      	bls.n	8003d60 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003db0:	461a      	mov	r2, r3
 8003db2:	2303      	movs	r3, #3
 8003db4:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68da      	ldr	r2, [r3, #12]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dc4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	68da      	ldr	r2, [r3, #12]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dd4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8003dd8:	bf00      	nop
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003dec:	2300      	movs	r3, #0
 8003dee:	60fb      	str	r3, [r7, #12]
 8003df0:	e023      	b.n	8003e3a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6919      	ldr	r1, [r3, #16]
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	4413      	add	r3, r2
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	440b      	add	r3, r1
 8003e02:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	2200      	movs	r2, #0
 8003e08:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	2200      	movs	r2, #0
 8003e14:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	2200      	movs	r2, #0
 8003e26:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003e28:	68b9      	ldr	r1, [r7, #8]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	3212      	adds	r2, #18
 8003e30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	3301      	adds	r3, #1
 8003e38:	60fb      	str	r3, [r7, #12]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2b03      	cmp	r3, #3
 8003e3e:	d9d8      	bls.n	8003df2 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e66:	461a      	mov	r2, r3
 8003e68:	2303      	movs	r3, #3
 8003e6a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	691a      	ldr	r2, [r3, #16]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e7a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e8e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8003e92:	bf00      	nop
 8003e94:	3714      	adds	r7, #20
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
	...

08003ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b089      	sub	sp, #36	; 0x24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003eae:	4b89      	ldr	r3, [pc, #548]	; (80040d4 <HAL_GPIO_Init+0x234>)
 8003eb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003eb2:	e194      	b.n	80041de <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	2101      	movs	r1, #1
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f000 8186 	beq.w	80041d8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f003 0303 	and.w	r3, r3, #3
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d005      	beq.n	8003ee4 <HAL_GPIO_Init+0x44>
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f003 0303 	and.w	r3, r3, #3
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d130      	bne.n	8003f46 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	2203      	movs	r2, #3
 8003ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef4:	43db      	mvns	r3, r3
 8003ef6:	69ba      	ldr	r2, [r7, #24]
 8003ef8:	4013      	ands	r3, r2
 8003efa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	68da      	ldr	r2, [r3, #12]
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	fa02 f303 	lsl.w	r3, r2, r3
 8003f08:	69ba      	ldr	r2, [r7, #24]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f22:	43db      	mvns	r3, r3
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	4013      	ands	r3, r2
 8003f28:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	091b      	lsrs	r3, r3, #4
 8003f30:	f003 0201 	and.w	r2, r3, #1
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3a:	69ba      	ldr	r2, [r7, #24]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f003 0303 	and.w	r3, r3, #3
 8003f4e:	2b03      	cmp	r3, #3
 8003f50:	d017      	beq.n	8003f82 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	005b      	lsls	r3, r3, #1
 8003f5c:	2203      	movs	r2, #3
 8003f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f62:	43db      	mvns	r3, r3
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	4013      	ands	r3, r2
 8003f68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	689a      	ldr	r2, [r3, #8]
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	005b      	lsls	r3, r3, #1
 8003f72:	fa02 f303 	lsl.w	r3, r2, r3
 8003f76:	69ba      	ldr	r2, [r7, #24]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f003 0303 	and.w	r3, r3, #3
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d123      	bne.n	8003fd6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	08da      	lsrs	r2, r3, #3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	3208      	adds	r2, #8
 8003f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	f003 0307 	and.w	r3, r3, #7
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	220f      	movs	r2, #15
 8003fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003faa:	43db      	mvns	r3, r3
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	4013      	ands	r3, r2
 8003fb0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	691a      	ldr	r2, [r3, #16]
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	f003 0307 	and.w	r3, r3, #7
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc2:	69ba      	ldr	r2, [r7, #24]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	08da      	lsrs	r2, r3, #3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	3208      	adds	r2, #8
 8003fd0:	69b9      	ldr	r1, [r7, #24]
 8003fd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	005b      	lsls	r3, r3, #1
 8003fe0:	2203      	movs	r2, #3
 8003fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe6:	43db      	mvns	r3, r3
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	4013      	ands	r3, r2
 8003fec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f003 0203 	and.w	r2, r3, #3
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	4313      	orrs	r3, r2
 8004002:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	69ba      	ldr	r2, [r7, #24]
 8004008:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004012:	2b00      	cmp	r3, #0
 8004014:	f000 80e0 	beq.w	80041d8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004018:	4b2f      	ldr	r3, [pc, #188]	; (80040d8 <HAL_GPIO_Init+0x238>)
 800401a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800401e:	4a2e      	ldr	r2, [pc, #184]	; (80040d8 <HAL_GPIO_Init+0x238>)
 8004020:	f043 0302 	orr.w	r3, r3, #2
 8004024:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004028:	4b2b      	ldr	r3, [pc, #172]	; (80040d8 <HAL_GPIO_Init+0x238>)
 800402a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	60fb      	str	r3, [r7, #12]
 8004034:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004036:	4a29      	ldr	r2, [pc, #164]	; (80040dc <HAL_GPIO_Init+0x23c>)
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	089b      	lsrs	r3, r3, #2
 800403c:	3302      	adds	r3, #2
 800403e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004042:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	f003 0303 	and.w	r3, r3, #3
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	220f      	movs	r2, #15
 800404e:	fa02 f303 	lsl.w	r3, r2, r3
 8004052:	43db      	mvns	r3, r3
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	4013      	ands	r3, r2
 8004058:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a20      	ldr	r2, [pc, #128]	; (80040e0 <HAL_GPIO_Init+0x240>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d052      	beq.n	8004108 <HAL_GPIO_Init+0x268>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a1f      	ldr	r2, [pc, #124]	; (80040e4 <HAL_GPIO_Init+0x244>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d031      	beq.n	80040ce <HAL_GPIO_Init+0x22e>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a1e      	ldr	r2, [pc, #120]	; (80040e8 <HAL_GPIO_Init+0x248>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d02b      	beq.n	80040ca <HAL_GPIO_Init+0x22a>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a1d      	ldr	r2, [pc, #116]	; (80040ec <HAL_GPIO_Init+0x24c>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d025      	beq.n	80040c6 <HAL_GPIO_Init+0x226>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a1c      	ldr	r2, [pc, #112]	; (80040f0 <HAL_GPIO_Init+0x250>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d01f      	beq.n	80040c2 <HAL_GPIO_Init+0x222>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a1b      	ldr	r2, [pc, #108]	; (80040f4 <HAL_GPIO_Init+0x254>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d019      	beq.n	80040be <HAL_GPIO_Init+0x21e>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a1a      	ldr	r2, [pc, #104]	; (80040f8 <HAL_GPIO_Init+0x258>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d013      	beq.n	80040ba <HAL_GPIO_Init+0x21a>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a19      	ldr	r2, [pc, #100]	; (80040fc <HAL_GPIO_Init+0x25c>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d00d      	beq.n	80040b6 <HAL_GPIO_Init+0x216>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a18      	ldr	r2, [pc, #96]	; (8004100 <HAL_GPIO_Init+0x260>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d007      	beq.n	80040b2 <HAL_GPIO_Init+0x212>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a17      	ldr	r2, [pc, #92]	; (8004104 <HAL_GPIO_Init+0x264>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d101      	bne.n	80040ae <HAL_GPIO_Init+0x20e>
 80040aa:	2309      	movs	r3, #9
 80040ac:	e02d      	b.n	800410a <HAL_GPIO_Init+0x26a>
 80040ae:	230a      	movs	r3, #10
 80040b0:	e02b      	b.n	800410a <HAL_GPIO_Init+0x26a>
 80040b2:	2308      	movs	r3, #8
 80040b4:	e029      	b.n	800410a <HAL_GPIO_Init+0x26a>
 80040b6:	2307      	movs	r3, #7
 80040b8:	e027      	b.n	800410a <HAL_GPIO_Init+0x26a>
 80040ba:	2306      	movs	r3, #6
 80040bc:	e025      	b.n	800410a <HAL_GPIO_Init+0x26a>
 80040be:	2305      	movs	r3, #5
 80040c0:	e023      	b.n	800410a <HAL_GPIO_Init+0x26a>
 80040c2:	2304      	movs	r3, #4
 80040c4:	e021      	b.n	800410a <HAL_GPIO_Init+0x26a>
 80040c6:	2303      	movs	r3, #3
 80040c8:	e01f      	b.n	800410a <HAL_GPIO_Init+0x26a>
 80040ca:	2302      	movs	r3, #2
 80040cc:	e01d      	b.n	800410a <HAL_GPIO_Init+0x26a>
 80040ce:	2301      	movs	r3, #1
 80040d0:	e01b      	b.n	800410a <HAL_GPIO_Init+0x26a>
 80040d2:	bf00      	nop
 80040d4:	58000080 	.word	0x58000080
 80040d8:	58024400 	.word	0x58024400
 80040dc:	58000400 	.word	0x58000400
 80040e0:	58020000 	.word	0x58020000
 80040e4:	58020400 	.word	0x58020400
 80040e8:	58020800 	.word	0x58020800
 80040ec:	58020c00 	.word	0x58020c00
 80040f0:	58021000 	.word	0x58021000
 80040f4:	58021400 	.word	0x58021400
 80040f8:	58021800 	.word	0x58021800
 80040fc:	58021c00 	.word	0x58021c00
 8004100:	58022000 	.word	0x58022000
 8004104:	58022400 	.word	0x58022400
 8004108:	2300      	movs	r3, #0
 800410a:	69fa      	ldr	r2, [r7, #28]
 800410c:	f002 0203 	and.w	r2, r2, #3
 8004110:	0092      	lsls	r2, r2, #2
 8004112:	4093      	lsls	r3, r2
 8004114:	69ba      	ldr	r2, [r7, #24]
 8004116:	4313      	orrs	r3, r2
 8004118:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800411a:	4938      	ldr	r1, [pc, #224]	; (80041fc <HAL_GPIO_Init+0x35c>)
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	089b      	lsrs	r3, r3, #2
 8004120:	3302      	adds	r3, #2
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	43db      	mvns	r3, r3
 8004134:	69ba      	ldr	r2, [r7, #24]
 8004136:	4013      	ands	r3, r2
 8004138:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d003      	beq.n	800414e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004146:	69ba      	ldr	r2, [r7, #24]
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	4313      	orrs	r3, r2
 800414c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800414e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	43db      	mvns	r3, r3
 8004162:	69ba      	ldr	r2, [r7, #24]
 8004164:	4013      	ands	r3, r2
 8004166:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d003      	beq.n	800417c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	4313      	orrs	r3, r2
 800417a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800417c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	43db      	mvns	r3, r3
 800418e:	69ba      	ldr	r2, [r7, #24]
 8004190:	4013      	ands	r3, r2
 8004192:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d003      	beq.n	80041a8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	69ba      	ldr	r2, [r7, #24]
 80041ac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	43db      	mvns	r3, r3
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	4013      	ands	r3, r2
 80041bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d003      	beq.n	80041d2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	3301      	adds	r3, #1
 80041dc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	fa22 f303 	lsr.w	r3, r2, r3
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f47f ae63 	bne.w	8003eb4 <HAL_GPIO_Init+0x14>
  }
}
 80041ee:	bf00      	nop
 80041f0:	bf00      	nop
 80041f2:	3724      	adds	r7, #36	; 0x24
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr
 80041fc:	58000400 	.word	0x58000400

08004200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	460b      	mov	r3, r1
 800420a:	807b      	strh	r3, [r7, #2]
 800420c:	4613      	mov	r3, r2
 800420e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004210:	787b      	ldrb	r3, [r7, #1]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d003      	beq.n	800421e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004216:	887a      	ldrh	r2, [r7, #2]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800421c:	e003      	b.n	8004226 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800421e:	887b      	ldrh	r3, [r7, #2]
 8004220:	041a      	lsls	r2, r3, #16
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	619a      	str	r2, [r3, #24]
}
 8004226:	bf00      	nop
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004232:	b480      	push	{r7}
 8004234:	b085      	sub	sp, #20
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
 800423a:	460b      	mov	r3, r1
 800423c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004244:	887a      	ldrh	r2, [r7, #2]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	4013      	ands	r3, r2
 800424a:	041a      	lsls	r2, r3, #16
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	43d9      	mvns	r1, r3
 8004250:	887b      	ldrh	r3, [r7, #2]
 8004252:	400b      	ands	r3, r1
 8004254:	431a      	orrs	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	619a      	str	r2, [r3, #24]
}
 800425a:	bf00      	nop
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004266:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004268:	b08f      	sub	sp, #60	; 0x3c
 800426a:	af0a      	add	r7, sp, #40	; 0x28
 800426c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e116      	b.n	80044a6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d106      	bne.n	8004298 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f7fc fef4 	bl	8001080 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2203      	movs	r2, #3
 800429c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d102      	bne.n	80042b2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4618      	mov	r0, r3
 80042b8:	f004 fbd4 	bl	8008a64 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	603b      	str	r3, [r7, #0]
 80042c2:	687e      	ldr	r6, [r7, #4]
 80042c4:	466d      	mov	r5, sp
 80042c6:	f106 0410 	add.w	r4, r6, #16
 80042ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80042d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80042da:	1d33      	adds	r3, r6, #4
 80042dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042de:	6838      	ldr	r0, [r7, #0]
 80042e0:	f004 fb52 	bl	8008988 <USB_CoreInit>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d005      	beq.n	80042f6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2202      	movs	r2, #2
 80042ee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e0d7      	b.n	80044a6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2100      	movs	r1, #0
 80042fc:	4618      	mov	r0, r3
 80042fe:	f004 fbc2 	bl	8008a86 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004302:	2300      	movs	r3, #0
 8004304:	73fb      	strb	r3, [r7, #15]
 8004306:	e04a      	b.n	800439e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004308:	7bfa      	ldrb	r2, [r7, #15]
 800430a:	6879      	ldr	r1, [r7, #4]
 800430c:	4613      	mov	r3, r2
 800430e:	00db      	lsls	r3, r3, #3
 8004310:	4413      	add	r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	440b      	add	r3, r1
 8004316:	333d      	adds	r3, #61	; 0x3d
 8004318:	2201      	movs	r2, #1
 800431a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800431c:	7bfa      	ldrb	r2, [r7, #15]
 800431e:	6879      	ldr	r1, [r7, #4]
 8004320:	4613      	mov	r3, r2
 8004322:	00db      	lsls	r3, r3, #3
 8004324:	4413      	add	r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	440b      	add	r3, r1
 800432a:	333c      	adds	r3, #60	; 0x3c
 800432c:	7bfa      	ldrb	r2, [r7, #15]
 800432e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004330:	7bfa      	ldrb	r2, [r7, #15]
 8004332:	7bfb      	ldrb	r3, [r7, #15]
 8004334:	b298      	uxth	r0, r3
 8004336:	6879      	ldr	r1, [r7, #4]
 8004338:	4613      	mov	r3, r2
 800433a:	00db      	lsls	r3, r3, #3
 800433c:	4413      	add	r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	440b      	add	r3, r1
 8004342:	3344      	adds	r3, #68	; 0x44
 8004344:	4602      	mov	r2, r0
 8004346:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004348:	7bfa      	ldrb	r2, [r7, #15]
 800434a:	6879      	ldr	r1, [r7, #4]
 800434c:	4613      	mov	r3, r2
 800434e:	00db      	lsls	r3, r3, #3
 8004350:	4413      	add	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	440b      	add	r3, r1
 8004356:	3340      	adds	r3, #64	; 0x40
 8004358:	2200      	movs	r2, #0
 800435a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800435c:	7bfa      	ldrb	r2, [r7, #15]
 800435e:	6879      	ldr	r1, [r7, #4]
 8004360:	4613      	mov	r3, r2
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	4413      	add	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	440b      	add	r3, r1
 800436a:	3348      	adds	r3, #72	; 0x48
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004370:	7bfa      	ldrb	r2, [r7, #15]
 8004372:	6879      	ldr	r1, [r7, #4]
 8004374:	4613      	mov	r3, r2
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	4413      	add	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	440b      	add	r3, r1
 800437e:	334c      	adds	r3, #76	; 0x4c
 8004380:	2200      	movs	r2, #0
 8004382:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004384:	7bfa      	ldrb	r2, [r7, #15]
 8004386:	6879      	ldr	r1, [r7, #4]
 8004388:	4613      	mov	r3, r2
 800438a:	00db      	lsls	r3, r3, #3
 800438c:	4413      	add	r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	440b      	add	r3, r1
 8004392:	3354      	adds	r3, #84	; 0x54
 8004394:	2200      	movs	r2, #0
 8004396:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004398:	7bfb      	ldrb	r3, [r7, #15]
 800439a:	3301      	adds	r3, #1
 800439c:	73fb      	strb	r3, [r7, #15]
 800439e:	7bfa      	ldrb	r2, [r7, #15]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d3af      	bcc.n	8004308 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043a8:	2300      	movs	r3, #0
 80043aa:	73fb      	strb	r3, [r7, #15]
 80043ac:	e044      	b.n	8004438 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80043ae:	7bfa      	ldrb	r2, [r7, #15]
 80043b0:	6879      	ldr	r1, [r7, #4]
 80043b2:	4613      	mov	r3, r2
 80043b4:	00db      	lsls	r3, r3, #3
 80043b6:	4413      	add	r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	440b      	add	r3, r1
 80043bc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80043c0:	2200      	movs	r2, #0
 80043c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80043c4:	7bfa      	ldrb	r2, [r7, #15]
 80043c6:	6879      	ldr	r1, [r7, #4]
 80043c8:	4613      	mov	r3, r2
 80043ca:	00db      	lsls	r3, r3, #3
 80043cc:	4413      	add	r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	440b      	add	r3, r1
 80043d2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80043d6:	7bfa      	ldrb	r2, [r7, #15]
 80043d8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80043da:	7bfa      	ldrb	r2, [r7, #15]
 80043dc:	6879      	ldr	r1, [r7, #4]
 80043de:	4613      	mov	r3, r2
 80043e0:	00db      	lsls	r3, r3, #3
 80043e2:	4413      	add	r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	440b      	add	r3, r1
 80043e8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80043ec:	2200      	movs	r2, #0
 80043ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80043f0:	7bfa      	ldrb	r2, [r7, #15]
 80043f2:	6879      	ldr	r1, [r7, #4]
 80043f4:	4613      	mov	r3, r2
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	4413      	add	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	440b      	add	r3, r1
 80043fe:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004402:	2200      	movs	r2, #0
 8004404:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004406:	7bfa      	ldrb	r2, [r7, #15]
 8004408:	6879      	ldr	r1, [r7, #4]
 800440a:	4613      	mov	r3, r2
 800440c:	00db      	lsls	r3, r3, #3
 800440e:	4413      	add	r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	440b      	add	r3, r1
 8004414:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004418:	2200      	movs	r2, #0
 800441a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800441c:	7bfa      	ldrb	r2, [r7, #15]
 800441e:	6879      	ldr	r1, [r7, #4]
 8004420:	4613      	mov	r3, r2
 8004422:	00db      	lsls	r3, r3, #3
 8004424:	4413      	add	r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	440b      	add	r3, r1
 800442a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800442e:	2200      	movs	r2, #0
 8004430:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004432:	7bfb      	ldrb	r3, [r7, #15]
 8004434:	3301      	adds	r3, #1
 8004436:	73fb      	strb	r3, [r7, #15]
 8004438:	7bfa      	ldrb	r2, [r7, #15]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	429a      	cmp	r2, r3
 8004440:	d3b5      	bcc.n	80043ae <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	603b      	str	r3, [r7, #0]
 8004448:	687e      	ldr	r6, [r7, #4]
 800444a:	466d      	mov	r5, sp
 800444c:	f106 0410 	add.w	r4, r6, #16
 8004450:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004452:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004454:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004456:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004458:	e894 0003 	ldmia.w	r4, {r0, r1}
 800445c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004460:	1d33      	adds	r3, r6, #4
 8004462:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004464:	6838      	ldr	r0, [r7, #0]
 8004466:	f004 fb5b 	bl	8008b20 <USB_DevInit>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d005      	beq.n	800447c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2202      	movs	r2, #2
 8004474:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e014      	b.n	80044a6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004490:	2b01      	cmp	r3, #1
 8004492:	d102      	bne.n	800449a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 f80b 	bl	80044b0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4618      	mov	r0, r3
 80044a0:	f004 fd19 	bl	8008ed6 <USB_DevDisconnect>

  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3714      	adds	r7, #20
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080044b0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044de:	4b05      	ldr	r3, [pc, #20]	; (80044f4 <HAL_PCDEx_ActivateLPM+0x44>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3714      	adds	r7, #20
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr
 80044f4:	10000003 	.word	0x10000003

080044f8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004500:	4b19      	ldr	r3, [pc, #100]	; (8004568 <HAL_PWREx_ConfigSupply+0x70>)
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f003 0304 	and.w	r3, r3, #4
 8004508:	2b04      	cmp	r3, #4
 800450a:	d00a      	beq.n	8004522 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800450c:	4b16      	ldr	r3, [pc, #88]	; (8004568 <HAL_PWREx_ConfigSupply+0x70>)
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f003 0307 	and.w	r3, r3, #7
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	429a      	cmp	r2, r3
 8004518:	d001      	beq.n	800451e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e01f      	b.n	800455e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800451e:	2300      	movs	r3, #0
 8004520:	e01d      	b.n	800455e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004522:	4b11      	ldr	r3, [pc, #68]	; (8004568 <HAL_PWREx_ConfigSupply+0x70>)
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	f023 0207 	bic.w	r2, r3, #7
 800452a:	490f      	ldr	r1, [pc, #60]	; (8004568 <HAL_PWREx_ConfigSupply+0x70>)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4313      	orrs	r3, r2
 8004530:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004532:	f7fc ffa3 	bl	800147c <HAL_GetTick>
 8004536:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004538:	e009      	b.n	800454e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800453a:	f7fc ff9f 	bl	800147c <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004548:	d901      	bls.n	800454e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e007      	b.n	800455e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800454e:	4b06      	ldr	r3, [pc, #24]	; (8004568 <HAL_PWREx_ConfigSupply+0x70>)
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004556:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800455a:	d1ee      	bne.n	800453a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	58024800 	.word	0x58024800

0800456c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004570:	4b05      	ldr	r3, [pc, #20]	; (8004588 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	4a04      	ldr	r2, [pc, #16]	; (8004588 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004576:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800457a:	60d3      	str	r3, [r2, #12]
}
 800457c:	bf00      	nop
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	58024800 	.word	0x58024800

0800458c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b08c      	sub	sp, #48	; 0x30
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d102      	bne.n	80045a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	f000 bc1d 	b.w	8004dda <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f000 8087 	beq.w	80046bc <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045ae:	4b99      	ldr	r3, [pc, #612]	; (8004814 <HAL_RCC_OscConfig+0x288>)
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80045b8:	4b96      	ldr	r3, [pc, #600]	; (8004814 <HAL_RCC_OscConfig+0x288>)
 80045ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045bc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80045be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c0:	2b10      	cmp	r3, #16
 80045c2:	d007      	beq.n	80045d4 <HAL_RCC_OscConfig+0x48>
 80045c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c6:	2b18      	cmp	r3, #24
 80045c8:	d110      	bne.n	80045ec <HAL_RCC_OscConfig+0x60>
 80045ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045cc:	f003 0303 	and.w	r3, r3, #3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d10b      	bne.n	80045ec <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045d4:	4b8f      	ldr	r3, [pc, #572]	; (8004814 <HAL_RCC_OscConfig+0x288>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d06c      	beq.n	80046ba <HAL_RCC_OscConfig+0x12e>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d168      	bne.n	80046ba <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e3f6      	b.n	8004dda <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045f4:	d106      	bne.n	8004604 <HAL_RCC_OscConfig+0x78>
 80045f6:	4b87      	ldr	r3, [pc, #540]	; (8004814 <HAL_RCC_OscConfig+0x288>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a86      	ldr	r2, [pc, #536]	; (8004814 <HAL_RCC_OscConfig+0x288>)
 80045fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004600:	6013      	str	r3, [r2, #0]
 8004602:	e02e      	b.n	8004662 <HAL_RCC_OscConfig+0xd6>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d10c      	bne.n	8004626 <HAL_RCC_OscConfig+0x9a>
 800460c:	4b81      	ldr	r3, [pc, #516]	; (8004814 <HAL_RCC_OscConfig+0x288>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a80      	ldr	r2, [pc, #512]	; (8004814 <HAL_RCC_OscConfig+0x288>)
 8004612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004616:	6013      	str	r3, [r2, #0]
 8004618:	4b7e      	ldr	r3, [pc, #504]	; (8004814 <HAL_RCC_OscConfig+0x288>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a7d      	ldr	r2, [pc, #500]	; (8004814 <HAL_RCC_OscConfig+0x288>)
 800461e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004622:	6013      	str	r3, [r2, #0]
 8004624:	e01d      	b.n	8004662 <HAL_RCC_OscConfig+0xd6>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800462e:	d10c      	bne.n	800464a <HAL_RCC_OscConfig+0xbe>
 8004630:	4b78      	ldr	r3, [pc, #480]	; (8004814 <HAL_RCC_OscConfig+0x288>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a77      	ldr	r2, [pc, #476]	; (8004814 <HAL_RCC_OscConfig+0x288>)
 8004636:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800463a:	6013      	str	r3, [r2, #0]
 800463c:	4b75      	ldr	r3, [pc, #468]	; (8004814 <HAL_RCC_OscConfig+0x288>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a74      	ldr	r2, [pc, #464]	; (8004814 <HAL_RCC_OscConfig+0x288>)
 8004642:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004646:	6013      	str	r3, [r2, #0]
 8004648:	e00b      	b.n	8004662 <HAL_RCC_OscConfig+0xd6>
 800464a:	4b72      	ldr	r3, [pc, #456]	; (8004814 <HAL_RCC_OscConfig+0x288>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a71      	ldr	r2, [pc, #452]	; (8004814 <HAL_RCC_OscConfig+0x288>)
 8004650:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004654:	6013      	str	r3, [r2, #0]
 8004656:	4b6f      	ldr	r3, [pc, #444]	; (8004814 <HAL_RCC_OscConfig+0x288>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a6e      	ldr	r2, [pc, #440]	; (8004814 <HAL_RCC_OscConfig+0x288>)
 800465c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004660:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d013      	beq.n	8004692 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800466a:	f7fc ff07 	bl	800147c <HAL_GetTick>
 800466e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004670:	e008      	b.n	8004684 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004672:	f7fc ff03 	bl	800147c <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	2b64      	cmp	r3, #100	; 0x64
 800467e:	d901      	bls.n	8004684 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e3aa      	b.n	8004dda <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004684:	4b63      	ldr	r3, [pc, #396]	; (8004814 <HAL_RCC_OscConfig+0x288>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d0f0      	beq.n	8004672 <HAL_RCC_OscConfig+0xe6>
 8004690:	e014      	b.n	80046bc <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004692:	f7fc fef3 	bl	800147c <HAL_GetTick>
 8004696:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004698:	e008      	b.n	80046ac <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800469a:	f7fc feef 	bl	800147c <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b64      	cmp	r3, #100	; 0x64
 80046a6:	d901      	bls.n	80046ac <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e396      	b.n	8004dda <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80046ac:	4b59      	ldr	r3, [pc, #356]	; (8004814 <HAL_RCC_OscConfig+0x288>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1f0      	bne.n	800469a <HAL_RCC_OscConfig+0x10e>
 80046b8:	e000      	b.n	80046bc <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046ba:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0302 	and.w	r3, r3, #2
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	f000 80cb 	beq.w	8004860 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046ca:	4b52      	ldr	r3, [pc, #328]	; (8004814 <HAL_RCC_OscConfig+0x288>)
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046d2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80046d4:	4b4f      	ldr	r3, [pc, #316]	; (8004814 <HAL_RCC_OscConfig+0x288>)
 80046d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80046da:	6a3b      	ldr	r3, [r7, #32]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d007      	beq.n	80046f0 <HAL_RCC_OscConfig+0x164>
 80046e0:	6a3b      	ldr	r3, [r7, #32]
 80046e2:	2b18      	cmp	r3, #24
 80046e4:	d156      	bne.n	8004794 <HAL_RCC_OscConfig+0x208>
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	f003 0303 	and.w	r3, r3, #3
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d151      	bne.n	8004794 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046f0:	4b48      	ldr	r3, [pc, #288]	; (8004814 <HAL_RCC_OscConfig+0x288>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d005      	beq.n	8004708 <HAL_RCC_OscConfig+0x17c>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e368      	b.n	8004dda <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004708:	4b42      	ldr	r3, [pc, #264]	; (8004814 <HAL_RCC_OscConfig+0x288>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f023 0219 	bic.w	r2, r3, #25
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	493f      	ldr	r1, [pc, #252]	; (8004814 <HAL_RCC_OscConfig+0x288>)
 8004716:	4313      	orrs	r3, r2
 8004718:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800471a:	f7fc feaf 	bl	800147c <HAL_GetTick>
 800471e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004720:	e008      	b.n	8004734 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004722:	f7fc feab 	bl	800147c <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d901      	bls.n	8004734 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e352      	b.n	8004dda <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004734:	4b37      	ldr	r3, [pc, #220]	; (8004814 <HAL_RCC_OscConfig+0x288>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b00      	cmp	r3, #0
 800473e:	d0f0      	beq.n	8004722 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004740:	f7fc fecc 	bl	80014dc <HAL_GetREVID>
 8004744:	4603      	mov	r3, r0
 8004746:	f241 0203 	movw	r2, #4099	; 0x1003
 800474a:	4293      	cmp	r3, r2
 800474c:	d817      	bhi.n	800477e <HAL_RCC_OscConfig+0x1f2>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	2b40      	cmp	r3, #64	; 0x40
 8004754:	d108      	bne.n	8004768 <HAL_RCC_OscConfig+0x1dc>
 8004756:	4b2f      	ldr	r3, [pc, #188]	; (8004814 <HAL_RCC_OscConfig+0x288>)
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800475e:	4a2d      	ldr	r2, [pc, #180]	; (8004814 <HAL_RCC_OscConfig+0x288>)
 8004760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004764:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004766:	e07b      	b.n	8004860 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004768:	4b2a      	ldr	r3, [pc, #168]	; (8004814 <HAL_RCC_OscConfig+0x288>)
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	031b      	lsls	r3, r3, #12
 8004776:	4927      	ldr	r1, [pc, #156]	; (8004814 <HAL_RCC_OscConfig+0x288>)
 8004778:	4313      	orrs	r3, r2
 800477a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800477c:	e070      	b.n	8004860 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800477e:	4b25      	ldr	r3, [pc, #148]	; (8004814 <HAL_RCC_OscConfig+0x288>)
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	061b      	lsls	r3, r3, #24
 800478c:	4921      	ldr	r1, [pc, #132]	; (8004814 <HAL_RCC_OscConfig+0x288>)
 800478e:	4313      	orrs	r3, r2
 8004790:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004792:	e065      	b.n	8004860 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d048      	beq.n	800482e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800479c:	4b1d      	ldr	r3, [pc, #116]	; (8004814 <HAL_RCC_OscConfig+0x288>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f023 0219 	bic.w	r2, r3, #25
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	491a      	ldr	r1, [pc, #104]	; (8004814 <HAL_RCC_OscConfig+0x288>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ae:	f7fc fe65 	bl	800147c <HAL_GetTick>
 80047b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047b4:	e008      	b.n	80047c8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047b6:	f7fc fe61 	bl	800147c <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d901      	bls.n	80047c8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e308      	b.n	8004dda <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047c8:	4b12      	ldr	r3, [pc, #72]	; (8004814 <HAL_RCC_OscConfig+0x288>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0304 	and.w	r3, r3, #4
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d0f0      	beq.n	80047b6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047d4:	f7fc fe82 	bl	80014dc <HAL_GetREVID>
 80047d8:	4603      	mov	r3, r0
 80047da:	f241 0203 	movw	r2, #4099	; 0x1003
 80047de:	4293      	cmp	r3, r2
 80047e0:	d81a      	bhi.n	8004818 <HAL_RCC_OscConfig+0x28c>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	2b40      	cmp	r3, #64	; 0x40
 80047e8:	d108      	bne.n	80047fc <HAL_RCC_OscConfig+0x270>
 80047ea:	4b0a      	ldr	r3, [pc, #40]	; (8004814 <HAL_RCC_OscConfig+0x288>)
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80047f2:	4a08      	ldr	r2, [pc, #32]	; (8004814 <HAL_RCC_OscConfig+0x288>)
 80047f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047f8:	6053      	str	r3, [r2, #4]
 80047fa:	e031      	b.n	8004860 <HAL_RCC_OscConfig+0x2d4>
 80047fc:	4b05      	ldr	r3, [pc, #20]	; (8004814 <HAL_RCC_OscConfig+0x288>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	031b      	lsls	r3, r3, #12
 800480a:	4902      	ldr	r1, [pc, #8]	; (8004814 <HAL_RCC_OscConfig+0x288>)
 800480c:	4313      	orrs	r3, r2
 800480e:	604b      	str	r3, [r1, #4]
 8004810:	e026      	b.n	8004860 <HAL_RCC_OscConfig+0x2d4>
 8004812:	bf00      	nop
 8004814:	58024400 	.word	0x58024400
 8004818:	4b9a      	ldr	r3, [pc, #616]	; (8004a84 <HAL_RCC_OscConfig+0x4f8>)
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	061b      	lsls	r3, r3, #24
 8004826:	4997      	ldr	r1, [pc, #604]	; (8004a84 <HAL_RCC_OscConfig+0x4f8>)
 8004828:	4313      	orrs	r3, r2
 800482a:	604b      	str	r3, [r1, #4]
 800482c:	e018      	b.n	8004860 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800482e:	4b95      	ldr	r3, [pc, #596]	; (8004a84 <HAL_RCC_OscConfig+0x4f8>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a94      	ldr	r2, [pc, #592]	; (8004a84 <HAL_RCC_OscConfig+0x4f8>)
 8004834:	f023 0301 	bic.w	r3, r3, #1
 8004838:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800483a:	f7fc fe1f 	bl	800147c <HAL_GetTick>
 800483e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004840:	e008      	b.n	8004854 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004842:	f7fc fe1b 	bl	800147c <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	2b02      	cmp	r3, #2
 800484e:	d901      	bls.n	8004854 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e2c2      	b.n	8004dda <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004854:	4b8b      	ldr	r3, [pc, #556]	; (8004a84 <HAL_RCC_OscConfig+0x4f8>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0304 	and.w	r3, r3, #4
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1f0      	bne.n	8004842 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0310 	and.w	r3, r3, #16
 8004868:	2b00      	cmp	r3, #0
 800486a:	f000 80a9 	beq.w	80049c0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800486e:	4b85      	ldr	r3, [pc, #532]	; (8004a84 <HAL_RCC_OscConfig+0x4f8>)
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004876:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004878:	4b82      	ldr	r3, [pc, #520]	; (8004a84 <HAL_RCC_OscConfig+0x4f8>)
 800487a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	2b08      	cmp	r3, #8
 8004882:	d007      	beq.n	8004894 <HAL_RCC_OscConfig+0x308>
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	2b18      	cmp	r3, #24
 8004888:	d13a      	bne.n	8004900 <HAL_RCC_OscConfig+0x374>
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	f003 0303 	and.w	r3, r3, #3
 8004890:	2b01      	cmp	r3, #1
 8004892:	d135      	bne.n	8004900 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004894:	4b7b      	ldr	r3, [pc, #492]	; (8004a84 <HAL_RCC_OscConfig+0x4f8>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800489c:	2b00      	cmp	r3, #0
 800489e:	d005      	beq.n	80048ac <HAL_RCC_OscConfig+0x320>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	69db      	ldr	r3, [r3, #28]
 80048a4:	2b80      	cmp	r3, #128	; 0x80
 80048a6:	d001      	beq.n	80048ac <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e296      	b.n	8004dda <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80048ac:	f7fc fe16 	bl	80014dc <HAL_GetREVID>
 80048b0:	4603      	mov	r3, r0
 80048b2:	f241 0203 	movw	r2, #4099	; 0x1003
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d817      	bhi.n	80048ea <HAL_RCC_OscConfig+0x35e>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	2b20      	cmp	r3, #32
 80048c0:	d108      	bne.n	80048d4 <HAL_RCC_OscConfig+0x348>
 80048c2:	4b70      	ldr	r3, [pc, #448]	; (8004a84 <HAL_RCC_OscConfig+0x4f8>)
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80048ca:	4a6e      	ldr	r2, [pc, #440]	; (8004a84 <HAL_RCC_OscConfig+0x4f8>)
 80048cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048d0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80048d2:	e075      	b.n	80049c0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80048d4:	4b6b      	ldr	r3, [pc, #428]	; (8004a84 <HAL_RCC_OscConfig+0x4f8>)
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a1b      	ldr	r3, [r3, #32]
 80048e0:	069b      	lsls	r3, r3, #26
 80048e2:	4968      	ldr	r1, [pc, #416]	; (8004a84 <HAL_RCC_OscConfig+0x4f8>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80048e8:	e06a      	b.n	80049c0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80048ea:	4b66      	ldr	r3, [pc, #408]	; (8004a84 <HAL_RCC_OscConfig+0x4f8>)
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	061b      	lsls	r3, r3, #24
 80048f8:	4962      	ldr	r1, [pc, #392]	; (8004a84 <HAL_RCC_OscConfig+0x4f8>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80048fe:	e05f      	b.n	80049c0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	69db      	ldr	r3, [r3, #28]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d042      	beq.n	800498e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004908:	4b5e      	ldr	r3, [pc, #376]	; (8004a84 <HAL_RCC_OscConfig+0x4f8>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a5d      	ldr	r2, [pc, #372]	; (8004a84 <HAL_RCC_OscConfig+0x4f8>)
 800490e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004912:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004914:	f7fc fdb2 	bl	800147c <HAL_GetTick>
 8004918:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800491a:	e008      	b.n	800492e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800491c:	f7fc fdae 	bl	800147c <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	2b02      	cmp	r3, #2
 8004928:	d901      	bls.n	800492e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e255      	b.n	8004dda <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800492e:	4b55      	ldr	r3, [pc, #340]	; (8004a84 <HAL_RCC_OscConfig+0x4f8>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004936:	2b00      	cmp	r3, #0
 8004938:	d0f0      	beq.n	800491c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800493a:	f7fc fdcf 	bl	80014dc <HAL_GetREVID>
 800493e:	4603      	mov	r3, r0
 8004940:	f241 0203 	movw	r2, #4099	; 0x1003
 8004944:	4293      	cmp	r3, r2
 8004946:	d817      	bhi.n	8004978 <HAL_RCC_OscConfig+0x3ec>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a1b      	ldr	r3, [r3, #32]
 800494c:	2b20      	cmp	r3, #32
 800494e:	d108      	bne.n	8004962 <HAL_RCC_OscConfig+0x3d6>
 8004950:	4b4c      	ldr	r3, [pc, #304]	; (8004a84 <HAL_RCC_OscConfig+0x4f8>)
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004958:	4a4a      	ldr	r2, [pc, #296]	; (8004a84 <HAL_RCC_OscConfig+0x4f8>)
 800495a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800495e:	6053      	str	r3, [r2, #4]
 8004960:	e02e      	b.n	80049c0 <HAL_RCC_OscConfig+0x434>
 8004962:	4b48      	ldr	r3, [pc, #288]	; (8004a84 <HAL_RCC_OscConfig+0x4f8>)
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	069b      	lsls	r3, r3, #26
 8004970:	4944      	ldr	r1, [pc, #272]	; (8004a84 <HAL_RCC_OscConfig+0x4f8>)
 8004972:	4313      	orrs	r3, r2
 8004974:	604b      	str	r3, [r1, #4]
 8004976:	e023      	b.n	80049c0 <HAL_RCC_OscConfig+0x434>
 8004978:	4b42      	ldr	r3, [pc, #264]	; (8004a84 <HAL_RCC_OscConfig+0x4f8>)
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a1b      	ldr	r3, [r3, #32]
 8004984:	061b      	lsls	r3, r3, #24
 8004986:	493f      	ldr	r1, [pc, #252]	; (8004a84 <HAL_RCC_OscConfig+0x4f8>)
 8004988:	4313      	orrs	r3, r2
 800498a:	60cb      	str	r3, [r1, #12]
 800498c:	e018      	b.n	80049c0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800498e:	4b3d      	ldr	r3, [pc, #244]	; (8004a84 <HAL_RCC_OscConfig+0x4f8>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a3c      	ldr	r2, [pc, #240]	; (8004a84 <HAL_RCC_OscConfig+0x4f8>)
 8004994:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004998:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800499a:	f7fc fd6f 	bl	800147c <HAL_GetTick>
 800499e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80049a0:	e008      	b.n	80049b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80049a2:	f7fc fd6b 	bl	800147c <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d901      	bls.n	80049b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e212      	b.n	8004dda <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80049b4:	4b33      	ldr	r3, [pc, #204]	; (8004a84 <HAL_RCC_OscConfig+0x4f8>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1f0      	bne.n	80049a2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0308 	and.w	r3, r3, #8
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d036      	beq.n	8004a3a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d019      	beq.n	8004a08 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049d4:	4b2b      	ldr	r3, [pc, #172]	; (8004a84 <HAL_RCC_OscConfig+0x4f8>)
 80049d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049d8:	4a2a      	ldr	r2, [pc, #168]	; (8004a84 <HAL_RCC_OscConfig+0x4f8>)
 80049da:	f043 0301 	orr.w	r3, r3, #1
 80049de:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049e0:	f7fc fd4c 	bl	800147c <HAL_GetTick>
 80049e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80049e6:	e008      	b.n	80049fa <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049e8:	f7fc fd48 	bl	800147c <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e1ef      	b.n	8004dda <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80049fa:	4b22      	ldr	r3, [pc, #136]	; (8004a84 <HAL_RCC_OscConfig+0x4f8>)
 80049fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d0f0      	beq.n	80049e8 <HAL_RCC_OscConfig+0x45c>
 8004a06:	e018      	b.n	8004a3a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a08:	4b1e      	ldr	r3, [pc, #120]	; (8004a84 <HAL_RCC_OscConfig+0x4f8>)
 8004a0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a0c:	4a1d      	ldr	r2, [pc, #116]	; (8004a84 <HAL_RCC_OscConfig+0x4f8>)
 8004a0e:	f023 0301 	bic.w	r3, r3, #1
 8004a12:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a14:	f7fc fd32 	bl	800147c <HAL_GetTick>
 8004a18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a1c:	f7fc fd2e 	bl	800147c <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e1d5      	b.n	8004dda <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004a2e:	4b15      	ldr	r3, [pc, #84]	; (8004a84 <HAL_RCC_OscConfig+0x4f8>)
 8004a30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1f0      	bne.n	8004a1c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0320 	and.w	r3, r3, #32
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d039      	beq.n	8004aba <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d01c      	beq.n	8004a88 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a4e:	4b0d      	ldr	r3, [pc, #52]	; (8004a84 <HAL_RCC_OscConfig+0x4f8>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a0c      	ldr	r2, [pc, #48]	; (8004a84 <HAL_RCC_OscConfig+0x4f8>)
 8004a54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a58:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004a5a:	f7fc fd0f 	bl	800147c <HAL_GetTick>
 8004a5e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004a60:	e008      	b.n	8004a74 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004a62:	f7fc fd0b 	bl	800147c <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d901      	bls.n	8004a74 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e1b2      	b.n	8004dda <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004a74:	4b03      	ldr	r3, [pc, #12]	; (8004a84 <HAL_RCC_OscConfig+0x4f8>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d0f0      	beq.n	8004a62 <HAL_RCC_OscConfig+0x4d6>
 8004a80:	e01b      	b.n	8004aba <HAL_RCC_OscConfig+0x52e>
 8004a82:	bf00      	nop
 8004a84:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a88:	4b9b      	ldr	r3, [pc, #620]	; (8004cf8 <HAL_RCC_OscConfig+0x76c>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a9a      	ldr	r2, [pc, #616]	; (8004cf8 <HAL_RCC_OscConfig+0x76c>)
 8004a8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a92:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004a94:	f7fc fcf2 	bl	800147c <HAL_GetTick>
 8004a98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004a9a:	e008      	b.n	8004aae <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004a9c:	f7fc fcee 	bl	800147c <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e195      	b.n	8004dda <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004aae:	4b92      	ldr	r3, [pc, #584]	; (8004cf8 <HAL_RCC_OscConfig+0x76c>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1f0      	bne.n	8004a9c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0304 	and.w	r3, r3, #4
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f000 8081 	beq.w	8004bca <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004ac8:	4b8c      	ldr	r3, [pc, #560]	; (8004cfc <HAL_RCC_OscConfig+0x770>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a8b      	ldr	r2, [pc, #556]	; (8004cfc <HAL_RCC_OscConfig+0x770>)
 8004ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ad2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ad4:	f7fc fcd2 	bl	800147c <HAL_GetTick>
 8004ad8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ada:	e008      	b.n	8004aee <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004adc:	f7fc fcce 	bl	800147c <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b64      	cmp	r3, #100	; 0x64
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e175      	b.n	8004dda <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004aee:	4b83      	ldr	r3, [pc, #524]	; (8004cfc <HAL_RCC_OscConfig+0x770>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d0f0      	beq.n	8004adc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d106      	bne.n	8004b10 <HAL_RCC_OscConfig+0x584>
 8004b02:	4b7d      	ldr	r3, [pc, #500]	; (8004cf8 <HAL_RCC_OscConfig+0x76c>)
 8004b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b06:	4a7c      	ldr	r2, [pc, #496]	; (8004cf8 <HAL_RCC_OscConfig+0x76c>)
 8004b08:	f043 0301 	orr.w	r3, r3, #1
 8004b0c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b0e:	e02d      	b.n	8004b6c <HAL_RCC_OscConfig+0x5e0>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d10c      	bne.n	8004b32 <HAL_RCC_OscConfig+0x5a6>
 8004b18:	4b77      	ldr	r3, [pc, #476]	; (8004cf8 <HAL_RCC_OscConfig+0x76c>)
 8004b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b1c:	4a76      	ldr	r2, [pc, #472]	; (8004cf8 <HAL_RCC_OscConfig+0x76c>)
 8004b1e:	f023 0301 	bic.w	r3, r3, #1
 8004b22:	6713      	str	r3, [r2, #112]	; 0x70
 8004b24:	4b74      	ldr	r3, [pc, #464]	; (8004cf8 <HAL_RCC_OscConfig+0x76c>)
 8004b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b28:	4a73      	ldr	r2, [pc, #460]	; (8004cf8 <HAL_RCC_OscConfig+0x76c>)
 8004b2a:	f023 0304 	bic.w	r3, r3, #4
 8004b2e:	6713      	str	r3, [r2, #112]	; 0x70
 8004b30:	e01c      	b.n	8004b6c <HAL_RCC_OscConfig+0x5e0>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	2b05      	cmp	r3, #5
 8004b38:	d10c      	bne.n	8004b54 <HAL_RCC_OscConfig+0x5c8>
 8004b3a:	4b6f      	ldr	r3, [pc, #444]	; (8004cf8 <HAL_RCC_OscConfig+0x76c>)
 8004b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b3e:	4a6e      	ldr	r2, [pc, #440]	; (8004cf8 <HAL_RCC_OscConfig+0x76c>)
 8004b40:	f043 0304 	orr.w	r3, r3, #4
 8004b44:	6713      	str	r3, [r2, #112]	; 0x70
 8004b46:	4b6c      	ldr	r3, [pc, #432]	; (8004cf8 <HAL_RCC_OscConfig+0x76c>)
 8004b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b4a:	4a6b      	ldr	r2, [pc, #428]	; (8004cf8 <HAL_RCC_OscConfig+0x76c>)
 8004b4c:	f043 0301 	orr.w	r3, r3, #1
 8004b50:	6713      	str	r3, [r2, #112]	; 0x70
 8004b52:	e00b      	b.n	8004b6c <HAL_RCC_OscConfig+0x5e0>
 8004b54:	4b68      	ldr	r3, [pc, #416]	; (8004cf8 <HAL_RCC_OscConfig+0x76c>)
 8004b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b58:	4a67      	ldr	r2, [pc, #412]	; (8004cf8 <HAL_RCC_OscConfig+0x76c>)
 8004b5a:	f023 0301 	bic.w	r3, r3, #1
 8004b5e:	6713      	str	r3, [r2, #112]	; 0x70
 8004b60:	4b65      	ldr	r3, [pc, #404]	; (8004cf8 <HAL_RCC_OscConfig+0x76c>)
 8004b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b64:	4a64      	ldr	r2, [pc, #400]	; (8004cf8 <HAL_RCC_OscConfig+0x76c>)
 8004b66:	f023 0304 	bic.w	r3, r3, #4
 8004b6a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d015      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b74:	f7fc fc82 	bl	800147c <HAL_GetTick>
 8004b78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b7a:	e00a      	b.n	8004b92 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b7c:	f7fc fc7e 	bl	800147c <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e123      	b.n	8004dda <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b92:	4b59      	ldr	r3, [pc, #356]	; (8004cf8 <HAL_RCC_OscConfig+0x76c>)
 8004b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d0ee      	beq.n	8004b7c <HAL_RCC_OscConfig+0x5f0>
 8004b9e:	e014      	b.n	8004bca <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ba0:	f7fc fc6c 	bl	800147c <HAL_GetTick>
 8004ba4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004ba6:	e00a      	b.n	8004bbe <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ba8:	f7fc fc68 	bl	800147c <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e10d      	b.n	8004dda <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004bbe:	4b4e      	ldr	r3, [pc, #312]	; (8004cf8 <HAL_RCC_OscConfig+0x76c>)
 8004bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1ee      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	f000 8102 	beq.w	8004dd8 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004bd4:	4b48      	ldr	r3, [pc, #288]	; (8004cf8 <HAL_RCC_OscConfig+0x76c>)
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bdc:	2b18      	cmp	r3, #24
 8004bde:	f000 80bd 	beq.w	8004d5c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	f040 809e 	bne.w	8004d28 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bec:	4b42      	ldr	r3, [pc, #264]	; (8004cf8 <HAL_RCC_OscConfig+0x76c>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a41      	ldr	r2, [pc, #260]	; (8004cf8 <HAL_RCC_OscConfig+0x76c>)
 8004bf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf8:	f7fc fc40 	bl	800147c <HAL_GetTick>
 8004bfc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bfe:	e008      	b.n	8004c12 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c00:	f7fc fc3c 	bl	800147c <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e0e3      	b.n	8004dda <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c12:	4b39      	ldr	r3, [pc, #228]	; (8004cf8 <HAL_RCC_OscConfig+0x76c>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1f0      	bne.n	8004c00 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c1e:	4b36      	ldr	r3, [pc, #216]	; (8004cf8 <HAL_RCC_OscConfig+0x76c>)
 8004c20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c22:	4b37      	ldr	r3, [pc, #220]	; (8004d00 <HAL_RCC_OscConfig+0x774>)
 8004c24:	4013      	ands	r3, r2
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004c2e:	0112      	lsls	r2, r2, #4
 8004c30:	430a      	orrs	r2, r1
 8004c32:	4931      	ldr	r1, [pc, #196]	; (8004cf8 <HAL_RCC_OscConfig+0x76c>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	628b      	str	r3, [r1, #40]	; 0x28
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c46:	3b01      	subs	r3, #1
 8004c48:	025b      	lsls	r3, r3, #9
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	431a      	orrs	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c52:	3b01      	subs	r3, #1
 8004c54:	041b      	lsls	r3, r3, #16
 8004c56:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004c5a:	431a      	orrs	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c60:	3b01      	subs	r3, #1
 8004c62:	061b      	lsls	r3, r3, #24
 8004c64:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004c68:	4923      	ldr	r1, [pc, #140]	; (8004cf8 <HAL_RCC_OscConfig+0x76c>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004c6e:	4b22      	ldr	r3, [pc, #136]	; (8004cf8 <HAL_RCC_OscConfig+0x76c>)
 8004c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c72:	4a21      	ldr	r2, [pc, #132]	; (8004cf8 <HAL_RCC_OscConfig+0x76c>)
 8004c74:	f023 0301 	bic.w	r3, r3, #1
 8004c78:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004c7a:	4b1f      	ldr	r3, [pc, #124]	; (8004cf8 <HAL_RCC_OscConfig+0x76c>)
 8004c7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c7e:	4b21      	ldr	r3, [pc, #132]	; (8004d04 <HAL_RCC_OscConfig+0x778>)
 8004c80:	4013      	ands	r3, r2
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004c86:	00d2      	lsls	r2, r2, #3
 8004c88:	491b      	ldr	r1, [pc, #108]	; (8004cf8 <HAL_RCC_OscConfig+0x76c>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004c8e:	4b1a      	ldr	r3, [pc, #104]	; (8004cf8 <HAL_RCC_OscConfig+0x76c>)
 8004c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c92:	f023 020c 	bic.w	r2, r3, #12
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	4917      	ldr	r1, [pc, #92]	; (8004cf8 <HAL_RCC_OscConfig+0x76c>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004ca0:	4b15      	ldr	r3, [pc, #84]	; (8004cf8 <HAL_RCC_OscConfig+0x76c>)
 8004ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca4:	f023 0202 	bic.w	r2, r3, #2
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cac:	4912      	ldr	r1, [pc, #72]	; (8004cf8 <HAL_RCC_OscConfig+0x76c>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004cb2:	4b11      	ldr	r3, [pc, #68]	; (8004cf8 <HAL_RCC_OscConfig+0x76c>)
 8004cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb6:	4a10      	ldr	r2, [pc, #64]	; (8004cf8 <HAL_RCC_OscConfig+0x76c>)
 8004cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cbc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cbe:	4b0e      	ldr	r3, [pc, #56]	; (8004cf8 <HAL_RCC_OscConfig+0x76c>)
 8004cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc2:	4a0d      	ldr	r2, [pc, #52]	; (8004cf8 <HAL_RCC_OscConfig+0x76c>)
 8004cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cc8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004cca:	4b0b      	ldr	r3, [pc, #44]	; (8004cf8 <HAL_RCC_OscConfig+0x76c>)
 8004ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cce:	4a0a      	ldr	r2, [pc, #40]	; (8004cf8 <HAL_RCC_OscConfig+0x76c>)
 8004cd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cd4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004cd6:	4b08      	ldr	r3, [pc, #32]	; (8004cf8 <HAL_RCC_OscConfig+0x76c>)
 8004cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cda:	4a07      	ldr	r2, [pc, #28]	; (8004cf8 <HAL_RCC_OscConfig+0x76c>)
 8004cdc:	f043 0301 	orr.w	r3, r3, #1
 8004ce0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ce2:	4b05      	ldr	r3, [pc, #20]	; (8004cf8 <HAL_RCC_OscConfig+0x76c>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a04      	ldr	r2, [pc, #16]	; (8004cf8 <HAL_RCC_OscConfig+0x76c>)
 8004ce8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cee:	f7fc fbc5 	bl	800147c <HAL_GetTick>
 8004cf2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004cf4:	e011      	b.n	8004d1a <HAL_RCC_OscConfig+0x78e>
 8004cf6:	bf00      	nop
 8004cf8:	58024400 	.word	0x58024400
 8004cfc:	58024800 	.word	0x58024800
 8004d00:	fffffc0c 	.word	0xfffffc0c
 8004d04:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d08:	f7fc fbb8 	bl	800147c <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d901      	bls.n	8004d1a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e05f      	b.n	8004dda <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d1a:	4b32      	ldr	r3, [pc, #200]	; (8004de4 <HAL_RCC_OscConfig+0x858>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d0f0      	beq.n	8004d08 <HAL_RCC_OscConfig+0x77c>
 8004d26:	e057      	b.n	8004dd8 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d28:	4b2e      	ldr	r3, [pc, #184]	; (8004de4 <HAL_RCC_OscConfig+0x858>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a2d      	ldr	r2, [pc, #180]	; (8004de4 <HAL_RCC_OscConfig+0x858>)
 8004d2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d34:	f7fc fba2 	bl	800147c <HAL_GetTick>
 8004d38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d3a:	e008      	b.n	8004d4e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d3c:	f7fc fb9e 	bl	800147c <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e045      	b.n	8004dda <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d4e:	4b25      	ldr	r3, [pc, #148]	; (8004de4 <HAL_RCC_OscConfig+0x858>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1f0      	bne.n	8004d3c <HAL_RCC_OscConfig+0x7b0>
 8004d5a:	e03d      	b.n	8004dd8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004d5c:	4b21      	ldr	r3, [pc, #132]	; (8004de4 <HAL_RCC_OscConfig+0x858>)
 8004d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d60:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004d62:	4b20      	ldr	r3, [pc, #128]	; (8004de4 <HAL_RCC_OscConfig+0x858>)
 8004d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d66:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d031      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	f003 0203 	and.w	r2, r3, #3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d12a      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	091b      	lsrs	r3, r3, #4
 8004d82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d122      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d98:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d11a      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	0a5b      	lsrs	r3, r3, #9
 8004da2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004daa:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d111      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	0c1b      	lsrs	r3, r3, #16
 8004db4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dbc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d108      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	0e1b      	lsrs	r3, r3, #24
 8004dc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dce:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d001      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e000      	b.n	8004dda <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3730      	adds	r7, #48	; 0x30
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	58024400 	.word	0x58024400

08004de8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b086      	sub	sp, #24
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d101      	bne.n	8004dfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e19c      	b.n	8005136 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004dfc:	4b8a      	ldr	r3, [pc, #552]	; (8005028 <HAL_RCC_ClockConfig+0x240>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 030f 	and.w	r3, r3, #15
 8004e04:	683a      	ldr	r2, [r7, #0]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d910      	bls.n	8004e2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e0a:	4b87      	ldr	r3, [pc, #540]	; (8005028 <HAL_RCC_ClockConfig+0x240>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f023 020f 	bic.w	r2, r3, #15
 8004e12:	4985      	ldr	r1, [pc, #532]	; (8005028 <HAL_RCC_ClockConfig+0x240>)
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e1a:	4b83      	ldr	r3, [pc, #524]	; (8005028 <HAL_RCC_ClockConfig+0x240>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 030f 	and.w	r3, r3, #15
 8004e22:	683a      	ldr	r2, [r7, #0]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d001      	beq.n	8004e2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e184      	b.n	8005136 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0304 	and.w	r3, r3, #4
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d010      	beq.n	8004e5a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	691a      	ldr	r2, [r3, #16]
 8004e3c:	4b7b      	ldr	r3, [pc, #492]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d908      	bls.n	8004e5a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004e48:	4b78      	ldr	r3, [pc, #480]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	4975      	ldr	r1, [pc, #468]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0308 	and.w	r3, r3, #8
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d010      	beq.n	8004e88 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	695a      	ldr	r2, [r3, #20]
 8004e6a:	4b70      	ldr	r3, [pc, #448]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004e6c:	69db      	ldr	r3, [r3, #28]
 8004e6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d908      	bls.n	8004e88 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004e76:	4b6d      	ldr	r3, [pc, #436]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004e78:	69db      	ldr	r3, [r3, #28]
 8004e7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	496a      	ldr	r1, [pc, #424]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0310 	and.w	r3, r3, #16
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d010      	beq.n	8004eb6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	699a      	ldr	r2, [r3, #24]
 8004e98:	4b64      	ldr	r3, [pc, #400]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004e9a:	69db      	ldr	r3, [r3, #28]
 8004e9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d908      	bls.n	8004eb6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004ea4:	4b61      	ldr	r3, [pc, #388]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004ea6:	69db      	ldr	r3, [r3, #28]
 8004ea8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	495e      	ldr	r1, [pc, #376]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0320 	and.w	r3, r3, #32
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d010      	beq.n	8004ee4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	69da      	ldr	r2, [r3, #28]
 8004ec6:	4b59      	ldr	r3, [pc, #356]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d908      	bls.n	8004ee4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004ed2:	4b56      	ldr	r3, [pc, #344]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	4953      	ldr	r1, [pc, #332]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0302 	and.w	r3, r3, #2
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d010      	beq.n	8004f12 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	68da      	ldr	r2, [r3, #12]
 8004ef4:	4b4d      	ldr	r3, [pc, #308]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	f003 030f 	and.w	r3, r3, #15
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d908      	bls.n	8004f12 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f00:	4b4a      	ldr	r3, [pc, #296]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	f023 020f 	bic.w	r2, r3, #15
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	4947      	ldr	r1, [pc, #284]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0301 	and.w	r3, r3, #1
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d055      	beq.n	8004fca <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004f1e:	4b43      	ldr	r3, [pc, #268]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	4940      	ldr	r1, [pc, #256]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d107      	bne.n	8004f48 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f38:	4b3c      	ldr	r3, [pc, #240]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d121      	bne.n	8004f88 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e0f6      	b.n	8005136 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	2b03      	cmp	r3, #3
 8004f4e:	d107      	bne.n	8004f60 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f50:	4b36      	ldr	r3, [pc, #216]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d115      	bne.n	8004f88 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e0ea      	b.n	8005136 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d107      	bne.n	8004f78 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f68:	4b30      	ldr	r3, [pc, #192]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d109      	bne.n	8004f88 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e0de      	b.n	8005136 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f78:	4b2c      	ldr	r3, [pc, #176]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0304 	and.w	r3, r3, #4
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d101      	bne.n	8004f88 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e0d6      	b.n	8005136 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f88:	4b28      	ldr	r3, [pc, #160]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	f023 0207 	bic.w	r2, r3, #7
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	4925      	ldr	r1, [pc, #148]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f9a:	f7fc fa6f 	bl	800147c <HAL_GetTick>
 8004f9e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fa0:	e00a      	b.n	8004fb8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fa2:	f7fc fa6b 	bl	800147c <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d901      	bls.n	8004fb8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e0be      	b.n	8005136 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fb8:	4b1c      	ldr	r3, [pc, #112]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	00db      	lsls	r3, r3, #3
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d1eb      	bne.n	8004fa2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0302 	and.w	r3, r3, #2
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d010      	beq.n	8004ff8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	68da      	ldr	r2, [r3, #12]
 8004fda:	4b14      	ldr	r3, [pc, #80]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	f003 030f 	and.w	r3, r3, #15
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d208      	bcs.n	8004ff8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fe6:	4b11      	ldr	r3, [pc, #68]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	f023 020f 	bic.w	r2, r3, #15
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	490e      	ldr	r1, [pc, #56]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ff8:	4b0b      	ldr	r3, [pc, #44]	; (8005028 <HAL_RCC_ClockConfig+0x240>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 030f 	and.w	r3, r3, #15
 8005000:	683a      	ldr	r2, [r7, #0]
 8005002:	429a      	cmp	r2, r3
 8005004:	d214      	bcs.n	8005030 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005006:	4b08      	ldr	r3, [pc, #32]	; (8005028 <HAL_RCC_ClockConfig+0x240>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f023 020f 	bic.w	r2, r3, #15
 800500e:	4906      	ldr	r1, [pc, #24]	; (8005028 <HAL_RCC_ClockConfig+0x240>)
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	4313      	orrs	r3, r2
 8005014:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005016:	4b04      	ldr	r3, [pc, #16]	; (8005028 <HAL_RCC_ClockConfig+0x240>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 030f 	and.w	r3, r3, #15
 800501e:	683a      	ldr	r2, [r7, #0]
 8005020:	429a      	cmp	r2, r3
 8005022:	d005      	beq.n	8005030 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e086      	b.n	8005136 <HAL_RCC_ClockConfig+0x34e>
 8005028:	52002000 	.word	0x52002000
 800502c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0304 	and.w	r3, r3, #4
 8005038:	2b00      	cmp	r3, #0
 800503a:	d010      	beq.n	800505e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	691a      	ldr	r2, [r3, #16]
 8005040:	4b3f      	ldr	r3, [pc, #252]	; (8005140 <HAL_RCC_ClockConfig+0x358>)
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005048:	429a      	cmp	r2, r3
 800504a:	d208      	bcs.n	800505e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800504c:	4b3c      	ldr	r3, [pc, #240]	; (8005140 <HAL_RCC_ClockConfig+0x358>)
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	4939      	ldr	r1, [pc, #228]	; (8005140 <HAL_RCC_ClockConfig+0x358>)
 800505a:	4313      	orrs	r3, r2
 800505c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0308 	and.w	r3, r3, #8
 8005066:	2b00      	cmp	r3, #0
 8005068:	d010      	beq.n	800508c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	695a      	ldr	r2, [r3, #20]
 800506e:	4b34      	ldr	r3, [pc, #208]	; (8005140 <HAL_RCC_ClockConfig+0x358>)
 8005070:	69db      	ldr	r3, [r3, #28]
 8005072:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005076:	429a      	cmp	r2, r3
 8005078:	d208      	bcs.n	800508c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800507a:	4b31      	ldr	r3, [pc, #196]	; (8005140 <HAL_RCC_ClockConfig+0x358>)
 800507c:	69db      	ldr	r3, [r3, #28]
 800507e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	492e      	ldr	r1, [pc, #184]	; (8005140 <HAL_RCC_ClockConfig+0x358>)
 8005088:	4313      	orrs	r3, r2
 800508a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0310 	and.w	r3, r3, #16
 8005094:	2b00      	cmp	r3, #0
 8005096:	d010      	beq.n	80050ba <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	699a      	ldr	r2, [r3, #24]
 800509c:	4b28      	ldr	r3, [pc, #160]	; (8005140 <HAL_RCC_ClockConfig+0x358>)
 800509e:	69db      	ldr	r3, [r3, #28]
 80050a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d208      	bcs.n	80050ba <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80050a8:	4b25      	ldr	r3, [pc, #148]	; (8005140 <HAL_RCC_ClockConfig+0x358>)
 80050aa:	69db      	ldr	r3, [r3, #28]
 80050ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	4922      	ldr	r1, [pc, #136]	; (8005140 <HAL_RCC_ClockConfig+0x358>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0320 	and.w	r3, r3, #32
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d010      	beq.n	80050e8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	69da      	ldr	r2, [r3, #28]
 80050ca:	4b1d      	ldr	r3, [pc, #116]	; (8005140 <HAL_RCC_ClockConfig+0x358>)
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d208      	bcs.n	80050e8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80050d6:	4b1a      	ldr	r3, [pc, #104]	; (8005140 <HAL_RCC_ClockConfig+0x358>)
 80050d8:	6a1b      	ldr	r3, [r3, #32]
 80050da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	69db      	ldr	r3, [r3, #28]
 80050e2:	4917      	ldr	r1, [pc, #92]	; (8005140 <HAL_RCC_ClockConfig+0x358>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80050e8:	f000 f834 	bl	8005154 <HAL_RCC_GetSysClockFreq>
 80050ec:	4602      	mov	r2, r0
 80050ee:	4b14      	ldr	r3, [pc, #80]	; (8005140 <HAL_RCC_ClockConfig+0x358>)
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	0a1b      	lsrs	r3, r3, #8
 80050f4:	f003 030f 	and.w	r3, r3, #15
 80050f8:	4912      	ldr	r1, [pc, #72]	; (8005144 <HAL_RCC_ClockConfig+0x35c>)
 80050fa:	5ccb      	ldrb	r3, [r1, r3]
 80050fc:	f003 031f 	and.w	r3, r3, #31
 8005100:	fa22 f303 	lsr.w	r3, r2, r3
 8005104:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005106:	4b0e      	ldr	r3, [pc, #56]	; (8005140 <HAL_RCC_ClockConfig+0x358>)
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	f003 030f 	and.w	r3, r3, #15
 800510e:	4a0d      	ldr	r2, [pc, #52]	; (8005144 <HAL_RCC_ClockConfig+0x35c>)
 8005110:	5cd3      	ldrb	r3, [r2, r3]
 8005112:	f003 031f 	and.w	r3, r3, #31
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	fa22 f303 	lsr.w	r3, r2, r3
 800511c:	4a0a      	ldr	r2, [pc, #40]	; (8005148 <HAL_RCC_ClockConfig+0x360>)
 800511e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005120:	4a0a      	ldr	r2, [pc, #40]	; (800514c <HAL_RCC_ClockConfig+0x364>)
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005126:	4b0a      	ldr	r3, [pc, #40]	; (8005150 <HAL_RCC_ClockConfig+0x368>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4618      	mov	r0, r3
 800512c:	f7fc f95c 	bl	80013e8 <HAL_InitTick>
 8005130:	4603      	mov	r3, r0
 8005132:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005134:	7bfb      	ldrb	r3, [r7, #15]
}
 8005136:	4618      	mov	r0, r3
 8005138:	3718      	adds	r7, #24
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	58024400 	.word	0x58024400
 8005144:	0800900c 	.word	0x0800900c
 8005148:	24000004 	.word	0x24000004
 800514c:	24000000 	.word	0x24000000
 8005150:	24000008 	.word	0x24000008

08005154 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005154:	b480      	push	{r7}
 8005156:	b089      	sub	sp, #36	; 0x24
 8005158:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800515a:	4bb3      	ldr	r3, [pc, #716]	; (8005428 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005162:	2b18      	cmp	r3, #24
 8005164:	f200 8155 	bhi.w	8005412 <HAL_RCC_GetSysClockFreq+0x2be>
 8005168:	a201      	add	r2, pc, #4	; (adr r2, 8005170 <HAL_RCC_GetSysClockFreq+0x1c>)
 800516a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800516e:	bf00      	nop
 8005170:	080051d5 	.word	0x080051d5
 8005174:	08005413 	.word	0x08005413
 8005178:	08005413 	.word	0x08005413
 800517c:	08005413 	.word	0x08005413
 8005180:	08005413 	.word	0x08005413
 8005184:	08005413 	.word	0x08005413
 8005188:	08005413 	.word	0x08005413
 800518c:	08005413 	.word	0x08005413
 8005190:	080051fb 	.word	0x080051fb
 8005194:	08005413 	.word	0x08005413
 8005198:	08005413 	.word	0x08005413
 800519c:	08005413 	.word	0x08005413
 80051a0:	08005413 	.word	0x08005413
 80051a4:	08005413 	.word	0x08005413
 80051a8:	08005413 	.word	0x08005413
 80051ac:	08005413 	.word	0x08005413
 80051b0:	08005201 	.word	0x08005201
 80051b4:	08005413 	.word	0x08005413
 80051b8:	08005413 	.word	0x08005413
 80051bc:	08005413 	.word	0x08005413
 80051c0:	08005413 	.word	0x08005413
 80051c4:	08005413 	.word	0x08005413
 80051c8:	08005413 	.word	0x08005413
 80051cc:	08005413 	.word	0x08005413
 80051d0:	08005207 	.word	0x08005207
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051d4:	4b94      	ldr	r3, [pc, #592]	; (8005428 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0320 	and.w	r3, r3, #32
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d009      	beq.n	80051f4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80051e0:	4b91      	ldr	r3, [pc, #580]	; (8005428 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	08db      	lsrs	r3, r3, #3
 80051e6:	f003 0303 	and.w	r3, r3, #3
 80051ea:	4a90      	ldr	r2, [pc, #576]	; (800542c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80051ec:	fa22 f303 	lsr.w	r3, r2, r3
 80051f0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80051f2:	e111      	b.n	8005418 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80051f4:	4b8d      	ldr	r3, [pc, #564]	; (800542c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80051f6:	61bb      	str	r3, [r7, #24]
    break;
 80051f8:	e10e      	b.n	8005418 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80051fa:	4b8d      	ldr	r3, [pc, #564]	; (8005430 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80051fc:	61bb      	str	r3, [r7, #24]
    break;
 80051fe:	e10b      	b.n	8005418 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005200:	4b8c      	ldr	r3, [pc, #560]	; (8005434 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005202:	61bb      	str	r3, [r7, #24]
    break;
 8005204:	e108      	b.n	8005418 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005206:	4b88      	ldr	r3, [pc, #544]	; (8005428 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520a:	f003 0303 	and.w	r3, r3, #3
 800520e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005210:	4b85      	ldr	r3, [pc, #532]	; (8005428 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005214:	091b      	lsrs	r3, r3, #4
 8005216:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800521a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800521c:	4b82      	ldr	r3, [pc, #520]	; (8005428 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800521e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005220:	f003 0301 	and.w	r3, r3, #1
 8005224:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005226:	4b80      	ldr	r3, [pc, #512]	; (8005428 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800522a:	08db      	lsrs	r3, r3, #3
 800522c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	fb02 f303 	mul.w	r3, r2, r3
 8005236:	ee07 3a90 	vmov	s15, r3
 800523a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800523e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 80e1 	beq.w	800540c <HAL_RCC_GetSysClockFreq+0x2b8>
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	2b02      	cmp	r3, #2
 800524e:	f000 8083 	beq.w	8005358 <HAL_RCC_GetSysClockFreq+0x204>
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	2b02      	cmp	r3, #2
 8005256:	f200 80a1 	bhi.w	800539c <HAL_RCC_GetSysClockFreq+0x248>
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d003      	beq.n	8005268 <HAL_RCC_GetSysClockFreq+0x114>
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	2b01      	cmp	r3, #1
 8005264:	d056      	beq.n	8005314 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005266:	e099      	b.n	800539c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005268:	4b6f      	ldr	r3, [pc, #444]	; (8005428 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0320 	and.w	r3, r3, #32
 8005270:	2b00      	cmp	r3, #0
 8005272:	d02d      	beq.n	80052d0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005274:	4b6c      	ldr	r3, [pc, #432]	; (8005428 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	08db      	lsrs	r3, r3, #3
 800527a:	f003 0303 	and.w	r3, r3, #3
 800527e:	4a6b      	ldr	r2, [pc, #428]	; (800542c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005280:	fa22 f303 	lsr.w	r3, r2, r3
 8005284:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	ee07 3a90 	vmov	s15, r3
 800528c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	ee07 3a90 	vmov	s15, r3
 8005296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800529a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800529e:	4b62      	ldr	r3, [pc, #392]	; (8005428 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052a6:	ee07 3a90 	vmov	s15, r3
 80052aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80052b2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005438 <HAL_RCC_GetSysClockFreq+0x2e4>
 80052b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052ca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80052ce:	e087      	b.n	80053e0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	ee07 3a90 	vmov	s15, r3
 80052d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052da:	eddf 6a58 	vldr	s13, [pc, #352]	; 800543c <HAL_RCC_GetSysClockFreq+0x2e8>
 80052de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052e2:	4b51      	ldr	r3, [pc, #324]	; (8005428 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ea:	ee07 3a90 	vmov	s15, r3
 80052ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80052f6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005438 <HAL_RCC_GetSysClockFreq+0x2e4>
 80052fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005302:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005306:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800530a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800530e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005312:	e065      	b.n	80053e0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	ee07 3a90 	vmov	s15, r3
 800531a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800531e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005440 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005326:	4b40      	ldr	r3, [pc, #256]	; (8005428 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800532e:	ee07 3a90 	vmov	s15, r3
 8005332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005336:	ed97 6a02 	vldr	s12, [r7, #8]
 800533a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005438 <HAL_RCC_GetSysClockFreq+0x2e4>
 800533e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005342:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005346:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800534a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800534e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005352:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005356:	e043      	b.n	80053e0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	ee07 3a90 	vmov	s15, r3
 800535e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005362:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005444 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005366:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800536a:	4b2f      	ldr	r3, [pc, #188]	; (8005428 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800536c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005372:	ee07 3a90 	vmov	s15, r3
 8005376:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800537a:	ed97 6a02 	vldr	s12, [r7, #8]
 800537e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005438 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005382:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005386:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800538a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800538e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005396:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800539a:	e021      	b.n	80053e0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	ee07 3a90 	vmov	s15, r3
 80053a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053a6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005440 <HAL_RCC_GetSysClockFreq+0x2ec>
 80053aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053ae:	4b1e      	ldr	r3, [pc, #120]	; (8005428 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053b6:	ee07 3a90 	vmov	s15, r3
 80053ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053be:	ed97 6a02 	vldr	s12, [r7, #8]
 80053c2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005438 <HAL_RCC_GetSysClockFreq+0x2e4>
 80053c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053de:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80053e0:	4b11      	ldr	r3, [pc, #68]	; (8005428 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e4:	0a5b      	lsrs	r3, r3, #9
 80053e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053ea:	3301      	adds	r3, #1
 80053ec:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	ee07 3a90 	vmov	s15, r3
 80053f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80053f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80053fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005400:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005404:	ee17 3a90 	vmov	r3, s15
 8005408:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800540a:	e005      	b.n	8005418 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800540c:	2300      	movs	r3, #0
 800540e:	61bb      	str	r3, [r7, #24]
    break;
 8005410:	e002      	b.n	8005418 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005412:	4b07      	ldr	r3, [pc, #28]	; (8005430 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005414:	61bb      	str	r3, [r7, #24]
    break;
 8005416:	bf00      	nop
  }

  return sysclockfreq;
 8005418:	69bb      	ldr	r3, [r7, #24]
}
 800541a:	4618      	mov	r0, r3
 800541c:	3724      	adds	r7, #36	; 0x24
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
 8005426:	bf00      	nop
 8005428:	58024400 	.word	0x58024400
 800542c:	03d09000 	.word	0x03d09000
 8005430:	003d0900 	.word	0x003d0900
 8005434:	007a1200 	.word	0x007a1200
 8005438:	46000000 	.word	0x46000000
 800543c:	4c742400 	.word	0x4c742400
 8005440:	4a742400 	.word	0x4a742400
 8005444:	4af42400 	.word	0x4af42400

08005448 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800544e:	f7ff fe81 	bl	8005154 <HAL_RCC_GetSysClockFreq>
 8005452:	4602      	mov	r2, r0
 8005454:	4b10      	ldr	r3, [pc, #64]	; (8005498 <HAL_RCC_GetHCLKFreq+0x50>)
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	0a1b      	lsrs	r3, r3, #8
 800545a:	f003 030f 	and.w	r3, r3, #15
 800545e:	490f      	ldr	r1, [pc, #60]	; (800549c <HAL_RCC_GetHCLKFreq+0x54>)
 8005460:	5ccb      	ldrb	r3, [r1, r3]
 8005462:	f003 031f 	and.w	r3, r3, #31
 8005466:	fa22 f303 	lsr.w	r3, r2, r3
 800546a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800546c:	4b0a      	ldr	r3, [pc, #40]	; (8005498 <HAL_RCC_GetHCLKFreq+0x50>)
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	f003 030f 	and.w	r3, r3, #15
 8005474:	4a09      	ldr	r2, [pc, #36]	; (800549c <HAL_RCC_GetHCLKFreq+0x54>)
 8005476:	5cd3      	ldrb	r3, [r2, r3]
 8005478:	f003 031f 	and.w	r3, r3, #31
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	fa22 f303 	lsr.w	r3, r2, r3
 8005482:	4a07      	ldr	r2, [pc, #28]	; (80054a0 <HAL_RCC_GetHCLKFreq+0x58>)
 8005484:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005486:	4a07      	ldr	r2, [pc, #28]	; (80054a4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800548c:	4b04      	ldr	r3, [pc, #16]	; (80054a0 <HAL_RCC_GetHCLKFreq+0x58>)
 800548e:	681b      	ldr	r3, [r3, #0]
}
 8005490:	4618      	mov	r0, r3
 8005492:	3708      	adds	r7, #8
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	58024400 	.word	0x58024400
 800549c:	0800900c 	.word	0x0800900c
 80054a0:	24000004 	.word	0x24000004
 80054a4:	24000000 	.word	0x24000000

080054a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80054ac:	f7ff ffcc 	bl	8005448 <HAL_RCC_GetHCLKFreq>
 80054b0:	4602      	mov	r2, r0
 80054b2:	4b06      	ldr	r3, [pc, #24]	; (80054cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80054b4:	69db      	ldr	r3, [r3, #28]
 80054b6:	091b      	lsrs	r3, r3, #4
 80054b8:	f003 0307 	and.w	r3, r3, #7
 80054bc:	4904      	ldr	r1, [pc, #16]	; (80054d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80054be:	5ccb      	ldrb	r3, [r1, r3]
 80054c0:	f003 031f 	and.w	r3, r3, #31
 80054c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	58024400 	.word	0x58024400
 80054d0:	0800900c 	.word	0x0800900c

080054d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80054d8:	f7ff ffb6 	bl	8005448 <HAL_RCC_GetHCLKFreq>
 80054dc:	4602      	mov	r2, r0
 80054de:	4b06      	ldr	r3, [pc, #24]	; (80054f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054e0:	69db      	ldr	r3, [r3, #28]
 80054e2:	0a1b      	lsrs	r3, r3, #8
 80054e4:	f003 0307 	and.w	r3, r3, #7
 80054e8:	4904      	ldr	r1, [pc, #16]	; (80054fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80054ea:	5ccb      	ldrb	r3, [r1, r3]
 80054ec:	f003 031f 	and.w	r3, r3, #31
 80054f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	58024400 	.word	0x58024400
 80054fc:	0800900c 	.word	0x0800900c

08005500 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b086      	sub	sp, #24
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005508:	2300      	movs	r3, #0
 800550a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800550c:	2300      	movs	r3, #0
 800550e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d03f      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005520:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005524:	d02a      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005526:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800552a:	d824      	bhi.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800552c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005530:	d018      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005532:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005536:	d81e      	bhi.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005538:	2b00      	cmp	r3, #0
 800553a:	d003      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800553c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005540:	d007      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005542:	e018      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005544:	4ba3      	ldr	r3, [pc, #652]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005548:	4aa2      	ldr	r2, [pc, #648]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800554a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800554e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005550:	e015      	b.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	3304      	adds	r3, #4
 8005556:	2102      	movs	r1, #2
 8005558:	4618      	mov	r0, r3
 800555a:	f001 f9d5 	bl	8006908 <RCCEx_PLL2_Config>
 800555e:	4603      	mov	r3, r0
 8005560:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005562:	e00c      	b.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	3324      	adds	r3, #36	; 0x24
 8005568:	2102      	movs	r1, #2
 800556a:	4618      	mov	r0, r3
 800556c:	f001 fa7e 	bl	8006a6c <RCCEx_PLL3_Config>
 8005570:	4603      	mov	r3, r0
 8005572:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005574:	e003      	b.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	75fb      	strb	r3, [r7, #23]
      break;
 800557a:	e000      	b.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800557c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800557e:	7dfb      	ldrb	r3, [r7, #23]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d109      	bne.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005584:	4b93      	ldr	r3, [pc, #588]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005588:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005590:	4990      	ldr	r1, [pc, #576]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005592:	4313      	orrs	r3, r2
 8005594:	650b      	str	r3, [r1, #80]	; 0x50
 8005596:	e001      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005598:	7dfb      	ldrb	r3, [r7, #23]
 800559a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d03d      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ac:	2b04      	cmp	r3, #4
 80055ae:	d826      	bhi.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80055b0:	a201      	add	r2, pc, #4	; (adr r2, 80055b8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80055b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b6:	bf00      	nop
 80055b8:	080055cd 	.word	0x080055cd
 80055bc:	080055db 	.word	0x080055db
 80055c0:	080055ed 	.word	0x080055ed
 80055c4:	08005605 	.word	0x08005605
 80055c8:	08005605 	.word	0x08005605
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055cc:	4b81      	ldr	r3, [pc, #516]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80055ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d0:	4a80      	ldr	r2, [pc, #512]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80055d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80055d8:	e015      	b.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	3304      	adds	r3, #4
 80055de:	2100      	movs	r1, #0
 80055e0:	4618      	mov	r0, r3
 80055e2:	f001 f991 	bl	8006908 <RCCEx_PLL2_Config>
 80055e6:	4603      	mov	r3, r0
 80055e8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80055ea:	e00c      	b.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	3324      	adds	r3, #36	; 0x24
 80055f0:	2100      	movs	r1, #0
 80055f2:	4618      	mov	r0, r3
 80055f4:	f001 fa3a 	bl	8006a6c <RCCEx_PLL3_Config>
 80055f8:	4603      	mov	r3, r0
 80055fa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80055fc:	e003      	b.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	75fb      	strb	r3, [r7, #23]
      break;
 8005602:	e000      	b.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005604:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005606:	7dfb      	ldrb	r3, [r7, #23]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d109      	bne.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800560c:	4b71      	ldr	r3, [pc, #452]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800560e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005610:	f023 0207 	bic.w	r2, r3, #7
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005618:	496e      	ldr	r1, [pc, #440]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800561a:	4313      	orrs	r3, r2
 800561c:	650b      	str	r3, [r1, #80]	; 0x50
 800561e:	e001      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005620:	7dfb      	ldrb	r3, [r7, #23]
 8005622:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800562c:	2b00      	cmp	r3, #0
 800562e:	d042      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005634:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005638:	d02b      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800563a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800563e:	d825      	bhi.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005640:	2bc0      	cmp	r3, #192	; 0xc0
 8005642:	d028      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005644:	2bc0      	cmp	r3, #192	; 0xc0
 8005646:	d821      	bhi.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005648:	2b80      	cmp	r3, #128	; 0x80
 800564a:	d016      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800564c:	2b80      	cmp	r3, #128	; 0x80
 800564e:	d81d      	bhi.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005650:	2b00      	cmp	r3, #0
 8005652:	d002      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005654:	2b40      	cmp	r3, #64	; 0x40
 8005656:	d007      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005658:	e018      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800565a:	4b5e      	ldr	r3, [pc, #376]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800565c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800565e:	4a5d      	ldr	r2, [pc, #372]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005664:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005666:	e017      	b.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	3304      	adds	r3, #4
 800566c:	2100      	movs	r1, #0
 800566e:	4618      	mov	r0, r3
 8005670:	f001 f94a 	bl	8006908 <RCCEx_PLL2_Config>
 8005674:	4603      	mov	r3, r0
 8005676:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005678:	e00e      	b.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	3324      	adds	r3, #36	; 0x24
 800567e:	2100      	movs	r1, #0
 8005680:	4618      	mov	r0, r3
 8005682:	f001 f9f3 	bl	8006a6c <RCCEx_PLL3_Config>
 8005686:	4603      	mov	r3, r0
 8005688:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800568a:	e005      	b.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	75fb      	strb	r3, [r7, #23]
      break;
 8005690:	e002      	b.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005692:	bf00      	nop
 8005694:	e000      	b.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005696:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005698:	7dfb      	ldrb	r3, [r7, #23]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d109      	bne.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800569e:	4b4d      	ldr	r3, [pc, #308]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80056a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056a2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056aa:	494a      	ldr	r1, [pc, #296]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	650b      	str	r3, [r1, #80]	; 0x50
 80056b0:	e001      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056b2:	7dfb      	ldrb	r3, [r7, #23]
 80056b4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d049      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80056c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056cc:	d030      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80056ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056d2:	d82a      	bhi.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80056d4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80056d8:	d02c      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80056da:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80056de:	d824      	bhi.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80056e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056e4:	d018      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80056e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056ea:	d81e      	bhi.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d003      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80056f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056f4:	d007      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80056f6:	e018      	b.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056f8:	4b36      	ldr	r3, [pc, #216]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80056fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fc:	4a35      	ldr	r2, [pc, #212]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80056fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005702:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005704:	e017      	b.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	3304      	adds	r3, #4
 800570a:	2100      	movs	r1, #0
 800570c:	4618      	mov	r0, r3
 800570e:	f001 f8fb 	bl	8006908 <RCCEx_PLL2_Config>
 8005712:	4603      	mov	r3, r0
 8005714:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005716:	e00e      	b.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	3324      	adds	r3, #36	; 0x24
 800571c:	2100      	movs	r1, #0
 800571e:	4618      	mov	r0, r3
 8005720:	f001 f9a4 	bl	8006a6c <RCCEx_PLL3_Config>
 8005724:	4603      	mov	r3, r0
 8005726:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005728:	e005      	b.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	75fb      	strb	r3, [r7, #23]
      break;
 800572e:	e002      	b.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005730:	bf00      	nop
 8005732:	e000      	b.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005734:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005736:	7dfb      	ldrb	r3, [r7, #23]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d10a      	bne.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800573c:	4b25      	ldr	r3, [pc, #148]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800573e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005740:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800574a:	4922      	ldr	r1, [pc, #136]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800574c:	4313      	orrs	r3, r2
 800574e:	658b      	str	r3, [r1, #88]	; 0x58
 8005750:	e001      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005752:	7dfb      	ldrb	r3, [r7, #23]
 8005754:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800575e:	2b00      	cmp	r3, #0
 8005760:	d04b      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005768:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800576c:	d030      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800576e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005772:	d82a      	bhi.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005774:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005778:	d02e      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800577a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800577e:	d824      	bhi.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005780:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005784:	d018      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005786:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800578a:	d81e      	bhi.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800578c:	2b00      	cmp	r3, #0
 800578e:	d003      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005790:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005794:	d007      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005796:	e018      	b.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005798:	4b0e      	ldr	r3, [pc, #56]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800579a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579c:	4a0d      	ldr	r2, [pc, #52]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800579e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80057a4:	e019      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	3304      	adds	r3, #4
 80057aa:	2100      	movs	r1, #0
 80057ac:	4618      	mov	r0, r3
 80057ae:	f001 f8ab 	bl	8006908 <RCCEx_PLL2_Config>
 80057b2:	4603      	mov	r3, r0
 80057b4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80057b6:	e010      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	3324      	adds	r3, #36	; 0x24
 80057bc:	2100      	movs	r1, #0
 80057be:	4618      	mov	r0, r3
 80057c0:	f001 f954 	bl	8006a6c <RCCEx_PLL3_Config>
 80057c4:	4603      	mov	r3, r0
 80057c6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80057c8:	e007      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	75fb      	strb	r3, [r7, #23]
      break;
 80057ce:	e004      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80057d0:	bf00      	nop
 80057d2:	e002      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80057d4:	58024400 	.word	0x58024400
      break;
 80057d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057da:	7dfb      	ldrb	r3, [r7, #23]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d10a      	bne.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80057e0:	4b99      	ldr	r3, [pc, #612]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80057e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057e4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80057ee:	4996      	ldr	r1, [pc, #600]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80057f0:	4313      	orrs	r3, r2
 80057f2:	658b      	str	r3, [r1, #88]	; 0x58
 80057f4:	e001      	b.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057f6:	7dfb      	ldrb	r3, [r7, #23]
 80057f8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d032      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800580a:	2b30      	cmp	r3, #48	; 0x30
 800580c:	d01c      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800580e:	2b30      	cmp	r3, #48	; 0x30
 8005810:	d817      	bhi.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005812:	2b20      	cmp	r3, #32
 8005814:	d00c      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8005816:	2b20      	cmp	r3, #32
 8005818:	d813      	bhi.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800581a:	2b00      	cmp	r3, #0
 800581c:	d016      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800581e:	2b10      	cmp	r3, #16
 8005820:	d10f      	bne.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005822:	4b89      	ldr	r3, [pc, #548]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005826:	4a88      	ldr	r2, [pc, #544]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800582c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800582e:	e00e      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	3304      	adds	r3, #4
 8005834:	2102      	movs	r1, #2
 8005836:	4618      	mov	r0, r3
 8005838:	f001 f866 	bl	8006908 <RCCEx_PLL2_Config>
 800583c:	4603      	mov	r3, r0
 800583e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005840:	e005      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	75fb      	strb	r3, [r7, #23]
      break;
 8005846:	e002      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005848:	bf00      	nop
 800584a:	e000      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800584c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800584e:	7dfb      	ldrb	r3, [r7, #23]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d109      	bne.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005854:	4b7c      	ldr	r3, [pc, #496]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005858:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005860:	4979      	ldr	r1, [pc, #484]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005862:	4313      	orrs	r3, r2
 8005864:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005866:	e001      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005868:	7dfb      	ldrb	r3, [r7, #23]
 800586a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d047      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800587c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005880:	d030      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005882:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005886:	d82a      	bhi.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005888:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800588c:	d02c      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800588e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005892:	d824      	bhi.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005894:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005898:	d018      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800589a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800589e:	d81e      	bhi.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d003      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80058a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058a8:	d007      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80058aa:	e018      	b.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058ac:	4b66      	ldr	r3, [pc, #408]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80058ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b0:	4a65      	ldr	r2, [pc, #404]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80058b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80058b8:	e017      	b.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	3304      	adds	r3, #4
 80058be:	2100      	movs	r1, #0
 80058c0:	4618      	mov	r0, r3
 80058c2:	f001 f821 	bl	8006908 <RCCEx_PLL2_Config>
 80058c6:	4603      	mov	r3, r0
 80058c8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80058ca:	e00e      	b.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	3324      	adds	r3, #36	; 0x24
 80058d0:	2100      	movs	r1, #0
 80058d2:	4618      	mov	r0, r3
 80058d4:	f001 f8ca 	bl	8006a6c <RCCEx_PLL3_Config>
 80058d8:	4603      	mov	r3, r0
 80058da:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80058dc:	e005      	b.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	75fb      	strb	r3, [r7, #23]
      break;
 80058e2:	e002      	b.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80058e4:	bf00      	nop
 80058e6:	e000      	b.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80058e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058ea:	7dfb      	ldrb	r3, [r7, #23]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d109      	bne.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80058f0:	4b55      	ldr	r3, [pc, #340]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80058f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058f4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058fc:	4952      	ldr	r1, [pc, #328]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	650b      	str	r3, [r1, #80]	; 0x50
 8005902:	e001      	b.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005904:	7dfb      	ldrb	r3, [r7, #23]
 8005906:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005910:	2b00      	cmp	r3, #0
 8005912:	d049      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005918:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800591c:	d02e      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800591e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005922:	d828      	bhi.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005924:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005928:	d02a      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800592a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800592e:	d822      	bhi.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005930:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005934:	d026      	beq.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8005936:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800593a:	d81c      	bhi.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800593c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005940:	d010      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8005942:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005946:	d816      	bhi.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005948:	2b00      	cmp	r3, #0
 800594a:	d01d      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800594c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005950:	d111      	bne.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	3304      	adds	r3, #4
 8005956:	2101      	movs	r1, #1
 8005958:	4618      	mov	r0, r3
 800595a:	f000 ffd5 	bl	8006908 <RCCEx_PLL2_Config>
 800595e:	4603      	mov	r3, r0
 8005960:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005962:	e012      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	3324      	adds	r3, #36	; 0x24
 8005968:	2101      	movs	r1, #1
 800596a:	4618      	mov	r0, r3
 800596c:	f001 f87e 	bl	8006a6c <RCCEx_PLL3_Config>
 8005970:	4603      	mov	r3, r0
 8005972:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005974:	e009      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	75fb      	strb	r3, [r7, #23]
      break;
 800597a:	e006      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800597c:	bf00      	nop
 800597e:	e004      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005980:	bf00      	nop
 8005982:	e002      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005984:	bf00      	nop
 8005986:	e000      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005988:	bf00      	nop
    }

    if(ret == HAL_OK)
 800598a:	7dfb      	ldrb	r3, [r7, #23]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d109      	bne.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005990:	4b2d      	ldr	r3, [pc, #180]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005994:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800599c:	492a      	ldr	r1, [pc, #168]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	650b      	str	r3, [r1, #80]	; 0x50
 80059a2:	e001      	b.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059a4:	7dfb      	ldrb	r3, [r7, #23]
 80059a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d04d      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80059ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059be:	d02e      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80059c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059c4:	d828      	bhi.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80059c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ca:	d02a      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80059cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059d0:	d822      	bhi.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80059d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80059d6:	d026      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x526>
 80059d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80059dc:	d81c      	bhi.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80059de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059e2:	d010      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80059e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059e8:	d816      	bhi.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d01d      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80059ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059f2:	d111      	bne.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	3304      	adds	r3, #4
 80059f8:	2101      	movs	r1, #1
 80059fa:	4618      	mov	r0, r3
 80059fc:	f000 ff84 	bl	8006908 <RCCEx_PLL2_Config>
 8005a00:	4603      	mov	r3, r0
 8005a02:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005a04:	e012      	b.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	3324      	adds	r3, #36	; 0x24
 8005a0a:	2101      	movs	r1, #1
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f001 f82d 	bl	8006a6c <RCCEx_PLL3_Config>
 8005a12:	4603      	mov	r3, r0
 8005a14:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005a16:	e009      	b.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	75fb      	strb	r3, [r7, #23]
      break;
 8005a1c:	e006      	b.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005a1e:	bf00      	nop
 8005a20:	e004      	b.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005a22:	bf00      	nop
 8005a24:	e002      	b.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005a26:	bf00      	nop
 8005a28:	e000      	b.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005a2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a2c:	7dfb      	ldrb	r3, [r7, #23]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d10c      	bne.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005a32:	4b05      	ldr	r3, [pc, #20]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a36:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005a40:	4901      	ldr	r1, [pc, #4]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005a42:	4313      	orrs	r3, r2
 8005a44:	658b      	str	r3, [r1, #88]	; 0x58
 8005a46:	e003      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005a48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a4c:	7dfb      	ldrb	r3, [r7, #23]
 8005a4e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d02f      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a64:	d00e      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8005a66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a6a:	d814      	bhi.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d015      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8005a70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a74:	d10f      	bne.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a76:	4baf      	ldr	r3, [pc, #700]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7a:	4aae      	ldr	r2, [pc, #696]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005a82:	e00c      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	3304      	adds	r3, #4
 8005a88:	2101      	movs	r1, #1
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f000 ff3c 	bl	8006908 <RCCEx_PLL2_Config>
 8005a90:	4603      	mov	r3, r0
 8005a92:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005a94:	e003      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	75fb      	strb	r3, [r7, #23]
      break;
 8005a9a:	e000      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8005a9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a9e:	7dfb      	ldrb	r3, [r7, #23]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d109      	bne.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005aa4:	4ba3      	ldr	r3, [pc, #652]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aa8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ab0:	49a0      	ldr	r1, [pc, #640]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	650b      	str	r3, [r1, #80]	; 0x50
 8005ab6:	e001      	b.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ab8:	7dfb      	ldrb	r3, [r7, #23]
 8005aba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d032      	beq.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005acc:	2b03      	cmp	r3, #3
 8005ace:	d81b      	bhi.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005ad0:	a201      	add	r2, pc, #4	; (adr r2, 8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8005ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad6:	bf00      	nop
 8005ad8:	08005b0f 	.word	0x08005b0f
 8005adc:	08005ae9 	.word	0x08005ae9
 8005ae0:	08005af7 	.word	0x08005af7
 8005ae4:	08005b0f 	.word	0x08005b0f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ae8:	4b92      	ldr	r3, [pc, #584]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aec:	4a91      	ldr	r2, [pc, #580]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005aee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005af2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005af4:	e00c      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	3304      	adds	r3, #4
 8005afa:	2102      	movs	r1, #2
 8005afc:	4618      	mov	r0, r3
 8005afe:	f000 ff03 	bl	8006908 <RCCEx_PLL2_Config>
 8005b02:	4603      	mov	r3, r0
 8005b04:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005b06:	e003      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	75fb      	strb	r3, [r7, #23]
      break;
 8005b0c:	e000      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005b0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b10:	7dfb      	ldrb	r3, [r7, #23]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d109      	bne.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005b16:	4b87      	ldr	r3, [pc, #540]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b1a:	f023 0203 	bic.w	r2, r3, #3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b22:	4984      	ldr	r1, [pc, #528]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005b28:	e001      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b2a:	7dfb      	ldrb	r3, [r7, #23]
 8005b2c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	f000 8086 	beq.w	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b3c:	4b7e      	ldr	r3, [pc, #504]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a7d      	ldr	r2, [pc, #500]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005b42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b48:	f7fb fc98 	bl	800147c <HAL_GetTick>
 8005b4c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b4e:	e009      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b50:	f7fb fc94 	bl	800147c <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	2b64      	cmp	r3, #100	; 0x64
 8005b5c:	d902      	bls.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	75fb      	strb	r3, [r7, #23]
        break;
 8005b62:	e005      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b64:	4b74      	ldr	r3, [pc, #464]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d0ef      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005b70:	7dfb      	ldrb	r3, [r7, #23]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d166      	bne.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005b76:	4b6f      	ldr	r3, [pc, #444]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005b78:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b80:	4053      	eors	r3, r2
 8005b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d013      	beq.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b8a:	4b6a      	ldr	r3, [pc, #424]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b92:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b94:	4b67      	ldr	r3, [pc, #412]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b98:	4a66      	ldr	r2, [pc, #408]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005b9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b9e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ba0:	4b64      	ldr	r3, [pc, #400]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba4:	4a63      	ldr	r2, [pc, #396]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005ba6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005baa:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005bac:	4a61      	ldr	r2, [pc, #388]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005bb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bbc:	d115      	bne.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bbe:	f7fb fc5d 	bl	800147c <HAL_GetTick>
 8005bc2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005bc4:	e00b      	b.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bc6:	f7fb fc59 	bl	800147c <HAL_GetTick>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d902      	bls.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	75fb      	strb	r3, [r7, #23]
            break;
 8005bdc:	e005      	b.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005bde:	4b55      	ldr	r3, [pc, #340]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005be2:	f003 0302 	and.w	r3, r3, #2
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d0ed      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8005bea:	7dfb      	ldrb	r3, [r7, #23]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d126      	bne.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bfe:	d10d      	bne.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005c00:	4b4c      	ldr	r3, [pc, #304]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c0e:	0919      	lsrs	r1, r3, #4
 8005c10:	4b4a      	ldr	r3, [pc, #296]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8005c12:	400b      	ands	r3, r1
 8005c14:	4947      	ldr	r1, [pc, #284]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005c16:	4313      	orrs	r3, r2
 8005c18:	610b      	str	r3, [r1, #16]
 8005c1a:	e005      	b.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005c1c:	4b45      	ldr	r3, [pc, #276]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	4a44      	ldr	r2, [pc, #272]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005c22:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005c26:	6113      	str	r3, [r2, #16]
 8005c28:	4b42      	ldr	r3, [pc, #264]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005c2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c36:	493f      	ldr	r1, [pc, #252]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	670b      	str	r3, [r1, #112]	; 0x70
 8005c3c:	e004      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c3e:	7dfb      	ldrb	r3, [r7, #23]
 8005c40:	75bb      	strb	r3, [r7, #22]
 8005c42:	e001      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c44:	7dfb      	ldrb	r3, [r7, #23]
 8005c46:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0301 	and.w	r3, r3, #1
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	f000 8085 	beq.w	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c5a:	2b28      	cmp	r3, #40	; 0x28
 8005c5c:	d866      	bhi.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005c5e:	a201      	add	r2, pc, #4	; (adr r2, 8005c64 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c64:	08005d41 	.word	0x08005d41
 8005c68:	08005d2d 	.word	0x08005d2d
 8005c6c:	08005d2d 	.word	0x08005d2d
 8005c70:	08005d2d 	.word	0x08005d2d
 8005c74:	08005d2d 	.word	0x08005d2d
 8005c78:	08005d2d 	.word	0x08005d2d
 8005c7c:	08005d2d 	.word	0x08005d2d
 8005c80:	08005d2d 	.word	0x08005d2d
 8005c84:	08005d09 	.word	0x08005d09
 8005c88:	08005d2d 	.word	0x08005d2d
 8005c8c:	08005d2d 	.word	0x08005d2d
 8005c90:	08005d2d 	.word	0x08005d2d
 8005c94:	08005d2d 	.word	0x08005d2d
 8005c98:	08005d2d 	.word	0x08005d2d
 8005c9c:	08005d2d 	.word	0x08005d2d
 8005ca0:	08005d2d 	.word	0x08005d2d
 8005ca4:	08005d1b 	.word	0x08005d1b
 8005ca8:	08005d2d 	.word	0x08005d2d
 8005cac:	08005d2d 	.word	0x08005d2d
 8005cb0:	08005d2d 	.word	0x08005d2d
 8005cb4:	08005d2d 	.word	0x08005d2d
 8005cb8:	08005d2d 	.word	0x08005d2d
 8005cbc:	08005d2d 	.word	0x08005d2d
 8005cc0:	08005d2d 	.word	0x08005d2d
 8005cc4:	08005d41 	.word	0x08005d41
 8005cc8:	08005d2d 	.word	0x08005d2d
 8005ccc:	08005d2d 	.word	0x08005d2d
 8005cd0:	08005d2d 	.word	0x08005d2d
 8005cd4:	08005d2d 	.word	0x08005d2d
 8005cd8:	08005d2d 	.word	0x08005d2d
 8005cdc:	08005d2d 	.word	0x08005d2d
 8005ce0:	08005d2d 	.word	0x08005d2d
 8005ce4:	08005d41 	.word	0x08005d41
 8005ce8:	08005d2d 	.word	0x08005d2d
 8005cec:	08005d2d 	.word	0x08005d2d
 8005cf0:	08005d2d 	.word	0x08005d2d
 8005cf4:	08005d2d 	.word	0x08005d2d
 8005cf8:	08005d2d 	.word	0x08005d2d
 8005cfc:	08005d2d 	.word	0x08005d2d
 8005d00:	08005d2d 	.word	0x08005d2d
 8005d04:	08005d41 	.word	0x08005d41
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	3304      	adds	r3, #4
 8005d0c:	2101      	movs	r1, #1
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f000 fdfa 	bl	8006908 <RCCEx_PLL2_Config>
 8005d14:	4603      	mov	r3, r0
 8005d16:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005d18:	e013      	b.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	3324      	adds	r3, #36	; 0x24
 8005d1e:	2101      	movs	r1, #1
 8005d20:	4618      	mov	r0, r3
 8005d22:	f000 fea3 	bl	8006a6c <RCCEx_PLL3_Config>
 8005d26:	4603      	mov	r3, r0
 8005d28:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005d2a:	e00a      	b.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	75fb      	strb	r3, [r7, #23]
      break;
 8005d30:	e007      	b.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005d32:	bf00      	nop
 8005d34:	58024400 	.word	0x58024400
 8005d38:	58024800 	.word	0x58024800
 8005d3c:	00ffffcf 	.word	0x00ffffcf
      break;
 8005d40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d42:	7dfb      	ldrb	r3, [r7, #23]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d109      	bne.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005d48:	4b96      	ldr	r3, [pc, #600]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d4c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d54:	4993      	ldr	r1, [pc, #588]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005d56:	4313      	orrs	r3, r2
 8005d58:	654b      	str	r3, [r1, #84]	; 0x54
 8005d5a:	e001      	b.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d5c:	7dfb      	ldrb	r3, [r7, #23]
 8005d5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 0302 	and.w	r3, r3, #2
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d038      	beq.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d70:	2b05      	cmp	r3, #5
 8005d72:	d821      	bhi.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8005d74:	a201      	add	r2, pc, #4	; (adr r2, 8005d7c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8005d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d7a:	bf00      	nop
 8005d7c:	08005dbf 	.word	0x08005dbf
 8005d80:	08005d95 	.word	0x08005d95
 8005d84:	08005da7 	.word	0x08005da7
 8005d88:	08005dbf 	.word	0x08005dbf
 8005d8c:	08005dbf 	.word	0x08005dbf
 8005d90:	08005dbf 	.word	0x08005dbf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	3304      	adds	r3, #4
 8005d98:	2101      	movs	r1, #1
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f000 fdb4 	bl	8006908 <RCCEx_PLL2_Config>
 8005da0:	4603      	mov	r3, r0
 8005da2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005da4:	e00c      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	3324      	adds	r3, #36	; 0x24
 8005daa:	2101      	movs	r1, #1
 8005dac:	4618      	mov	r0, r3
 8005dae:	f000 fe5d 	bl	8006a6c <RCCEx_PLL3_Config>
 8005db2:	4603      	mov	r3, r0
 8005db4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005db6:	e003      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	75fb      	strb	r3, [r7, #23]
      break;
 8005dbc:	e000      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8005dbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dc0:	7dfb      	ldrb	r3, [r7, #23]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d109      	bne.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005dc6:	4b77      	ldr	r3, [pc, #476]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dca:	f023 0207 	bic.w	r2, r3, #7
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dd2:	4974      	ldr	r1, [pc, #464]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	654b      	str	r3, [r1, #84]	; 0x54
 8005dd8:	e001      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dda:	7dfb      	ldrb	r3, [r7, #23]
 8005ddc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0304 	and.w	r3, r3, #4
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d03a      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005df0:	2b05      	cmp	r3, #5
 8005df2:	d821      	bhi.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8005df4:	a201      	add	r2, pc, #4	; (adr r2, 8005dfc <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8005df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dfa:	bf00      	nop
 8005dfc:	08005e3f 	.word	0x08005e3f
 8005e00:	08005e15 	.word	0x08005e15
 8005e04:	08005e27 	.word	0x08005e27
 8005e08:	08005e3f 	.word	0x08005e3f
 8005e0c:	08005e3f 	.word	0x08005e3f
 8005e10:	08005e3f 	.word	0x08005e3f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	3304      	adds	r3, #4
 8005e18:	2101      	movs	r1, #1
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f000 fd74 	bl	8006908 <RCCEx_PLL2_Config>
 8005e20:	4603      	mov	r3, r0
 8005e22:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005e24:	e00c      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	3324      	adds	r3, #36	; 0x24
 8005e2a:	2101      	movs	r1, #1
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f000 fe1d 	bl	8006a6c <RCCEx_PLL3_Config>
 8005e32:	4603      	mov	r3, r0
 8005e34:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005e36:	e003      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	75fb      	strb	r3, [r7, #23]
      break;
 8005e3c:	e000      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8005e3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e40:	7dfb      	ldrb	r3, [r7, #23]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d10a      	bne.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e46:	4b57      	ldr	r3, [pc, #348]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e4a:	f023 0207 	bic.w	r2, r3, #7
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e54:	4953      	ldr	r1, [pc, #332]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005e56:	4313      	orrs	r3, r2
 8005e58:	658b      	str	r3, [r1, #88]	; 0x58
 8005e5a:	e001      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e5c:	7dfb      	ldrb	r3, [r7, #23]
 8005e5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0320 	and.w	r3, r3, #32
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d04b      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e76:	d02e      	beq.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005e78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e7c:	d828      	bhi.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e82:	d02a      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e88:	d822      	bhi.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005e8a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e8e:	d026      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005e90:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e94:	d81c      	bhi.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005e96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e9a:	d010      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8005e9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ea0:	d816      	bhi.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d01d      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8005ea6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005eaa:	d111      	bne.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	3304      	adds	r3, #4
 8005eb0:	2100      	movs	r1, #0
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f000 fd28 	bl	8006908 <RCCEx_PLL2_Config>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005ebc:	e012      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	3324      	adds	r3, #36	; 0x24
 8005ec2:	2102      	movs	r1, #2
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f000 fdd1 	bl	8006a6c <RCCEx_PLL3_Config>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005ece:	e009      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	75fb      	strb	r3, [r7, #23]
      break;
 8005ed4:	e006      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005ed6:	bf00      	nop
 8005ed8:	e004      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005eda:	bf00      	nop
 8005edc:	e002      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005ede:	bf00      	nop
 8005ee0:	e000      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005ee2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ee4:	7dfb      	ldrb	r3, [r7, #23]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d10a      	bne.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005eea:	4b2e      	ldr	r3, [pc, #184]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eee:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ef8:	492a      	ldr	r1, [pc, #168]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005efa:	4313      	orrs	r3, r2
 8005efc:	654b      	str	r3, [r1, #84]	; 0x54
 8005efe:	e001      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f00:	7dfb      	ldrb	r3, [r7, #23]
 8005f02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d04d      	beq.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f16:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005f1a:	d02e      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005f1c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005f20:	d828      	bhi.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005f22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f26:	d02a      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f2c:	d822      	bhi.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005f2e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f32:	d026      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005f34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f38:	d81c      	bhi.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005f3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f3e:	d010      	beq.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8005f40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f44:	d816      	bhi.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d01d      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8005f4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f4e:	d111      	bne.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	3304      	adds	r3, #4
 8005f54:	2100      	movs	r1, #0
 8005f56:	4618      	mov	r0, r3
 8005f58:	f000 fcd6 	bl	8006908 <RCCEx_PLL2_Config>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005f60:	e012      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	3324      	adds	r3, #36	; 0x24
 8005f66:	2102      	movs	r1, #2
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f000 fd7f 	bl	8006a6c <RCCEx_PLL3_Config>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005f72:	e009      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	75fb      	strb	r3, [r7, #23]
      break;
 8005f78:	e006      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005f7a:	bf00      	nop
 8005f7c:	e004      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005f7e:	bf00      	nop
 8005f80:	e002      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005f82:	bf00      	nop
 8005f84:	e000      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005f86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f88:	7dfb      	ldrb	r3, [r7, #23]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d10c      	bne.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005f8e:	4b05      	ldr	r3, [pc, #20]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f92:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f9c:	4901      	ldr	r1, [pc, #4]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	658b      	str	r3, [r1, #88]	; 0x58
 8005fa2:	e003      	b.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005fa4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fa8:	7dfb      	ldrb	r3, [r7, #23]
 8005faa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d04b      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005fbe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005fc2:	d02e      	beq.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005fc4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005fc8:	d828      	bhi.n	800601c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005fca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fce:	d02a      	beq.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005fd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fd4:	d822      	bhi.n	800601c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005fd6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005fda:	d026      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8005fdc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005fe0:	d81c      	bhi.n	800601c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005fe2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fe6:	d010      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8005fe8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fec:	d816      	bhi.n	800601c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d01d      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8005ff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ff6:	d111      	bne.n	800601c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	3304      	adds	r3, #4
 8005ffc:	2100      	movs	r1, #0
 8005ffe:	4618      	mov	r0, r3
 8006000:	f000 fc82 	bl	8006908 <RCCEx_PLL2_Config>
 8006004:	4603      	mov	r3, r0
 8006006:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006008:	e012      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	3324      	adds	r3, #36	; 0x24
 800600e:	2102      	movs	r1, #2
 8006010:	4618      	mov	r0, r3
 8006012:	f000 fd2b 	bl	8006a6c <RCCEx_PLL3_Config>
 8006016:	4603      	mov	r3, r0
 8006018:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800601a:	e009      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	75fb      	strb	r3, [r7, #23]
      break;
 8006020:	e006      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006022:	bf00      	nop
 8006024:	e004      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006026:	bf00      	nop
 8006028:	e002      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800602a:	bf00      	nop
 800602c:	e000      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800602e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006030:	7dfb      	ldrb	r3, [r7, #23]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d10a      	bne.n	800604c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006036:	4b9d      	ldr	r3, [pc, #628]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800603a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006044:	4999      	ldr	r1, [pc, #612]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006046:	4313      	orrs	r3, r2
 8006048:	658b      	str	r3, [r1, #88]	; 0x58
 800604a:	e001      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800604c:	7dfb      	ldrb	r3, [r7, #23]
 800604e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 0308 	and.w	r3, r3, #8
 8006058:	2b00      	cmp	r3, #0
 800605a:	d01a      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006066:	d10a      	bne.n	800607e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	3324      	adds	r3, #36	; 0x24
 800606c:	2102      	movs	r1, #2
 800606e:	4618      	mov	r0, r3
 8006070:	f000 fcfc 	bl	8006a6c <RCCEx_PLL3_Config>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d001      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800607e:	4b8b      	ldr	r3, [pc, #556]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006082:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800608c:	4987      	ldr	r1, [pc, #540]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800608e:	4313      	orrs	r3, r2
 8006090:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 0310 	and.w	r3, r3, #16
 800609a:	2b00      	cmp	r3, #0
 800609c:	d01a      	beq.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060a8:	d10a      	bne.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	3324      	adds	r3, #36	; 0x24
 80060ae:	2102      	movs	r1, #2
 80060b0:	4618      	mov	r0, r3
 80060b2:	f000 fcdb 	bl	8006a6c <RCCEx_PLL3_Config>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d001      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80060c0:	4b7a      	ldr	r3, [pc, #488]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80060c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060ce:	4977      	ldr	r1, [pc, #476]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80060d0:	4313      	orrs	r3, r2
 80060d2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d034      	beq.n	800614a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80060e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060ea:	d01d      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80060ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060f0:	d817      	bhi.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d003      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80060f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060fa:	d009      	beq.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80060fc:	e011      	b.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	3304      	adds	r3, #4
 8006102:	2100      	movs	r1, #0
 8006104:	4618      	mov	r0, r3
 8006106:	f000 fbff 	bl	8006908 <RCCEx_PLL2_Config>
 800610a:	4603      	mov	r3, r0
 800610c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800610e:	e00c      	b.n	800612a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	3324      	adds	r3, #36	; 0x24
 8006114:	2102      	movs	r1, #2
 8006116:	4618      	mov	r0, r3
 8006118:	f000 fca8 	bl	8006a6c <RCCEx_PLL3_Config>
 800611c:	4603      	mov	r3, r0
 800611e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006120:	e003      	b.n	800612a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	75fb      	strb	r3, [r7, #23]
      break;
 8006126:	e000      	b.n	800612a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8006128:	bf00      	nop
    }

    if(ret == HAL_OK)
 800612a:	7dfb      	ldrb	r3, [r7, #23]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d10a      	bne.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006130:	4b5e      	ldr	r3, [pc, #376]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006134:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800613e:	495b      	ldr	r1, [pc, #364]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006140:	4313      	orrs	r3, r2
 8006142:	658b      	str	r3, [r1, #88]	; 0x58
 8006144:	e001      	b.n	800614a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006146:	7dfb      	ldrb	r3, [r7, #23]
 8006148:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006152:	2b00      	cmp	r3, #0
 8006154:	d033      	beq.n	80061be <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800615c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006160:	d01c      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8006162:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006166:	d816      	bhi.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8006168:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800616c:	d003      	beq.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800616e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006172:	d007      	beq.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8006174:	e00f      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006176:	4b4d      	ldr	r3, [pc, #308]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617a:	4a4c      	ldr	r2, [pc, #304]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800617c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006180:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006182:	e00c      	b.n	800619e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	3324      	adds	r3, #36	; 0x24
 8006188:	2101      	movs	r1, #1
 800618a:	4618      	mov	r0, r3
 800618c:	f000 fc6e 	bl	8006a6c <RCCEx_PLL3_Config>
 8006190:	4603      	mov	r3, r0
 8006192:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006194:	e003      	b.n	800619e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	75fb      	strb	r3, [r7, #23]
      break;
 800619a:	e000      	b.n	800619e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800619c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800619e:	7dfb      	ldrb	r3, [r7, #23]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d10a      	bne.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80061a4:	4b41      	ldr	r3, [pc, #260]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80061a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061b2:	493e      	ldr	r1, [pc, #248]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80061b4:	4313      	orrs	r3, r2
 80061b6:	654b      	str	r3, [r1, #84]	; 0x54
 80061b8:	e001      	b.n	80061be <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ba:	7dfb      	ldrb	r3, [r7, #23]
 80061bc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d029      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d003      	beq.n	80061da <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80061d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061d6:	d007      	beq.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80061d8:	e00f      	b.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061da:	4b34      	ldr	r3, [pc, #208]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80061dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061de:	4a33      	ldr	r2, [pc, #204]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80061e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80061e6:	e00b      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	3304      	adds	r3, #4
 80061ec:	2102      	movs	r1, #2
 80061ee:	4618      	mov	r0, r3
 80061f0:	f000 fb8a 	bl	8006908 <RCCEx_PLL2_Config>
 80061f4:	4603      	mov	r3, r0
 80061f6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80061f8:	e002      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	75fb      	strb	r3, [r7, #23]
      break;
 80061fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006200:	7dfb      	ldrb	r3, [r7, #23]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d109      	bne.n	800621a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006206:	4b29      	ldr	r3, [pc, #164]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800620a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006212:	4926      	ldr	r1, [pc, #152]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006214:	4313      	orrs	r3, r2
 8006216:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006218:	e001      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800621a:	7dfb      	ldrb	r3, [r7, #23]
 800621c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00a      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	3324      	adds	r3, #36	; 0x24
 800622e:	2102      	movs	r1, #2
 8006230:	4618      	mov	r0, r3
 8006232:	f000 fc1b 	bl	8006a6c <RCCEx_PLL3_Config>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d001      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006248:	2b00      	cmp	r3, #0
 800624a:	d033      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006250:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006254:	d017      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006256:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800625a:	d811      	bhi.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800625c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006260:	d013      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006262:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006266:	d80b      	bhi.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006268:	2b00      	cmp	r3, #0
 800626a:	d010      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800626c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006270:	d106      	bne.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006272:	4b0e      	ldr	r3, [pc, #56]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006276:	4a0d      	ldr	r2, [pc, #52]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800627c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800627e:	e007      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	75fb      	strb	r3, [r7, #23]
      break;
 8006284:	e004      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006286:	bf00      	nop
 8006288:	e002      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800628a:	bf00      	nop
 800628c:	e000      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800628e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006290:	7dfb      	ldrb	r3, [r7, #23]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d10c      	bne.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006296:	4b05      	ldr	r3, [pc, #20]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800629a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062a2:	4902      	ldr	r1, [pc, #8]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80062a4:	4313      	orrs	r3, r2
 80062a6:	654b      	str	r3, [r1, #84]	; 0x54
 80062a8:	e004      	b.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80062aa:	bf00      	nop
 80062ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062b0:	7dfb      	ldrb	r3, [r7, #23]
 80062b2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d008      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80062c0:	4b31      	ldr	r3, [pc, #196]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80062c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062cc:	492e      	ldr	r1, [pc, #184]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80062ce:	4313      	orrs	r3, r2
 80062d0:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d009      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80062de:	4b2a      	ldr	r3, [pc, #168]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80062ec:	4926      	ldr	r1, [pc, #152]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80062ee:	4313      	orrs	r3, r2
 80062f0:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d008      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80062fe:	4b22      	ldr	r3, [pc, #136]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006302:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800630a:	491f      	ldr	r1, [pc, #124]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800630c:	4313      	orrs	r3, r2
 800630e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d00d      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800631c:	4b1a      	ldr	r3, [pc, #104]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	4a19      	ldr	r2, [pc, #100]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006322:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006326:	6113      	str	r3, [r2, #16]
 8006328:	4b17      	ldr	r3, [pc, #92]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800632a:	691a      	ldr	r2, [r3, #16]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006332:	4915      	ldr	r1, [pc, #84]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006334:	4313      	orrs	r3, r2
 8006336:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	da08      	bge.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006340:	4b11      	ldr	r3, [pc, #68]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006344:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800634c:	490e      	ldr	r1, [pc, #56]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800634e:	4313      	orrs	r3, r2
 8006350:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d009      	beq.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800635e:	4b0a      	ldr	r3, [pc, #40]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006362:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800636c:	4906      	ldr	r1, [pc, #24]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800636e:	4313      	orrs	r3, r2
 8006370:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006372:	7dbb      	ldrb	r3, [r7, #22]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d101      	bne.n	800637c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8006378:	2300      	movs	r3, #0
 800637a:	e000      	b.n	800637e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
}
 800637e:	4618      	mov	r0, r3
 8006380:	3718      	adds	r7, #24
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	58024400 	.word	0x58024400

0800638c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006390:	f7ff f85a 	bl	8005448 <HAL_RCC_GetHCLKFreq>
 8006394:	4602      	mov	r2, r0
 8006396:	4b06      	ldr	r3, [pc, #24]	; (80063b0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	091b      	lsrs	r3, r3, #4
 800639c:	f003 0307 	and.w	r3, r3, #7
 80063a0:	4904      	ldr	r1, [pc, #16]	; (80063b4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80063a2:	5ccb      	ldrb	r3, [r1, r3]
 80063a4:	f003 031f 	and.w	r3, r3, #31
 80063a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	58024400 	.word	0x58024400
 80063b4:	0800900c 	.word	0x0800900c

080063b8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b089      	sub	sp, #36	; 0x24
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80063c0:	4ba1      	ldr	r3, [pc, #644]	; (8006648 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c4:	f003 0303 	and.w	r3, r3, #3
 80063c8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80063ca:	4b9f      	ldr	r3, [pc, #636]	; (8006648 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ce:	0b1b      	lsrs	r3, r3, #12
 80063d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063d4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80063d6:	4b9c      	ldr	r3, [pc, #624]	; (8006648 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063da:	091b      	lsrs	r3, r3, #4
 80063dc:	f003 0301 	and.w	r3, r3, #1
 80063e0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80063e2:	4b99      	ldr	r3, [pc, #612]	; (8006648 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063e6:	08db      	lsrs	r3, r3, #3
 80063e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80063ec:	693a      	ldr	r2, [r7, #16]
 80063ee:	fb02 f303 	mul.w	r3, r2, r3
 80063f2:	ee07 3a90 	vmov	s15, r3
 80063f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063fa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	2b00      	cmp	r3, #0
 8006402:	f000 8111 	beq.w	8006628 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	2b02      	cmp	r3, #2
 800640a:	f000 8083 	beq.w	8006514 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	2b02      	cmp	r3, #2
 8006412:	f200 80a1 	bhi.w	8006558 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d003      	beq.n	8006424 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	2b01      	cmp	r3, #1
 8006420:	d056      	beq.n	80064d0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006422:	e099      	b.n	8006558 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006424:	4b88      	ldr	r3, [pc, #544]	; (8006648 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 0320 	and.w	r3, r3, #32
 800642c:	2b00      	cmp	r3, #0
 800642e:	d02d      	beq.n	800648c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006430:	4b85      	ldr	r3, [pc, #532]	; (8006648 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	08db      	lsrs	r3, r3, #3
 8006436:	f003 0303 	and.w	r3, r3, #3
 800643a:	4a84      	ldr	r2, [pc, #528]	; (800664c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800643c:	fa22 f303 	lsr.w	r3, r2, r3
 8006440:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	ee07 3a90 	vmov	s15, r3
 8006448:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	ee07 3a90 	vmov	s15, r3
 8006452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800645a:	4b7b      	ldr	r3, [pc, #492]	; (8006648 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800645c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800645e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006462:	ee07 3a90 	vmov	s15, r3
 8006466:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800646a:	ed97 6a03 	vldr	s12, [r7, #12]
 800646e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006650 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006472:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006476:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800647a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800647e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006486:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800648a:	e087      	b.n	800659c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	ee07 3a90 	vmov	s15, r3
 8006492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006496:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006654 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800649a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800649e:	4b6a      	ldr	r3, [pc, #424]	; (8006648 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064a6:	ee07 3a90 	vmov	s15, r3
 80064aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80064b2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006650 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80064b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80064ce:	e065      	b.n	800659c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	ee07 3a90 	vmov	s15, r3
 80064d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064da:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006658 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80064de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064e2:	4b59      	ldr	r3, [pc, #356]	; (8006648 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064ea:	ee07 3a90 	vmov	s15, r3
 80064ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80064f6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006650 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80064fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006502:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006506:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800650a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800650e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006512:	e043      	b.n	800659c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	ee07 3a90 	vmov	s15, r3
 800651a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800651e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800665c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006522:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006526:	4b48      	ldr	r3, [pc, #288]	; (8006648 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800652a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800652e:	ee07 3a90 	vmov	s15, r3
 8006532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006536:	ed97 6a03 	vldr	s12, [r7, #12]
 800653a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006650 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800653e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006542:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006546:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800654a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800654e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006552:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006556:	e021      	b.n	800659c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	ee07 3a90 	vmov	s15, r3
 800655e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006562:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006658 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006566:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800656a:	4b37      	ldr	r3, [pc, #220]	; (8006648 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800656c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006572:	ee07 3a90 	vmov	s15, r3
 8006576:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800657a:	ed97 6a03 	vldr	s12, [r7, #12]
 800657e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006650 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006582:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006586:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800658a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800658e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006596:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800659a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800659c:	4b2a      	ldr	r3, [pc, #168]	; (8006648 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800659e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a0:	0a5b      	lsrs	r3, r3, #9
 80065a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065a6:	ee07 3a90 	vmov	s15, r3
 80065aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80065b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80065b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80065ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065c2:	ee17 2a90 	vmov	r2, s15
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80065ca:	4b1f      	ldr	r3, [pc, #124]	; (8006648 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ce:	0c1b      	lsrs	r3, r3, #16
 80065d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065d4:	ee07 3a90 	vmov	s15, r3
 80065d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80065e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80065e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80065e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065f0:	ee17 2a90 	vmov	r2, s15
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80065f8:	4b13      	ldr	r3, [pc, #76]	; (8006648 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065fc:	0e1b      	lsrs	r3, r3, #24
 80065fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006602:	ee07 3a90 	vmov	s15, r3
 8006606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800660a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800660e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006612:	edd7 6a07 	vldr	s13, [r7, #28]
 8006616:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800661a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800661e:	ee17 2a90 	vmov	r2, s15
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006626:	e008      	b.n	800663a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	609a      	str	r2, [r3, #8]
}
 800663a:	bf00      	nop
 800663c:	3724      	adds	r7, #36	; 0x24
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr
 8006646:	bf00      	nop
 8006648:	58024400 	.word	0x58024400
 800664c:	03d09000 	.word	0x03d09000
 8006650:	46000000 	.word	0x46000000
 8006654:	4c742400 	.word	0x4c742400
 8006658:	4a742400 	.word	0x4a742400
 800665c:	4af42400 	.word	0x4af42400

08006660 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006660:	b480      	push	{r7}
 8006662:	b089      	sub	sp, #36	; 0x24
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006668:	4ba1      	ldr	r3, [pc, #644]	; (80068f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800666a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800666c:	f003 0303 	and.w	r3, r3, #3
 8006670:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006672:	4b9f      	ldr	r3, [pc, #636]	; (80068f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006676:	0d1b      	lsrs	r3, r3, #20
 8006678:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800667c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800667e:	4b9c      	ldr	r3, [pc, #624]	; (80068f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006682:	0a1b      	lsrs	r3, r3, #8
 8006684:	f003 0301 	and.w	r3, r3, #1
 8006688:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800668a:	4b99      	ldr	r3, [pc, #612]	; (80068f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800668c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800668e:	08db      	lsrs	r3, r3, #3
 8006690:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006694:	693a      	ldr	r2, [r7, #16]
 8006696:	fb02 f303 	mul.w	r3, r2, r3
 800669a:	ee07 3a90 	vmov	s15, r3
 800669e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f000 8111 	beq.w	80068d0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	f000 8083 	beq.w	80067bc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	f200 80a1 	bhi.w	8006800 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d003      	beq.n	80066cc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d056      	beq.n	8006778 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80066ca:	e099      	b.n	8006800 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066cc:	4b88      	ldr	r3, [pc, #544]	; (80068f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0320 	and.w	r3, r3, #32
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d02d      	beq.n	8006734 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80066d8:	4b85      	ldr	r3, [pc, #532]	; (80068f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	08db      	lsrs	r3, r3, #3
 80066de:	f003 0303 	and.w	r3, r3, #3
 80066e2:	4a84      	ldr	r2, [pc, #528]	; (80068f4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80066e4:	fa22 f303 	lsr.w	r3, r2, r3
 80066e8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	ee07 3a90 	vmov	s15, r3
 80066f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	ee07 3a90 	vmov	s15, r3
 80066fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006702:	4b7b      	ldr	r3, [pc, #492]	; (80068f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800670a:	ee07 3a90 	vmov	s15, r3
 800670e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006712:	ed97 6a03 	vldr	s12, [r7, #12]
 8006716:	eddf 5a78 	vldr	s11, [pc, #480]	; 80068f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800671a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800671e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006722:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800672a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800672e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006732:	e087      	b.n	8006844 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	ee07 3a90 	vmov	s15, r3
 800673a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800673e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80068fc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006746:	4b6a      	ldr	r3, [pc, #424]	; (80068f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800674e:	ee07 3a90 	vmov	s15, r3
 8006752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006756:	ed97 6a03 	vldr	s12, [r7, #12]
 800675a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80068f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800675e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006762:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006766:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800676a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800676e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006772:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006776:	e065      	b.n	8006844 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	ee07 3a90 	vmov	s15, r3
 800677e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006782:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006900 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006786:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800678a:	4b59      	ldr	r3, [pc, #356]	; (80068f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800678c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006792:	ee07 3a90 	vmov	s15, r3
 8006796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800679a:	ed97 6a03 	vldr	s12, [r7, #12]
 800679e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80068f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80067a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80067ba:	e043      	b.n	8006844 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	ee07 3a90 	vmov	s15, r3
 80067c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067c6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006904 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80067ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067ce:	4b48      	ldr	r3, [pc, #288]	; (80068f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067d6:	ee07 3a90 	vmov	s15, r3
 80067da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067de:	ed97 6a03 	vldr	s12, [r7, #12]
 80067e2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80068f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80067e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80067fe:	e021      	b.n	8006844 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	ee07 3a90 	vmov	s15, r3
 8006806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800680a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006900 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800680e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006812:	4b37      	ldr	r3, [pc, #220]	; (80068f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800681a:	ee07 3a90 	vmov	s15, r3
 800681e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006822:	ed97 6a03 	vldr	s12, [r7, #12]
 8006826:	eddf 5a34 	vldr	s11, [pc, #208]	; 80068f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800682a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800682e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006832:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800683a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800683e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006842:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006844:	4b2a      	ldr	r3, [pc, #168]	; (80068f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006848:	0a5b      	lsrs	r3, r3, #9
 800684a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800684e:	ee07 3a90 	vmov	s15, r3
 8006852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006856:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800685a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800685e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006862:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006866:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800686a:	ee17 2a90 	vmov	r2, s15
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006872:	4b1f      	ldr	r3, [pc, #124]	; (80068f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006876:	0c1b      	lsrs	r3, r3, #16
 8006878:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800687c:	ee07 3a90 	vmov	s15, r3
 8006880:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006884:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006888:	ee37 7a87 	vadd.f32	s14, s15, s14
 800688c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006890:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006894:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006898:	ee17 2a90 	vmov	r2, s15
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80068a0:	4b13      	ldr	r3, [pc, #76]	; (80068f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a4:	0e1b      	lsrs	r3, r3, #24
 80068a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068aa:	ee07 3a90 	vmov	s15, r3
 80068ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80068be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068c6:	ee17 2a90 	vmov	r2, s15
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80068ce:	e008      	b.n	80068e2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	609a      	str	r2, [r3, #8]
}
 80068e2:	bf00      	nop
 80068e4:	3724      	adds	r7, #36	; 0x24
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	58024400 	.word	0x58024400
 80068f4:	03d09000 	.word	0x03d09000
 80068f8:	46000000 	.word	0x46000000
 80068fc:	4c742400 	.word	0x4c742400
 8006900:	4a742400 	.word	0x4a742400
 8006904:	4af42400 	.word	0x4af42400

08006908 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006912:	2300      	movs	r3, #0
 8006914:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006916:	4b53      	ldr	r3, [pc, #332]	; (8006a64 <RCCEx_PLL2_Config+0x15c>)
 8006918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800691a:	f003 0303 	and.w	r3, r3, #3
 800691e:	2b03      	cmp	r3, #3
 8006920:	d101      	bne.n	8006926 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e099      	b.n	8006a5a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006926:	4b4f      	ldr	r3, [pc, #316]	; (8006a64 <RCCEx_PLL2_Config+0x15c>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a4e      	ldr	r2, [pc, #312]	; (8006a64 <RCCEx_PLL2_Config+0x15c>)
 800692c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006930:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006932:	f7fa fda3 	bl	800147c <HAL_GetTick>
 8006936:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006938:	e008      	b.n	800694c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800693a:	f7fa fd9f 	bl	800147c <HAL_GetTick>
 800693e:	4602      	mov	r2, r0
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	2b02      	cmp	r3, #2
 8006946:	d901      	bls.n	800694c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006948:	2303      	movs	r3, #3
 800694a:	e086      	b.n	8006a5a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800694c:	4b45      	ldr	r3, [pc, #276]	; (8006a64 <RCCEx_PLL2_Config+0x15c>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006954:	2b00      	cmp	r3, #0
 8006956:	d1f0      	bne.n	800693a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006958:	4b42      	ldr	r3, [pc, #264]	; (8006a64 <RCCEx_PLL2_Config+0x15c>)
 800695a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800695c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	031b      	lsls	r3, r3, #12
 8006966:	493f      	ldr	r1, [pc, #252]	; (8006a64 <RCCEx_PLL2_Config+0x15c>)
 8006968:	4313      	orrs	r3, r2
 800696a:	628b      	str	r3, [r1, #40]	; 0x28
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	3b01      	subs	r3, #1
 8006972:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	3b01      	subs	r3, #1
 800697c:	025b      	lsls	r3, r3, #9
 800697e:	b29b      	uxth	r3, r3
 8006980:	431a      	orrs	r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	3b01      	subs	r3, #1
 8006988:	041b      	lsls	r3, r3, #16
 800698a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800698e:	431a      	orrs	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	3b01      	subs	r3, #1
 8006996:	061b      	lsls	r3, r3, #24
 8006998:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800699c:	4931      	ldr	r1, [pc, #196]	; (8006a64 <RCCEx_PLL2_Config+0x15c>)
 800699e:	4313      	orrs	r3, r2
 80069a0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80069a2:	4b30      	ldr	r3, [pc, #192]	; (8006a64 <RCCEx_PLL2_Config+0x15c>)
 80069a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	695b      	ldr	r3, [r3, #20]
 80069ae:	492d      	ldr	r1, [pc, #180]	; (8006a64 <RCCEx_PLL2_Config+0x15c>)
 80069b0:	4313      	orrs	r3, r2
 80069b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80069b4:	4b2b      	ldr	r3, [pc, #172]	; (8006a64 <RCCEx_PLL2_Config+0x15c>)
 80069b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b8:	f023 0220 	bic.w	r2, r3, #32
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	699b      	ldr	r3, [r3, #24]
 80069c0:	4928      	ldr	r1, [pc, #160]	; (8006a64 <RCCEx_PLL2_Config+0x15c>)
 80069c2:	4313      	orrs	r3, r2
 80069c4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80069c6:	4b27      	ldr	r3, [pc, #156]	; (8006a64 <RCCEx_PLL2_Config+0x15c>)
 80069c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ca:	4a26      	ldr	r2, [pc, #152]	; (8006a64 <RCCEx_PLL2_Config+0x15c>)
 80069cc:	f023 0310 	bic.w	r3, r3, #16
 80069d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80069d2:	4b24      	ldr	r3, [pc, #144]	; (8006a64 <RCCEx_PLL2_Config+0x15c>)
 80069d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069d6:	4b24      	ldr	r3, [pc, #144]	; (8006a68 <RCCEx_PLL2_Config+0x160>)
 80069d8:	4013      	ands	r3, r2
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	69d2      	ldr	r2, [r2, #28]
 80069de:	00d2      	lsls	r2, r2, #3
 80069e0:	4920      	ldr	r1, [pc, #128]	; (8006a64 <RCCEx_PLL2_Config+0x15c>)
 80069e2:	4313      	orrs	r3, r2
 80069e4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80069e6:	4b1f      	ldr	r3, [pc, #124]	; (8006a64 <RCCEx_PLL2_Config+0x15c>)
 80069e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ea:	4a1e      	ldr	r2, [pc, #120]	; (8006a64 <RCCEx_PLL2_Config+0x15c>)
 80069ec:	f043 0310 	orr.w	r3, r3, #16
 80069f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d106      	bne.n	8006a06 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80069f8:	4b1a      	ldr	r3, [pc, #104]	; (8006a64 <RCCEx_PLL2_Config+0x15c>)
 80069fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069fc:	4a19      	ldr	r2, [pc, #100]	; (8006a64 <RCCEx_PLL2_Config+0x15c>)
 80069fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a02:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006a04:	e00f      	b.n	8006a26 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d106      	bne.n	8006a1a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006a0c:	4b15      	ldr	r3, [pc, #84]	; (8006a64 <RCCEx_PLL2_Config+0x15c>)
 8006a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a10:	4a14      	ldr	r2, [pc, #80]	; (8006a64 <RCCEx_PLL2_Config+0x15c>)
 8006a12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006a18:	e005      	b.n	8006a26 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006a1a:	4b12      	ldr	r3, [pc, #72]	; (8006a64 <RCCEx_PLL2_Config+0x15c>)
 8006a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a1e:	4a11      	ldr	r2, [pc, #68]	; (8006a64 <RCCEx_PLL2_Config+0x15c>)
 8006a20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006a24:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006a26:	4b0f      	ldr	r3, [pc, #60]	; (8006a64 <RCCEx_PLL2_Config+0x15c>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a0e      	ldr	r2, [pc, #56]	; (8006a64 <RCCEx_PLL2_Config+0x15c>)
 8006a2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a32:	f7fa fd23 	bl	800147c <HAL_GetTick>
 8006a36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006a38:	e008      	b.n	8006a4c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006a3a:	f7fa fd1f 	bl	800147c <HAL_GetTick>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	d901      	bls.n	8006a4c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	e006      	b.n	8006a5a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006a4c:	4b05      	ldr	r3, [pc, #20]	; (8006a64 <RCCEx_PLL2_Config+0x15c>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d0f0      	beq.n	8006a3a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3710      	adds	r7, #16
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	58024400 	.word	0x58024400
 8006a68:	ffff0007 	.word	0xffff0007

08006a6c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a76:	2300      	movs	r3, #0
 8006a78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006a7a:	4b53      	ldr	r3, [pc, #332]	; (8006bc8 <RCCEx_PLL3_Config+0x15c>)
 8006a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a7e:	f003 0303 	and.w	r3, r3, #3
 8006a82:	2b03      	cmp	r3, #3
 8006a84:	d101      	bne.n	8006a8a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e099      	b.n	8006bbe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006a8a:	4b4f      	ldr	r3, [pc, #316]	; (8006bc8 <RCCEx_PLL3_Config+0x15c>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a4e      	ldr	r2, [pc, #312]	; (8006bc8 <RCCEx_PLL3_Config+0x15c>)
 8006a90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a96:	f7fa fcf1 	bl	800147c <HAL_GetTick>
 8006a9a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006a9c:	e008      	b.n	8006ab0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006a9e:	f7fa fced 	bl	800147c <HAL_GetTick>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	1ad3      	subs	r3, r2, r3
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d901      	bls.n	8006ab0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006aac:	2303      	movs	r3, #3
 8006aae:	e086      	b.n	8006bbe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ab0:	4b45      	ldr	r3, [pc, #276]	; (8006bc8 <RCCEx_PLL3_Config+0x15c>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1f0      	bne.n	8006a9e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006abc:	4b42      	ldr	r3, [pc, #264]	; (8006bc8 <RCCEx_PLL3_Config+0x15c>)
 8006abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	051b      	lsls	r3, r3, #20
 8006aca:	493f      	ldr	r1, [pc, #252]	; (8006bc8 <RCCEx_PLL3_Config+0x15c>)
 8006acc:	4313      	orrs	r3, r2
 8006ace:	628b      	str	r3, [r1, #40]	; 0x28
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	3b01      	subs	r3, #1
 8006ad6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	3b01      	subs	r3, #1
 8006ae0:	025b      	lsls	r3, r3, #9
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	431a      	orrs	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	3b01      	subs	r3, #1
 8006aec:	041b      	lsls	r3, r3, #16
 8006aee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006af2:	431a      	orrs	r2, r3
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	3b01      	subs	r3, #1
 8006afa:	061b      	lsls	r3, r3, #24
 8006afc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006b00:	4931      	ldr	r1, [pc, #196]	; (8006bc8 <RCCEx_PLL3_Config+0x15c>)
 8006b02:	4313      	orrs	r3, r2
 8006b04:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006b06:	4b30      	ldr	r3, [pc, #192]	; (8006bc8 <RCCEx_PLL3_Config+0x15c>)
 8006b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b0a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	695b      	ldr	r3, [r3, #20]
 8006b12:	492d      	ldr	r1, [pc, #180]	; (8006bc8 <RCCEx_PLL3_Config+0x15c>)
 8006b14:	4313      	orrs	r3, r2
 8006b16:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006b18:	4b2b      	ldr	r3, [pc, #172]	; (8006bc8 <RCCEx_PLL3_Config+0x15c>)
 8006b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b1c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	699b      	ldr	r3, [r3, #24]
 8006b24:	4928      	ldr	r1, [pc, #160]	; (8006bc8 <RCCEx_PLL3_Config+0x15c>)
 8006b26:	4313      	orrs	r3, r2
 8006b28:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006b2a:	4b27      	ldr	r3, [pc, #156]	; (8006bc8 <RCCEx_PLL3_Config+0x15c>)
 8006b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b2e:	4a26      	ldr	r2, [pc, #152]	; (8006bc8 <RCCEx_PLL3_Config+0x15c>)
 8006b30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006b36:	4b24      	ldr	r3, [pc, #144]	; (8006bc8 <RCCEx_PLL3_Config+0x15c>)
 8006b38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b3a:	4b24      	ldr	r3, [pc, #144]	; (8006bcc <RCCEx_PLL3_Config+0x160>)
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	69d2      	ldr	r2, [r2, #28]
 8006b42:	00d2      	lsls	r2, r2, #3
 8006b44:	4920      	ldr	r1, [pc, #128]	; (8006bc8 <RCCEx_PLL3_Config+0x15c>)
 8006b46:	4313      	orrs	r3, r2
 8006b48:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006b4a:	4b1f      	ldr	r3, [pc, #124]	; (8006bc8 <RCCEx_PLL3_Config+0x15c>)
 8006b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b4e:	4a1e      	ldr	r2, [pc, #120]	; (8006bc8 <RCCEx_PLL3_Config+0x15c>)
 8006b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d106      	bne.n	8006b6a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006b5c:	4b1a      	ldr	r3, [pc, #104]	; (8006bc8 <RCCEx_PLL3_Config+0x15c>)
 8006b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b60:	4a19      	ldr	r2, [pc, #100]	; (8006bc8 <RCCEx_PLL3_Config+0x15c>)
 8006b62:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006b66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006b68:	e00f      	b.n	8006b8a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d106      	bne.n	8006b7e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006b70:	4b15      	ldr	r3, [pc, #84]	; (8006bc8 <RCCEx_PLL3_Config+0x15c>)
 8006b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b74:	4a14      	ldr	r2, [pc, #80]	; (8006bc8 <RCCEx_PLL3_Config+0x15c>)
 8006b76:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006b7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006b7c:	e005      	b.n	8006b8a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006b7e:	4b12      	ldr	r3, [pc, #72]	; (8006bc8 <RCCEx_PLL3_Config+0x15c>)
 8006b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b82:	4a11      	ldr	r2, [pc, #68]	; (8006bc8 <RCCEx_PLL3_Config+0x15c>)
 8006b84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b88:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006b8a:	4b0f      	ldr	r3, [pc, #60]	; (8006bc8 <RCCEx_PLL3_Config+0x15c>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a0e      	ldr	r2, [pc, #56]	; (8006bc8 <RCCEx_PLL3_Config+0x15c>)
 8006b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b96:	f7fa fc71 	bl	800147c <HAL_GetTick>
 8006b9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006b9c:	e008      	b.n	8006bb0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006b9e:	f7fa fc6d 	bl	800147c <HAL_GetTick>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	2b02      	cmp	r3, #2
 8006baa:	d901      	bls.n	8006bb0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006bac:	2303      	movs	r3, #3
 8006bae:	e006      	b.n	8006bbe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006bb0:	4b05      	ldr	r3, [pc, #20]	; (8006bc8 <RCCEx_PLL3_Config+0x15c>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d0f0      	beq.n	8006b9e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3710      	adds	r7, #16
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	58024400 	.word	0x58024400
 8006bcc:	ffff0007 	.word	0xffff0007

08006bd0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d101      	bne.n	8006be2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	e049      	b.n	8006c76 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d106      	bne.n	8006bfc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f7fa f95c 	bl	8000eb4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2202      	movs	r2, #2
 8006c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	3304      	adds	r3, #4
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	4610      	mov	r0, r2
 8006c10:	f000 fb1e 	bl	8007250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3708      	adds	r7, #8
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
	...

08006c80 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d104      	bne.n	8006c9a <HAL_TIM_IC_Start+0x1a>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	e023      	b.n	8006ce2 <HAL_TIM_IC_Start+0x62>
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	2b04      	cmp	r3, #4
 8006c9e:	d104      	bne.n	8006caa <HAL_TIM_IC_Start+0x2a>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	e01b      	b.n	8006ce2 <HAL_TIM_IC_Start+0x62>
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	2b08      	cmp	r3, #8
 8006cae:	d104      	bne.n	8006cba <HAL_TIM_IC_Start+0x3a>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	e013      	b.n	8006ce2 <HAL_TIM_IC_Start+0x62>
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	2b0c      	cmp	r3, #12
 8006cbe:	d104      	bne.n	8006cca <HAL_TIM_IC_Start+0x4a>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	e00b      	b.n	8006ce2 <HAL_TIM_IC_Start+0x62>
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	2b10      	cmp	r3, #16
 8006cce:	d104      	bne.n	8006cda <HAL_TIM_IC_Start+0x5a>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	e003      	b.n	8006ce2 <HAL_TIM_IC_Start+0x62>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d104      	bne.n	8006cf4 <HAL_TIM_IC_Start+0x74>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	e013      	b.n	8006d1c <HAL_TIM_IC_Start+0x9c>
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	2b04      	cmp	r3, #4
 8006cf8:	d104      	bne.n	8006d04 <HAL_TIM_IC_Start+0x84>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	e00b      	b.n	8006d1c <HAL_TIM_IC_Start+0x9c>
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	2b08      	cmp	r3, #8
 8006d08:	d104      	bne.n	8006d14 <HAL_TIM_IC_Start+0x94>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	e003      	b.n	8006d1c <HAL_TIM_IC_Start+0x9c>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d1e:	7bfb      	ldrb	r3, [r7, #15]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d102      	bne.n	8006d2a <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006d24:	7bbb      	ldrb	r3, [r7, #14]
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d001      	beq.n	8006d2e <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e097      	b.n	8006e5e <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d104      	bne.n	8006d3e <HAL_TIM_IC_Start+0xbe>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2202      	movs	r2, #2
 8006d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d3c:	e023      	b.n	8006d86 <HAL_TIM_IC_Start+0x106>
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	2b04      	cmp	r3, #4
 8006d42:	d104      	bne.n	8006d4e <HAL_TIM_IC_Start+0xce>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2202      	movs	r2, #2
 8006d48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d4c:	e01b      	b.n	8006d86 <HAL_TIM_IC_Start+0x106>
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	2b08      	cmp	r3, #8
 8006d52:	d104      	bne.n	8006d5e <HAL_TIM_IC_Start+0xde>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2202      	movs	r2, #2
 8006d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d5c:	e013      	b.n	8006d86 <HAL_TIM_IC_Start+0x106>
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	2b0c      	cmp	r3, #12
 8006d62:	d104      	bne.n	8006d6e <HAL_TIM_IC_Start+0xee>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2202      	movs	r2, #2
 8006d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d6c:	e00b      	b.n	8006d86 <HAL_TIM_IC_Start+0x106>
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	2b10      	cmp	r3, #16
 8006d72:	d104      	bne.n	8006d7e <HAL_TIM_IC_Start+0xfe>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2202      	movs	r2, #2
 8006d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d7c:	e003      	b.n	8006d86 <HAL_TIM_IC_Start+0x106>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2202      	movs	r2, #2
 8006d82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d104      	bne.n	8006d96 <HAL_TIM_IC_Start+0x116>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2202      	movs	r2, #2
 8006d90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d94:	e013      	b.n	8006dbe <HAL_TIM_IC_Start+0x13e>
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	2b04      	cmp	r3, #4
 8006d9a:	d104      	bne.n	8006da6 <HAL_TIM_IC_Start+0x126>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2202      	movs	r2, #2
 8006da0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006da4:	e00b      	b.n	8006dbe <HAL_TIM_IC_Start+0x13e>
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	2b08      	cmp	r3, #8
 8006daa:	d104      	bne.n	8006db6 <HAL_TIM_IC_Start+0x136>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2202      	movs	r2, #2
 8006db0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006db4:	e003      	b.n	8006dbe <HAL_TIM_IC_Start+0x13e>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2202      	movs	r2, #2
 8006dba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	6839      	ldr	r1, [r7, #0]
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f000 fc06 	bl	80075d8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a25      	ldr	r2, [pc, #148]	; (8006e68 <HAL_TIM_IC_Start+0x1e8>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d022      	beq.n	8006e1c <HAL_TIM_IC_Start+0x19c>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dde:	d01d      	beq.n	8006e1c <HAL_TIM_IC_Start+0x19c>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a21      	ldr	r2, [pc, #132]	; (8006e6c <HAL_TIM_IC_Start+0x1ec>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d018      	beq.n	8006e1c <HAL_TIM_IC_Start+0x19c>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a20      	ldr	r2, [pc, #128]	; (8006e70 <HAL_TIM_IC_Start+0x1f0>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d013      	beq.n	8006e1c <HAL_TIM_IC_Start+0x19c>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a1e      	ldr	r2, [pc, #120]	; (8006e74 <HAL_TIM_IC_Start+0x1f4>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d00e      	beq.n	8006e1c <HAL_TIM_IC_Start+0x19c>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a1d      	ldr	r2, [pc, #116]	; (8006e78 <HAL_TIM_IC_Start+0x1f8>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d009      	beq.n	8006e1c <HAL_TIM_IC_Start+0x19c>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a1b      	ldr	r2, [pc, #108]	; (8006e7c <HAL_TIM_IC_Start+0x1fc>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d004      	beq.n	8006e1c <HAL_TIM_IC_Start+0x19c>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a1a      	ldr	r2, [pc, #104]	; (8006e80 <HAL_TIM_IC_Start+0x200>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d115      	bne.n	8006e48 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	689a      	ldr	r2, [r3, #8]
 8006e22:	4b18      	ldr	r3, [pc, #96]	; (8006e84 <HAL_TIM_IC_Start+0x204>)
 8006e24:	4013      	ands	r3, r2
 8006e26:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	2b06      	cmp	r3, #6
 8006e2c:	d015      	beq.n	8006e5a <HAL_TIM_IC_Start+0x1da>
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e34:	d011      	beq.n	8006e5a <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f042 0201 	orr.w	r2, r2, #1
 8006e44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e46:	e008      	b.n	8006e5a <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f042 0201 	orr.w	r2, r2, #1
 8006e56:	601a      	str	r2, [r3, #0]
 8006e58:	e000      	b.n	8006e5c <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3710      	adds	r7, #16
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	40010000 	.word	0x40010000
 8006e6c:	40000400 	.word	0x40000400
 8006e70:	40000800 	.word	0x40000800
 8006e74:	40000c00 	.word	0x40000c00
 8006e78:	40010400 	.word	0x40010400
 8006e7c:	40001800 	.word	0x40001800
 8006e80:	40014000 	.word	0x40014000
 8006e84:	00010007 	.word	0x00010007

08006e88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	f003 0302 	and.w	r3, r3, #2
 8006e9a:	2b02      	cmp	r3, #2
 8006e9c:	d122      	bne.n	8006ee4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	f003 0302 	and.w	r3, r3, #2
 8006ea8:	2b02      	cmp	r3, #2
 8006eaa:	d11b      	bne.n	8006ee4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f06f 0202 	mvn.w	r2, #2
 8006eb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	699b      	ldr	r3, [r3, #24]
 8006ec2:	f003 0303 	and.w	r3, r3, #3
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d003      	beq.n	8006ed2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f7f9 fef2 	bl	8000cb4 <HAL_TIM_IC_CaptureCallback>
 8006ed0:	e005      	b.n	8006ede <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 f99d 	bl	8007212 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 f9a4 	bl	8007226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	f003 0304 	and.w	r3, r3, #4
 8006eee:	2b04      	cmp	r3, #4
 8006ef0:	d122      	bne.n	8006f38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	f003 0304 	and.w	r3, r3, #4
 8006efc:	2b04      	cmp	r3, #4
 8006efe:	d11b      	bne.n	8006f38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f06f 0204 	mvn.w	r2, #4
 8006f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2202      	movs	r2, #2
 8006f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	699b      	ldr	r3, [r3, #24]
 8006f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d003      	beq.n	8006f26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f7f9 fec8 	bl	8000cb4 <HAL_TIM_IC_CaptureCallback>
 8006f24:	e005      	b.n	8006f32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 f973 	bl	8007212 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 f97a 	bl	8007226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	f003 0308 	and.w	r3, r3, #8
 8006f42:	2b08      	cmp	r3, #8
 8006f44:	d122      	bne.n	8006f8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	f003 0308 	and.w	r3, r3, #8
 8006f50:	2b08      	cmp	r3, #8
 8006f52:	d11b      	bne.n	8006f8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f06f 0208 	mvn.w	r2, #8
 8006f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2204      	movs	r2, #4
 8006f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	69db      	ldr	r3, [r3, #28]
 8006f6a:	f003 0303 	and.w	r3, r3, #3
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d003      	beq.n	8006f7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f7f9 fe9e 	bl	8000cb4 <HAL_TIM_IC_CaptureCallback>
 8006f78:	e005      	b.n	8006f86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 f949 	bl	8007212 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 f950 	bl	8007226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	f003 0310 	and.w	r3, r3, #16
 8006f96:	2b10      	cmp	r3, #16
 8006f98:	d122      	bne.n	8006fe0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	f003 0310 	and.w	r3, r3, #16
 8006fa4:	2b10      	cmp	r3, #16
 8006fa6:	d11b      	bne.n	8006fe0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f06f 0210 	mvn.w	r2, #16
 8006fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2208      	movs	r2, #8
 8006fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	69db      	ldr	r3, [r3, #28]
 8006fbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d003      	beq.n	8006fce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f7f9 fe74 	bl	8000cb4 <HAL_TIM_IC_CaptureCallback>
 8006fcc:	e005      	b.n	8006fda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 f91f 	bl	8007212 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 f926 	bl	8007226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	f003 0301 	and.w	r3, r3, #1
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d10e      	bne.n	800700c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	f003 0301 	and.w	r3, r3, #1
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d107      	bne.n	800700c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f06f 0201 	mvn.w	r2, #1
 8007004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 f8f9 	bl	80071fe <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007016:	2b80      	cmp	r3, #128	; 0x80
 8007018:	d10e      	bne.n	8007038 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007024:	2b80      	cmp	r3, #128	; 0x80
 8007026:	d107      	bne.n	8007038 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 fb8e 	bl	8007754 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	691b      	ldr	r3, [r3, #16]
 800703e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007042:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007046:	d10e      	bne.n	8007066 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	68db      	ldr	r3, [r3, #12]
 800704e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007052:	2b80      	cmp	r3, #128	; 0x80
 8007054:	d107      	bne.n	8007066 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800705e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 fb81 	bl	8007768 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007070:	2b40      	cmp	r3, #64	; 0x40
 8007072:	d10e      	bne.n	8007092 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800707e:	2b40      	cmp	r3, #64	; 0x40
 8007080:	d107      	bne.n	8007092 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800708a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 f8d4 	bl	800723a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	f003 0320 	and.w	r3, r3, #32
 800709c:	2b20      	cmp	r3, #32
 800709e:	d10e      	bne.n	80070be <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	f003 0320 	and.w	r3, r3, #32
 80070aa:	2b20      	cmp	r3, #32
 80070ac:	d107      	bne.n	80070be <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f06f 0220 	mvn.w	r2, #32
 80070b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 fb41 	bl	8007740 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80070be:	bf00      	nop
 80070c0:	3708      	adds	r7, #8
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}

080070c6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80070c6:	b580      	push	{r7, lr}
 80070c8:	b086      	sub	sp, #24
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	60f8      	str	r0, [r7, #12]
 80070ce:	60b9      	str	r1, [r7, #8]
 80070d0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070d2:	2300      	movs	r3, #0
 80070d4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d101      	bne.n	80070e4 <HAL_TIM_IC_ConfigChannel+0x1e>
 80070e0:	2302      	movs	r3, #2
 80070e2:	e088      	b.n	80071f6 <HAL_TIM_IC_ConfigChannel+0x130>
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d11b      	bne.n	800712a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6818      	ldr	r0, [r3, #0]
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	6819      	ldr	r1, [r3, #0]
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	685a      	ldr	r2, [r3, #4]
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	f000 f93f 	bl	8007384 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	699a      	ldr	r2, [r3, #24]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f022 020c 	bic.w	r2, r2, #12
 8007114:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	6999      	ldr	r1, [r3, #24]
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	689a      	ldr	r2, [r3, #8]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	430a      	orrs	r2, r1
 8007126:	619a      	str	r2, [r3, #24]
 8007128:	e060      	b.n	80071ec <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2b04      	cmp	r3, #4
 800712e:	d11c      	bne.n	800716a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6818      	ldr	r0, [r3, #0]
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	6819      	ldr	r1, [r3, #0]
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	685a      	ldr	r2, [r3, #4]
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	f000 f994 	bl	800746c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	699a      	ldr	r2, [r3, #24]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007152:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	6999      	ldr	r1, [r3, #24]
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	021a      	lsls	r2, r3, #8
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	430a      	orrs	r2, r1
 8007166:	619a      	str	r2, [r3, #24]
 8007168:	e040      	b.n	80071ec <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2b08      	cmp	r3, #8
 800716e:	d11b      	bne.n	80071a8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6818      	ldr	r0, [r3, #0]
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	6819      	ldr	r1, [r3, #0]
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	685a      	ldr	r2, [r3, #4]
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	f000 f9b1 	bl	80074e6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	69da      	ldr	r2, [r3, #28]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f022 020c 	bic.w	r2, r2, #12
 8007192:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	69d9      	ldr	r1, [r3, #28]
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	689a      	ldr	r2, [r3, #8]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	430a      	orrs	r2, r1
 80071a4:	61da      	str	r2, [r3, #28]
 80071a6:	e021      	b.n	80071ec <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2b0c      	cmp	r3, #12
 80071ac:	d11c      	bne.n	80071e8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6818      	ldr	r0, [r3, #0]
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	6819      	ldr	r1, [r3, #0]
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	685a      	ldr	r2, [r3, #4]
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	f000 f9ce 	bl	800755e <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	69da      	ldr	r2, [r3, #28]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80071d0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	69d9      	ldr	r1, [r3, #28]
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	021a      	lsls	r2, r3, #8
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	430a      	orrs	r2, r1
 80071e4:	61da      	str	r2, [r3, #28]
 80071e6:	e001      	b.n	80071ec <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80071f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3718      	adds	r7, #24
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071fe:	b480      	push	{r7}
 8007200:	b083      	sub	sp, #12
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007206:	bf00      	nop
 8007208:	370c      	adds	r7, #12
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr

08007212 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007212:	b480      	push	{r7}
 8007214:	b083      	sub	sp, #12
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800721a:	bf00      	nop
 800721c:	370c      	adds	r7, #12
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr

08007226 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007226:	b480      	push	{r7}
 8007228:	b083      	sub	sp, #12
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800722e:	bf00      	nop
 8007230:	370c      	adds	r7, #12
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr

0800723a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800723a:	b480      	push	{r7}
 800723c:	b083      	sub	sp, #12
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007242:	bf00      	nop
 8007244:	370c      	adds	r7, #12
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr
	...

08007250 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007250:	b480      	push	{r7}
 8007252:	b085      	sub	sp, #20
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	4a40      	ldr	r2, [pc, #256]	; (8007364 <TIM_Base_SetConfig+0x114>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d013      	beq.n	8007290 <TIM_Base_SetConfig+0x40>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800726e:	d00f      	beq.n	8007290 <TIM_Base_SetConfig+0x40>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4a3d      	ldr	r2, [pc, #244]	; (8007368 <TIM_Base_SetConfig+0x118>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d00b      	beq.n	8007290 <TIM_Base_SetConfig+0x40>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	4a3c      	ldr	r2, [pc, #240]	; (800736c <TIM_Base_SetConfig+0x11c>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d007      	beq.n	8007290 <TIM_Base_SetConfig+0x40>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4a3b      	ldr	r2, [pc, #236]	; (8007370 <TIM_Base_SetConfig+0x120>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d003      	beq.n	8007290 <TIM_Base_SetConfig+0x40>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4a3a      	ldr	r2, [pc, #232]	; (8007374 <TIM_Base_SetConfig+0x124>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d108      	bne.n	80072a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007296:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	4313      	orrs	r3, r2
 80072a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4a2f      	ldr	r2, [pc, #188]	; (8007364 <TIM_Base_SetConfig+0x114>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d01f      	beq.n	80072ea <TIM_Base_SetConfig+0x9a>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072b0:	d01b      	beq.n	80072ea <TIM_Base_SetConfig+0x9a>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4a2c      	ldr	r2, [pc, #176]	; (8007368 <TIM_Base_SetConfig+0x118>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d017      	beq.n	80072ea <TIM_Base_SetConfig+0x9a>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a2b      	ldr	r2, [pc, #172]	; (800736c <TIM_Base_SetConfig+0x11c>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d013      	beq.n	80072ea <TIM_Base_SetConfig+0x9a>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4a2a      	ldr	r2, [pc, #168]	; (8007370 <TIM_Base_SetConfig+0x120>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d00f      	beq.n	80072ea <TIM_Base_SetConfig+0x9a>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4a29      	ldr	r2, [pc, #164]	; (8007374 <TIM_Base_SetConfig+0x124>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d00b      	beq.n	80072ea <TIM_Base_SetConfig+0x9a>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a28      	ldr	r2, [pc, #160]	; (8007378 <TIM_Base_SetConfig+0x128>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d007      	beq.n	80072ea <TIM_Base_SetConfig+0x9a>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4a27      	ldr	r2, [pc, #156]	; (800737c <TIM_Base_SetConfig+0x12c>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d003      	beq.n	80072ea <TIM_Base_SetConfig+0x9a>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4a26      	ldr	r2, [pc, #152]	; (8007380 <TIM_Base_SetConfig+0x130>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d108      	bne.n	80072fc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	68fa      	ldr	r2, [r7, #12]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	695b      	ldr	r3, [r3, #20]
 8007306:	4313      	orrs	r3, r2
 8007308:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	68fa      	ldr	r2, [r7, #12]
 800730e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	689a      	ldr	r2, [r3, #8]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4a10      	ldr	r2, [pc, #64]	; (8007364 <TIM_Base_SetConfig+0x114>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d00f      	beq.n	8007348 <TIM_Base_SetConfig+0xf8>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4a12      	ldr	r2, [pc, #72]	; (8007374 <TIM_Base_SetConfig+0x124>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d00b      	beq.n	8007348 <TIM_Base_SetConfig+0xf8>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	4a11      	ldr	r2, [pc, #68]	; (8007378 <TIM_Base_SetConfig+0x128>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d007      	beq.n	8007348 <TIM_Base_SetConfig+0xf8>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a10      	ldr	r2, [pc, #64]	; (800737c <TIM_Base_SetConfig+0x12c>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d003      	beq.n	8007348 <TIM_Base_SetConfig+0xf8>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4a0f      	ldr	r2, [pc, #60]	; (8007380 <TIM_Base_SetConfig+0x130>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d103      	bne.n	8007350 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	691a      	ldr	r2, [r3, #16]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2201      	movs	r2, #1
 8007354:	615a      	str	r2, [r3, #20]
}
 8007356:	bf00      	nop
 8007358:	3714      	adds	r7, #20
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	40010000 	.word	0x40010000
 8007368:	40000400 	.word	0x40000400
 800736c:	40000800 	.word	0x40000800
 8007370:	40000c00 	.word	0x40000c00
 8007374:	40010400 	.word	0x40010400
 8007378:	40014000 	.word	0x40014000
 800737c:	40014400 	.word	0x40014400
 8007380:	40014800 	.word	0x40014800

08007384 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007384:	b480      	push	{r7}
 8007386:	b087      	sub	sp, #28
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	607a      	str	r2, [r7, #4]
 8007390:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6a1b      	ldr	r3, [r3, #32]
 8007396:	f023 0201 	bic.w	r2, r3, #1
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	699b      	ldr	r3, [r3, #24]
 80073a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6a1b      	ldr	r3, [r3, #32]
 80073a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	4a28      	ldr	r2, [pc, #160]	; (8007450 <TIM_TI1_SetConfig+0xcc>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d01b      	beq.n	80073ea <TIM_TI1_SetConfig+0x66>
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073b8:	d017      	beq.n	80073ea <TIM_TI1_SetConfig+0x66>
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	4a25      	ldr	r2, [pc, #148]	; (8007454 <TIM_TI1_SetConfig+0xd0>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d013      	beq.n	80073ea <TIM_TI1_SetConfig+0x66>
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	4a24      	ldr	r2, [pc, #144]	; (8007458 <TIM_TI1_SetConfig+0xd4>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d00f      	beq.n	80073ea <TIM_TI1_SetConfig+0x66>
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	4a23      	ldr	r2, [pc, #140]	; (800745c <TIM_TI1_SetConfig+0xd8>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d00b      	beq.n	80073ea <TIM_TI1_SetConfig+0x66>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	4a22      	ldr	r2, [pc, #136]	; (8007460 <TIM_TI1_SetConfig+0xdc>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d007      	beq.n	80073ea <TIM_TI1_SetConfig+0x66>
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	4a21      	ldr	r2, [pc, #132]	; (8007464 <TIM_TI1_SetConfig+0xe0>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d003      	beq.n	80073ea <TIM_TI1_SetConfig+0x66>
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	4a20      	ldr	r2, [pc, #128]	; (8007468 <TIM_TI1_SetConfig+0xe4>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d101      	bne.n	80073ee <TIM_TI1_SetConfig+0x6a>
 80073ea:	2301      	movs	r3, #1
 80073ec:	e000      	b.n	80073f0 <TIM_TI1_SetConfig+0x6c>
 80073ee:	2300      	movs	r3, #0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d008      	beq.n	8007406 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	f023 0303 	bic.w	r3, r3, #3
 80073fa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80073fc:	697a      	ldr	r2, [r7, #20]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	4313      	orrs	r3, r2
 8007402:	617b      	str	r3, [r7, #20]
 8007404:	e003      	b.n	800740e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	f043 0301 	orr.w	r3, r3, #1
 800740c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007414:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	011b      	lsls	r3, r3, #4
 800741a:	b2db      	uxtb	r3, r3
 800741c:	697a      	ldr	r2, [r7, #20]
 800741e:	4313      	orrs	r3, r2
 8007420:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	f023 030a 	bic.w	r3, r3, #10
 8007428:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	f003 030a 	and.w	r3, r3, #10
 8007430:	693a      	ldr	r2, [r7, #16]
 8007432:	4313      	orrs	r3, r2
 8007434:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	697a      	ldr	r2, [r7, #20]
 800743a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	693a      	ldr	r2, [r7, #16]
 8007440:	621a      	str	r2, [r3, #32]
}
 8007442:	bf00      	nop
 8007444:	371c      	adds	r7, #28
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr
 800744e:	bf00      	nop
 8007450:	40010000 	.word	0x40010000
 8007454:	40000400 	.word	0x40000400
 8007458:	40000800 	.word	0x40000800
 800745c:	40000c00 	.word	0x40000c00
 8007460:	40010400 	.word	0x40010400
 8007464:	40001800 	.word	0x40001800
 8007468:	40014000 	.word	0x40014000

0800746c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800746c:	b480      	push	{r7}
 800746e:	b087      	sub	sp, #28
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	607a      	str	r2, [r7, #4]
 8007478:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	6a1b      	ldr	r3, [r3, #32]
 800747e:	f023 0210 	bic.w	r2, r3, #16
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	699b      	ldr	r3, [r3, #24]
 800748a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6a1b      	ldr	r3, [r3, #32]
 8007490:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007498:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	021b      	lsls	r3, r3, #8
 800749e:	697a      	ldr	r2, [r7, #20]
 80074a0:	4313      	orrs	r3, r2
 80074a2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80074aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	031b      	lsls	r3, r3, #12
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	697a      	ldr	r2, [r7, #20]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80074be:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	011b      	lsls	r3, r3, #4
 80074c4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80074c8:	693a      	ldr	r2, [r7, #16]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	697a      	ldr	r2, [r7, #20]
 80074d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	693a      	ldr	r2, [r7, #16]
 80074d8:	621a      	str	r2, [r3, #32]
}
 80074da:	bf00      	nop
 80074dc:	371c      	adds	r7, #28
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr

080074e6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80074e6:	b480      	push	{r7}
 80074e8:	b087      	sub	sp, #28
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	60f8      	str	r0, [r7, #12]
 80074ee:	60b9      	str	r1, [r7, #8]
 80074f0:	607a      	str	r2, [r7, #4]
 80074f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6a1b      	ldr	r3, [r3, #32]
 80074f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	69db      	ldr	r3, [r3, #28]
 8007504:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	6a1b      	ldr	r3, [r3, #32]
 800750a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	f023 0303 	bic.w	r3, r3, #3
 8007512:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007514:	697a      	ldr	r2, [r7, #20]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4313      	orrs	r3, r2
 800751a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007522:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	011b      	lsls	r3, r3, #4
 8007528:	b2db      	uxtb	r3, r3
 800752a:	697a      	ldr	r2, [r7, #20]
 800752c:	4313      	orrs	r3, r2
 800752e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007536:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	021b      	lsls	r3, r3, #8
 800753c:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007540:	693a      	ldr	r2, [r7, #16]
 8007542:	4313      	orrs	r3, r2
 8007544:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	697a      	ldr	r2, [r7, #20]
 800754a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	693a      	ldr	r2, [r7, #16]
 8007550:	621a      	str	r2, [r3, #32]
}
 8007552:	bf00      	nop
 8007554:	371c      	adds	r7, #28
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr

0800755e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800755e:	b480      	push	{r7}
 8007560:	b087      	sub	sp, #28
 8007562:	af00      	add	r7, sp, #0
 8007564:	60f8      	str	r0, [r7, #12]
 8007566:	60b9      	str	r1, [r7, #8]
 8007568:	607a      	str	r2, [r7, #4]
 800756a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6a1b      	ldr	r3, [r3, #32]
 8007570:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	69db      	ldr	r3, [r3, #28]
 800757c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6a1b      	ldr	r3, [r3, #32]
 8007582:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800758a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	021b      	lsls	r3, r3, #8
 8007590:	697a      	ldr	r2, [r7, #20]
 8007592:	4313      	orrs	r3, r2
 8007594:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800759c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	031b      	lsls	r3, r3, #12
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	697a      	ldr	r2, [r7, #20]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80075b0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	031b      	lsls	r3, r3, #12
 80075b6:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80075ba:	693a      	ldr	r2, [r7, #16]
 80075bc:	4313      	orrs	r3, r2
 80075be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	697a      	ldr	r2, [r7, #20]
 80075c4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	693a      	ldr	r2, [r7, #16]
 80075ca:	621a      	str	r2, [r3, #32]
}
 80075cc:	bf00      	nop
 80075ce:	371c      	adds	r7, #28
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075d8:	b480      	push	{r7}
 80075da:	b087      	sub	sp, #28
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	f003 031f 	and.w	r3, r3, #31
 80075ea:	2201      	movs	r2, #1
 80075ec:	fa02 f303 	lsl.w	r3, r2, r3
 80075f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6a1a      	ldr	r2, [r3, #32]
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	43db      	mvns	r3, r3
 80075fa:	401a      	ands	r2, r3
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6a1a      	ldr	r2, [r3, #32]
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	f003 031f 	and.w	r3, r3, #31
 800760a:	6879      	ldr	r1, [r7, #4]
 800760c:	fa01 f303 	lsl.w	r3, r1, r3
 8007610:	431a      	orrs	r2, r3
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	621a      	str	r2, [r3, #32]
}
 8007616:	bf00      	nop
 8007618:	371c      	adds	r7, #28
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr
	...

08007624 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007624:	b480      	push	{r7}
 8007626:	b085      	sub	sp, #20
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007634:	2b01      	cmp	r3, #1
 8007636:	d101      	bne.n	800763c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007638:	2302      	movs	r3, #2
 800763a:	e06d      	b.n	8007718 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2202      	movs	r2, #2
 8007648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a30      	ldr	r2, [pc, #192]	; (8007724 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d004      	beq.n	8007670 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a2f      	ldr	r2, [pc, #188]	; (8007728 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d108      	bne.n	8007682 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007676:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	68fa      	ldr	r2, [r7, #12]
 800767e:	4313      	orrs	r3, r2
 8007680:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007688:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	68fa      	ldr	r2, [r7, #12]
 8007690:	4313      	orrs	r3, r2
 8007692:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	68fa      	ldr	r2, [r7, #12]
 800769a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a20      	ldr	r2, [pc, #128]	; (8007724 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d022      	beq.n	80076ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076ae:	d01d      	beq.n	80076ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a1d      	ldr	r2, [pc, #116]	; (800772c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d018      	beq.n	80076ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a1c      	ldr	r2, [pc, #112]	; (8007730 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d013      	beq.n	80076ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a1a      	ldr	r2, [pc, #104]	; (8007734 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d00e      	beq.n	80076ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a15      	ldr	r2, [pc, #84]	; (8007728 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d009      	beq.n	80076ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a16      	ldr	r2, [pc, #88]	; (8007738 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d004      	beq.n	80076ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a15      	ldr	r2, [pc, #84]	; (800773c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d10c      	bne.n	8007706 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	68ba      	ldr	r2, [r7, #8]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	68ba      	ldr	r2, [r7, #8]
 8007704:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2201      	movs	r2, #1
 800770a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007716:	2300      	movs	r3, #0
}
 8007718:	4618      	mov	r0, r3
 800771a:	3714      	adds	r7, #20
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr
 8007724:	40010000 	.word	0x40010000
 8007728:	40010400 	.word	0x40010400
 800772c:	40000400 	.word	0x40000400
 8007730:	40000800 	.word	0x40000800
 8007734:	40000c00 	.word	0x40000c00
 8007738:	40001800 	.word	0x40001800
 800773c:	40014000 	.word	0x40014000

08007740 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007748:	bf00      	nop
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800775c:	bf00      	nop
 800775e:	370c      	adds	r7, #12
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007770:	bf00      	nop
 8007772:	370c      	adds	r7, #12
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b082      	sub	sp, #8
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d101      	bne.n	800778e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	e042      	b.n	8007814 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007794:	2b00      	cmp	r3, #0
 8007796:	d106      	bne.n	80077a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f7f9 fc07 	bl	8000fb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2224      	movs	r2, #36	; 0x24
 80077aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f022 0201 	bic.w	r2, r2, #1
 80077bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 f8c2 	bl	8007948 <UART_SetConfig>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d101      	bne.n	80077ce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	e022      	b.n	8007814 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d002      	beq.n	80077dc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 fe1e 	bl	8008418 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	685a      	ldr	r2, [r3, #4]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80077ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	689a      	ldr	r2, [r3, #8]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80077fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f042 0201 	orr.w	r2, r2, #1
 800780a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 fea5 	bl	800855c <UART_CheckIdleState>
 8007812:	4603      	mov	r3, r0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3708      	adds	r7, #8
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b08a      	sub	sp, #40	; 0x28
 8007820:	af02      	add	r7, sp, #8
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	603b      	str	r3, [r7, #0]
 8007828:	4613      	mov	r3, r2
 800782a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007832:	2b20      	cmp	r3, #32
 8007834:	f040 8083 	bne.w	800793e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d002      	beq.n	8007844 <HAL_UART_Transmit+0x28>
 800783e:	88fb      	ldrh	r3, [r7, #6]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d101      	bne.n	8007848 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	e07b      	b.n	8007940 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800784e:	2b01      	cmp	r3, #1
 8007850:	d101      	bne.n	8007856 <HAL_UART_Transmit+0x3a>
 8007852:	2302      	movs	r3, #2
 8007854:	e074      	b.n	8007940 <HAL_UART_Transmit+0x124>
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2201      	movs	r2, #1
 800785a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2200      	movs	r2, #0
 8007862:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2221      	movs	r2, #33	; 0x21
 800786a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800786e:	f7f9 fe05 	bl	800147c <HAL_GetTick>
 8007872:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	88fa      	ldrh	r2, [r7, #6]
 8007878:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	88fa      	ldrh	r2, [r7, #6]
 8007880:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800788c:	d108      	bne.n	80078a0 <HAL_UART_Transmit+0x84>
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	691b      	ldr	r3, [r3, #16]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d104      	bne.n	80078a0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007896:	2300      	movs	r3, #0
 8007898:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	61bb      	str	r3, [r7, #24]
 800789e:	e003      	b.n	80078a8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078a4:	2300      	movs	r3, #0
 80078a6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2200      	movs	r2, #0
 80078ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80078b0:	e02c      	b.n	800790c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	9300      	str	r3, [sp, #0]
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	2200      	movs	r2, #0
 80078ba:	2180      	movs	r1, #128	; 0x80
 80078bc:	68f8      	ldr	r0, [r7, #12]
 80078be:	f000 fe98 	bl	80085f2 <UART_WaitOnFlagUntilTimeout>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d001      	beq.n	80078cc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80078c8:	2303      	movs	r3, #3
 80078ca:	e039      	b.n	8007940 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d10b      	bne.n	80078ea <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	881b      	ldrh	r3, [r3, #0]
 80078d6:	461a      	mov	r2, r3
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078e0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	3302      	adds	r3, #2
 80078e6:	61bb      	str	r3, [r7, #24]
 80078e8:	e007      	b.n	80078fa <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	781a      	ldrb	r2, [r3, #0]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	3301      	adds	r3, #1
 80078f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007900:	b29b      	uxth	r3, r3
 8007902:	3b01      	subs	r3, #1
 8007904:	b29a      	uxth	r2, r3
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007912:	b29b      	uxth	r3, r3
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1cc      	bne.n	80078b2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	9300      	str	r3, [sp, #0]
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	2200      	movs	r2, #0
 8007920:	2140      	movs	r1, #64	; 0x40
 8007922:	68f8      	ldr	r0, [r7, #12]
 8007924:	f000 fe65 	bl	80085f2 <UART_WaitOnFlagUntilTimeout>
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	d001      	beq.n	8007932 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800792e:	2303      	movs	r3, #3
 8007930:	e006      	b.n	8007940 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2220      	movs	r2, #32
 8007936:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800793a:	2300      	movs	r3, #0
 800793c:	e000      	b.n	8007940 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800793e:	2302      	movs	r3, #2
  }
}
 8007940:	4618      	mov	r0, r3
 8007942:	3720      	adds	r7, #32
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007948:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800794c:	b092      	sub	sp, #72	; 0x48
 800794e:	af00      	add	r7, sp, #0
 8007950:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007952:	2300      	movs	r3, #0
 8007954:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	689a      	ldr	r2, [r3, #8]
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	691b      	ldr	r3, [r3, #16]
 8007960:	431a      	orrs	r2, r3
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	695b      	ldr	r3, [r3, #20]
 8007966:	431a      	orrs	r2, r3
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	69db      	ldr	r3, [r3, #28]
 800796c:	4313      	orrs	r3, r2
 800796e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	4bbe      	ldr	r3, [pc, #760]	; (8007c70 <UART_SetConfig+0x328>)
 8007978:	4013      	ands	r3, r2
 800797a:	697a      	ldr	r2, [r7, #20]
 800797c:	6812      	ldr	r2, [r2, #0]
 800797e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007980:	430b      	orrs	r3, r1
 8007982:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	68da      	ldr	r2, [r3, #12]
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	430a      	orrs	r2, r1
 8007998:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	699b      	ldr	r3, [r3, #24]
 800799e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4ab3      	ldr	r2, [pc, #716]	; (8007c74 <UART_SetConfig+0x32c>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d004      	beq.n	80079b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	6a1b      	ldr	r3, [r3, #32]
 80079ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079b0:	4313      	orrs	r3, r2
 80079b2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	689a      	ldr	r2, [r3, #8]
 80079ba:	4baf      	ldr	r3, [pc, #700]	; (8007c78 <UART_SetConfig+0x330>)
 80079bc:	4013      	ands	r3, r2
 80079be:	697a      	ldr	r2, [r7, #20]
 80079c0:	6812      	ldr	r2, [r2, #0]
 80079c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80079c4:	430b      	orrs	r3, r1
 80079c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ce:	f023 010f 	bic.w	r1, r3, #15
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	430a      	orrs	r2, r1
 80079dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4aa6      	ldr	r2, [pc, #664]	; (8007c7c <UART_SetConfig+0x334>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d177      	bne.n	8007ad8 <UART_SetConfig+0x190>
 80079e8:	4ba5      	ldr	r3, [pc, #660]	; (8007c80 <UART_SetConfig+0x338>)
 80079ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079f0:	2b28      	cmp	r3, #40	; 0x28
 80079f2:	d86d      	bhi.n	8007ad0 <UART_SetConfig+0x188>
 80079f4:	a201      	add	r2, pc, #4	; (adr r2, 80079fc <UART_SetConfig+0xb4>)
 80079f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079fa:	bf00      	nop
 80079fc:	08007aa1 	.word	0x08007aa1
 8007a00:	08007ad1 	.word	0x08007ad1
 8007a04:	08007ad1 	.word	0x08007ad1
 8007a08:	08007ad1 	.word	0x08007ad1
 8007a0c:	08007ad1 	.word	0x08007ad1
 8007a10:	08007ad1 	.word	0x08007ad1
 8007a14:	08007ad1 	.word	0x08007ad1
 8007a18:	08007ad1 	.word	0x08007ad1
 8007a1c:	08007aa9 	.word	0x08007aa9
 8007a20:	08007ad1 	.word	0x08007ad1
 8007a24:	08007ad1 	.word	0x08007ad1
 8007a28:	08007ad1 	.word	0x08007ad1
 8007a2c:	08007ad1 	.word	0x08007ad1
 8007a30:	08007ad1 	.word	0x08007ad1
 8007a34:	08007ad1 	.word	0x08007ad1
 8007a38:	08007ad1 	.word	0x08007ad1
 8007a3c:	08007ab1 	.word	0x08007ab1
 8007a40:	08007ad1 	.word	0x08007ad1
 8007a44:	08007ad1 	.word	0x08007ad1
 8007a48:	08007ad1 	.word	0x08007ad1
 8007a4c:	08007ad1 	.word	0x08007ad1
 8007a50:	08007ad1 	.word	0x08007ad1
 8007a54:	08007ad1 	.word	0x08007ad1
 8007a58:	08007ad1 	.word	0x08007ad1
 8007a5c:	08007ab9 	.word	0x08007ab9
 8007a60:	08007ad1 	.word	0x08007ad1
 8007a64:	08007ad1 	.word	0x08007ad1
 8007a68:	08007ad1 	.word	0x08007ad1
 8007a6c:	08007ad1 	.word	0x08007ad1
 8007a70:	08007ad1 	.word	0x08007ad1
 8007a74:	08007ad1 	.word	0x08007ad1
 8007a78:	08007ad1 	.word	0x08007ad1
 8007a7c:	08007ac1 	.word	0x08007ac1
 8007a80:	08007ad1 	.word	0x08007ad1
 8007a84:	08007ad1 	.word	0x08007ad1
 8007a88:	08007ad1 	.word	0x08007ad1
 8007a8c:	08007ad1 	.word	0x08007ad1
 8007a90:	08007ad1 	.word	0x08007ad1
 8007a94:	08007ad1 	.word	0x08007ad1
 8007a98:	08007ad1 	.word	0x08007ad1
 8007a9c:	08007ac9 	.word	0x08007ac9
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aa6:	e222      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007aa8:	2304      	movs	r3, #4
 8007aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aae:	e21e      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007ab0:	2308      	movs	r3, #8
 8007ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ab6:	e21a      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007ab8:	2310      	movs	r3, #16
 8007aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007abe:	e216      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007ac0:	2320      	movs	r3, #32
 8007ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ac6:	e212      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007ac8:	2340      	movs	r3, #64	; 0x40
 8007aca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ace:	e20e      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007ad0:	2380      	movs	r3, #128	; 0x80
 8007ad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ad6:	e20a      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a69      	ldr	r2, [pc, #420]	; (8007c84 <UART_SetConfig+0x33c>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d130      	bne.n	8007b44 <UART_SetConfig+0x1fc>
 8007ae2:	4b67      	ldr	r3, [pc, #412]	; (8007c80 <UART_SetConfig+0x338>)
 8007ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ae6:	f003 0307 	and.w	r3, r3, #7
 8007aea:	2b05      	cmp	r3, #5
 8007aec:	d826      	bhi.n	8007b3c <UART_SetConfig+0x1f4>
 8007aee:	a201      	add	r2, pc, #4	; (adr r2, 8007af4 <UART_SetConfig+0x1ac>)
 8007af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af4:	08007b0d 	.word	0x08007b0d
 8007af8:	08007b15 	.word	0x08007b15
 8007afc:	08007b1d 	.word	0x08007b1d
 8007b00:	08007b25 	.word	0x08007b25
 8007b04:	08007b2d 	.word	0x08007b2d
 8007b08:	08007b35 	.word	0x08007b35
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b12:	e1ec      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007b14:	2304      	movs	r3, #4
 8007b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b1a:	e1e8      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007b1c:	2308      	movs	r3, #8
 8007b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b22:	e1e4      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007b24:	2310      	movs	r3, #16
 8007b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b2a:	e1e0      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007b2c:	2320      	movs	r3, #32
 8007b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b32:	e1dc      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007b34:	2340      	movs	r3, #64	; 0x40
 8007b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b3a:	e1d8      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007b3c:	2380      	movs	r3, #128	; 0x80
 8007b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b42:	e1d4      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a4f      	ldr	r2, [pc, #316]	; (8007c88 <UART_SetConfig+0x340>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d130      	bne.n	8007bb0 <UART_SetConfig+0x268>
 8007b4e:	4b4c      	ldr	r3, [pc, #304]	; (8007c80 <UART_SetConfig+0x338>)
 8007b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b52:	f003 0307 	and.w	r3, r3, #7
 8007b56:	2b05      	cmp	r3, #5
 8007b58:	d826      	bhi.n	8007ba8 <UART_SetConfig+0x260>
 8007b5a:	a201      	add	r2, pc, #4	; (adr r2, 8007b60 <UART_SetConfig+0x218>)
 8007b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b60:	08007b79 	.word	0x08007b79
 8007b64:	08007b81 	.word	0x08007b81
 8007b68:	08007b89 	.word	0x08007b89
 8007b6c:	08007b91 	.word	0x08007b91
 8007b70:	08007b99 	.word	0x08007b99
 8007b74:	08007ba1 	.word	0x08007ba1
 8007b78:	2300      	movs	r3, #0
 8007b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b7e:	e1b6      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007b80:	2304      	movs	r3, #4
 8007b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b86:	e1b2      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007b88:	2308      	movs	r3, #8
 8007b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b8e:	e1ae      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007b90:	2310      	movs	r3, #16
 8007b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b96:	e1aa      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007b98:	2320      	movs	r3, #32
 8007b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b9e:	e1a6      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007ba0:	2340      	movs	r3, #64	; 0x40
 8007ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ba6:	e1a2      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007ba8:	2380      	movs	r3, #128	; 0x80
 8007baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bae:	e19e      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a35      	ldr	r2, [pc, #212]	; (8007c8c <UART_SetConfig+0x344>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d130      	bne.n	8007c1c <UART_SetConfig+0x2d4>
 8007bba:	4b31      	ldr	r3, [pc, #196]	; (8007c80 <UART_SetConfig+0x338>)
 8007bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bbe:	f003 0307 	and.w	r3, r3, #7
 8007bc2:	2b05      	cmp	r3, #5
 8007bc4:	d826      	bhi.n	8007c14 <UART_SetConfig+0x2cc>
 8007bc6:	a201      	add	r2, pc, #4	; (adr r2, 8007bcc <UART_SetConfig+0x284>)
 8007bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bcc:	08007be5 	.word	0x08007be5
 8007bd0:	08007bed 	.word	0x08007bed
 8007bd4:	08007bf5 	.word	0x08007bf5
 8007bd8:	08007bfd 	.word	0x08007bfd
 8007bdc:	08007c05 	.word	0x08007c05
 8007be0:	08007c0d 	.word	0x08007c0d
 8007be4:	2300      	movs	r3, #0
 8007be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bea:	e180      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007bec:	2304      	movs	r3, #4
 8007bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bf2:	e17c      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007bf4:	2308      	movs	r3, #8
 8007bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bfa:	e178      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007bfc:	2310      	movs	r3, #16
 8007bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c02:	e174      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007c04:	2320      	movs	r3, #32
 8007c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c0a:	e170      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007c0c:	2340      	movs	r3, #64	; 0x40
 8007c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c12:	e16c      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007c14:	2380      	movs	r3, #128	; 0x80
 8007c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c1a:	e168      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a1b      	ldr	r2, [pc, #108]	; (8007c90 <UART_SetConfig+0x348>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d142      	bne.n	8007cac <UART_SetConfig+0x364>
 8007c26:	4b16      	ldr	r3, [pc, #88]	; (8007c80 <UART_SetConfig+0x338>)
 8007c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c2a:	f003 0307 	and.w	r3, r3, #7
 8007c2e:	2b05      	cmp	r3, #5
 8007c30:	d838      	bhi.n	8007ca4 <UART_SetConfig+0x35c>
 8007c32:	a201      	add	r2, pc, #4	; (adr r2, 8007c38 <UART_SetConfig+0x2f0>)
 8007c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c38:	08007c51 	.word	0x08007c51
 8007c3c:	08007c59 	.word	0x08007c59
 8007c40:	08007c61 	.word	0x08007c61
 8007c44:	08007c69 	.word	0x08007c69
 8007c48:	08007c95 	.word	0x08007c95
 8007c4c:	08007c9d 	.word	0x08007c9d
 8007c50:	2300      	movs	r3, #0
 8007c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c56:	e14a      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007c58:	2304      	movs	r3, #4
 8007c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c5e:	e146      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007c60:	2308      	movs	r3, #8
 8007c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c66:	e142      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007c68:	2310      	movs	r3, #16
 8007c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c6e:	e13e      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007c70:	cfff69f3 	.word	0xcfff69f3
 8007c74:	58000c00 	.word	0x58000c00
 8007c78:	11fff4ff 	.word	0x11fff4ff
 8007c7c:	40011000 	.word	0x40011000
 8007c80:	58024400 	.word	0x58024400
 8007c84:	40004400 	.word	0x40004400
 8007c88:	40004800 	.word	0x40004800
 8007c8c:	40004c00 	.word	0x40004c00
 8007c90:	40005000 	.word	0x40005000
 8007c94:	2320      	movs	r3, #32
 8007c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c9a:	e128      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007c9c:	2340      	movs	r3, #64	; 0x40
 8007c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ca2:	e124      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007ca4:	2380      	movs	r3, #128	; 0x80
 8007ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007caa:	e120      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4acb      	ldr	r2, [pc, #812]	; (8007fe0 <UART_SetConfig+0x698>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d176      	bne.n	8007da4 <UART_SetConfig+0x45c>
 8007cb6:	4bcb      	ldr	r3, [pc, #812]	; (8007fe4 <UART_SetConfig+0x69c>)
 8007cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007cbe:	2b28      	cmp	r3, #40	; 0x28
 8007cc0:	d86c      	bhi.n	8007d9c <UART_SetConfig+0x454>
 8007cc2:	a201      	add	r2, pc, #4	; (adr r2, 8007cc8 <UART_SetConfig+0x380>)
 8007cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc8:	08007d6d 	.word	0x08007d6d
 8007ccc:	08007d9d 	.word	0x08007d9d
 8007cd0:	08007d9d 	.word	0x08007d9d
 8007cd4:	08007d9d 	.word	0x08007d9d
 8007cd8:	08007d9d 	.word	0x08007d9d
 8007cdc:	08007d9d 	.word	0x08007d9d
 8007ce0:	08007d9d 	.word	0x08007d9d
 8007ce4:	08007d9d 	.word	0x08007d9d
 8007ce8:	08007d75 	.word	0x08007d75
 8007cec:	08007d9d 	.word	0x08007d9d
 8007cf0:	08007d9d 	.word	0x08007d9d
 8007cf4:	08007d9d 	.word	0x08007d9d
 8007cf8:	08007d9d 	.word	0x08007d9d
 8007cfc:	08007d9d 	.word	0x08007d9d
 8007d00:	08007d9d 	.word	0x08007d9d
 8007d04:	08007d9d 	.word	0x08007d9d
 8007d08:	08007d7d 	.word	0x08007d7d
 8007d0c:	08007d9d 	.word	0x08007d9d
 8007d10:	08007d9d 	.word	0x08007d9d
 8007d14:	08007d9d 	.word	0x08007d9d
 8007d18:	08007d9d 	.word	0x08007d9d
 8007d1c:	08007d9d 	.word	0x08007d9d
 8007d20:	08007d9d 	.word	0x08007d9d
 8007d24:	08007d9d 	.word	0x08007d9d
 8007d28:	08007d85 	.word	0x08007d85
 8007d2c:	08007d9d 	.word	0x08007d9d
 8007d30:	08007d9d 	.word	0x08007d9d
 8007d34:	08007d9d 	.word	0x08007d9d
 8007d38:	08007d9d 	.word	0x08007d9d
 8007d3c:	08007d9d 	.word	0x08007d9d
 8007d40:	08007d9d 	.word	0x08007d9d
 8007d44:	08007d9d 	.word	0x08007d9d
 8007d48:	08007d8d 	.word	0x08007d8d
 8007d4c:	08007d9d 	.word	0x08007d9d
 8007d50:	08007d9d 	.word	0x08007d9d
 8007d54:	08007d9d 	.word	0x08007d9d
 8007d58:	08007d9d 	.word	0x08007d9d
 8007d5c:	08007d9d 	.word	0x08007d9d
 8007d60:	08007d9d 	.word	0x08007d9d
 8007d64:	08007d9d 	.word	0x08007d9d
 8007d68:	08007d95 	.word	0x08007d95
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d72:	e0bc      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007d74:	2304      	movs	r3, #4
 8007d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d7a:	e0b8      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007d7c:	2308      	movs	r3, #8
 8007d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d82:	e0b4      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007d84:	2310      	movs	r3, #16
 8007d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d8a:	e0b0      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007d8c:	2320      	movs	r3, #32
 8007d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d92:	e0ac      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007d94:	2340      	movs	r3, #64	; 0x40
 8007d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d9a:	e0a8      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007d9c:	2380      	movs	r3, #128	; 0x80
 8007d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007da2:	e0a4      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a8f      	ldr	r2, [pc, #572]	; (8007fe8 <UART_SetConfig+0x6a0>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d130      	bne.n	8007e10 <UART_SetConfig+0x4c8>
 8007dae:	4b8d      	ldr	r3, [pc, #564]	; (8007fe4 <UART_SetConfig+0x69c>)
 8007db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007db2:	f003 0307 	and.w	r3, r3, #7
 8007db6:	2b05      	cmp	r3, #5
 8007db8:	d826      	bhi.n	8007e08 <UART_SetConfig+0x4c0>
 8007dba:	a201      	add	r2, pc, #4	; (adr r2, 8007dc0 <UART_SetConfig+0x478>)
 8007dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc0:	08007dd9 	.word	0x08007dd9
 8007dc4:	08007de1 	.word	0x08007de1
 8007dc8:	08007de9 	.word	0x08007de9
 8007dcc:	08007df1 	.word	0x08007df1
 8007dd0:	08007df9 	.word	0x08007df9
 8007dd4:	08007e01 	.word	0x08007e01
 8007dd8:	2300      	movs	r3, #0
 8007dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dde:	e086      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007de0:	2304      	movs	r3, #4
 8007de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007de6:	e082      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007de8:	2308      	movs	r3, #8
 8007dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dee:	e07e      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007df0:	2310      	movs	r3, #16
 8007df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007df6:	e07a      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007df8:	2320      	movs	r3, #32
 8007dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dfe:	e076      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007e00:	2340      	movs	r3, #64	; 0x40
 8007e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e06:	e072      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007e08:	2380      	movs	r3, #128	; 0x80
 8007e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e0e:	e06e      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a75      	ldr	r2, [pc, #468]	; (8007fec <UART_SetConfig+0x6a4>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d130      	bne.n	8007e7c <UART_SetConfig+0x534>
 8007e1a:	4b72      	ldr	r3, [pc, #456]	; (8007fe4 <UART_SetConfig+0x69c>)
 8007e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e1e:	f003 0307 	and.w	r3, r3, #7
 8007e22:	2b05      	cmp	r3, #5
 8007e24:	d826      	bhi.n	8007e74 <UART_SetConfig+0x52c>
 8007e26:	a201      	add	r2, pc, #4	; (adr r2, 8007e2c <UART_SetConfig+0x4e4>)
 8007e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e2c:	08007e45 	.word	0x08007e45
 8007e30:	08007e4d 	.word	0x08007e4d
 8007e34:	08007e55 	.word	0x08007e55
 8007e38:	08007e5d 	.word	0x08007e5d
 8007e3c:	08007e65 	.word	0x08007e65
 8007e40:	08007e6d 	.word	0x08007e6d
 8007e44:	2300      	movs	r3, #0
 8007e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e4a:	e050      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007e4c:	2304      	movs	r3, #4
 8007e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e52:	e04c      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007e54:	2308      	movs	r3, #8
 8007e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e5a:	e048      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007e5c:	2310      	movs	r3, #16
 8007e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e62:	e044      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007e64:	2320      	movs	r3, #32
 8007e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e6a:	e040      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007e6c:	2340      	movs	r3, #64	; 0x40
 8007e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e72:	e03c      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007e74:	2380      	movs	r3, #128	; 0x80
 8007e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e7a:	e038      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a5b      	ldr	r2, [pc, #364]	; (8007ff0 <UART_SetConfig+0x6a8>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d130      	bne.n	8007ee8 <UART_SetConfig+0x5a0>
 8007e86:	4b57      	ldr	r3, [pc, #348]	; (8007fe4 <UART_SetConfig+0x69c>)
 8007e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e8a:	f003 0307 	and.w	r3, r3, #7
 8007e8e:	2b05      	cmp	r3, #5
 8007e90:	d826      	bhi.n	8007ee0 <UART_SetConfig+0x598>
 8007e92:	a201      	add	r2, pc, #4	; (adr r2, 8007e98 <UART_SetConfig+0x550>)
 8007e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e98:	08007eb1 	.word	0x08007eb1
 8007e9c:	08007eb9 	.word	0x08007eb9
 8007ea0:	08007ec1 	.word	0x08007ec1
 8007ea4:	08007ec9 	.word	0x08007ec9
 8007ea8:	08007ed1 	.word	0x08007ed1
 8007eac:	08007ed9 	.word	0x08007ed9
 8007eb0:	2302      	movs	r3, #2
 8007eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007eb6:	e01a      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007eb8:	2304      	movs	r3, #4
 8007eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ebe:	e016      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007ec0:	2308      	movs	r3, #8
 8007ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ec6:	e012      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007ec8:	2310      	movs	r3, #16
 8007eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ece:	e00e      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007ed0:	2320      	movs	r3, #32
 8007ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ed6:	e00a      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007ed8:	2340      	movs	r3, #64	; 0x40
 8007eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ede:	e006      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007ee0:	2380      	movs	r3, #128	; 0x80
 8007ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ee6:	e002      	b.n	8007eee <UART_SetConfig+0x5a6>
 8007ee8:	2380      	movs	r3, #128	; 0x80
 8007eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a3f      	ldr	r2, [pc, #252]	; (8007ff0 <UART_SetConfig+0x6a8>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	f040 80f8 	bne.w	80080ea <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007efa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007efe:	2b20      	cmp	r3, #32
 8007f00:	dc46      	bgt.n	8007f90 <UART_SetConfig+0x648>
 8007f02:	2b02      	cmp	r3, #2
 8007f04:	f2c0 8082 	blt.w	800800c <UART_SetConfig+0x6c4>
 8007f08:	3b02      	subs	r3, #2
 8007f0a:	2b1e      	cmp	r3, #30
 8007f0c:	d87e      	bhi.n	800800c <UART_SetConfig+0x6c4>
 8007f0e:	a201      	add	r2, pc, #4	; (adr r2, 8007f14 <UART_SetConfig+0x5cc>)
 8007f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f14:	08007f97 	.word	0x08007f97
 8007f18:	0800800d 	.word	0x0800800d
 8007f1c:	08007f9f 	.word	0x08007f9f
 8007f20:	0800800d 	.word	0x0800800d
 8007f24:	0800800d 	.word	0x0800800d
 8007f28:	0800800d 	.word	0x0800800d
 8007f2c:	08007faf 	.word	0x08007faf
 8007f30:	0800800d 	.word	0x0800800d
 8007f34:	0800800d 	.word	0x0800800d
 8007f38:	0800800d 	.word	0x0800800d
 8007f3c:	0800800d 	.word	0x0800800d
 8007f40:	0800800d 	.word	0x0800800d
 8007f44:	0800800d 	.word	0x0800800d
 8007f48:	0800800d 	.word	0x0800800d
 8007f4c:	08007fbf 	.word	0x08007fbf
 8007f50:	0800800d 	.word	0x0800800d
 8007f54:	0800800d 	.word	0x0800800d
 8007f58:	0800800d 	.word	0x0800800d
 8007f5c:	0800800d 	.word	0x0800800d
 8007f60:	0800800d 	.word	0x0800800d
 8007f64:	0800800d 	.word	0x0800800d
 8007f68:	0800800d 	.word	0x0800800d
 8007f6c:	0800800d 	.word	0x0800800d
 8007f70:	0800800d 	.word	0x0800800d
 8007f74:	0800800d 	.word	0x0800800d
 8007f78:	0800800d 	.word	0x0800800d
 8007f7c:	0800800d 	.word	0x0800800d
 8007f80:	0800800d 	.word	0x0800800d
 8007f84:	0800800d 	.word	0x0800800d
 8007f88:	0800800d 	.word	0x0800800d
 8007f8c:	08007fff 	.word	0x08007fff
 8007f90:	2b40      	cmp	r3, #64	; 0x40
 8007f92:	d037      	beq.n	8008004 <UART_SetConfig+0x6bc>
 8007f94:	e03a      	b.n	800800c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007f96:	f7fe f9f9 	bl	800638c <HAL_RCCEx_GetD3PCLK1Freq>
 8007f9a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007f9c:	e03c      	b.n	8008018 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f7fe fa08 	bl	80063b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007faa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fac:	e034      	b.n	8008018 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fae:	f107 0318 	add.w	r3, r7, #24
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f7fe fb54 	bl	8006660 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007fb8:	69fb      	ldr	r3, [r7, #28]
 8007fba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fbc:	e02c      	b.n	8008018 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007fbe:	4b09      	ldr	r3, [pc, #36]	; (8007fe4 <UART_SetConfig+0x69c>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f003 0320 	and.w	r3, r3, #32
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d016      	beq.n	8007ff8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007fca:	4b06      	ldr	r3, [pc, #24]	; (8007fe4 <UART_SetConfig+0x69c>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	08db      	lsrs	r3, r3, #3
 8007fd0:	f003 0303 	and.w	r3, r3, #3
 8007fd4:	4a07      	ldr	r2, [pc, #28]	; (8007ff4 <UART_SetConfig+0x6ac>)
 8007fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8007fda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007fdc:	e01c      	b.n	8008018 <UART_SetConfig+0x6d0>
 8007fde:	bf00      	nop
 8007fe0:	40011400 	.word	0x40011400
 8007fe4:	58024400 	.word	0x58024400
 8007fe8:	40007800 	.word	0x40007800
 8007fec:	40007c00 	.word	0x40007c00
 8007ff0:	58000c00 	.word	0x58000c00
 8007ff4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007ff8:	4b9d      	ldr	r3, [pc, #628]	; (8008270 <UART_SetConfig+0x928>)
 8007ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ffc:	e00c      	b.n	8008018 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007ffe:	4b9d      	ldr	r3, [pc, #628]	; (8008274 <UART_SetConfig+0x92c>)
 8008000:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008002:	e009      	b.n	8008018 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008004:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008008:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800800a:	e005      	b.n	8008018 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800800c:	2300      	movs	r3, #0
 800800e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008016:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800801a:	2b00      	cmp	r3, #0
 800801c:	f000 81de 	beq.w	80083dc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008024:	4a94      	ldr	r2, [pc, #592]	; (8008278 <UART_SetConfig+0x930>)
 8008026:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800802a:	461a      	mov	r2, r3
 800802c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800802e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008032:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	685a      	ldr	r2, [r3, #4]
 8008038:	4613      	mov	r3, r2
 800803a:	005b      	lsls	r3, r3, #1
 800803c:	4413      	add	r3, r2
 800803e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008040:	429a      	cmp	r2, r3
 8008042:	d305      	bcc.n	8008050 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800804a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800804c:	429a      	cmp	r2, r3
 800804e:	d903      	bls.n	8008058 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008056:	e1c1      	b.n	80083dc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800805a:	2200      	movs	r2, #0
 800805c:	60bb      	str	r3, [r7, #8]
 800805e:	60fa      	str	r2, [r7, #12]
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008064:	4a84      	ldr	r2, [pc, #528]	; (8008278 <UART_SetConfig+0x930>)
 8008066:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800806a:	b29b      	uxth	r3, r3
 800806c:	2200      	movs	r2, #0
 800806e:	603b      	str	r3, [r7, #0]
 8008070:	607a      	str	r2, [r7, #4]
 8008072:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008076:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800807a:	f7f8 f92d 	bl	80002d8 <__aeabi_uldivmod>
 800807e:	4602      	mov	r2, r0
 8008080:	460b      	mov	r3, r1
 8008082:	4610      	mov	r0, r2
 8008084:	4619      	mov	r1, r3
 8008086:	f04f 0200 	mov.w	r2, #0
 800808a:	f04f 0300 	mov.w	r3, #0
 800808e:	020b      	lsls	r3, r1, #8
 8008090:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008094:	0202      	lsls	r2, r0, #8
 8008096:	6979      	ldr	r1, [r7, #20]
 8008098:	6849      	ldr	r1, [r1, #4]
 800809a:	0849      	lsrs	r1, r1, #1
 800809c:	2000      	movs	r0, #0
 800809e:	460c      	mov	r4, r1
 80080a0:	4605      	mov	r5, r0
 80080a2:	eb12 0804 	adds.w	r8, r2, r4
 80080a6:	eb43 0905 	adc.w	r9, r3, r5
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	469a      	mov	sl, r3
 80080b2:	4693      	mov	fp, r2
 80080b4:	4652      	mov	r2, sl
 80080b6:	465b      	mov	r3, fp
 80080b8:	4640      	mov	r0, r8
 80080ba:	4649      	mov	r1, r9
 80080bc:	f7f8 f90c 	bl	80002d8 <__aeabi_uldivmod>
 80080c0:	4602      	mov	r2, r0
 80080c2:	460b      	mov	r3, r1
 80080c4:	4613      	mov	r3, r2
 80080c6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80080c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080ce:	d308      	bcc.n	80080e2 <UART_SetConfig+0x79a>
 80080d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080d6:	d204      	bcs.n	80080e2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080de:	60da      	str	r2, [r3, #12]
 80080e0:	e17c      	b.n	80083dc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80080e8:	e178      	b.n	80083dc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	69db      	ldr	r3, [r3, #28]
 80080ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080f2:	f040 80c5 	bne.w	8008280 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80080f6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80080fa:	2b20      	cmp	r3, #32
 80080fc:	dc48      	bgt.n	8008190 <UART_SetConfig+0x848>
 80080fe:	2b00      	cmp	r3, #0
 8008100:	db7b      	blt.n	80081fa <UART_SetConfig+0x8b2>
 8008102:	2b20      	cmp	r3, #32
 8008104:	d879      	bhi.n	80081fa <UART_SetConfig+0x8b2>
 8008106:	a201      	add	r2, pc, #4	; (adr r2, 800810c <UART_SetConfig+0x7c4>)
 8008108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800810c:	08008197 	.word	0x08008197
 8008110:	0800819f 	.word	0x0800819f
 8008114:	080081fb 	.word	0x080081fb
 8008118:	080081fb 	.word	0x080081fb
 800811c:	080081a7 	.word	0x080081a7
 8008120:	080081fb 	.word	0x080081fb
 8008124:	080081fb 	.word	0x080081fb
 8008128:	080081fb 	.word	0x080081fb
 800812c:	080081b7 	.word	0x080081b7
 8008130:	080081fb 	.word	0x080081fb
 8008134:	080081fb 	.word	0x080081fb
 8008138:	080081fb 	.word	0x080081fb
 800813c:	080081fb 	.word	0x080081fb
 8008140:	080081fb 	.word	0x080081fb
 8008144:	080081fb 	.word	0x080081fb
 8008148:	080081fb 	.word	0x080081fb
 800814c:	080081c7 	.word	0x080081c7
 8008150:	080081fb 	.word	0x080081fb
 8008154:	080081fb 	.word	0x080081fb
 8008158:	080081fb 	.word	0x080081fb
 800815c:	080081fb 	.word	0x080081fb
 8008160:	080081fb 	.word	0x080081fb
 8008164:	080081fb 	.word	0x080081fb
 8008168:	080081fb 	.word	0x080081fb
 800816c:	080081fb 	.word	0x080081fb
 8008170:	080081fb 	.word	0x080081fb
 8008174:	080081fb 	.word	0x080081fb
 8008178:	080081fb 	.word	0x080081fb
 800817c:	080081fb 	.word	0x080081fb
 8008180:	080081fb 	.word	0x080081fb
 8008184:	080081fb 	.word	0x080081fb
 8008188:	080081fb 	.word	0x080081fb
 800818c:	080081ed 	.word	0x080081ed
 8008190:	2b40      	cmp	r3, #64	; 0x40
 8008192:	d02e      	beq.n	80081f2 <UART_SetConfig+0x8aa>
 8008194:	e031      	b.n	80081fa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008196:	f7fd f987 	bl	80054a8 <HAL_RCC_GetPCLK1Freq>
 800819a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800819c:	e033      	b.n	8008206 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800819e:	f7fd f999 	bl	80054d4 <HAL_RCC_GetPCLK2Freq>
 80081a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80081a4:	e02f      	b.n	8008206 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7fe f904 	bl	80063b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80081b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081b4:	e027      	b.n	8008206 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081b6:	f107 0318 	add.w	r3, r7, #24
 80081ba:	4618      	mov	r0, r3
 80081bc:	f7fe fa50 	bl	8006660 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80081c0:	69fb      	ldr	r3, [r7, #28]
 80081c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081c4:	e01f      	b.n	8008206 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081c6:	4b2d      	ldr	r3, [pc, #180]	; (800827c <UART_SetConfig+0x934>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f003 0320 	and.w	r3, r3, #32
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d009      	beq.n	80081e6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80081d2:	4b2a      	ldr	r3, [pc, #168]	; (800827c <UART_SetConfig+0x934>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	08db      	lsrs	r3, r3, #3
 80081d8:	f003 0303 	and.w	r3, r3, #3
 80081dc:	4a24      	ldr	r2, [pc, #144]	; (8008270 <UART_SetConfig+0x928>)
 80081de:	fa22 f303 	lsr.w	r3, r2, r3
 80081e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80081e4:	e00f      	b.n	8008206 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80081e6:	4b22      	ldr	r3, [pc, #136]	; (8008270 <UART_SetConfig+0x928>)
 80081e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081ea:	e00c      	b.n	8008206 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80081ec:	4b21      	ldr	r3, [pc, #132]	; (8008274 <UART_SetConfig+0x92c>)
 80081ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081f0:	e009      	b.n	8008206 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081f8:	e005      	b.n	8008206 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80081fa:	2300      	movs	r3, #0
 80081fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008204:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008208:	2b00      	cmp	r3, #0
 800820a:	f000 80e7 	beq.w	80083dc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008212:	4a19      	ldr	r2, [pc, #100]	; (8008278 <UART_SetConfig+0x930>)
 8008214:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008218:	461a      	mov	r2, r3
 800821a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800821c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008220:	005a      	lsls	r2, r3, #1
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	085b      	lsrs	r3, r3, #1
 8008228:	441a      	add	r2, r3
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008232:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008236:	2b0f      	cmp	r3, #15
 8008238:	d916      	bls.n	8008268 <UART_SetConfig+0x920>
 800823a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008240:	d212      	bcs.n	8008268 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008244:	b29b      	uxth	r3, r3
 8008246:	f023 030f 	bic.w	r3, r3, #15
 800824a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800824c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800824e:	085b      	lsrs	r3, r3, #1
 8008250:	b29b      	uxth	r3, r3
 8008252:	f003 0307 	and.w	r3, r3, #7
 8008256:	b29a      	uxth	r2, r3
 8008258:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800825a:	4313      	orrs	r3, r2
 800825c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008264:	60da      	str	r2, [r3, #12]
 8008266:	e0b9      	b.n	80083dc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008268:	2301      	movs	r3, #1
 800826a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800826e:	e0b5      	b.n	80083dc <UART_SetConfig+0xa94>
 8008270:	03d09000 	.word	0x03d09000
 8008274:	003d0900 	.word	0x003d0900
 8008278:	08009024 	.word	0x08009024
 800827c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008280:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008284:	2b20      	cmp	r3, #32
 8008286:	dc49      	bgt.n	800831c <UART_SetConfig+0x9d4>
 8008288:	2b00      	cmp	r3, #0
 800828a:	db7c      	blt.n	8008386 <UART_SetConfig+0xa3e>
 800828c:	2b20      	cmp	r3, #32
 800828e:	d87a      	bhi.n	8008386 <UART_SetConfig+0xa3e>
 8008290:	a201      	add	r2, pc, #4	; (adr r2, 8008298 <UART_SetConfig+0x950>)
 8008292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008296:	bf00      	nop
 8008298:	08008323 	.word	0x08008323
 800829c:	0800832b 	.word	0x0800832b
 80082a0:	08008387 	.word	0x08008387
 80082a4:	08008387 	.word	0x08008387
 80082a8:	08008333 	.word	0x08008333
 80082ac:	08008387 	.word	0x08008387
 80082b0:	08008387 	.word	0x08008387
 80082b4:	08008387 	.word	0x08008387
 80082b8:	08008343 	.word	0x08008343
 80082bc:	08008387 	.word	0x08008387
 80082c0:	08008387 	.word	0x08008387
 80082c4:	08008387 	.word	0x08008387
 80082c8:	08008387 	.word	0x08008387
 80082cc:	08008387 	.word	0x08008387
 80082d0:	08008387 	.word	0x08008387
 80082d4:	08008387 	.word	0x08008387
 80082d8:	08008353 	.word	0x08008353
 80082dc:	08008387 	.word	0x08008387
 80082e0:	08008387 	.word	0x08008387
 80082e4:	08008387 	.word	0x08008387
 80082e8:	08008387 	.word	0x08008387
 80082ec:	08008387 	.word	0x08008387
 80082f0:	08008387 	.word	0x08008387
 80082f4:	08008387 	.word	0x08008387
 80082f8:	08008387 	.word	0x08008387
 80082fc:	08008387 	.word	0x08008387
 8008300:	08008387 	.word	0x08008387
 8008304:	08008387 	.word	0x08008387
 8008308:	08008387 	.word	0x08008387
 800830c:	08008387 	.word	0x08008387
 8008310:	08008387 	.word	0x08008387
 8008314:	08008387 	.word	0x08008387
 8008318:	08008379 	.word	0x08008379
 800831c:	2b40      	cmp	r3, #64	; 0x40
 800831e:	d02e      	beq.n	800837e <UART_SetConfig+0xa36>
 8008320:	e031      	b.n	8008386 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008322:	f7fd f8c1 	bl	80054a8 <HAL_RCC_GetPCLK1Freq>
 8008326:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008328:	e033      	b.n	8008392 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800832a:	f7fd f8d3 	bl	80054d4 <HAL_RCC_GetPCLK2Freq>
 800832e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008330:	e02f      	b.n	8008392 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008332:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008336:	4618      	mov	r0, r3
 8008338:	f7fe f83e 	bl	80063b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800833c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800833e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008340:	e027      	b.n	8008392 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008342:	f107 0318 	add.w	r3, r7, #24
 8008346:	4618      	mov	r0, r3
 8008348:	f7fe f98a 	bl	8006660 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800834c:	69fb      	ldr	r3, [r7, #28]
 800834e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008350:	e01f      	b.n	8008392 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008352:	4b2d      	ldr	r3, [pc, #180]	; (8008408 <UART_SetConfig+0xac0>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f003 0320 	and.w	r3, r3, #32
 800835a:	2b00      	cmp	r3, #0
 800835c:	d009      	beq.n	8008372 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800835e:	4b2a      	ldr	r3, [pc, #168]	; (8008408 <UART_SetConfig+0xac0>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	08db      	lsrs	r3, r3, #3
 8008364:	f003 0303 	and.w	r3, r3, #3
 8008368:	4a28      	ldr	r2, [pc, #160]	; (800840c <UART_SetConfig+0xac4>)
 800836a:	fa22 f303 	lsr.w	r3, r2, r3
 800836e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008370:	e00f      	b.n	8008392 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008372:	4b26      	ldr	r3, [pc, #152]	; (800840c <UART_SetConfig+0xac4>)
 8008374:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008376:	e00c      	b.n	8008392 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008378:	4b25      	ldr	r3, [pc, #148]	; (8008410 <UART_SetConfig+0xac8>)
 800837a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800837c:	e009      	b.n	8008392 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800837e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008382:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008384:	e005      	b.n	8008392 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008386:	2300      	movs	r3, #0
 8008388:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800838a:	2301      	movs	r3, #1
 800838c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008390:	bf00      	nop
    }

    if (pclk != 0U)
 8008392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008394:	2b00      	cmp	r3, #0
 8008396:	d021      	beq.n	80083dc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839c:	4a1d      	ldr	r2, [pc, #116]	; (8008414 <UART_SetConfig+0xacc>)
 800839e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083a2:	461a      	mov	r2, r3
 80083a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	085b      	lsrs	r3, r3, #1
 80083b0:	441a      	add	r2, r3
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80083ba:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083be:	2b0f      	cmp	r3, #15
 80083c0:	d909      	bls.n	80083d6 <UART_SetConfig+0xa8e>
 80083c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083c8:	d205      	bcs.n	80083d6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80083ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083cc:	b29a      	uxth	r2, r3
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	60da      	str	r2, [r3, #12]
 80083d4:	e002      	b.n	80083dc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80083d6:	2301      	movs	r3, #1
 80083d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	2201      	movs	r2, #1
 80083e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	2201      	movs	r2, #1
 80083e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	2200      	movs	r2, #0
 80083f0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	2200      	movs	r2, #0
 80083f6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80083f8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3748      	adds	r7, #72	; 0x48
 8008400:	46bd      	mov	sp, r7
 8008402:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008406:	bf00      	nop
 8008408:	58024400 	.word	0x58024400
 800840c:	03d09000 	.word	0x03d09000
 8008410:	003d0900 	.word	0x003d0900
 8008414:	08009024 	.word	0x08009024

08008418 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008424:	f003 0301 	and.w	r3, r3, #1
 8008428:	2b00      	cmp	r3, #0
 800842a:	d00a      	beq.n	8008442 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	430a      	orrs	r2, r1
 8008440:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008446:	f003 0302 	and.w	r3, r3, #2
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00a      	beq.n	8008464 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	430a      	orrs	r2, r1
 8008462:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008468:	f003 0304 	and.w	r3, r3, #4
 800846c:	2b00      	cmp	r3, #0
 800846e:	d00a      	beq.n	8008486 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	430a      	orrs	r2, r1
 8008484:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800848a:	f003 0308 	and.w	r3, r3, #8
 800848e:	2b00      	cmp	r3, #0
 8008490:	d00a      	beq.n	80084a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	430a      	orrs	r2, r1
 80084a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ac:	f003 0310 	and.w	r3, r3, #16
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d00a      	beq.n	80084ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	430a      	orrs	r2, r1
 80084c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ce:	f003 0320 	and.w	r3, r3, #32
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00a      	beq.n	80084ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	430a      	orrs	r2, r1
 80084ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d01a      	beq.n	800852e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	430a      	orrs	r2, r1
 800850c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008512:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008516:	d10a      	bne.n	800852e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	430a      	orrs	r2, r1
 800852c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008536:	2b00      	cmp	r3, #0
 8008538:	d00a      	beq.n	8008550 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	430a      	orrs	r2, r1
 800854e:	605a      	str	r2, [r3, #4]
  }
}
 8008550:	bf00      	nop
 8008552:	370c      	adds	r7, #12
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr

0800855c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b086      	sub	sp, #24
 8008560:	af02      	add	r7, sp, #8
 8008562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800856c:	f7f8 ff86 	bl	800147c <HAL_GetTick>
 8008570:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f003 0308 	and.w	r3, r3, #8
 800857c:	2b08      	cmp	r3, #8
 800857e:	d10e      	bne.n	800859e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008580:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008584:	9300      	str	r3, [sp, #0]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2200      	movs	r2, #0
 800858a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 f82f 	bl	80085f2 <UART_WaitOnFlagUntilTimeout>
 8008594:	4603      	mov	r3, r0
 8008596:	2b00      	cmp	r3, #0
 8008598:	d001      	beq.n	800859e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800859a:	2303      	movs	r3, #3
 800859c:	e025      	b.n	80085ea <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f003 0304 	and.w	r3, r3, #4
 80085a8:	2b04      	cmp	r3, #4
 80085aa:	d10e      	bne.n	80085ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085b0:	9300      	str	r3, [sp, #0]
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2200      	movs	r2, #0
 80085b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 f819 	bl	80085f2 <UART_WaitOnFlagUntilTimeout>
 80085c0:	4603      	mov	r3, r0
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d001      	beq.n	80085ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085c6:	2303      	movs	r3, #3
 80085c8:	e00f      	b.n	80085ea <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2220      	movs	r2, #32
 80085ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2220      	movs	r2, #32
 80085d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2200      	movs	r2, #0
 80085de:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80085e8:	2300      	movs	r3, #0
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3710      	adds	r7, #16
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b09c      	sub	sp, #112	; 0x70
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	60f8      	str	r0, [r7, #12]
 80085fa:	60b9      	str	r1, [r7, #8]
 80085fc:	603b      	str	r3, [r7, #0]
 80085fe:	4613      	mov	r3, r2
 8008600:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008602:	e0a9      	b.n	8008758 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008604:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800860a:	f000 80a5 	beq.w	8008758 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800860e:	f7f8 ff35 	bl	800147c <HAL_GetTick>
 8008612:	4602      	mov	r2, r0
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	1ad3      	subs	r3, r2, r3
 8008618:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800861a:	429a      	cmp	r2, r3
 800861c:	d302      	bcc.n	8008624 <UART_WaitOnFlagUntilTimeout+0x32>
 800861e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008620:	2b00      	cmp	r3, #0
 8008622:	d140      	bne.n	80086a6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800862a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800862c:	e853 3f00 	ldrex	r3, [r3]
 8008630:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008634:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008638:	667b      	str	r3, [r7, #100]	; 0x64
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	461a      	mov	r2, r3
 8008640:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008642:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008644:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008646:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008648:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800864a:	e841 2300 	strex	r3, r2, [r1]
 800864e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008650:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008652:	2b00      	cmp	r3, #0
 8008654:	d1e6      	bne.n	8008624 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	3308      	adds	r3, #8
 800865c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800865e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008660:	e853 3f00 	ldrex	r3, [r3]
 8008664:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008668:	f023 0301 	bic.w	r3, r3, #1
 800866c:	663b      	str	r3, [r7, #96]	; 0x60
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	3308      	adds	r3, #8
 8008674:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008676:	64ba      	str	r2, [r7, #72]	; 0x48
 8008678:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800867a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800867c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800867e:	e841 2300 	strex	r3, r2, [r1]
 8008682:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008686:	2b00      	cmp	r3, #0
 8008688:	d1e5      	bne.n	8008656 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2220      	movs	r2, #32
 800868e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2220      	movs	r2, #32
 8008696:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2200      	movs	r2, #0
 800869e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80086a2:	2303      	movs	r3, #3
 80086a4:	e069      	b.n	800877a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f003 0304 	and.w	r3, r3, #4
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d051      	beq.n	8008758 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	69db      	ldr	r3, [r3, #28]
 80086ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086c2:	d149      	bne.n	8008758 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80086cc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d6:	e853 3f00 	ldrex	r3, [r3]
 80086da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80086e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	461a      	mov	r2, r3
 80086ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086ec:	637b      	str	r3, [r7, #52]	; 0x34
 80086ee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80086f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086f4:	e841 2300 	strex	r3, r2, [r1]
 80086f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80086fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d1e6      	bne.n	80086ce <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	3308      	adds	r3, #8
 8008706:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	e853 3f00 	ldrex	r3, [r3]
 800870e:	613b      	str	r3, [r7, #16]
   return(result);
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	f023 0301 	bic.w	r3, r3, #1
 8008716:	66bb      	str	r3, [r7, #104]	; 0x68
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	3308      	adds	r3, #8
 800871e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008720:	623a      	str	r2, [r7, #32]
 8008722:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008724:	69f9      	ldr	r1, [r7, #28]
 8008726:	6a3a      	ldr	r2, [r7, #32]
 8008728:	e841 2300 	strex	r3, r2, [r1]
 800872c:	61bb      	str	r3, [r7, #24]
   return(result);
 800872e:	69bb      	ldr	r3, [r7, #24]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d1e5      	bne.n	8008700 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2220      	movs	r2, #32
 8008738:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2220      	movs	r2, #32
 8008740:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2220      	movs	r2, #32
 8008748:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2200      	movs	r2, #0
 8008750:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008754:	2303      	movs	r3, #3
 8008756:	e010      	b.n	800877a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	69da      	ldr	r2, [r3, #28]
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	4013      	ands	r3, r2
 8008762:	68ba      	ldr	r2, [r7, #8]
 8008764:	429a      	cmp	r2, r3
 8008766:	bf0c      	ite	eq
 8008768:	2301      	moveq	r3, #1
 800876a:	2300      	movne	r3, #0
 800876c:	b2db      	uxtb	r3, r3
 800876e:	461a      	mov	r2, r3
 8008770:	79fb      	ldrb	r3, [r7, #7]
 8008772:	429a      	cmp	r2, r3
 8008774:	f43f af46 	beq.w	8008604 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008778:	2300      	movs	r3, #0
}
 800877a:	4618      	mov	r0, r3
 800877c:	3770      	adds	r7, #112	; 0x70
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}

08008782 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008782:	b480      	push	{r7}
 8008784:	b085      	sub	sp, #20
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008790:	2b01      	cmp	r3, #1
 8008792:	d101      	bne.n	8008798 <HAL_UARTEx_DisableFifoMode+0x16>
 8008794:	2302      	movs	r3, #2
 8008796:	e027      	b.n	80087e8 <HAL_UARTEx_DisableFifoMode+0x66>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2201      	movs	r2, #1
 800879c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2224      	movs	r2, #36	; 0x24
 80087a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f022 0201 	bic.w	r2, r2, #1
 80087be:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80087c6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2200      	movs	r2, #0
 80087cc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	68fa      	ldr	r2, [r7, #12]
 80087d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2220      	movs	r2, #32
 80087da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2200      	movs	r2, #0
 80087e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80087e6:	2300      	movs	r3, #0
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3714      	adds	r7, #20
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b084      	sub	sp, #16
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008804:	2b01      	cmp	r3, #1
 8008806:	d101      	bne.n	800880c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008808:	2302      	movs	r3, #2
 800880a:	e02d      	b.n	8008868 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2201      	movs	r2, #1
 8008810:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2224      	movs	r2, #36	; 0x24
 8008818:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	681a      	ldr	r2, [r3, #0]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f022 0201 	bic.w	r2, r2, #1
 8008832:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	683a      	ldr	r2, [r7, #0]
 8008844:	430a      	orrs	r2, r1
 8008846:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 f84f 	bl	80088ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	68fa      	ldr	r2, [r7, #12]
 8008854:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2220      	movs	r2, #32
 800885a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008866:	2300      	movs	r3, #0
}
 8008868:	4618      	mov	r0, r3
 800886a:	3710      	adds	r7, #16
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008880:	2b01      	cmp	r3, #1
 8008882:	d101      	bne.n	8008888 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008884:	2302      	movs	r3, #2
 8008886:	e02d      	b.n	80088e4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2201      	movs	r2, #1
 800888c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2224      	movs	r2, #36	; 0x24
 8008894:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f022 0201 	bic.w	r2, r2, #1
 80088ae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	683a      	ldr	r2, [r7, #0]
 80088c0:	430a      	orrs	r2, r1
 80088c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f000 f811 	bl	80088ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	68fa      	ldr	r2, [r7, #12]
 80088d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2220      	movs	r2, #32
 80088d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80088e2:	2300      	movs	r3, #0
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3710      	adds	r7, #16
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b085      	sub	sp, #20
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d108      	bne.n	800890e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2201      	movs	r2, #1
 8008900:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800890c:	e031      	b.n	8008972 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800890e:	2310      	movs	r3, #16
 8008910:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008912:	2310      	movs	r3, #16
 8008914:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	689b      	ldr	r3, [r3, #8]
 800891c:	0e5b      	lsrs	r3, r3, #25
 800891e:	b2db      	uxtb	r3, r3
 8008920:	f003 0307 	and.w	r3, r3, #7
 8008924:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	0f5b      	lsrs	r3, r3, #29
 800892e:	b2db      	uxtb	r3, r3
 8008930:	f003 0307 	and.w	r3, r3, #7
 8008934:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008936:	7bbb      	ldrb	r3, [r7, #14]
 8008938:	7b3a      	ldrb	r2, [r7, #12]
 800893a:	4911      	ldr	r1, [pc, #68]	; (8008980 <UARTEx_SetNbDataToProcess+0x94>)
 800893c:	5c8a      	ldrb	r2, [r1, r2]
 800893e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008942:	7b3a      	ldrb	r2, [r7, #12]
 8008944:	490f      	ldr	r1, [pc, #60]	; (8008984 <UARTEx_SetNbDataToProcess+0x98>)
 8008946:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008948:	fb93 f3f2 	sdiv	r3, r3, r2
 800894c:	b29a      	uxth	r2, r3
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008954:	7bfb      	ldrb	r3, [r7, #15]
 8008956:	7b7a      	ldrb	r2, [r7, #13]
 8008958:	4909      	ldr	r1, [pc, #36]	; (8008980 <UARTEx_SetNbDataToProcess+0x94>)
 800895a:	5c8a      	ldrb	r2, [r1, r2]
 800895c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008960:	7b7a      	ldrb	r2, [r7, #13]
 8008962:	4908      	ldr	r1, [pc, #32]	; (8008984 <UARTEx_SetNbDataToProcess+0x98>)
 8008964:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008966:	fb93 f3f2 	sdiv	r3, r3, r2
 800896a:	b29a      	uxth	r2, r3
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008972:	bf00      	nop
 8008974:	3714      	adds	r7, #20
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr
 800897e:	bf00      	nop
 8008980:	0800903c 	.word	0x0800903c
 8008984:	08009044 	.word	0x08009044

08008988 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008988:	b084      	sub	sp, #16
 800898a:	b580      	push	{r7, lr}
 800898c:	b084      	sub	sp, #16
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
 8008992:	f107 001c 	add.w	r0, r7, #28
 8008996:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800899a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800899c:	2b01      	cmp	r3, #1
 800899e:	d120      	bne.n	80089e2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	68da      	ldr	r2, [r3, #12]
 80089b0:	4b2a      	ldr	r3, [pc, #168]	; (8008a5c <USB_CoreInit+0xd4>)
 80089b2:	4013      	ands	r3, r2
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80089c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d105      	bne.n	80089d6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	68db      	ldr	r3, [r3, #12]
 80089ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 faac 	bl	8008f34 <USB_CoreReset>
 80089dc:	4603      	mov	r3, r0
 80089de:	73fb      	strb	r3, [r7, #15]
 80089e0:	e01a      	b.n	8008a18 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	68db      	ldr	r3, [r3, #12]
 80089e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 faa0 	bl	8008f34 <USB_CoreReset>
 80089f4:	4603      	mov	r3, r0
 80089f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80089f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d106      	bne.n	8008a0c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a02:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	639a      	str	r2, [r3, #56]	; 0x38
 8008a0a:	e005      	b.n	8008a18 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a1a:	2b01      	cmp	r3, #1
 8008a1c:	d116      	bne.n	8008a4c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a22:	b29a      	uxth	r2, r3
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008a2c:	4b0c      	ldr	r3, [pc, #48]	; (8008a60 <USB_CoreInit+0xd8>)
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	f043 0206 	orr.w	r2, r3, #6
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	f043 0220 	orr.w	r2, r3, #32
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3710      	adds	r7, #16
 8008a52:	46bd      	mov	sp, r7
 8008a54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a58:	b004      	add	sp, #16
 8008a5a:	4770      	bx	lr
 8008a5c:	ffbdffbf 	.word	0xffbdffbf
 8008a60:	03ee0000 	.word	0x03ee0000

08008a64 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b083      	sub	sp, #12
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	689b      	ldr	r3, [r3, #8]
 8008a70:	f023 0201 	bic.w	r2, r3, #1
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008a78:	2300      	movs	r3, #0
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	370c      	adds	r7, #12
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr

08008a86 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008a86:	b580      	push	{r7, lr}
 8008a88:	b084      	sub	sp, #16
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
 8008a8e:	460b      	mov	r3, r1
 8008a90:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008a92:	2300      	movs	r3, #0
 8008a94:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	68db      	ldr	r3, [r3, #12]
 8008a9a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008aa2:	78fb      	ldrb	r3, [r7, #3]
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d115      	bne.n	8008ad4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	68db      	ldr	r3, [r3, #12]
 8008aac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008ab4:	2001      	movs	r0, #1
 8008ab6:	f7f8 fced 	bl	8001494 <HAL_Delay>
      ms++;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	3301      	adds	r3, #1
 8008abe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 fa29 	bl	8008f18 <USB_GetMode>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d01e      	beq.n	8008b0a <USB_SetCurrentMode+0x84>
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2b31      	cmp	r3, #49	; 0x31
 8008ad0:	d9f0      	bls.n	8008ab4 <USB_SetCurrentMode+0x2e>
 8008ad2:	e01a      	b.n	8008b0a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008ad4:	78fb      	ldrb	r3, [r7, #3]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d115      	bne.n	8008b06 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	68db      	ldr	r3, [r3, #12]
 8008ade:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008ae6:	2001      	movs	r0, #1
 8008ae8:	f7f8 fcd4 	bl	8001494 <HAL_Delay>
      ms++;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	3301      	adds	r3, #1
 8008af0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 fa10 	bl	8008f18 <USB_GetMode>
 8008af8:	4603      	mov	r3, r0
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d005      	beq.n	8008b0a <USB_SetCurrentMode+0x84>
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2b31      	cmp	r3, #49	; 0x31
 8008b02:	d9f0      	bls.n	8008ae6 <USB_SetCurrentMode+0x60>
 8008b04:	e001      	b.n	8008b0a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008b06:	2301      	movs	r3, #1
 8008b08:	e005      	b.n	8008b16 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2b32      	cmp	r3, #50	; 0x32
 8008b0e:	d101      	bne.n	8008b14 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008b10:	2301      	movs	r3, #1
 8008b12:	e000      	b.n	8008b16 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008b14:	2300      	movs	r3, #0
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3710      	adds	r7, #16
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
	...

08008b20 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b20:	b084      	sub	sp, #16
 8008b22:	b580      	push	{r7, lr}
 8008b24:	b086      	sub	sp, #24
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	6078      	str	r0, [r7, #4]
 8008b2a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008b2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008b32:	2300      	movs	r3, #0
 8008b34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	613b      	str	r3, [r7, #16]
 8008b3e:	e009      	b.n	8008b54 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	3340      	adds	r3, #64	; 0x40
 8008b46:	009b      	lsls	r3, r3, #2
 8008b48:	4413      	add	r3, r2
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	3301      	adds	r3, #1
 8008b52:	613b      	str	r3, [r7, #16]
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	2b0e      	cmp	r3, #14
 8008b58:	d9f2      	bls.n	8008b40 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d11c      	bne.n	8008b9a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	68fa      	ldr	r2, [r7, #12]
 8008b6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b6e:	f043 0302 	orr.w	r3, r3, #2
 8008b72:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b78:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	601a      	str	r2, [r3, #0]
 8008b98:	e005      	b.n	8008ba6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b9e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008bac:	461a      	mov	r2, r3
 8008bae:	2300      	movs	r3, #0
 8008bb0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bb8:	4619      	mov	r1, r3
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	680b      	ldr	r3, [r1, #0]
 8008bc4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d10c      	bne.n	8008be6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d104      	bne.n	8008bdc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008bd2:	2100      	movs	r1, #0
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 f965 	bl	8008ea4 <USB_SetDevSpeed>
 8008bda:	e008      	b.n	8008bee <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008bdc:	2101      	movs	r1, #1
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 f960 	bl	8008ea4 <USB_SetDevSpeed>
 8008be4:	e003      	b.n	8008bee <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008be6:	2103      	movs	r1, #3
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 f95b 	bl	8008ea4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008bee:	2110      	movs	r1, #16
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f000 f8f3 	bl	8008ddc <USB_FlushTxFifo>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d001      	beq.n	8008c00 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 f91f 	bl	8008e44 <USB_FlushRxFifo>
 8008c06:	4603      	mov	r3, r0
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d001      	beq.n	8008c10 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c16:	461a      	mov	r2, r3
 8008c18:	2300      	movs	r3, #0
 8008c1a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c22:	461a      	mov	r2, r3
 8008c24:	2300      	movs	r3, #0
 8008c26:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c2e:	461a      	mov	r2, r3
 8008c30:	2300      	movs	r3, #0
 8008c32:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c34:	2300      	movs	r3, #0
 8008c36:	613b      	str	r3, [r7, #16]
 8008c38:	e043      	b.n	8008cc2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	015a      	lsls	r2, r3, #5
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	4413      	add	r3, r2
 8008c42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c50:	d118      	bne.n	8008c84 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d10a      	bne.n	8008c6e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	015a      	lsls	r2, r3, #5
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	4413      	add	r3, r2
 8008c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c64:	461a      	mov	r2, r3
 8008c66:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008c6a:	6013      	str	r3, [r2, #0]
 8008c6c:	e013      	b.n	8008c96 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	015a      	lsls	r2, r3, #5
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	4413      	add	r3, r2
 8008c76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008c80:	6013      	str	r3, [r2, #0]
 8008c82:	e008      	b.n	8008c96 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	015a      	lsls	r2, r3, #5
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	4413      	add	r3, r2
 8008c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c90:	461a      	mov	r2, r3
 8008c92:	2300      	movs	r3, #0
 8008c94:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	015a      	lsls	r2, r3, #5
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	4413      	add	r3, r2
 8008c9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	015a      	lsls	r2, r3, #5
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	4413      	add	r3, r2
 8008cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008cba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	613b      	str	r3, [r7, #16]
 8008cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc4:	693a      	ldr	r2, [r7, #16]
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d3b7      	bcc.n	8008c3a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008cca:	2300      	movs	r3, #0
 8008ccc:	613b      	str	r3, [r7, #16]
 8008cce:	e043      	b.n	8008d58 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	015a      	lsls	r2, r3, #5
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	4413      	add	r3, r2
 8008cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ce2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ce6:	d118      	bne.n	8008d1a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d10a      	bne.n	8008d04 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	015a      	lsls	r2, r3, #5
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	4413      	add	r3, r2
 8008cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008d00:	6013      	str	r3, [r2, #0]
 8008d02:	e013      	b.n	8008d2c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	015a      	lsls	r2, r3, #5
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	4413      	add	r3, r2
 8008d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d10:	461a      	mov	r2, r3
 8008d12:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008d16:	6013      	str	r3, [r2, #0]
 8008d18:	e008      	b.n	8008d2c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	015a      	lsls	r2, r3, #5
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	4413      	add	r3, r2
 8008d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d26:	461a      	mov	r2, r3
 8008d28:	2300      	movs	r3, #0
 8008d2a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	015a      	lsls	r2, r3, #5
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	4413      	add	r3, r2
 8008d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d38:	461a      	mov	r2, r3
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	015a      	lsls	r2, r3, #5
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	4413      	add	r3, r2
 8008d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008d50:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	3301      	adds	r3, #1
 8008d56:	613b      	str	r3, [r7, #16]
 8008d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5a:	693a      	ldr	r2, [r7, #16]
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	d3b7      	bcc.n	8008cd0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d66:	691b      	ldr	r3, [r3, #16]
 8008d68:	68fa      	ldr	r2, [r7, #12]
 8008d6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d72:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2200      	movs	r2, #0
 8008d78:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008d80:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d105      	bne.n	8008d94 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	699b      	ldr	r3, [r3, #24]
 8008d8c:	f043 0210 	orr.w	r2, r3, #16
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	699a      	ldr	r2, [r3, #24]
 8008d98:	4b0e      	ldr	r3, [pc, #56]	; (8008dd4 <USB_DevInit+0x2b4>)
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	687a      	ldr	r2, [r7, #4]
 8008d9e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d005      	beq.n	8008db2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	699b      	ldr	r3, [r3, #24]
 8008daa:	f043 0208 	orr.w	r2, r3, #8
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008db2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d105      	bne.n	8008dc4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	699a      	ldr	r2, [r3, #24]
 8008dbc:	4b06      	ldr	r3, [pc, #24]	; (8008dd8 <USB_DevInit+0x2b8>)
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3718      	adds	r7, #24
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008dd0:	b004      	add	sp, #16
 8008dd2:	4770      	bx	lr
 8008dd4:	803c3800 	.word	0x803c3800
 8008dd8:	40000004 	.word	0x40000004

08008ddc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b085      	sub	sp, #20
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008de6:	2300      	movs	r3, #0
 8008de8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	3301      	adds	r3, #1
 8008dee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	4a13      	ldr	r2, [pc, #76]	; (8008e40 <USB_FlushTxFifo+0x64>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d901      	bls.n	8008dfc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008df8:	2303      	movs	r3, #3
 8008dfa:	e01b      	b.n	8008e34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	691b      	ldr	r3, [r3, #16]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	daf2      	bge.n	8008dea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008e04:	2300      	movs	r3, #0
 8008e06:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	019b      	lsls	r3, r3, #6
 8008e0c:	f043 0220 	orr.w	r2, r3, #32
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	3301      	adds	r3, #1
 8008e18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	4a08      	ldr	r2, [pc, #32]	; (8008e40 <USB_FlushTxFifo+0x64>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d901      	bls.n	8008e26 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008e22:	2303      	movs	r3, #3
 8008e24:	e006      	b.n	8008e34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	f003 0320 	and.w	r3, r3, #32
 8008e2e:	2b20      	cmp	r3, #32
 8008e30:	d0f0      	beq.n	8008e14 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008e32:	2300      	movs	r3, #0
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3714      	adds	r7, #20
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr
 8008e40:	00030d40 	.word	0x00030d40

08008e44 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b085      	sub	sp, #20
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	3301      	adds	r3, #1
 8008e54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	4a11      	ldr	r2, [pc, #68]	; (8008ea0 <USB_FlushRxFifo+0x5c>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d901      	bls.n	8008e62 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008e5e:	2303      	movs	r3, #3
 8008e60:	e018      	b.n	8008e94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	691b      	ldr	r3, [r3, #16]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	daf2      	bge.n	8008e50 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2210      	movs	r2, #16
 8008e72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	3301      	adds	r3, #1
 8008e78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	4a08      	ldr	r2, [pc, #32]	; (8008ea0 <USB_FlushRxFifo+0x5c>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d901      	bls.n	8008e86 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008e82:	2303      	movs	r3, #3
 8008e84:	e006      	b.n	8008e94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	691b      	ldr	r3, [r3, #16]
 8008e8a:	f003 0310 	and.w	r3, r3, #16
 8008e8e:	2b10      	cmp	r3, #16
 8008e90:	d0f0      	beq.n	8008e74 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008e92:	2300      	movs	r3, #0
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3714      	adds	r7, #20
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr
 8008ea0:	00030d40 	.word	0x00030d40

08008ea4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b085      	sub	sp, #20
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	460b      	mov	r3, r1
 8008eae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eba:	681a      	ldr	r2, [r3, #0]
 8008ebc:	78fb      	ldrb	r3, [r7, #3]
 8008ebe:	68f9      	ldr	r1, [r7, #12]
 8008ec0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008ec8:	2300      	movs	r3, #0
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3714      	adds	r7, #20
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed4:	4770      	bx	lr

08008ed6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008ed6:	b480      	push	{r7}
 8008ed8:	b085      	sub	sp, #20
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	68fa      	ldr	r2, [r7, #12]
 8008eec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008ef0:	f023 0303 	bic.w	r3, r3, #3
 8008ef4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	68fa      	ldr	r2, [r7, #12]
 8008f00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f04:	f043 0302 	orr.w	r3, r3, #2
 8008f08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008f0a:	2300      	movs	r3, #0
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3714      	adds	r7, #20
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr

08008f18 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b083      	sub	sp, #12
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	695b      	ldr	r3, [r3, #20]
 8008f24:	f003 0301 	and.w	r3, r3, #1
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	370c      	adds	r7, #12
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr

08008f34 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b085      	sub	sp, #20
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	3301      	adds	r3, #1
 8008f44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	4a13      	ldr	r2, [pc, #76]	; (8008f98 <USB_CoreReset+0x64>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d901      	bls.n	8008f52 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008f4e:	2303      	movs	r3, #3
 8008f50:	e01b      	b.n	8008f8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	691b      	ldr	r3, [r3, #16]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	daf2      	bge.n	8008f40 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	691b      	ldr	r3, [r3, #16]
 8008f62:	f043 0201 	orr.w	r2, r3, #1
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	4a09      	ldr	r2, [pc, #36]	; (8008f98 <USB_CoreReset+0x64>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d901      	bls.n	8008f7c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008f78:	2303      	movs	r3, #3
 8008f7a:	e006      	b.n	8008f8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	691b      	ldr	r3, [r3, #16]
 8008f80:	f003 0301 	and.w	r3, r3, #1
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d0f0      	beq.n	8008f6a <USB_CoreReset+0x36>

  return HAL_OK;
 8008f88:	2300      	movs	r3, #0
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3714      	adds	r7, #20
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f94:	4770      	bx	lr
 8008f96:	bf00      	nop
 8008f98:	00030d40 	.word	0x00030d40

08008f9c <__libc_init_array>:
 8008f9c:	b570      	push	{r4, r5, r6, lr}
 8008f9e:	4d0d      	ldr	r5, [pc, #52]	; (8008fd4 <__libc_init_array+0x38>)
 8008fa0:	4c0d      	ldr	r4, [pc, #52]	; (8008fd8 <__libc_init_array+0x3c>)
 8008fa2:	1b64      	subs	r4, r4, r5
 8008fa4:	10a4      	asrs	r4, r4, #2
 8008fa6:	2600      	movs	r6, #0
 8008fa8:	42a6      	cmp	r6, r4
 8008faa:	d109      	bne.n	8008fc0 <__libc_init_array+0x24>
 8008fac:	4d0b      	ldr	r5, [pc, #44]	; (8008fdc <__libc_init_array+0x40>)
 8008fae:	4c0c      	ldr	r4, [pc, #48]	; (8008fe0 <__libc_init_array+0x44>)
 8008fb0:	f000 f820 	bl	8008ff4 <_init>
 8008fb4:	1b64      	subs	r4, r4, r5
 8008fb6:	10a4      	asrs	r4, r4, #2
 8008fb8:	2600      	movs	r6, #0
 8008fba:	42a6      	cmp	r6, r4
 8008fbc:	d105      	bne.n	8008fca <__libc_init_array+0x2e>
 8008fbe:	bd70      	pop	{r4, r5, r6, pc}
 8008fc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fc4:	4798      	blx	r3
 8008fc6:	3601      	adds	r6, #1
 8008fc8:	e7ee      	b.n	8008fa8 <__libc_init_array+0xc>
 8008fca:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fce:	4798      	blx	r3
 8008fd0:	3601      	adds	r6, #1
 8008fd2:	e7f2      	b.n	8008fba <__libc_init_array+0x1e>
 8008fd4:	08009054 	.word	0x08009054
 8008fd8:	08009054 	.word	0x08009054
 8008fdc:	08009054 	.word	0x08009054
 8008fe0:	08009058 	.word	0x08009058

08008fe4 <memset>:
 8008fe4:	4402      	add	r2, r0
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d100      	bne.n	8008fee <memset+0xa>
 8008fec:	4770      	bx	lr
 8008fee:	f803 1b01 	strb.w	r1, [r3], #1
 8008ff2:	e7f9      	b.n	8008fe8 <memset+0x4>

08008ff4 <_init>:
 8008ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ff6:	bf00      	nop
 8008ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ffa:	bc08      	pop	{r3}
 8008ffc:	469e      	mov	lr, r3
 8008ffe:	4770      	bx	lr

08009000 <_fini>:
 8009000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009002:	bf00      	nop
 8009004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009006:	bc08      	pop	{r3}
 8009008:	469e      	mov	lr, r3
 800900a:	4770      	bx	lr
