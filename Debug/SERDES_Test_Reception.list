
SERDES_Test_Reception.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d54  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08008fec  08008fec  00018fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800902c  0800902c  0001902c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009034  08009034  00019034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009038  08009038  00019038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  0800903c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  0800904c  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  080090ac  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b5c  240000d0  0800910c  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000c2c  0800910c  00020c2c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f9f5  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f3b  00000000  00000000  0003faf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001578  00000000  00000000  00042a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001470  00000000  00000000  00043fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038ed1  00000000  00000000  00045418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bff6  00000000  00000000  0007e2e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016d5ab  00000000  00000000  0009a2df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0020788a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d28  00000000  00000000  002078dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08008fd4 	.word	0x08008fd4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08008fd4 	.word	0x08008fd4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f000 feb6 	bl	8001350 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f8b4 	bl	8000750 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 fa74 	bl	8000ad4 <MX_GPIO_Init>
  MX_ETH_Init();
 80005ec:	f000 f934 	bl	8000858 <MX_ETH_Init>
  MX_DMA_Init();
 80005f0:	f000 fa50 	bl	8000a94 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f4:	f000 fa1c 	bl	8000a30 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 80005f8:	f000 f97a 	bl	80008f0 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 80005fc:	f000 f9cc 	bl	8000998 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */


	// Enable interrupt for DMA (Transfer completed)
	__HAL_DMA_ENABLE_IT(&hdma_tim2_ch4, DMA_IT_TC);
 8000600:	4b3e      	ldr	r3, [pc, #248]	; (80006fc <main+0x120>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a3e      	ldr	r2, [pc, #248]	; (8000700 <main+0x124>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d04a      	beq.n	80006a0 <main+0xc4>
 800060a:	4b3c      	ldr	r3, [pc, #240]	; (80006fc <main+0x120>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a3d      	ldr	r2, [pc, #244]	; (8000704 <main+0x128>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d045      	beq.n	80006a0 <main+0xc4>
 8000614:	4b39      	ldr	r3, [pc, #228]	; (80006fc <main+0x120>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a3b      	ldr	r2, [pc, #236]	; (8000708 <main+0x12c>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d040      	beq.n	80006a0 <main+0xc4>
 800061e:	4b37      	ldr	r3, [pc, #220]	; (80006fc <main+0x120>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a3a      	ldr	r2, [pc, #232]	; (800070c <main+0x130>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d03b      	beq.n	80006a0 <main+0xc4>
 8000628:	4b34      	ldr	r3, [pc, #208]	; (80006fc <main+0x120>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a38      	ldr	r2, [pc, #224]	; (8000710 <main+0x134>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d036      	beq.n	80006a0 <main+0xc4>
 8000632:	4b32      	ldr	r3, [pc, #200]	; (80006fc <main+0x120>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a37      	ldr	r2, [pc, #220]	; (8000714 <main+0x138>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d031      	beq.n	80006a0 <main+0xc4>
 800063c:	4b2f      	ldr	r3, [pc, #188]	; (80006fc <main+0x120>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a35      	ldr	r2, [pc, #212]	; (8000718 <main+0x13c>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d02c      	beq.n	80006a0 <main+0xc4>
 8000646:	4b2d      	ldr	r3, [pc, #180]	; (80006fc <main+0x120>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a34      	ldr	r2, [pc, #208]	; (800071c <main+0x140>)
 800064c:	4293      	cmp	r3, r2
 800064e:	d027      	beq.n	80006a0 <main+0xc4>
 8000650:	4b2a      	ldr	r3, [pc, #168]	; (80006fc <main+0x120>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a32      	ldr	r2, [pc, #200]	; (8000720 <main+0x144>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d022      	beq.n	80006a0 <main+0xc4>
 800065a:	4b28      	ldr	r3, [pc, #160]	; (80006fc <main+0x120>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a31      	ldr	r2, [pc, #196]	; (8000724 <main+0x148>)
 8000660:	4293      	cmp	r3, r2
 8000662:	d01d      	beq.n	80006a0 <main+0xc4>
 8000664:	4b25      	ldr	r3, [pc, #148]	; (80006fc <main+0x120>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a2f      	ldr	r2, [pc, #188]	; (8000728 <main+0x14c>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d018      	beq.n	80006a0 <main+0xc4>
 800066e:	4b23      	ldr	r3, [pc, #140]	; (80006fc <main+0x120>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a2e      	ldr	r2, [pc, #184]	; (800072c <main+0x150>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d013      	beq.n	80006a0 <main+0xc4>
 8000678:	4b20      	ldr	r3, [pc, #128]	; (80006fc <main+0x120>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a2c      	ldr	r2, [pc, #176]	; (8000730 <main+0x154>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d00e      	beq.n	80006a0 <main+0xc4>
 8000682:	4b1e      	ldr	r3, [pc, #120]	; (80006fc <main+0x120>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a2b      	ldr	r2, [pc, #172]	; (8000734 <main+0x158>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d009      	beq.n	80006a0 <main+0xc4>
 800068c:	4b1b      	ldr	r3, [pc, #108]	; (80006fc <main+0x120>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a29      	ldr	r2, [pc, #164]	; (8000738 <main+0x15c>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d004      	beq.n	80006a0 <main+0xc4>
 8000696:	4b19      	ldr	r3, [pc, #100]	; (80006fc <main+0x120>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a28      	ldr	r2, [pc, #160]	; (800073c <main+0x160>)
 800069c:	4293      	cmp	r3, r2
 800069e:	d108      	bne.n	80006b2 <main+0xd6>
 80006a0:	4b16      	ldr	r3, [pc, #88]	; (80006fc <main+0x120>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	4b15      	ldr	r3, [pc, #84]	; (80006fc <main+0x120>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	f042 0210 	orr.w	r2, r2, #16
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	e007      	b.n	80006c2 <main+0xe6>
 80006b2:	4b12      	ldr	r3, [pc, #72]	; (80006fc <main+0x120>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	4b10      	ldr	r3, [pc, #64]	; (80006fc <main+0x120>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f042 0202 	orr.w	r2, r2, #2
 80006c0:	601a      	str	r2, [r3, #0]

	// Start DMA transfer from GPIO Port E
	HAL_DMA_Start(&hdma_tim2_ch4, (uint32_t) &GPIOE->IDR, (uint32_t) RecievedData, 1000);
 80006c2:	4a1f      	ldr	r2, [pc, #124]	; (8000740 <main+0x164>)
 80006c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c8:	491e      	ldr	r1, [pc, #120]	; (8000744 <main+0x168>)
 80006ca:	480c      	ldr	r0, [pc, #48]	; (80006fc <main+0x120>)
 80006cc:	f001 fb82 	bl	8001dd4 <HAL_DMA_Start>

	// Start input capture of the TIMER 2 at pin PA3 (Channel 4 of the TIMER)
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_4);
 80006d0:	210c      	movs	r1, #12
 80006d2:	481d      	ldr	r0, [pc, #116]	; (8000748 <main+0x16c>)
 80006d4:	f006 fac4 	bl	8006c60 <HAL_TIM_IC_Start>

	// Enable DMA interrupt for input capture event
	TIM2->DIER |= (1<<12);
 80006d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006dc:	68db      	ldr	r3, [r3, #12]
 80006de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006e6:	60d3      	str	r3, [r2, #12]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80006e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006ec:	4817      	ldr	r0, [pc, #92]	; (800074c <main+0x170>)
 80006ee:	f003 fd90 	bl	8004212 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80006f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006f6:	f000 febd 	bl	8001474 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80006fa:	e7f5      	b.n	80006e8 <main+0x10c>
 80006fc:	24000220 	.word	0x24000220
 8000700:	40020010 	.word	0x40020010
 8000704:	40020028 	.word	0x40020028
 8000708:	40020040 	.word	0x40020040
 800070c:	40020058 	.word	0x40020058
 8000710:	40020070 	.word	0x40020070
 8000714:	40020088 	.word	0x40020088
 8000718:	400200a0 	.word	0x400200a0
 800071c:	400200b8 	.word	0x400200b8
 8000720:	40020410 	.word	0x40020410
 8000724:	40020428 	.word	0x40020428
 8000728:	40020440 	.word	0x40020440
 800072c:	40020458 	.word	0x40020458
 8000730:	40020470 	.word	0x40020470
 8000734:	40020488 	.word	0x40020488
 8000738:	400204a0 	.word	0x400204a0
 800073c:	400204b8 	.word	0x400204b8
 8000740:	24000838 	.word	0x24000838
 8000744:	58021010 	.word	0x58021010
 8000748:	240001d4 	.word	0x240001d4
 800074c:	58020400 	.word	0x58020400

08000750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b09c      	sub	sp, #112	; 0x70
 8000754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000756:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800075a:	224c      	movs	r2, #76	; 0x4c
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f008 fc30 	bl	8008fc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	2220      	movs	r2, #32
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f008 fc2a 	bl	8008fc4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000770:	2002      	movs	r0, #2
 8000772:	f003 feb1 	bl	80044d8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000776:	2300      	movs	r3, #0
 8000778:	603b      	str	r3, [r7, #0]
 800077a:	4b34      	ldr	r3, [pc, #208]	; (800084c <SystemClock_Config+0xfc>)
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	4a33      	ldr	r2, [pc, #204]	; (800084c <SystemClock_Config+0xfc>)
 8000780:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000784:	6193      	str	r3, [r2, #24]
 8000786:	4b31      	ldr	r3, [pc, #196]	; (800084c <SystemClock_Config+0xfc>)
 8000788:	699b      	ldr	r3, [r3, #24]
 800078a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800078e:	603b      	str	r3, [r7, #0]
 8000790:	4b2f      	ldr	r3, [pc, #188]	; (8000850 <SystemClock_Config+0x100>)
 8000792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000794:	4a2e      	ldr	r2, [pc, #184]	; (8000850 <SystemClock_Config+0x100>)
 8000796:	f043 0301 	orr.w	r3, r3, #1
 800079a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800079c:	4b2c      	ldr	r3, [pc, #176]	; (8000850 <SystemClock_Config+0x100>)
 800079e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007a0:	f003 0301 	and.w	r3, r3, #1
 80007a4:	603b      	str	r3, [r7, #0]
 80007a6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007a8:	bf00      	nop
 80007aa:	4b28      	ldr	r3, [pc, #160]	; (800084c <SystemClock_Config+0xfc>)
 80007ac:	699b      	ldr	r3, [r3, #24]
 80007ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007b6:	d1f8      	bne.n	80007aa <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80007b8:	4b26      	ldr	r3, [pc, #152]	; (8000854 <SystemClock_Config+0x104>)
 80007ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007bc:	f023 0303 	bic.w	r3, r3, #3
 80007c0:	4a24      	ldr	r2, [pc, #144]	; (8000854 <SystemClock_Config+0x104>)
 80007c2:	f043 0302 	orr.w	r3, r3, #2
 80007c6:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007c8:	2301      	movs	r3, #1
 80007ca:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007cc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d2:	2302      	movs	r3, #2
 80007d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007d6:	2302      	movs	r3, #2
 80007d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007da:	2301      	movs	r3, #1
 80007dc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 80007de:	2378      	movs	r3, #120	; 0x78
 80007e0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007e2:	2302      	movs	r3, #2
 80007e4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007e6:	2304      	movs	r3, #4
 80007e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007ea:	2302      	movs	r3, #2
 80007ec:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007ee:	230c      	movs	r3, #12
 80007f0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007f2:	2300      	movs	r3, #0
 80007f4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007fe:	4618      	mov	r0, r3
 8000800:	f003 feb4 	bl	800456c <HAL_RCC_OscConfig>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800080a:	f000 fa4b 	bl	8000ca4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080e:	233f      	movs	r3, #63	; 0x3f
 8000810:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000812:	2303      	movs	r3, #3
 8000814:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800081a:	2308      	movs	r3, #8
 800081c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800081e:	2340      	movs	r3, #64	; 0x40
 8000820:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000822:	2340      	movs	r3, #64	; 0x40
 8000824:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000826:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800082a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800082c:	2340      	movs	r3, #64	; 0x40
 800082e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	2104      	movs	r1, #4
 8000834:	4618      	mov	r0, r3
 8000836:	f004 fac7 	bl	8004dc8 <HAL_RCC_ClockConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000840:	f000 fa30 	bl	8000ca4 <Error_Handler>
  }
}
 8000844:	bf00      	nop
 8000846:	3770      	adds	r7, #112	; 0x70
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	58024800 	.word	0x58024800
 8000850:	58000400 	.word	0x58000400
 8000854:	58024400 	.word	0x58024400

08000858 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800085c:	4b1e      	ldr	r3, [pc, #120]	; (80008d8 <MX_ETH_Init+0x80>)
 800085e:	4a1f      	ldr	r2, [pc, #124]	; (80008dc <MX_ETH_Init+0x84>)
 8000860:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000862:	4b1f      	ldr	r3, [pc, #124]	; (80008e0 <MX_ETH_Init+0x88>)
 8000864:	2200      	movs	r2, #0
 8000866:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000868:	4b1d      	ldr	r3, [pc, #116]	; (80008e0 <MX_ETH_Init+0x88>)
 800086a:	2280      	movs	r2, #128	; 0x80
 800086c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800086e:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <MX_ETH_Init+0x88>)
 8000870:	22e1      	movs	r2, #225	; 0xe1
 8000872:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000874:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <MX_ETH_Init+0x88>)
 8000876:	2200      	movs	r2, #0
 8000878:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800087a:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <MX_ETH_Init+0x88>)
 800087c:	2200      	movs	r2, #0
 800087e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000880:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <MX_ETH_Init+0x88>)
 8000882:	2200      	movs	r2, #0
 8000884:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000886:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <MX_ETH_Init+0x80>)
 8000888:	4a15      	ldr	r2, [pc, #84]	; (80008e0 <MX_ETH_Init+0x88>)
 800088a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <MX_ETH_Init+0x80>)
 800088e:	2201      	movs	r2, #1
 8000890:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_ETH_Init+0x80>)
 8000894:	4a13      	ldr	r2, [pc, #76]	; (80008e4 <MX_ETH_Init+0x8c>)
 8000896:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <MX_ETH_Init+0x80>)
 800089a:	4a13      	ldr	r2, [pc, #76]	; (80008e8 <MX_ETH_Init+0x90>)
 800089c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_ETH_Init+0x80>)
 80008a0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80008a4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008a6:	480c      	ldr	r0, [pc, #48]	; (80008d8 <MX_ETH_Init+0x80>)
 80008a8:	f002 fec6 	bl	8003638 <HAL_ETH_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80008b2:	f000 f9f7 	bl	8000ca4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008b6:	2238      	movs	r2, #56	; 0x38
 80008b8:	2100      	movs	r1, #0
 80008ba:	480c      	ldr	r0, [pc, #48]	; (80008ec <MX_ETH_Init+0x94>)
 80008bc:	f008 fb82 	bl	8008fc4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008c0:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <MX_ETH_Init+0x94>)
 80008c2:	2221      	movs	r2, #33	; 0x21
 80008c4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008c6:	4b09      	ldr	r3, [pc, #36]	; (80008ec <MX_ETH_Init+0x94>)
 80008c8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80008cc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008ce:	4b07      	ldr	r3, [pc, #28]	; (80008ec <MX_ETH_Init+0x94>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	24000124 	.word	0x24000124
 80008dc:	40028000 	.word	0x40028000
 80008e0:	24000c20 	.word	0x24000c20
 80008e4:	24000070 	.word	0x24000070
 80008e8:	24000010 	.word	0x24000010
 80008ec:	240000ec 	.word	0x240000ec

080008f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b088      	sub	sp, #32
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800090e:	4b21      	ldr	r3, [pc, #132]	; (8000994 <MX_TIM2_Init+0xa4>)
 8000910:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000914:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000916:	4b1f      	ldr	r3, [pc, #124]	; (8000994 <MX_TIM2_Init+0xa4>)
 8000918:	2200      	movs	r2, #0
 800091a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091c:	4b1d      	ldr	r3, [pc, #116]	; (8000994 <MX_TIM2_Init+0xa4>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000922:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <MX_TIM2_Init+0xa4>)
 8000924:	f04f 32ff 	mov.w	r2, #4294967295
 8000928:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800092a:	4b1a      	ldr	r3, [pc, #104]	; (8000994 <MX_TIM2_Init+0xa4>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000930:	4b18      	ldr	r3, [pc, #96]	; (8000994 <MX_TIM2_Init+0xa4>)
 8000932:	2200      	movs	r2, #0
 8000934:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000936:	4817      	ldr	r0, [pc, #92]	; (8000994 <MX_TIM2_Init+0xa4>)
 8000938:	f006 f93a 	bl	8006bb0 <HAL_TIM_IC_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000942:	f000 f9af 	bl	8000ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800094a:	2380      	movs	r3, #128	; 0x80
 800094c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	4619      	mov	r1, r3
 8000954:	480f      	ldr	r0, [pc, #60]	; (8000994 <MX_TIM2_Init+0xa4>)
 8000956:	f006 fe55 	bl	8007604 <HAL_TIMEx_MasterConfigSynchronization>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000960:	f000 f9a0 	bl	8000ca4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000964:	2300      	movs	r3, #0
 8000966:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000968:	2301      	movs	r3, #1
 800096a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 2;
 8000970:	2302      	movs	r3, #2
 8000972:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	220c      	movs	r2, #12
 8000978:	4619      	mov	r1, r3
 800097a:	4806      	ldr	r0, [pc, #24]	; (8000994 <MX_TIM2_Init+0xa4>)
 800097c:	f006 fb93 	bl	80070a6 <HAL_TIM_IC_ConfigChannel>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000986:	f000 f98d 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	3720      	adds	r7, #32
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	240001d4 	.word	0x240001d4

08000998 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800099c:	4b22      	ldr	r3, [pc, #136]	; (8000a28 <MX_USART3_UART_Init+0x90>)
 800099e:	4a23      	ldr	r2, [pc, #140]	; (8000a2c <MX_USART3_UART_Init+0x94>)
 80009a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009a2:	4b21      	ldr	r3, [pc, #132]	; (8000a28 <MX_USART3_UART_Init+0x90>)
 80009a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009aa:	4b1f      	ldr	r3, [pc, #124]	; (8000a28 <MX_USART3_UART_Init+0x90>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009b0:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <MX_USART3_UART_Init+0x90>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009b6:	4b1c      	ldr	r3, [pc, #112]	; (8000a28 <MX_USART3_UART_Init+0x90>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009bc:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <MX_USART3_UART_Init+0x90>)
 80009be:	220c      	movs	r2, #12
 80009c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c2:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <MX_USART3_UART_Init+0x90>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c8:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <MX_USART3_UART_Init+0x90>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ce:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <MX_USART3_UART_Init+0x90>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009d4:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <MX_USART3_UART_Init+0x90>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009da:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <MX_USART3_UART_Init+0x90>)
 80009dc:	2200      	movs	r2, #0
 80009de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009e0:	4811      	ldr	r0, [pc, #68]	; (8000a28 <MX_USART3_UART_Init+0x90>)
 80009e2:	f006 febb 	bl	800775c <HAL_UART_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009ec:	f000 f95a 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009f0:	2100      	movs	r1, #0
 80009f2:	480d      	ldr	r0, [pc, #52]	; (8000a28 <MX_USART3_UART_Init+0x90>)
 80009f4:	f007 feee 	bl	80087d4 <HAL_UARTEx_SetTxFifoThreshold>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009fe:	f000 f951 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a02:	2100      	movs	r1, #0
 8000a04:	4808      	ldr	r0, [pc, #32]	; (8000a28 <MX_USART3_UART_Init+0x90>)
 8000a06:	f007 ff23 	bl	8008850 <HAL_UARTEx_SetRxFifoThreshold>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a10:	f000 f948 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a14:	4804      	ldr	r0, [pc, #16]	; (8000a28 <MX_USART3_UART_Init+0x90>)
 8000a16:	f007 fea4 	bl	8008762 <HAL_UARTEx_DisableFifoMode>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a20:	f000 f940 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	24000298 	.word	0x24000298
 8000a2c:	40004800 	.word	0x40004800

08000a30 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a34:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a36:	4a16      	ldr	r2, [pc, #88]	; (8000a90 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000a38:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000a3a:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a3c:	2209      	movs	r2, #9
 8000a3e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a40:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a42:	2202      	movs	r2, #2
 8000a44:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a46:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a4e:	2202      	movs	r2, #2
 8000a50:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000a64:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a6a:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a76:	4805      	ldr	r0, [pc, #20]	; (8000a8c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a78:	f003 fbe5 	bl	8004246 <HAL_PCD_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000a82:	f000 f90f 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	24000328 	.word	0x24000328
 8000a90:	40080000 	.word	0x40080000

08000a94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a9a:	4b0d      	ldr	r3, [pc, #52]	; (8000ad0 <MX_DMA_Init+0x3c>)
 8000a9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000aa0:	4a0b      	ldr	r2, [pc, #44]	; (8000ad0 <MX_DMA_Init+0x3c>)
 8000aa2:	f043 0301 	orr.w	r3, r3, #1
 8000aa6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000aaa:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <MX_DMA_Init+0x3c>)
 8000aac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ab0:	f003 0301 	and.w	r3, r3, #1
 8000ab4:	607b      	str	r3, [r7, #4]
 8000ab6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2100      	movs	r1, #0
 8000abc:	200c      	movs	r0, #12
 8000abe:	f000 fdf8 	bl	80016b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ac2:	200c      	movs	r0, #12
 8000ac4:	f000 fe0f 	bl	80016e6 <HAL_NVIC_EnableIRQ>

}
 8000ac8:	bf00      	nop
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	58024400 	.word	0x58024400

08000ad4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08c      	sub	sp, #48	; 0x30
 8000ad8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ada:	f107 031c 	add.w	r3, r7, #28
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
 8000ae8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aea:	4b5f      	ldr	r3, [pc, #380]	; (8000c68 <MX_GPIO_Init+0x194>)
 8000aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af0:	4a5d      	ldr	r2, [pc, #372]	; (8000c68 <MX_GPIO_Init+0x194>)
 8000af2:	f043 0310 	orr.w	r3, r3, #16
 8000af6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000afa:	4b5b      	ldr	r3, [pc, #364]	; (8000c68 <MX_GPIO_Init+0x194>)
 8000afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b00:	f003 0310 	and.w	r3, r3, #16
 8000b04:	61bb      	str	r3, [r7, #24]
 8000b06:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b08:	4b57      	ldr	r3, [pc, #348]	; (8000c68 <MX_GPIO_Init+0x194>)
 8000b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b0e:	4a56      	ldr	r2, [pc, #344]	; (8000c68 <MX_GPIO_Init+0x194>)
 8000b10:	f043 0304 	orr.w	r3, r3, #4
 8000b14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b18:	4b53      	ldr	r3, [pc, #332]	; (8000c68 <MX_GPIO_Init+0x194>)
 8000b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1e:	f003 0304 	and.w	r3, r3, #4
 8000b22:	617b      	str	r3, [r7, #20]
 8000b24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b26:	4b50      	ldr	r3, [pc, #320]	; (8000c68 <MX_GPIO_Init+0x194>)
 8000b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2c:	4a4e      	ldr	r2, [pc, #312]	; (8000c68 <MX_GPIO_Init+0x194>)
 8000b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b36:	4b4c      	ldr	r3, [pc, #304]	; (8000c68 <MX_GPIO_Init+0x194>)
 8000b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b40:	613b      	str	r3, [r7, #16]
 8000b42:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b44:	4b48      	ldr	r3, [pc, #288]	; (8000c68 <MX_GPIO_Init+0x194>)
 8000b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4a:	4a47      	ldr	r2, [pc, #284]	; (8000c68 <MX_GPIO_Init+0x194>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b54:	4b44      	ldr	r3, [pc, #272]	; (8000c68 <MX_GPIO_Init+0x194>)
 8000b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b62:	4b41      	ldr	r3, [pc, #260]	; (8000c68 <MX_GPIO_Init+0x194>)
 8000b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b68:	4a3f      	ldr	r2, [pc, #252]	; (8000c68 <MX_GPIO_Init+0x194>)
 8000b6a:	f043 0302 	orr.w	r3, r3, #2
 8000b6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b72:	4b3d      	ldr	r3, [pc, #244]	; (8000c68 <MX_GPIO_Init+0x194>)
 8000b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b78:	f003 0302 	and.w	r3, r3, #2
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b80:	4b39      	ldr	r3, [pc, #228]	; (8000c68 <MX_GPIO_Init+0x194>)
 8000b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b86:	4a38      	ldr	r2, [pc, #224]	; (8000c68 <MX_GPIO_Init+0x194>)
 8000b88:	f043 0308 	orr.w	r3, r3, #8
 8000b8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b90:	4b35      	ldr	r3, [pc, #212]	; (8000c68 <MX_GPIO_Init+0x194>)
 8000b92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b96:	f003 0308 	and.w	r3, r3, #8
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b9e:	4b32      	ldr	r3, [pc, #200]	; (8000c68 <MX_GPIO_Init+0x194>)
 8000ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba4:	4a30      	ldr	r2, [pc, #192]	; (8000c68 <MX_GPIO_Init+0x194>)
 8000ba6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000baa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bae:	4b2e      	ldr	r3, [pc, #184]	; (8000c68 <MX_GPIO_Init+0x194>)
 8000bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bb8:	603b      	str	r3, [r7, #0]
 8000bba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f244 0101 	movw	r1, #16385	; 0x4001
 8000bc2:	482a      	ldr	r0, [pc, #168]	; (8000c6c <MX_GPIO_Init+0x198>)
 8000bc4:	f003 fb0c 	bl	80041e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bce:	4828      	ldr	r0, [pc, #160]	; (8000c70 <MX_GPIO_Init+0x19c>)
 8000bd0:	f003 fb06 	bl	80041e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DATA_IN_2_Pin DATA_IN_3_Pin DATA_IN_4_Pin DATA_IN_5_Pin
                           DATA_IN_6_Pin DATA_IN_7_Pin DATA_IN_0_Pin DATA_IN_1_Pin */
  GPIO_InitStruct.Pin = DATA_IN_2_Pin|DATA_IN_3_Pin|DATA_IN_4_Pin|DATA_IN_5_Pin
 8000bd4:	23ff      	movs	r3, #255	; 0xff
 8000bd6:	61fb      	str	r3, [r7, #28]
                          |DATA_IN_6_Pin|DATA_IN_7_Pin|DATA_IN_0_Pin|DATA_IN_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000be0:	f107 031c 	add.w	r3, r7, #28
 8000be4:	4619      	mov	r1, r3
 8000be6:	4823      	ldr	r0, [pc, #140]	; (8000c74 <MX_GPIO_Init+0x1a0>)
 8000be8:	f003 f94a 	bl	8003e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bf2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bfc:	f107 031c 	add.w	r3, r7, #28
 8000c00:	4619      	mov	r1, r3
 8000c02:	481d      	ldr	r0, [pc, #116]	; (8000c78 <MX_GPIO_Init+0x1a4>)
 8000c04:	f003 f93c 	bl	8003e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000c08:	f244 0301 	movw	r3, #16385	; 0x4001
 8000c0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c16:	2300      	movs	r3, #0
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1a:	f107 031c 	add.w	r3, r7, #28
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4812      	ldr	r0, [pc, #72]	; (8000c6c <MX_GPIO_Init+0x198>)
 8000c22:	f003 f92d 	bl	8003e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000c26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c34:	2300      	movs	r3, #0
 8000c36:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c38:	f107 031c 	add.w	r3, r7, #28
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	480c      	ldr	r0, [pc, #48]	; (8000c70 <MX_GPIO_Init+0x19c>)
 8000c40:	f003 f91e 	bl	8003e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000c44:	2380      	movs	r3, #128	; 0x80
 8000c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c48:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c52:	f107 031c 	add.w	r3, r7, #28
 8000c56:	4619      	mov	r1, r3
 8000c58:	4808      	ldr	r0, [pc, #32]	; (8000c7c <MX_GPIO_Init+0x1a8>)
 8000c5a:	f003 f911 	bl	8003e80 <HAL_GPIO_Init>

}
 8000c5e:	bf00      	nop
 8000c60:	3730      	adds	r7, #48	; 0x30
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	58024400 	.word	0x58024400
 8000c6c:	58020400 	.word	0x58020400
 8000c70:	58020c00 	.word	0x58020c00
 8000c74:	58021000 	.word	0x58021000
 8000c78:	58020800 	.word	0x58020800
 8000c7c:	58021800 	.word	0x58021800

08000c80 <HAL_TIM_IC_CaptureCallback>:




void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]

	Counter++;
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <HAL_TIM_IC_CaptureCallback+0x20>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	4a04      	ldr	r2, [pc, #16]	; (8000ca0 <HAL_TIM_IC_CaptureCallback+0x20>)
 8000c90:	6013      	str	r3, [r2, #0]

}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	24000834 	.word	0x24000834

08000ca4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca8:	b672      	cpsid	i
}
 8000caa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cac:	e7fe      	b.n	8000cac <Error_Handler+0x8>
	...

08000cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <HAL_MspInit+0x30>)
 8000cb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cbc:	4a08      	ldr	r2, [pc, #32]	; (8000ce0 <HAL_MspInit+0x30>)
 8000cbe:	f043 0302 	orr.w	r3, r3, #2
 8000cc2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_MspInit+0x30>)
 8000cc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ccc:	f003 0302 	and.w	r3, r3, #2
 8000cd0:	607b      	str	r3, [r7, #4]
 8000cd2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	58024400 	.word	0x58024400

08000ce4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08e      	sub	sp, #56	; 0x38
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a59      	ldr	r2, [pc, #356]	; (8000e68 <HAL_ETH_MspInit+0x184>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	f040 80ab 	bne.w	8000e5e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000d08:	4b58      	ldr	r3, [pc, #352]	; (8000e6c <HAL_ETH_MspInit+0x188>)
 8000d0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d0e:	4a57      	ldr	r2, [pc, #348]	; (8000e6c <HAL_ETH_MspInit+0x188>)
 8000d10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d14:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d18:	4b54      	ldr	r3, [pc, #336]	; (8000e6c <HAL_ETH_MspInit+0x188>)
 8000d1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d22:	623b      	str	r3, [r7, #32]
 8000d24:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000d26:	4b51      	ldr	r3, [pc, #324]	; (8000e6c <HAL_ETH_MspInit+0x188>)
 8000d28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d2c:	4a4f      	ldr	r2, [pc, #316]	; (8000e6c <HAL_ETH_MspInit+0x188>)
 8000d2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d32:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d36:	4b4d      	ldr	r3, [pc, #308]	; (8000e6c <HAL_ETH_MspInit+0x188>)
 8000d38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d40:	61fb      	str	r3, [r7, #28]
 8000d42:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000d44:	4b49      	ldr	r3, [pc, #292]	; (8000e6c <HAL_ETH_MspInit+0x188>)
 8000d46:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d4a:	4a48      	ldr	r2, [pc, #288]	; (8000e6c <HAL_ETH_MspInit+0x188>)
 8000d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d50:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d54:	4b45      	ldr	r3, [pc, #276]	; (8000e6c <HAL_ETH_MspInit+0x188>)
 8000d56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d5e:	61bb      	str	r3, [r7, #24]
 8000d60:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d62:	4b42      	ldr	r3, [pc, #264]	; (8000e6c <HAL_ETH_MspInit+0x188>)
 8000d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d68:	4a40      	ldr	r2, [pc, #256]	; (8000e6c <HAL_ETH_MspInit+0x188>)
 8000d6a:	f043 0304 	orr.w	r3, r3, #4
 8000d6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d72:	4b3e      	ldr	r3, [pc, #248]	; (8000e6c <HAL_ETH_MspInit+0x188>)
 8000d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d78:	f003 0304 	and.w	r3, r3, #4
 8000d7c:	617b      	str	r3, [r7, #20]
 8000d7e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d80:	4b3a      	ldr	r3, [pc, #232]	; (8000e6c <HAL_ETH_MspInit+0x188>)
 8000d82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d86:	4a39      	ldr	r2, [pc, #228]	; (8000e6c <HAL_ETH_MspInit+0x188>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d90:	4b36      	ldr	r3, [pc, #216]	; (8000e6c <HAL_ETH_MspInit+0x188>)
 8000d92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	613b      	str	r3, [r7, #16]
 8000d9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9e:	4b33      	ldr	r3, [pc, #204]	; (8000e6c <HAL_ETH_MspInit+0x188>)
 8000da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da4:	4a31      	ldr	r2, [pc, #196]	; (8000e6c <HAL_ETH_MspInit+0x188>)
 8000da6:	f043 0302 	orr.w	r3, r3, #2
 8000daa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dae:	4b2f      	ldr	r3, [pc, #188]	; (8000e6c <HAL_ETH_MspInit+0x188>)
 8000db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db4:	f003 0302 	and.w	r3, r3, #2
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dbc:	4b2b      	ldr	r3, [pc, #172]	; (8000e6c <HAL_ETH_MspInit+0x188>)
 8000dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc2:	4a2a      	ldr	r2, [pc, #168]	; (8000e6c <HAL_ETH_MspInit+0x188>)
 8000dc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dcc:	4b27      	ldr	r3, [pc, #156]	; (8000e6c <HAL_ETH_MspInit+0x188>)
 8000dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000dda:	2332      	movs	r3, #50	; 0x32
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dde:	2302      	movs	r3, #2
 8000de0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de6:	2300      	movs	r3, #0
 8000de8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dea:	230b      	movs	r3, #11
 8000dec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df2:	4619      	mov	r1, r3
 8000df4:	481e      	ldr	r0, [pc, #120]	; (8000e70 <HAL_ETH_MspInit+0x18c>)
 8000df6:	f003 f843 	bl	8003e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000dfa:	2386      	movs	r3, #134	; 0x86
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	2300      	movs	r3, #0
 8000e08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e0a:	230b      	movs	r3, #11
 8000e0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e12:	4619      	mov	r1, r3
 8000e14:	4817      	ldr	r0, [pc, #92]	; (8000e74 <HAL_ETH_MspInit+0x190>)
 8000e16:	f003 f833 	bl	8003e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e20:	2302      	movs	r3, #2
 8000e22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e2c:	230b      	movs	r3, #11
 8000e2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e34:	4619      	mov	r1, r3
 8000e36:	4810      	ldr	r0, [pc, #64]	; (8000e78 <HAL_ETH_MspInit+0x194>)
 8000e38:	f003 f822 	bl	8003e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000e3c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e42:	2302      	movs	r3, #2
 8000e44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e4e:	230b      	movs	r3, #11
 8000e50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e56:	4619      	mov	r1, r3
 8000e58:	4808      	ldr	r0, [pc, #32]	; (8000e7c <HAL_ETH_MspInit+0x198>)
 8000e5a:	f003 f811 	bl	8003e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000e5e:	bf00      	nop
 8000e60:	3738      	adds	r7, #56	; 0x38
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40028000 	.word	0x40028000
 8000e6c:	58024400 	.word	0x58024400
 8000e70:	58020800 	.word	0x58020800
 8000e74:	58020000 	.word	0x58020000
 8000e78:	58020400 	.word	0x58020400
 8000e7c:	58021800 	.word	0x58021800

08000e80 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08a      	sub	sp, #40	; 0x28
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ea0:	d162      	bne.n	8000f68 <HAL_TIM_IC_MspInit+0xe8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ea2:	4b33      	ldr	r3, [pc, #204]	; (8000f70 <HAL_TIM_IC_MspInit+0xf0>)
 8000ea4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ea8:	4a31      	ldr	r2, [pc, #196]	; (8000f70 <HAL_TIM_IC_MspInit+0xf0>)
 8000eaa:	f043 0301 	orr.w	r3, r3, #1
 8000eae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000eb2:	4b2f      	ldr	r3, [pc, #188]	; (8000f70 <HAL_TIM_IC_MspInit+0xf0>)
 8000eb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000eb8:	f003 0301 	and.w	r3, r3, #1
 8000ebc:	613b      	str	r3, [r7, #16]
 8000ebe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec0:	4b2b      	ldr	r3, [pc, #172]	; (8000f70 <HAL_TIM_IC_MspInit+0xf0>)
 8000ec2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec6:	4a2a      	ldr	r2, [pc, #168]	; (8000f70 <HAL_TIM_IC_MspInit+0xf0>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ed0:	4b27      	ldr	r3, [pc, #156]	; (8000f70 <HAL_TIM_IC_MspInit+0xf0>)
 8000ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ede:	2308      	movs	r3, #8
 8000ee0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eea:	2300      	movs	r3, #0
 8000eec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef2:	f107 0314 	add.w	r3, r7, #20
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	481e      	ldr	r0, [pc, #120]	; (8000f74 <HAL_TIM_IC_MspInit+0xf4>)
 8000efa:	f002 ffc1 	bl	8003e80 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH4 Init */
    hdma_tim2_ch4.Instance = DMA1_Stream1;
 8000efe:	4b1e      	ldr	r3, [pc, #120]	; (8000f78 <HAL_TIM_IC_MspInit+0xf8>)
 8000f00:	4a1e      	ldr	r2, [pc, #120]	; (8000f7c <HAL_TIM_IC_MspInit+0xfc>)
 8000f02:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch4.Init.Request = DMA_REQUEST_TIM2_CH4;
 8000f04:	4b1c      	ldr	r3, [pc, #112]	; (8000f78 <HAL_TIM_IC_MspInit+0xf8>)
 8000f06:	2215      	movs	r2, #21
 8000f08:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f0a:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <HAL_TIM_IC_MspInit+0xf8>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f10:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <HAL_TIM_IC_MspInit+0xf8>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8000f16:	4b18      	ldr	r3, [pc, #96]	; (8000f78 <HAL_TIM_IC_MspInit+0xf8>)
 8000f18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f1c:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f1e:	4b16      	ldr	r3, [pc, #88]	; (8000f78 <HAL_TIM_IC_MspInit+0xf8>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f24:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <HAL_TIM_IC_MspInit+0xf8>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch4.Init.Mode = DMA_NORMAL;
 8000f2a:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <HAL_TIM_IC_MspInit+0xf8>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8000f30:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <HAL_TIM_IC_MspInit+0xf8>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f36:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <HAL_TIM_IC_MspInit+0xf8>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch4) != HAL_OK)
 8000f3c:	480e      	ldr	r0, [pc, #56]	; (8000f78 <HAL_TIM_IC_MspInit+0xf8>)
 8000f3e:	f000 fbed 	bl	800171c <HAL_DMA_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <HAL_TIM_IC_MspInit+0xcc>
    {
      Error_Handler();
 8000f48:	f7ff feac 	bl	8000ca4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_ic,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch4);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <HAL_TIM_IC_MspInit+0xf8>)
 8000f50:	631a      	str	r2, [r3, #48]	; 0x30
 8000f52:	4a09      	ldr	r2, [pc, #36]	; (8000f78 <HAL_TIM_IC_MspInit+0xf8>)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	201c      	movs	r0, #28
 8000f5e:	f000 fba8 	bl	80016b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f62:	201c      	movs	r0, #28
 8000f64:	f000 fbbf 	bl	80016e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f68:	bf00      	nop
 8000f6a:	3728      	adds	r7, #40	; 0x28
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	58024400 	.word	0x58024400
 8000f74:	58020000 	.word	0x58020000
 8000f78:	24000220 	.word	0x24000220
 8000f7c:	40020028 	.word	0x40020028

08000f80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b0b8      	sub	sp, #224	; 0xe0
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f98:	f107 0310 	add.w	r3, r7, #16
 8000f9c:	22bc      	movs	r2, #188	; 0xbc
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f008 f80f 	bl	8008fc4 <memset>
  if(huart->Instance==USART3)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a25      	ldr	r2, [pc, #148]	; (8001040 <HAL_UART_MspInit+0xc0>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d142      	bne.n	8001036 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fba:	f107 0310 	add.w	r3, r7, #16
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f004 fa8e 	bl	80054e0 <HAL_RCCEx_PeriphCLKConfig>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000fca:	f7ff fe6b 	bl	8000ca4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fce:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <HAL_UART_MspInit+0xc4>)
 8000fd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fd4:	4a1b      	ldr	r2, [pc, #108]	; (8001044 <HAL_UART_MspInit+0xc4>)
 8000fd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fda:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000fde:	4b19      	ldr	r3, [pc, #100]	; (8001044 <HAL_UART_MspInit+0xc4>)
 8000fe0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fe4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fec:	4b15      	ldr	r3, [pc, #84]	; (8001044 <HAL_UART_MspInit+0xc4>)
 8000fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff2:	4a14      	ldr	r2, [pc, #80]	; (8001044 <HAL_UART_MspInit+0xc4>)
 8000ff4:	f043 0308 	orr.w	r3, r3, #8
 8000ff8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ffc:	4b11      	ldr	r3, [pc, #68]	; (8001044 <HAL_UART_MspInit+0xc4>)
 8000ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001002:	f003 0308 	and.w	r3, r3, #8
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800100a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800100e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001012:	2302      	movs	r3, #2
 8001014:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101e:	2300      	movs	r3, #0
 8001020:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001024:	2307      	movs	r3, #7
 8001026:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800102a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800102e:	4619      	mov	r1, r3
 8001030:	4805      	ldr	r0, [pc, #20]	; (8001048 <HAL_UART_MspInit+0xc8>)
 8001032:	f002 ff25 	bl	8003e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001036:	bf00      	nop
 8001038:	37e0      	adds	r7, #224	; 0xe0
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40004800 	.word	0x40004800
 8001044:	58024400 	.word	0x58024400
 8001048:	58020c00 	.word	0x58020c00

0800104c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b0b8      	sub	sp, #224	; 0xe0
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001064:	f107 0310 	add.w	r3, r7, #16
 8001068:	22bc      	movs	r2, #188	; 0xbc
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f007 ffa9 	bl	8008fc4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a36      	ldr	r2, [pc, #216]	; (8001150 <HAL_PCD_MspInit+0x104>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d165      	bne.n	8001148 <HAL_PCD_MspInit+0xfc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800107c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001080:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 4;
 8001082:	2304      	movs	r3, #4
 8001084:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 100;
 8001086:	2364      	movs	r3, #100	; 0x64
 8001088:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800108a:	2302      	movs	r3, #2
 800108c:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 800108e:	2304      	movs	r3, #4
 8001090:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001092:	2302      	movs	r3, #2
 8001094:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 8001096:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800109a:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80010a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80010a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010a8:	f107 0310 	add.w	r3, r7, #16
 80010ac:	4618      	mov	r0, r3
 80010ae:	f004 fa17 	bl	80054e0 <HAL_RCCEx_PeriphCLKConfig>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80010b8:	f7ff fdf4 	bl	8000ca4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80010bc:	f003 fa46 	bl	800454c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c0:	4b24      	ldr	r3, [pc, #144]	; (8001154 <HAL_PCD_MspInit+0x108>)
 80010c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c6:	4a23      	ldr	r2, [pc, #140]	; (8001154 <HAL_PCD_MspInit+0x108>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010d0:	4b20      	ldr	r3, [pc, #128]	; (8001154 <HAL_PCD_MspInit+0x108>)
 80010d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80010de:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80010e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e6:	2302      	movs	r3, #2
 80010e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f2:	2300      	movs	r3, #0
 80010f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80010f8:	230a      	movs	r3, #10
 80010fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fe:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001102:	4619      	mov	r1, r3
 8001104:	4814      	ldr	r0, [pc, #80]	; (8001158 <HAL_PCD_MspInit+0x10c>)
 8001106:	f002 febb 	bl	8003e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800110a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800110e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001112:	2300      	movs	r3, #0
 8001114:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001122:	4619      	mov	r1, r3
 8001124:	480c      	ldr	r0, [pc, #48]	; (8001158 <HAL_PCD_MspInit+0x10c>)
 8001126:	f002 feab 	bl	8003e80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800112a:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <HAL_PCD_MspInit+0x108>)
 800112c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001130:	4a08      	ldr	r2, [pc, #32]	; (8001154 <HAL_PCD_MspInit+0x108>)
 8001132:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001136:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800113a:	4b06      	ldr	r3, [pc, #24]	; (8001154 <HAL_PCD_MspInit+0x108>)
 800113c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001140:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001148:	bf00      	nop
 800114a:	37e0      	adds	r7, #224	; 0xe0
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40080000 	.word	0x40080000
 8001154:	58024400 	.word	0x58024400
 8001158:	58020000 	.word	0x58020000

0800115c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001160:	e7fe      	b.n	8001160 <NMI_Handler+0x4>

08001162 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001166:	e7fe      	b.n	8001166 <HardFault_Handler+0x4>

08001168 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800116c:	e7fe      	b.n	800116c <MemManage_Handler+0x4>

0800116e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001172:	e7fe      	b.n	8001172 <BusFault_Handler+0x4>

08001174 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001178:	e7fe      	b.n	8001178 <UsageFault_Handler+0x4>

0800117a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011a8:	f000 f944 	bl	8001434 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch4);
 80011b4:	4805      	ldr	r0, [pc, #20]	; (80011cc <DMA1_Stream1_IRQHandler+0x1c>)
 80011b6:	f000 ff2d 	bl	8002014 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */
  HAL_UART_Transmit(&huart3, &RecievedData, 1000, 10);
 80011ba:	230a      	movs	r3, #10
 80011bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011c0:	4903      	ldr	r1, [pc, #12]	; (80011d0 <DMA1_Stream1_IRQHandler+0x20>)
 80011c2:	4804      	ldr	r0, [pc, #16]	; (80011d4 <DMA1_Stream1_IRQHandler+0x24>)
 80011c4:	f006 fb1a 	bl	80077fc <HAL_UART_Transmit>


  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	24000220 	.word	0x24000220
 80011d0:	24000838 	.word	0x24000838
 80011d4:	24000298 	.word	0x24000298

080011d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011dc:	4802      	ldr	r0, [pc, #8]	; (80011e8 <TIM2_IRQHandler+0x10>)
 80011de:	f005 fe43 	bl	8006e68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	240001d4 	.word	0x240001d4

080011ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011f0:	4b37      	ldr	r3, [pc, #220]	; (80012d0 <SystemInit+0xe4>)
 80011f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011f6:	4a36      	ldr	r2, [pc, #216]	; (80012d0 <SystemInit+0xe4>)
 80011f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001200:	4b34      	ldr	r3, [pc, #208]	; (80012d4 <SystemInit+0xe8>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 030f 	and.w	r3, r3, #15
 8001208:	2b06      	cmp	r3, #6
 800120a:	d807      	bhi.n	800121c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800120c:	4b31      	ldr	r3, [pc, #196]	; (80012d4 <SystemInit+0xe8>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f023 030f 	bic.w	r3, r3, #15
 8001214:	4a2f      	ldr	r2, [pc, #188]	; (80012d4 <SystemInit+0xe8>)
 8001216:	f043 0307 	orr.w	r3, r3, #7
 800121a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800121c:	4b2e      	ldr	r3, [pc, #184]	; (80012d8 <SystemInit+0xec>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a2d      	ldr	r2, [pc, #180]	; (80012d8 <SystemInit+0xec>)
 8001222:	f043 0301 	orr.w	r3, r3, #1
 8001226:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001228:	4b2b      	ldr	r3, [pc, #172]	; (80012d8 <SystemInit+0xec>)
 800122a:	2200      	movs	r2, #0
 800122c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800122e:	4b2a      	ldr	r3, [pc, #168]	; (80012d8 <SystemInit+0xec>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	4929      	ldr	r1, [pc, #164]	; (80012d8 <SystemInit+0xec>)
 8001234:	4b29      	ldr	r3, [pc, #164]	; (80012dc <SystemInit+0xf0>)
 8001236:	4013      	ands	r3, r2
 8001238:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800123a:	4b26      	ldr	r3, [pc, #152]	; (80012d4 <SystemInit+0xe8>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0308 	and.w	r3, r3, #8
 8001242:	2b00      	cmp	r3, #0
 8001244:	d007      	beq.n	8001256 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001246:	4b23      	ldr	r3, [pc, #140]	; (80012d4 <SystemInit+0xe8>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f023 030f 	bic.w	r3, r3, #15
 800124e:	4a21      	ldr	r2, [pc, #132]	; (80012d4 <SystemInit+0xe8>)
 8001250:	f043 0307 	orr.w	r3, r3, #7
 8001254:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001256:	4b20      	ldr	r3, [pc, #128]	; (80012d8 <SystemInit+0xec>)
 8001258:	2200      	movs	r2, #0
 800125a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800125c:	4b1e      	ldr	r3, [pc, #120]	; (80012d8 <SystemInit+0xec>)
 800125e:	2200      	movs	r2, #0
 8001260:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001262:	4b1d      	ldr	r3, [pc, #116]	; (80012d8 <SystemInit+0xec>)
 8001264:	2200      	movs	r2, #0
 8001266:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001268:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <SystemInit+0xec>)
 800126a:	4a1d      	ldr	r2, [pc, #116]	; (80012e0 <SystemInit+0xf4>)
 800126c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800126e:	4b1a      	ldr	r3, [pc, #104]	; (80012d8 <SystemInit+0xec>)
 8001270:	4a1c      	ldr	r2, [pc, #112]	; (80012e4 <SystemInit+0xf8>)
 8001272:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001274:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <SystemInit+0xec>)
 8001276:	4a1c      	ldr	r2, [pc, #112]	; (80012e8 <SystemInit+0xfc>)
 8001278:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800127a:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <SystemInit+0xec>)
 800127c:	2200      	movs	r2, #0
 800127e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001280:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <SystemInit+0xec>)
 8001282:	4a19      	ldr	r2, [pc, #100]	; (80012e8 <SystemInit+0xfc>)
 8001284:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001286:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <SystemInit+0xec>)
 8001288:	2200      	movs	r2, #0
 800128a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800128c:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <SystemInit+0xec>)
 800128e:	4a16      	ldr	r2, [pc, #88]	; (80012e8 <SystemInit+0xfc>)
 8001290:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001292:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <SystemInit+0xec>)
 8001294:	2200      	movs	r2, #0
 8001296:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001298:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <SystemInit+0xec>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a0e      	ldr	r2, [pc, #56]	; (80012d8 <SystemInit+0xec>)
 800129e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <SystemInit+0xec>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80012aa:	4b10      	ldr	r3, [pc, #64]	; (80012ec <SystemInit+0x100>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <SystemInit+0x104>)
 80012b0:	4013      	ands	r3, r2
 80012b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80012b6:	d202      	bcs.n	80012be <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80012b8:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <SystemInit+0x108>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80012be:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <SystemInit+0x10c>)
 80012c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80012c4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80012c6:	bf00      	nop
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	e000ed00 	.word	0xe000ed00
 80012d4:	52002000 	.word	0x52002000
 80012d8:	58024400 	.word	0x58024400
 80012dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80012e0:	02020200 	.word	0x02020200
 80012e4:	01ff0000 	.word	0x01ff0000
 80012e8:	01010280 	.word	0x01010280
 80012ec:	5c001000 	.word	0x5c001000
 80012f0:	ffff0000 	.word	0xffff0000
 80012f4:	51008108 	.word	0x51008108
 80012f8:	52004000 	.word	0x52004000

080012fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80012fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001334 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001300:	f7ff ff74 	bl	80011ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001304:	480c      	ldr	r0, [pc, #48]	; (8001338 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001306:	490d      	ldr	r1, [pc, #52]	; (800133c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001308:	4a0d      	ldr	r2, [pc, #52]	; (8001340 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800130a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800130c:	e002      	b.n	8001314 <LoopCopyDataInit>

0800130e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800130e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001312:	3304      	adds	r3, #4

08001314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001318:	d3f9      	bcc.n	800130e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800131a:	4a0a      	ldr	r2, [pc, #40]	; (8001344 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800131c:	4c0a      	ldr	r4, [pc, #40]	; (8001348 <LoopFillZerobss+0x22>)
  movs r3, #0
 800131e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001320:	e001      	b.n	8001326 <LoopFillZerobss>

08001322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001324:	3204      	adds	r2, #4

08001326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001328:	d3fb      	bcc.n	8001322 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800132a:	f007 fe27 	bl	8008f7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800132e:	f7ff f955 	bl	80005dc <main>
  bx  lr
 8001332:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001334:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001338:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800133c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001340:	0800903c 	.word	0x0800903c
  ldr r2, =_sbss
 8001344:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8001348:	24000c2c 	.word	0x24000c2c

0800134c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800134c:	e7fe      	b.n	800134c <ADC3_IRQHandler>
	...

08001350 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001356:	2003      	movs	r0, #3
 8001358:	f000 f9a0 	bl	800169c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800135c:	f003 feea 	bl	8005134 <HAL_RCC_GetSysClockFreq>
 8001360:	4602      	mov	r2, r0
 8001362:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <HAL_Init+0x68>)
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	0a1b      	lsrs	r3, r3, #8
 8001368:	f003 030f 	and.w	r3, r3, #15
 800136c:	4913      	ldr	r1, [pc, #76]	; (80013bc <HAL_Init+0x6c>)
 800136e:	5ccb      	ldrb	r3, [r1, r3]
 8001370:	f003 031f 	and.w	r3, r3, #31
 8001374:	fa22 f303 	lsr.w	r3, r2, r3
 8001378:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800137a:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <HAL_Init+0x68>)
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	f003 030f 	and.w	r3, r3, #15
 8001382:	4a0e      	ldr	r2, [pc, #56]	; (80013bc <HAL_Init+0x6c>)
 8001384:	5cd3      	ldrb	r3, [r2, r3]
 8001386:	f003 031f 	and.w	r3, r3, #31
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	fa22 f303 	lsr.w	r3, r2, r3
 8001390:	4a0b      	ldr	r2, [pc, #44]	; (80013c0 <HAL_Init+0x70>)
 8001392:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001394:	4a0b      	ldr	r2, [pc, #44]	; (80013c4 <HAL_Init+0x74>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800139a:	2000      	movs	r0, #0
 800139c:	f000 f814 	bl	80013c8 <HAL_InitTick>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e002      	b.n	80013b0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013aa:	f7ff fc81 	bl	8000cb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013ae:	2300      	movs	r3, #0
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	58024400 	.word	0x58024400
 80013bc:	08008fec 	.word	0x08008fec
 80013c0:	24000004 	.word	0x24000004
 80013c4:	24000000 	.word	0x24000000

080013c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80013d0:	4b15      	ldr	r3, [pc, #84]	; (8001428 <HAL_InitTick+0x60>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d101      	bne.n	80013dc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e021      	b.n	8001420 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80013dc:	4b13      	ldr	r3, [pc, #76]	; (800142c <HAL_InitTick+0x64>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	4b11      	ldr	r3, [pc, #68]	; (8001428 <HAL_InitTick+0x60>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	4619      	mov	r1, r3
 80013e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 f985 	bl	8001702 <HAL_SYSTICK_Config>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e00e      	b.n	8001420 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b0f      	cmp	r3, #15
 8001406:	d80a      	bhi.n	800141e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001408:	2200      	movs	r2, #0
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	f04f 30ff 	mov.w	r0, #4294967295
 8001410:	f000 f94f 	bl	80016b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001414:	4a06      	ldr	r2, [pc, #24]	; (8001430 <HAL_InitTick+0x68>)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800141a:	2300      	movs	r3, #0
 800141c:	e000      	b.n	8001420 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
}
 8001420:	4618      	mov	r0, r3
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	2400000c 	.word	0x2400000c
 800142c:	24000000 	.word	0x24000000
 8001430:	24000008 	.word	0x24000008

08001434 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001438:	4b06      	ldr	r3, [pc, #24]	; (8001454 <HAL_IncTick+0x20>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	461a      	mov	r2, r3
 800143e:	4b06      	ldr	r3, [pc, #24]	; (8001458 <HAL_IncTick+0x24>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4413      	add	r3, r2
 8001444:	4a04      	ldr	r2, [pc, #16]	; (8001458 <HAL_IncTick+0x24>)
 8001446:	6013      	str	r3, [r2, #0]
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	2400000c 	.word	0x2400000c
 8001458:	24000c28 	.word	0x24000c28

0800145c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return uwTick;
 8001460:	4b03      	ldr	r3, [pc, #12]	; (8001470 <HAL_GetTick+0x14>)
 8001462:	681b      	ldr	r3, [r3, #0]
}
 8001464:	4618      	mov	r0, r3
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	24000c28 	.word	0x24000c28

08001474 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800147c:	f7ff ffee 	bl	800145c <HAL_GetTick>
 8001480:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800148c:	d005      	beq.n	800149a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800148e:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <HAL_Delay+0x44>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	461a      	mov	r2, r3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4413      	add	r3, r2
 8001498:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800149a:	bf00      	nop
 800149c:	f7ff ffde 	bl	800145c <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	68fa      	ldr	r2, [r7, #12]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d8f7      	bhi.n	800149c <HAL_Delay+0x28>
  {
  }
}
 80014ac:	bf00      	nop
 80014ae:	bf00      	nop
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	2400000c 	.word	0x2400000c

080014bc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80014c0:	4b03      	ldr	r3, [pc, #12]	; (80014d0 <HAL_GetREVID+0x14>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	0c1b      	lsrs	r3, r3, #16
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	5c001000 	.word	0x5c001000

080014d4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80014dc:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80014e4:	4904      	ldr	r1, [pc, #16]	; (80014f8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	604b      	str	r3, [r1, #4]
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	58000400 	.word	0x58000400

080014fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800150c:	4b0b      	ldr	r3, [pc, #44]	; (800153c <__NVIC_SetPriorityGrouping+0x40>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001518:	4013      	ands	r3, r2
 800151a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <__NVIC_SetPriorityGrouping+0x44>)
 8001526:	4313      	orrs	r3, r2
 8001528:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800152a:	4a04      	ldr	r2, [pc, #16]	; (800153c <__NVIC_SetPriorityGrouping+0x40>)
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	60d3      	str	r3, [r2, #12]
}
 8001530:	bf00      	nop
 8001532:	3714      	adds	r7, #20
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	e000ed00 	.word	0xe000ed00
 8001540:	05fa0000 	.word	0x05fa0000

08001544 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001548:	4b04      	ldr	r3, [pc, #16]	; (800155c <__NVIC_GetPriorityGrouping+0x18>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	0a1b      	lsrs	r3, r3, #8
 800154e:	f003 0307 	and.w	r3, r3, #7
}
 8001552:	4618      	mov	r0, r3
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800156a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800156e:	2b00      	cmp	r3, #0
 8001570:	db0b      	blt.n	800158a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001572:	88fb      	ldrh	r3, [r7, #6]
 8001574:	f003 021f 	and.w	r2, r3, #31
 8001578:	4907      	ldr	r1, [pc, #28]	; (8001598 <__NVIC_EnableIRQ+0x38>)
 800157a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800157e:	095b      	lsrs	r3, r3, #5
 8001580:	2001      	movs	r0, #1
 8001582:	fa00 f202 	lsl.w	r2, r0, r2
 8001586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	e000e100 	.word	0xe000e100

0800159c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	6039      	str	r1, [r7, #0]
 80015a6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	db0a      	blt.n	80015c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	490c      	ldr	r1, [pc, #48]	; (80015e8 <__NVIC_SetPriority+0x4c>)
 80015b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ba:	0112      	lsls	r2, r2, #4
 80015bc:	b2d2      	uxtb	r2, r2
 80015be:	440b      	add	r3, r1
 80015c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c4:	e00a      	b.n	80015dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	4908      	ldr	r1, [pc, #32]	; (80015ec <__NVIC_SetPriority+0x50>)
 80015cc:	88fb      	ldrh	r3, [r7, #6]
 80015ce:	f003 030f 	and.w	r3, r3, #15
 80015d2:	3b04      	subs	r3, #4
 80015d4:	0112      	lsls	r2, r2, #4
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	440b      	add	r3, r1
 80015da:	761a      	strb	r2, [r3, #24]
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	e000e100 	.word	0xe000e100
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b089      	sub	sp, #36	; 0x24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	f1c3 0307 	rsb	r3, r3, #7
 800160a:	2b04      	cmp	r3, #4
 800160c:	bf28      	it	cs
 800160e:	2304      	movcs	r3, #4
 8001610:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3304      	adds	r3, #4
 8001616:	2b06      	cmp	r3, #6
 8001618:	d902      	bls.n	8001620 <NVIC_EncodePriority+0x30>
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	3b03      	subs	r3, #3
 800161e:	e000      	b.n	8001622 <NVIC_EncodePriority+0x32>
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001624:	f04f 32ff 	mov.w	r2, #4294967295
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	43da      	mvns	r2, r3
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	401a      	ands	r2, r3
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001638:	f04f 31ff 	mov.w	r1, #4294967295
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	fa01 f303 	lsl.w	r3, r1, r3
 8001642:	43d9      	mvns	r1, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001648:	4313      	orrs	r3, r2
         );
}
 800164a:	4618      	mov	r0, r3
 800164c:	3724      	adds	r7, #36	; 0x24
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
	...

08001658 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3b01      	subs	r3, #1
 8001664:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001668:	d301      	bcc.n	800166e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800166a:	2301      	movs	r3, #1
 800166c:	e00f      	b.n	800168e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800166e:	4a0a      	ldr	r2, [pc, #40]	; (8001698 <SysTick_Config+0x40>)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3b01      	subs	r3, #1
 8001674:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001676:	210f      	movs	r1, #15
 8001678:	f04f 30ff 	mov.w	r0, #4294967295
 800167c:	f7ff ff8e 	bl	800159c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001680:	4b05      	ldr	r3, [pc, #20]	; (8001698 <SysTick_Config+0x40>)
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001686:	4b04      	ldr	r3, [pc, #16]	; (8001698 <SysTick_Config+0x40>)
 8001688:	2207      	movs	r2, #7
 800168a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	e000e010 	.word	0xe000e010

0800169c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f7ff ff29 	bl	80014fc <__NVIC_SetPriorityGrouping>
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b086      	sub	sp, #24
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	4603      	mov	r3, r0
 80016ba:	60b9      	str	r1, [r7, #8]
 80016bc:	607a      	str	r2, [r7, #4]
 80016be:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016c0:	f7ff ff40 	bl	8001544 <__NVIC_GetPriorityGrouping>
 80016c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	68b9      	ldr	r1, [r7, #8]
 80016ca:	6978      	ldr	r0, [r7, #20]
 80016cc:	f7ff ff90 	bl	80015f0 <NVIC_EncodePriority>
 80016d0:	4602      	mov	r2, r0
 80016d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016d6:	4611      	mov	r1, r2
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff ff5f 	bl	800159c <__NVIC_SetPriority>
}
 80016de:	bf00      	nop
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	4603      	mov	r3, r0
 80016ee:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff ff33 	bl	8001560 <__NVIC_EnableIRQ>
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b082      	sub	sp, #8
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7ff ffa4 	bl	8001658 <SysTick_Config>
 8001710:	4603      	mov	r3, r0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
	...

0800171c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001724:	f7ff fe9a 	bl	800145c <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d101      	bne.n	8001734 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e316      	b.n	8001d62 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a66      	ldr	r2, [pc, #408]	; (80018d4 <HAL_DMA_Init+0x1b8>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d04a      	beq.n	80017d4 <HAL_DMA_Init+0xb8>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a65      	ldr	r2, [pc, #404]	; (80018d8 <HAL_DMA_Init+0x1bc>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d045      	beq.n	80017d4 <HAL_DMA_Init+0xb8>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a63      	ldr	r2, [pc, #396]	; (80018dc <HAL_DMA_Init+0x1c0>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d040      	beq.n	80017d4 <HAL_DMA_Init+0xb8>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a62      	ldr	r2, [pc, #392]	; (80018e0 <HAL_DMA_Init+0x1c4>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d03b      	beq.n	80017d4 <HAL_DMA_Init+0xb8>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a60      	ldr	r2, [pc, #384]	; (80018e4 <HAL_DMA_Init+0x1c8>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d036      	beq.n	80017d4 <HAL_DMA_Init+0xb8>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a5f      	ldr	r2, [pc, #380]	; (80018e8 <HAL_DMA_Init+0x1cc>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d031      	beq.n	80017d4 <HAL_DMA_Init+0xb8>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a5d      	ldr	r2, [pc, #372]	; (80018ec <HAL_DMA_Init+0x1d0>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d02c      	beq.n	80017d4 <HAL_DMA_Init+0xb8>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a5c      	ldr	r2, [pc, #368]	; (80018f0 <HAL_DMA_Init+0x1d4>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d027      	beq.n	80017d4 <HAL_DMA_Init+0xb8>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a5a      	ldr	r2, [pc, #360]	; (80018f4 <HAL_DMA_Init+0x1d8>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d022      	beq.n	80017d4 <HAL_DMA_Init+0xb8>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a59      	ldr	r2, [pc, #356]	; (80018f8 <HAL_DMA_Init+0x1dc>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d01d      	beq.n	80017d4 <HAL_DMA_Init+0xb8>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a57      	ldr	r2, [pc, #348]	; (80018fc <HAL_DMA_Init+0x1e0>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d018      	beq.n	80017d4 <HAL_DMA_Init+0xb8>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a56      	ldr	r2, [pc, #344]	; (8001900 <HAL_DMA_Init+0x1e4>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d013      	beq.n	80017d4 <HAL_DMA_Init+0xb8>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a54      	ldr	r2, [pc, #336]	; (8001904 <HAL_DMA_Init+0x1e8>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d00e      	beq.n	80017d4 <HAL_DMA_Init+0xb8>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a53      	ldr	r2, [pc, #332]	; (8001908 <HAL_DMA_Init+0x1ec>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d009      	beq.n	80017d4 <HAL_DMA_Init+0xb8>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a51      	ldr	r2, [pc, #324]	; (800190c <HAL_DMA_Init+0x1f0>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d004      	beq.n	80017d4 <HAL_DMA_Init+0xb8>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a50      	ldr	r2, [pc, #320]	; (8001910 <HAL_DMA_Init+0x1f4>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d101      	bne.n	80017d8 <HAL_DMA_Init+0xbc>
 80017d4:	2301      	movs	r3, #1
 80017d6:	e000      	b.n	80017da <HAL_DMA_Init+0xbe>
 80017d8:	2300      	movs	r3, #0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f000 813b 	beq.w	8001a56 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2202      	movs	r2, #2
 80017e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a37      	ldr	r2, [pc, #220]	; (80018d4 <HAL_DMA_Init+0x1b8>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d04a      	beq.n	8001890 <HAL_DMA_Init+0x174>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a36      	ldr	r2, [pc, #216]	; (80018d8 <HAL_DMA_Init+0x1bc>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d045      	beq.n	8001890 <HAL_DMA_Init+0x174>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a34      	ldr	r2, [pc, #208]	; (80018dc <HAL_DMA_Init+0x1c0>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d040      	beq.n	8001890 <HAL_DMA_Init+0x174>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a33      	ldr	r2, [pc, #204]	; (80018e0 <HAL_DMA_Init+0x1c4>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d03b      	beq.n	8001890 <HAL_DMA_Init+0x174>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a31      	ldr	r2, [pc, #196]	; (80018e4 <HAL_DMA_Init+0x1c8>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d036      	beq.n	8001890 <HAL_DMA_Init+0x174>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a30      	ldr	r2, [pc, #192]	; (80018e8 <HAL_DMA_Init+0x1cc>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d031      	beq.n	8001890 <HAL_DMA_Init+0x174>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a2e      	ldr	r2, [pc, #184]	; (80018ec <HAL_DMA_Init+0x1d0>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d02c      	beq.n	8001890 <HAL_DMA_Init+0x174>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a2d      	ldr	r2, [pc, #180]	; (80018f0 <HAL_DMA_Init+0x1d4>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d027      	beq.n	8001890 <HAL_DMA_Init+0x174>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a2b      	ldr	r2, [pc, #172]	; (80018f4 <HAL_DMA_Init+0x1d8>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d022      	beq.n	8001890 <HAL_DMA_Init+0x174>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a2a      	ldr	r2, [pc, #168]	; (80018f8 <HAL_DMA_Init+0x1dc>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d01d      	beq.n	8001890 <HAL_DMA_Init+0x174>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a28      	ldr	r2, [pc, #160]	; (80018fc <HAL_DMA_Init+0x1e0>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d018      	beq.n	8001890 <HAL_DMA_Init+0x174>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a27      	ldr	r2, [pc, #156]	; (8001900 <HAL_DMA_Init+0x1e4>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d013      	beq.n	8001890 <HAL_DMA_Init+0x174>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a25      	ldr	r2, [pc, #148]	; (8001904 <HAL_DMA_Init+0x1e8>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d00e      	beq.n	8001890 <HAL_DMA_Init+0x174>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a24      	ldr	r2, [pc, #144]	; (8001908 <HAL_DMA_Init+0x1ec>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d009      	beq.n	8001890 <HAL_DMA_Init+0x174>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a22      	ldr	r2, [pc, #136]	; (800190c <HAL_DMA_Init+0x1f0>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d004      	beq.n	8001890 <HAL_DMA_Init+0x174>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a21      	ldr	r2, [pc, #132]	; (8001910 <HAL_DMA_Init+0x1f4>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d108      	bne.n	80018a2 <HAL_DMA_Init+0x186>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f022 0201 	bic.w	r2, r2, #1
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	e007      	b.n	80018b2 <HAL_DMA_Init+0x196>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f022 0201 	bic.w	r2, r2, #1
 80018b0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80018b2:	e02f      	b.n	8001914 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018b4:	f7ff fdd2 	bl	800145c <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b05      	cmp	r3, #5
 80018c0:	d928      	bls.n	8001914 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2220      	movs	r2, #32
 80018c6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2203      	movs	r2, #3
 80018cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e246      	b.n	8001d62 <HAL_DMA_Init+0x646>
 80018d4:	40020010 	.word	0x40020010
 80018d8:	40020028 	.word	0x40020028
 80018dc:	40020040 	.word	0x40020040
 80018e0:	40020058 	.word	0x40020058
 80018e4:	40020070 	.word	0x40020070
 80018e8:	40020088 	.word	0x40020088
 80018ec:	400200a0 	.word	0x400200a0
 80018f0:	400200b8 	.word	0x400200b8
 80018f4:	40020410 	.word	0x40020410
 80018f8:	40020428 	.word	0x40020428
 80018fc:	40020440 	.word	0x40020440
 8001900:	40020458 	.word	0x40020458
 8001904:	40020470 	.word	0x40020470
 8001908:	40020488 	.word	0x40020488
 800190c:	400204a0 	.word	0x400204a0
 8001910:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1c8      	bne.n	80018b4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800192a:	697a      	ldr	r2, [r7, #20]
 800192c:	4b83      	ldr	r3, [pc, #524]	; (8001b3c <HAL_DMA_Init+0x420>)
 800192e:	4013      	ands	r3, r2
 8001930:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800193a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001946:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001952:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a1b      	ldr	r3, [r3, #32]
 8001958:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	4313      	orrs	r3, r2
 800195e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001964:	2b04      	cmp	r3, #4
 8001966:	d107      	bne.n	8001978 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001970:	4313      	orrs	r3, r2
 8001972:	697a      	ldr	r2, [r7, #20]
 8001974:	4313      	orrs	r3, r2
 8001976:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001978:	4b71      	ldr	r3, [pc, #452]	; (8001b40 <HAL_DMA_Init+0x424>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4b71      	ldr	r3, [pc, #452]	; (8001b44 <HAL_DMA_Init+0x428>)
 800197e:	4013      	ands	r3, r2
 8001980:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001984:	d328      	bcc.n	80019d8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2b28      	cmp	r3, #40	; 0x28
 800198c:	d903      	bls.n	8001996 <HAL_DMA_Init+0x27a>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	2b2e      	cmp	r3, #46	; 0x2e
 8001994:	d917      	bls.n	80019c6 <HAL_DMA_Init+0x2aa>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b3e      	cmp	r3, #62	; 0x3e
 800199c:	d903      	bls.n	80019a6 <HAL_DMA_Init+0x28a>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b42      	cmp	r3, #66	; 0x42
 80019a4:	d90f      	bls.n	80019c6 <HAL_DMA_Init+0x2aa>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	2b46      	cmp	r3, #70	; 0x46
 80019ac:	d903      	bls.n	80019b6 <HAL_DMA_Init+0x29a>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b48      	cmp	r3, #72	; 0x48
 80019b4:	d907      	bls.n	80019c6 <HAL_DMA_Init+0x2aa>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b4e      	cmp	r3, #78	; 0x4e
 80019bc:	d905      	bls.n	80019ca <HAL_DMA_Init+0x2ae>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b52      	cmp	r3, #82	; 0x52
 80019c4:	d801      	bhi.n	80019ca <HAL_DMA_Init+0x2ae>
 80019c6:	2301      	movs	r3, #1
 80019c8:	e000      	b.n	80019cc <HAL_DMA_Init+0x2b0>
 80019ca:	2300      	movs	r3, #0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80019d6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	697a      	ldr	r2, [r7, #20]
 80019de:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	f023 0307 	bic.w	r3, r3, #7
 80019ee:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fe:	2b04      	cmp	r3, #4
 8001a00:	d117      	bne.n	8001a32 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d00e      	beq.n	8001a32 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f001 fc85 	bl	8003324 <DMA_CheckFifoParam>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d008      	beq.n	8001a32 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2240      	movs	r2, #64	; 0x40
 8001a24:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e197      	b.n	8001d62 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f001 fbc0 	bl	80031c0 <DMA_CalcBaseAndBitshift>
 8001a40:	4603      	mov	r3, r0
 8001a42:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a48:	f003 031f 	and.w	r3, r3, #31
 8001a4c:	223f      	movs	r2, #63	; 0x3f
 8001a4e:	409a      	lsls	r2, r3
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	e0cd      	b.n	8001bf2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a3b      	ldr	r2, [pc, #236]	; (8001b48 <HAL_DMA_Init+0x42c>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d022      	beq.n	8001aa6 <HAL_DMA_Init+0x38a>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a39      	ldr	r2, [pc, #228]	; (8001b4c <HAL_DMA_Init+0x430>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d01d      	beq.n	8001aa6 <HAL_DMA_Init+0x38a>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a38      	ldr	r2, [pc, #224]	; (8001b50 <HAL_DMA_Init+0x434>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d018      	beq.n	8001aa6 <HAL_DMA_Init+0x38a>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a36      	ldr	r2, [pc, #216]	; (8001b54 <HAL_DMA_Init+0x438>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d013      	beq.n	8001aa6 <HAL_DMA_Init+0x38a>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a35      	ldr	r2, [pc, #212]	; (8001b58 <HAL_DMA_Init+0x43c>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d00e      	beq.n	8001aa6 <HAL_DMA_Init+0x38a>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a33      	ldr	r2, [pc, #204]	; (8001b5c <HAL_DMA_Init+0x440>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d009      	beq.n	8001aa6 <HAL_DMA_Init+0x38a>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a32      	ldr	r2, [pc, #200]	; (8001b60 <HAL_DMA_Init+0x444>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d004      	beq.n	8001aa6 <HAL_DMA_Init+0x38a>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a30      	ldr	r2, [pc, #192]	; (8001b64 <HAL_DMA_Init+0x448>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d101      	bne.n	8001aaa <HAL_DMA_Init+0x38e>
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e000      	b.n	8001aac <HAL_DMA_Init+0x390>
 8001aaa:	2300      	movs	r3, #0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f000 8097 	beq.w	8001be0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a24      	ldr	r2, [pc, #144]	; (8001b48 <HAL_DMA_Init+0x42c>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d021      	beq.n	8001b00 <HAL_DMA_Init+0x3e4>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a22      	ldr	r2, [pc, #136]	; (8001b4c <HAL_DMA_Init+0x430>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d01c      	beq.n	8001b00 <HAL_DMA_Init+0x3e4>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a21      	ldr	r2, [pc, #132]	; (8001b50 <HAL_DMA_Init+0x434>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d017      	beq.n	8001b00 <HAL_DMA_Init+0x3e4>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a1f      	ldr	r2, [pc, #124]	; (8001b54 <HAL_DMA_Init+0x438>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d012      	beq.n	8001b00 <HAL_DMA_Init+0x3e4>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a1e      	ldr	r2, [pc, #120]	; (8001b58 <HAL_DMA_Init+0x43c>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d00d      	beq.n	8001b00 <HAL_DMA_Init+0x3e4>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a1c      	ldr	r2, [pc, #112]	; (8001b5c <HAL_DMA_Init+0x440>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d008      	beq.n	8001b00 <HAL_DMA_Init+0x3e4>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a1b      	ldr	r2, [pc, #108]	; (8001b60 <HAL_DMA_Init+0x444>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d003      	beq.n	8001b00 <HAL_DMA_Init+0x3e4>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a19      	ldr	r2, [pc, #100]	; (8001b64 <HAL_DMA_Init+0x448>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2202      	movs	r2, #2
 8001b06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <HAL_DMA_Init+0x44c>)
 8001b1e:	4013      	ands	r3, r2
 8001b20:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	2b40      	cmp	r3, #64	; 0x40
 8001b28:	d020      	beq.n	8001b6c <HAL_DMA_Init+0x450>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	2b80      	cmp	r3, #128	; 0x80
 8001b30:	d102      	bne.n	8001b38 <HAL_DMA_Init+0x41c>
 8001b32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b36:	e01a      	b.n	8001b6e <HAL_DMA_Init+0x452>
 8001b38:	2300      	movs	r3, #0
 8001b3a:	e018      	b.n	8001b6e <HAL_DMA_Init+0x452>
 8001b3c:	fe10803f 	.word	0xfe10803f
 8001b40:	5c001000 	.word	0x5c001000
 8001b44:	ffff0000 	.word	0xffff0000
 8001b48:	58025408 	.word	0x58025408
 8001b4c:	5802541c 	.word	0x5802541c
 8001b50:	58025430 	.word	0x58025430
 8001b54:	58025444 	.word	0x58025444
 8001b58:	58025458 	.word	0x58025458
 8001b5c:	5802546c 	.word	0x5802546c
 8001b60:	58025480 	.word	0x58025480
 8001b64:	58025494 	.word	0x58025494
 8001b68:	fffe000f 	.word	0xfffe000f
 8001b6c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	68d2      	ldr	r2, [r2, #12]
 8001b72:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001b7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	695b      	ldr	r3, [r3, #20]
 8001b82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001b84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001b8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001b94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a1b      	ldr	r3, [r3, #32]
 8001b9a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001b9c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b9e:	697a      	ldr	r2, [r7, #20]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	697a      	ldr	r2, [r7, #20]
 8001baa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	4b6e      	ldr	r3, [pc, #440]	; (8001d6c <HAL_DMA_Init+0x650>)
 8001bb4:	4413      	add	r3, r2
 8001bb6:	4a6e      	ldr	r2, [pc, #440]	; (8001d70 <HAL_DMA_Init+0x654>)
 8001bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bbc:	091b      	lsrs	r3, r3, #4
 8001bbe:	009a      	lsls	r2, r3, #2
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f001 fafb 	bl	80031c0 <DMA_CalcBaseAndBitshift>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd2:	f003 031f 	and.w	r3, r3, #31
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	409a      	lsls	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	e008      	b.n	8001bf2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2240      	movs	r2, #64	; 0x40
 8001be4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2203      	movs	r2, #3
 8001bea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e0b7      	b.n	8001d62 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a5f      	ldr	r2, [pc, #380]	; (8001d74 <HAL_DMA_Init+0x658>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d072      	beq.n	8001ce2 <HAL_DMA_Init+0x5c6>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a5d      	ldr	r2, [pc, #372]	; (8001d78 <HAL_DMA_Init+0x65c>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d06d      	beq.n	8001ce2 <HAL_DMA_Init+0x5c6>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a5c      	ldr	r2, [pc, #368]	; (8001d7c <HAL_DMA_Init+0x660>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d068      	beq.n	8001ce2 <HAL_DMA_Init+0x5c6>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a5a      	ldr	r2, [pc, #360]	; (8001d80 <HAL_DMA_Init+0x664>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d063      	beq.n	8001ce2 <HAL_DMA_Init+0x5c6>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a59      	ldr	r2, [pc, #356]	; (8001d84 <HAL_DMA_Init+0x668>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d05e      	beq.n	8001ce2 <HAL_DMA_Init+0x5c6>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a57      	ldr	r2, [pc, #348]	; (8001d88 <HAL_DMA_Init+0x66c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d059      	beq.n	8001ce2 <HAL_DMA_Init+0x5c6>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a56      	ldr	r2, [pc, #344]	; (8001d8c <HAL_DMA_Init+0x670>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d054      	beq.n	8001ce2 <HAL_DMA_Init+0x5c6>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a54      	ldr	r2, [pc, #336]	; (8001d90 <HAL_DMA_Init+0x674>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d04f      	beq.n	8001ce2 <HAL_DMA_Init+0x5c6>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a53      	ldr	r2, [pc, #332]	; (8001d94 <HAL_DMA_Init+0x678>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d04a      	beq.n	8001ce2 <HAL_DMA_Init+0x5c6>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a51      	ldr	r2, [pc, #324]	; (8001d98 <HAL_DMA_Init+0x67c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d045      	beq.n	8001ce2 <HAL_DMA_Init+0x5c6>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a50      	ldr	r2, [pc, #320]	; (8001d9c <HAL_DMA_Init+0x680>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d040      	beq.n	8001ce2 <HAL_DMA_Init+0x5c6>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a4e      	ldr	r2, [pc, #312]	; (8001da0 <HAL_DMA_Init+0x684>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d03b      	beq.n	8001ce2 <HAL_DMA_Init+0x5c6>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a4d      	ldr	r2, [pc, #308]	; (8001da4 <HAL_DMA_Init+0x688>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d036      	beq.n	8001ce2 <HAL_DMA_Init+0x5c6>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a4b      	ldr	r2, [pc, #300]	; (8001da8 <HAL_DMA_Init+0x68c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d031      	beq.n	8001ce2 <HAL_DMA_Init+0x5c6>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a4a      	ldr	r2, [pc, #296]	; (8001dac <HAL_DMA_Init+0x690>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d02c      	beq.n	8001ce2 <HAL_DMA_Init+0x5c6>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a48      	ldr	r2, [pc, #288]	; (8001db0 <HAL_DMA_Init+0x694>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d027      	beq.n	8001ce2 <HAL_DMA_Init+0x5c6>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a47      	ldr	r2, [pc, #284]	; (8001db4 <HAL_DMA_Init+0x698>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d022      	beq.n	8001ce2 <HAL_DMA_Init+0x5c6>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a45      	ldr	r2, [pc, #276]	; (8001db8 <HAL_DMA_Init+0x69c>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d01d      	beq.n	8001ce2 <HAL_DMA_Init+0x5c6>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a44      	ldr	r2, [pc, #272]	; (8001dbc <HAL_DMA_Init+0x6a0>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d018      	beq.n	8001ce2 <HAL_DMA_Init+0x5c6>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a42      	ldr	r2, [pc, #264]	; (8001dc0 <HAL_DMA_Init+0x6a4>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d013      	beq.n	8001ce2 <HAL_DMA_Init+0x5c6>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a41      	ldr	r2, [pc, #260]	; (8001dc4 <HAL_DMA_Init+0x6a8>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d00e      	beq.n	8001ce2 <HAL_DMA_Init+0x5c6>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a3f      	ldr	r2, [pc, #252]	; (8001dc8 <HAL_DMA_Init+0x6ac>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d009      	beq.n	8001ce2 <HAL_DMA_Init+0x5c6>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a3e      	ldr	r2, [pc, #248]	; (8001dcc <HAL_DMA_Init+0x6b0>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d004      	beq.n	8001ce2 <HAL_DMA_Init+0x5c6>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a3c      	ldr	r2, [pc, #240]	; (8001dd0 <HAL_DMA_Init+0x6b4>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d101      	bne.n	8001ce6 <HAL_DMA_Init+0x5ca>
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <HAL_DMA_Init+0x5cc>
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d032      	beq.n	8001d52 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f001 fb95 	bl	800341c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	2b80      	cmp	r3, #128	; 0x80
 8001cf8:	d102      	bne.n	8001d00 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685a      	ldr	r2, [r3, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001d14:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d010      	beq.n	8001d40 <HAL_DMA_Init+0x624>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b08      	cmp	r3, #8
 8001d24:	d80c      	bhi.n	8001d40 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f001 fc12 	bl	8003550 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	e008      	b.n	8001d52 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	a7fdabf8 	.word	0xa7fdabf8
 8001d70:	cccccccd 	.word	0xcccccccd
 8001d74:	40020010 	.word	0x40020010
 8001d78:	40020028 	.word	0x40020028
 8001d7c:	40020040 	.word	0x40020040
 8001d80:	40020058 	.word	0x40020058
 8001d84:	40020070 	.word	0x40020070
 8001d88:	40020088 	.word	0x40020088
 8001d8c:	400200a0 	.word	0x400200a0
 8001d90:	400200b8 	.word	0x400200b8
 8001d94:	40020410 	.word	0x40020410
 8001d98:	40020428 	.word	0x40020428
 8001d9c:	40020440 	.word	0x40020440
 8001da0:	40020458 	.word	0x40020458
 8001da4:	40020470 	.word	0x40020470
 8001da8:	40020488 	.word	0x40020488
 8001dac:	400204a0 	.word	0x400204a0
 8001db0:	400204b8 	.word	0x400204b8
 8001db4:	58025408 	.word	0x58025408
 8001db8:	5802541c 	.word	0x5802541c
 8001dbc:	58025430 	.word	0x58025430
 8001dc0:	58025444 	.word	0x58025444
 8001dc4:	58025458 	.word	0x58025458
 8001dc8:	5802546c 	.word	0x5802546c
 8001dcc:	58025480 	.word	0x58025480
 8001dd0:	58025494 	.word	0x58025494

08001dd4 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
 8001de0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001de2:	2300      	movs	r3, #0
 8001de4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d101      	bne.n	8001df0 <HAL_DMA_Start+0x1c>
  {
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e0ec      	b.n	8001fca <HAL_DMA_Start+0x1f6>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d101      	bne.n	8001dfe <HAL_DMA_Start+0x2a>
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	e0e5      	b.n	8001fca <HAL_DMA_Start+0x1f6>
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	f040 80d0 	bne.w	8001fb4 <HAL_DMA_Start+0x1e0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2202      	movs	r2, #2
 8001e18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a6b      	ldr	r2, [pc, #428]	; (8001fd4 <HAL_DMA_Start+0x200>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d04a      	beq.n	8001ec2 <HAL_DMA_Start+0xee>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a69      	ldr	r2, [pc, #420]	; (8001fd8 <HAL_DMA_Start+0x204>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d045      	beq.n	8001ec2 <HAL_DMA_Start+0xee>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a68      	ldr	r2, [pc, #416]	; (8001fdc <HAL_DMA_Start+0x208>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d040      	beq.n	8001ec2 <HAL_DMA_Start+0xee>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a66      	ldr	r2, [pc, #408]	; (8001fe0 <HAL_DMA_Start+0x20c>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d03b      	beq.n	8001ec2 <HAL_DMA_Start+0xee>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a65      	ldr	r2, [pc, #404]	; (8001fe4 <HAL_DMA_Start+0x210>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d036      	beq.n	8001ec2 <HAL_DMA_Start+0xee>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a63      	ldr	r2, [pc, #396]	; (8001fe8 <HAL_DMA_Start+0x214>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d031      	beq.n	8001ec2 <HAL_DMA_Start+0xee>
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a62      	ldr	r2, [pc, #392]	; (8001fec <HAL_DMA_Start+0x218>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d02c      	beq.n	8001ec2 <HAL_DMA_Start+0xee>
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a60      	ldr	r2, [pc, #384]	; (8001ff0 <HAL_DMA_Start+0x21c>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d027      	beq.n	8001ec2 <HAL_DMA_Start+0xee>
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a5f      	ldr	r2, [pc, #380]	; (8001ff4 <HAL_DMA_Start+0x220>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d022      	beq.n	8001ec2 <HAL_DMA_Start+0xee>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a5d      	ldr	r2, [pc, #372]	; (8001ff8 <HAL_DMA_Start+0x224>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d01d      	beq.n	8001ec2 <HAL_DMA_Start+0xee>
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a5c      	ldr	r2, [pc, #368]	; (8001ffc <HAL_DMA_Start+0x228>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d018      	beq.n	8001ec2 <HAL_DMA_Start+0xee>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a5a      	ldr	r2, [pc, #360]	; (8002000 <HAL_DMA_Start+0x22c>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d013      	beq.n	8001ec2 <HAL_DMA_Start+0xee>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a59      	ldr	r2, [pc, #356]	; (8002004 <HAL_DMA_Start+0x230>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d00e      	beq.n	8001ec2 <HAL_DMA_Start+0xee>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a57      	ldr	r2, [pc, #348]	; (8002008 <HAL_DMA_Start+0x234>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d009      	beq.n	8001ec2 <HAL_DMA_Start+0xee>
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a56      	ldr	r2, [pc, #344]	; (800200c <HAL_DMA_Start+0x238>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d004      	beq.n	8001ec2 <HAL_DMA_Start+0xee>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a54      	ldr	r2, [pc, #336]	; (8002010 <HAL_DMA_Start+0x23c>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d108      	bne.n	8001ed4 <HAL_DMA_Start+0x100>
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 0201 	bic.w	r2, r2, #1
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	e007      	b.n	8001ee4 <HAL_DMA_Start+0x110>
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0201 	bic.w	r2, r2, #1
 8001ee2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	68b9      	ldr	r1, [r7, #8]
 8001eea:	68f8      	ldr	r0, [r7, #12]
 8001eec:	f000 ffbc 	bl	8002e68 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a37      	ldr	r2, [pc, #220]	; (8001fd4 <HAL_DMA_Start+0x200>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d04a      	beq.n	8001f90 <HAL_DMA_Start+0x1bc>
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a36      	ldr	r2, [pc, #216]	; (8001fd8 <HAL_DMA_Start+0x204>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d045      	beq.n	8001f90 <HAL_DMA_Start+0x1bc>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a34      	ldr	r2, [pc, #208]	; (8001fdc <HAL_DMA_Start+0x208>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d040      	beq.n	8001f90 <HAL_DMA_Start+0x1bc>
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a33      	ldr	r2, [pc, #204]	; (8001fe0 <HAL_DMA_Start+0x20c>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d03b      	beq.n	8001f90 <HAL_DMA_Start+0x1bc>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a31      	ldr	r2, [pc, #196]	; (8001fe4 <HAL_DMA_Start+0x210>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d036      	beq.n	8001f90 <HAL_DMA_Start+0x1bc>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a30      	ldr	r2, [pc, #192]	; (8001fe8 <HAL_DMA_Start+0x214>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d031      	beq.n	8001f90 <HAL_DMA_Start+0x1bc>
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a2e      	ldr	r2, [pc, #184]	; (8001fec <HAL_DMA_Start+0x218>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d02c      	beq.n	8001f90 <HAL_DMA_Start+0x1bc>
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a2d      	ldr	r2, [pc, #180]	; (8001ff0 <HAL_DMA_Start+0x21c>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d027      	beq.n	8001f90 <HAL_DMA_Start+0x1bc>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a2b      	ldr	r2, [pc, #172]	; (8001ff4 <HAL_DMA_Start+0x220>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d022      	beq.n	8001f90 <HAL_DMA_Start+0x1bc>
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a2a      	ldr	r2, [pc, #168]	; (8001ff8 <HAL_DMA_Start+0x224>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d01d      	beq.n	8001f90 <HAL_DMA_Start+0x1bc>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a28      	ldr	r2, [pc, #160]	; (8001ffc <HAL_DMA_Start+0x228>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d018      	beq.n	8001f90 <HAL_DMA_Start+0x1bc>
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a27      	ldr	r2, [pc, #156]	; (8002000 <HAL_DMA_Start+0x22c>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d013      	beq.n	8001f90 <HAL_DMA_Start+0x1bc>
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a25      	ldr	r2, [pc, #148]	; (8002004 <HAL_DMA_Start+0x230>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d00e      	beq.n	8001f90 <HAL_DMA_Start+0x1bc>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a24      	ldr	r2, [pc, #144]	; (8002008 <HAL_DMA_Start+0x234>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d009      	beq.n	8001f90 <HAL_DMA_Start+0x1bc>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a22      	ldr	r2, [pc, #136]	; (800200c <HAL_DMA_Start+0x238>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d004      	beq.n	8001f90 <HAL_DMA_Start+0x1bc>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a21      	ldr	r2, [pc, #132]	; (8002010 <HAL_DMA_Start+0x23c>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d108      	bne.n	8001fa2 <HAL_DMA_Start+0x1ce>
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f042 0201 	orr.w	r2, r2, #1
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	e012      	b.n	8001fc8 <HAL_DMA_Start+0x1f4>
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f042 0201 	orr.w	r2, r2, #1
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	e009      	b.n	8001fc8 <HAL_DMA_Start+0x1f4>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fba:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001fc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3718      	adds	r7, #24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40020010 	.word	0x40020010
 8001fd8:	40020028 	.word	0x40020028
 8001fdc:	40020040 	.word	0x40020040
 8001fe0:	40020058 	.word	0x40020058
 8001fe4:	40020070 	.word	0x40020070
 8001fe8:	40020088 	.word	0x40020088
 8001fec:	400200a0 	.word	0x400200a0
 8001ff0:	400200b8 	.word	0x400200b8
 8001ff4:	40020410 	.word	0x40020410
 8001ff8:	40020428 	.word	0x40020428
 8001ffc:	40020440 	.word	0x40020440
 8002000:	40020458 	.word	0x40020458
 8002004:	40020470 	.word	0x40020470
 8002008:	40020488 	.word	0x40020488
 800200c:	400204a0 	.word	0x400204a0
 8002010:	400204b8 	.word	0x400204b8

08002014 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b08a      	sub	sp, #40	; 0x28
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800201c:	2300      	movs	r3, #0
 800201e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002020:	4b67      	ldr	r3, [pc, #412]	; (80021c0 <HAL_DMA_IRQHandler+0x1ac>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a67      	ldr	r2, [pc, #412]	; (80021c4 <HAL_DMA_IRQHandler+0x1b0>)
 8002026:	fba2 2303 	umull	r2, r3, r2, r3
 800202a:	0a9b      	lsrs	r3, r3, #10
 800202c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002032:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002038:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800203a:	6a3b      	ldr	r3, [r7, #32]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a5f      	ldr	r2, [pc, #380]	; (80021c8 <HAL_DMA_IRQHandler+0x1b4>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d04a      	beq.n	80020e6 <HAL_DMA_IRQHandler+0xd2>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a5d      	ldr	r2, [pc, #372]	; (80021cc <HAL_DMA_IRQHandler+0x1b8>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d045      	beq.n	80020e6 <HAL_DMA_IRQHandler+0xd2>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a5c      	ldr	r2, [pc, #368]	; (80021d0 <HAL_DMA_IRQHandler+0x1bc>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d040      	beq.n	80020e6 <HAL_DMA_IRQHandler+0xd2>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a5a      	ldr	r2, [pc, #360]	; (80021d4 <HAL_DMA_IRQHandler+0x1c0>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d03b      	beq.n	80020e6 <HAL_DMA_IRQHandler+0xd2>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a59      	ldr	r2, [pc, #356]	; (80021d8 <HAL_DMA_IRQHandler+0x1c4>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d036      	beq.n	80020e6 <HAL_DMA_IRQHandler+0xd2>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a57      	ldr	r2, [pc, #348]	; (80021dc <HAL_DMA_IRQHandler+0x1c8>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d031      	beq.n	80020e6 <HAL_DMA_IRQHandler+0xd2>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a56      	ldr	r2, [pc, #344]	; (80021e0 <HAL_DMA_IRQHandler+0x1cc>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d02c      	beq.n	80020e6 <HAL_DMA_IRQHandler+0xd2>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a54      	ldr	r2, [pc, #336]	; (80021e4 <HAL_DMA_IRQHandler+0x1d0>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d027      	beq.n	80020e6 <HAL_DMA_IRQHandler+0xd2>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a53      	ldr	r2, [pc, #332]	; (80021e8 <HAL_DMA_IRQHandler+0x1d4>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d022      	beq.n	80020e6 <HAL_DMA_IRQHandler+0xd2>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a51      	ldr	r2, [pc, #324]	; (80021ec <HAL_DMA_IRQHandler+0x1d8>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d01d      	beq.n	80020e6 <HAL_DMA_IRQHandler+0xd2>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a50      	ldr	r2, [pc, #320]	; (80021f0 <HAL_DMA_IRQHandler+0x1dc>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d018      	beq.n	80020e6 <HAL_DMA_IRQHandler+0xd2>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a4e      	ldr	r2, [pc, #312]	; (80021f4 <HAL_DMA_IRQHandler+0x1e0>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d013      	beq.n	80020e6 <HAL_DMA_IRQHandler+0xd2>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a4d      	ldr	r2, [pc, #308]	; (80021f8 <HAL_DMA_IRQHandler+0x1e4>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d00e      	beq.n	80020e6 <HAL_DMA_IRQHandler+0xd2>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a4b      	ldr	r2, [pc, #300]	; (80021fc <HAL_DMA_IRQHandler+0x1e8>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d009      	beq.n	80020e6 <HAL_DMA_IRQHandler+0xd2>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a4a      	ldr	r2, [pc, #296]	; (8002200 <HAL_DMA_IRQHandler+0x1ec>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d004      	beq.n	80020e6 <HAL_DMA_IRQHandler+0xd2>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a48      	ldr	r2, [pc, #288]	; (8002204 <HAL_DMA_IRQHandler+0x1f0>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d101      	bne.n	80020ea <HAL_DMA_IRQHandler+0xd6>
 80020e6:	2301      	movs	r3, #1
 80020e8:	e000      	b.n	80020ec <HAL_DMA_IRQHandler+0xd8>
 80020ea:	2300      	movs	r3, #0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f000 842b 	beq.w	8002948 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f6:	f003 031f 	and.w	r3, r3, #31
 80020fa:	2208      	movs	r2, #8
 80020fc:	409a      	lsls	r2, r3
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	4013      	ands	r3, r2
 8002102:	2b00      	cmp	r3, #0
 8002104:	f000 80a2 	beq.w	800224c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a2e      	ldr	r2, [pc, #184]	; (80021c8 <HAL_DMA_IRQHandler+0x1b4>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d04a      	beq.n	80021a8 <HAL_DMA_IRQHandler+0x194>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a2d      	ldr	r2, [pc, #180]	; (80021cc <HAL_DMA_IRQHandler+0x1b8>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d045      	beq.n	80021a8 <HAL_DMA_IRQHandler+0x194>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a2b      	ldr	r2, [pc, #172]	; (80021d0 <HAL_DMA_IRQHandler+0x1bc>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d040      	beq.n	80021a8 <HAL_DMA_IRQHandler+0x194>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a2a      	ldr	r2, [pc, #168]	; (80021d4 <HAL_DMA_IRQHandler+0x1c0>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d03b      	beq.n	80021a8 <HAL_DMA_IRQHandler+0x194>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a28      	ldr	r2, [pc, #160]	; (80021d8 <HAL_DMA_IRQHandler+0x1c4>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d036      	beq.n	80021a8 <HAL_DMA_IRQHandler+0x194>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a27      	ldr	r2, [pc, #156]	; (80021dc <HAL_DMA_IRQHandler+0x1c8>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d031      	beq.n	80021a8 <HAL_DMA_IRQHandler+0x194>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a25      	ldr	r2, [pc, #148]	; (80021e0 <HAL_DMA_IRQHandler+0x1cc>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d02c      	beq.n	80021a8 <HAL_DMA_IRQHandler+0x194>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a24      	ldr	r2, [pc, #144]	; (80021e4 <HAL_DMA_IRQHandler+0x1d0>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d027      	beq.n	80021a8 <HAL_DMA_IRQHandler+0x194>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a22      	ldr	r2, [pc, #136]	; (80021e8 <HAL_DMA_IRQHandler+0x1d4>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d022      	beq.n	80021a8 <HAL_DMA_IRQHandler+0x194>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a21      	ldr	r2, [pc, #132]	; (80021ec <HAL_DMA_IRQHandler+0x1d8>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d01d      	beq.n	80021a8 <HAL_DMA_IRQHandler+0x194>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a1f      	ldr	r2, [pc, #124]	; (80021f0 <HAL_DMA_IRQHandler+0x1dc>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d018      	beq.n	80021a8 <HAL_DMA_IRQHandler+0x194>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a1e      	ldr	r2, [pc, #120]	; (80021f4 <HAL_DMA_IRQHandler+0x1e0>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d013      	beq.n	80021a8 <HAL_DMA_IRQHandler+0x194>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a1c      	ldr	r2, [pc, #112]	; (80021f8 <HAL_DMA_IRQHandler+0x1e4>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d00e      	beq.n	80021a8 <HAL_DMA_IRQHandler+0x194>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a1b      	ldr	r2, [pc, #108]	; (80021fc <HAL_DMA_IRQHandler+0x1e8>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d009      	beq.n	80021a8 <HAL_DMA_IRQHandler+0x194>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a19      	ldr	r2, [pc, #100]	; (8002200 <HAL_DMA_IRQHandler+0x1ec>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d004      	beq.n	80021a8 <HAL_DMA_IRQHandler+0x194>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a18      	ldr	r2, [pc, #96]	; (8002204 <HAL_DMA_IRQHandler+0x1f0>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d12f      	bne.n	8002208 <HAL_DMA_IRQHandler+0x1f4>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0304 	and.w	r3, r3, #4
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	bf14      	ite	ne
 80021b6:	2301      	movne	r3, #1
 80021b8:	2300      	moveq	r3, #0
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	e02e      	b.n	800221c <HAL_DMA_IRQHandler+0x208>
 80021be:	bf00      	nop
 80021c0:	24000000 	.word	0x24000000
 80021c4:	1b4e81b5 	.word	0x1b4e81b5
 80021c8:	40020010 	.word	0x40020010
 80021cc:	40020028 	.word	0x40020028
 80021d0:	40020040 	.word	0x40020040
 80021d4:	40020058 	.word	0x40020058
 80021d8:	40020070 	.word	0x40020070
 80021dc:	40020088 	.word	0x40020088
 80021e0:	400200a0 	.word	0x400200a0
 80021e4:	400200b8 	.word	0x400200b8
 80021e8:	40020410 	.word	0x40020410
 80021ec:	40020428 	.word	0x40020428
 80021f0:	40020440 	.word	0x40020440
 80021f4:	40020458 	.word	0x40020458
 80021f8:	40020470 	.word	0x40020470
 80021fc:	40020488 	.word	0x40020488
 8002200:	400204a0 	.word	0x400204a0
 8002204:	400204b8 	.word	0x400204b8
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0308 	and.w	r3, r3, #8
 8002212:	2b00      	cmp	r3, #0
 8002214:	bf14      	ite	ne
 8002216:	2301      	movne	r3, #1
 8002218:	2300      	moveq	r3, #0
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	d015      	beq.n	800224c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 0204 	bic.w	r2, r2, #4
 800222e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002234:	f003 031f 	and.w	r3, r3, #31
 8002238:	2208      	movs	r2, #8
 800223a:	409a      	lsls	r2, r3
 800223c:	6a3b      	ldr	r3, [r7, #32]
 800223e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002244:	f043 0201 	orr.w	r2, r3, #1
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002250:	f003 031f 	and.w	r3, r3, #31
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	fa22 f303 	lsr.w	r3, r2, r3
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d06e      	beq.n	8002340 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a69      	ldr	r2, [pc, #420]	; (800240c <HAL_DMA_IRQHandler+0x3f8>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d04a      	beq.n	8002302 <HAL_DMA_IRQHandler+0x2ee>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a67      	ldr	r2, [pc, #412]	; (8002410 <HAL_DMA_IRQHandler+0x3fc>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d045      	beq.n	8002302 <HAL_DMA_IRQHandler+0x2ee>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a66      	ldr	r2, [pc, #408]	; (8002414 <HAL_DMA_IRQHandler+0x400>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d040      	beq.n	8002302 <HAL_DMA_IRQHandler+0x2ee>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a64      	ldr	r2, [pc, #400]	; (8002418 <HAL_DMA_IRQHandler+0x404>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d03b      	beq.n	8002302 <HAL_DMA_IRQHandler+0x2ee>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a63      	ldr	r2, [pc, #396]	; (800241c <HAL_DMA_IRQHandler+0x408>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d036      	beq.n	8002302 <HAL_DMA_IRQHandler+0x2ee>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a61      	ldr	r2, [pc, #388]	; (8002420 <HAL_DMA_IRQHandler+0x40c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d031      	beq.n	8002302 <HAL_DMA_IRQHandler+0x2ee>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a60      	ldr	r2, [pc, #384]	; (8002424 <HAL_DMA_IRQHandler+0x410>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d02c      	beq.n	8002302 <HAL_DMA_IRQHandler+0x2ee>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a5e      	ldr	r2, [pc, #376]	; (8002428 <HAL_DMA_IRQHandler+0x414>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d027      	beq.n	8002302 <HAL_DMA_IRQHandler+0x2ee>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a5d      	ldr	r2, [pc, #372]	; (800242c <HAL_DMA_IRQHandler+0x418>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d022      	beq.n	8002302 <HAL_DMA_IRQHandler+0x2ee>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a5b      	ldr	r2, [pc, #364]	; (8002430 <HAL_DMA_IRQHandler+0x41c>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d01d      	beq.n	8002302 <HAL_DMA_IRQHandler+0x2ee>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a5a      	ldr	r2, [pc, #360]	; (8002434 <HAL_DMA_IRQHandler+0x420>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d018      	beq.n	8002302 <HAL_DMA_IRQHandler+0x2ee>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a58      	ldr	r2, [pc, #352]	; (8002438 <HAL_DMA_IRQHandler+0x424>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d013      	beq.n	8002302 <HAL_DMA_IRQHandler+0x2ee>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a57      	ldr	r2, [pc, #348]	; (800243c <HAL_DMA_IRQHandler+0x428>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d00e      	beq.n	8002302 <HAL_DMA_IRQHandler+0x2ee>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a55      	ldr	r2, [pc, #340]	; (8002440 <HAL_DMA_IRQHandler+0x42c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d009      	beq.n	8002302 <HAL_DMA_IRQHandler+0x2ee>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a54      	ldr	r2, [pc, #336]	; (8002444 <HAL_DMA_IRQHandler+0x430>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d004      	beq.n	8002302 <HAL_DMA_IRQHandler+0x2ee>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a52      	ldr	r2, [pc, #328]	; (8002448 <HAL_DMA_IRQHandler+0x434>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d10a      	bne.n	8002318 <HAL_DMA_IRQHandler+0x304>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800230c:	2b00      	cmp	r3, #0
 800230e:	bf14      	ite	ne
 8002310:	2301      	movne	r3, #1
 8002312:	2300      	moveq	r3, #0
 8002314:	b2db      	uxtb	r3, r3
 8002316:	e003      	b.n	8002320 <HAL_DMA_IRQHandler+0x30c>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2300      	movs	r3, #0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00d      	beq.n	8002340 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002328:	f003 031f 	and.w	r3, r3, #31
 800232c:	2201      	movs	r2, #1
 800232e:	409a      	lsls	r2, r3
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002338:	f043 0202 	orr.w	r2, r3, #2
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002344:	f003 031f 	and.w	r3, r3, #31
 8002348:	2204      	movs	r2, #4
 800234a:	409a      	lsls	r2, r3
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	4013      	ands	r3, r2
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 808f 	beq.w	8002474 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a2c      	ldr	r2, [pc, #176]	; (800240c <HAL_DMA_IRQHandler+0x3f8>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d04a      	beq.n	80023f6 <HAL_DMA_IRQHandler+0x3e2>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a2a      	ldr	r2, [pc, #168]	; (8002410 <HAL_DMA_IRQHandler+0x3fc>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d045      	beq.n	80023f6 <HAL_DMA_IRQHandler+0x3e2>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a29      	ldr	r2, [pc, #164]	; (8002414 <HAL_DMA_IRQHandler+0x400>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d040      	beq.n	80023f6 <HAL_DMA_IRQHandler+0x3e2>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a27      	ldr	r2, [pc, #156]	; (8002418 <HAL_DMA_IRQHandler+0x404>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d03b      	beq.n	80023f6 <HAL_DMA_IRQHandler+0x3e2>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a26      	ldr	r2, [pc, #152]	; (800241c <HAL_DMA_IRQHandler+0x408>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d036      	beq.n	80023f6 <HAL_DMA_IRQHandler+0x3e2>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a24      	ldr	r2, [pc, #144]	; (8002420 <HAL_DMA_IRQHandler+0x40c>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d031      	beq.n	80023f6 <HAL_DMA_IRQHandler+0x3e2>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a23      	ldr	r2, [pc, #140]	; (8002424 <HAL_DMA_IRQHandler+0x410>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d02c      	beq.n	80023f6 <HAL_DMA_IRQHandler+0x3e2>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a21      	ldr	r2, [pc, #132]	; (8002428 <HAL_DMA_IRQHandler+0x414>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d027      	beq.n	80023f6 <HAL_DMA_IRQHandler+0x3e2>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a20      	ldr	r2, [pc, #128]	; (800242c <HAL_DMA_IRQHandler+0x418>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d022      	beq.n	80023f6 <HAL_DMA_IRQHandler+0x3e2>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a1e      	ldr	r2, [pc, #120]	; (8002430 <HAL_DMA_IRQHandler+0x41c>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d01d      	beq.n	80023f6 <HAL_DMA_IRQHandler+0x3e2>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a1d      	ldr	r2, [pc, #116]	; (8002434 <HAL_DMA_IRQHandler+0x420>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d018      	beq.n	80023f6 <HAL_DMA_IRQHandler+0x3e2>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a1b      	ldr	r2, [pc, #108]	; (8002438 <HAL_DMA_IRQHandler+0x424>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d013      	beq.n	80023f6 <HAL_DMA_IRQHandler+0x3e2>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a1a      	ldr	r2, [pc, #104]	; (800243c <HAL_DMA_IRQHandler+0x428>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d00e      	beq.n	80023f6 <HAL_DMA_IRQHandler+0x3e2>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a18      	ldr	r2, [pc, #96]	; (8002440 <HAL_DMA_IRQHandler+0x42c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d009      	beq.n	80023f6 <HAL_DMA_IRQHandler+0x3e2>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a17      	ldr	r2, [pc, #92]	; (8002444 <HAL_DMA_IRQHandler+0x430>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d004      	beq.n	80023f6 <HAL_DMA_IRQHandler+0x3e2>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a15      	ldr	r2, [pc, #84]	; (8002448 <HAL_DMA_IRQHandler+0x434>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d12a      	bne.n	800244c <HAL_DMA_IRQHandler+0x438>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	bf14      	ite	ne
 8002404:	2301      	movne	r3, #1
 8002406:	2300      	moveq	r3, #0
 8002408:	b2db      	uxtb	r3, r3
 800240a:	e023      	b.n	8002454 <HAL_DMA_IRQHandler+0x440>
 800240c:	40020010 	.word	0x40020010
 8002410:	40020028 	.word	0x40020028
 8002414:	40020040 	.word	0x40020040
 8002418:	40020058 	.word	0x40020058
 800241c:	40020070 	.word	0x40020070
 8002420:	40020088 	.word	0x40020088
 8002424:	400200a0 	.word	0x400200a0
 8002428:	400200b8 	.word	0x400200b8
 800242c:	40020410 	.word	0x40020410
 8002430:	40020428 	.word	0x40020428
 8002434:	40020440 	.word	0x40020440
 8002438:	40020458 	.word	0x40020458
 800243c:	40020470 	.word	0x40020470
 8002440:	40020488 	.word	0x40020488
 8002444:	400204a0 	.word	0x400204a0
 8002448:	400204b8 	.word	0x400204b8
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2300      	movs	r3, #0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00d      	beq.n	8002474 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800245c:	f003 031f 	and.w	r3, r3, #31
 8002460:	2204      	movs	r2, #4
 8002462:	409a      	lsls	r2, r3
 8002464:	6a3b      	ldr	r3, [r7, #32]
 8002466:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246c:	f043 0204 	orr.w	r2, r3, #4
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002478:	f003 031f 	and.w	r3, r3, #31
 800247c:	2210      	movs	r2, #16
 800247e:	409a      	lsls	r2, r3
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	4013      	ands	r3, r2
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 80a6 	beq.w	80025d6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a85      	ldr	r2, [pc, #532]	; (80026a4 <HAL_DMA_IRQHandler+0x690>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d04a      	beq.n	800252a <HAL_DMA_IRQHandler+0x516>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a83      	ldr	r2, [pc, #524]	; (80026a8 <HAL_DMA_IRQHandler+0x694>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d045      	beq.n	800252a <HAL_DMA_IRQHandler+0x516>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a82      	ldr	r2, [pc, #520]	; (80026ac <HAL_DMA_IRQHandler+0x698>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d040      	beq.n	800252a <HAL_DMA_IRQHandler+0x516>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a80      	ldr	r2, [pc, #512]	; (80026b0 <HAL_DMA_IRQHandler+0x69c>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d03b      	beq.n	800252a <HAL_DMA_IRQHandler+0x516>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a7f      	ldr	r2, [pc, #508]	; (80026b4 <HAL_DMA_IRQHandler+0x6a0>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d036      	beq.n	800252a <HAL_DMA_IRQHandler+0x516>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a7d      	ldr	r2, [pc, #500]	; (80026b8 <HAL_DMA_IRQHandler+0x6a4>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d031      	beq.n	800252a <HAL_DMA_IRQHandler+0x516>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a7c      	ldr	r2, [pc, #496]	; (80026bc <HAL_DMA_IRQHandler+0x6a8>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d02c      	beq.n	800252a <HAL_DMA_IRQHandler+0x516>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a7a      	ldr	r2, [pc, #488]	; (80026c0 <HAL_DMA_IRQHandler+0x6ac>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d027      	beq.n	800252a <HAL_DMA_IRQHandler+0x516>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a79      	ldr	r2, [pc, #484]	; (80026c4 <HAL_DMA_IRQHandler+0x6b0>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d022      	beq.n	800252a <HAL_DMA_IRQHandler+0x516>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a77      	ldr	r2, [pc, #476]	; (80026c8 <HAL_DMA_IRQHandler+0x6b4>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d01d      	beq.n	800252a <HAL_DMA_IRQHandler+0x516>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a76      	ldr	r2, [pc, #472]	; (80026cc <HAL_DMA_IRQHandler+0x6b8>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d018      	beq.n	800252a <HAL_DMA_IRQHandler+0x516>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a74      	ldr	r2, [pc, #464]	; (80026d0 <HAL_DMA_IRQHandler+0x6bc>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d013      	beq.n	800252a <HAL_DMA_IRQHandler+0x516>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a73      	ldr	r2, [pc, #460]	; (80026d4 <HAL_DMA_IRQHandler+0x6c0>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d00e      	beq.n	800252a <HAL_DMA_IRQHandler+0x516>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a71      	ldr	r2, [pc, #452]	; (80026d8 <HAL_DMA_IRQHandler+0x6c4>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d009      	beq.n	800252a <HAL_DMA_IRQHandler+0x516>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a70      	ldr	r2, [pc, #448]	; (80026dc <HAL_DMA_IRQHandler+0x6c8>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d004      	beq.n	800252a <HAL_DMA_IRQHandler+0x516>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a6e      	ldr	r2, [pc, #440]	; (80026e0 <HAL_DMA_IRQHandler+0x6cc>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d10a      	bne.n	8002540 <HAL_DMA_IRQHandler+0x52c>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0308 	and.w	r3, r3, #8
 8002534:	2b00      	cmp	r3, #0
 8002536:	bf14      	ite	ne
 8002538:	2301      	movne	r3, #1
 800253a:	2300      	moveq	r3, #0
 800253c:	b2db      	uxtb	r3, r3
 800253e:	e009      	b.n	8002554 <HAL_DMA_IRQHandler+0x540>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0304 	and.w	r3, r3, #4
 800254a:	2b00      	cmp	r3, #0
 800254c:	bf14      	ite	ne
 800254e:	2301      	movne	r3, #1
 8002550:	2300      	moveq	r3, #0
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b00      	cmp	r3, #0
 8002556:	d03e      	beq.n	80025d6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800255c:	f003 031f 	and.w	r3, r3, #31
 8002560:	2210      	movs	r2, #16
 8002562:	409a      	lsls	r2, r3
 8002564:	6a3b      	ldr	r3, [r7, #32]
 8002566:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d018      	beq.n	80025a8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d108      	bne.n	8002596 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002588:	2b00      	cmp	r3, #0
 800258a:	d024      	beq.n	80025d6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	4798      	blx	r3
 8002594:	e01f      	b.n	80025d6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800259a:	2b00      	cmp	r3, #0
 800259c:	d01b      	beq.n	80025d6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	4798      	blx	r3
 80025a6:	e016      	b.n	80025d6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d107      	bne.n	80025c6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 0208 	bic.w	r2, r2, #8
 80025c4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025da:	f003 031f 	and.w	r3, r3, #31
 80025de:	2220      	movs	r2, #32
 80025e0:	409a      	lsls	r2, r3
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	4013      	ands	r3, r2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 8110 	beq.w	800280c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a2c      	ldr	r2, [pc, #176]	; (80026a4 <HAL_DMA_IRQHandler+0x690>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d04a      	beq.n	800268c <HAL_DMA_IRQHandler+0x678>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a2b      	ldr	r2, [pc, #172]	; (80026a8 <HAL_DMA_IRQHandler+0x694>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d045      	beq.n	800268c <HAL_DMA_IRQHandler+0x678>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a29      	ldr	r2, [pc, #164]	; (80026ac <HAL_DMA_IRQHandler+0x698>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d040      	beq.n	800268c <HAL_DMA_IRQHandler+0x678>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a28      	ldr	r2, [pc, #160]	; (80026b0 <HAL_DMA_IRQHandler+0x69c>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d03b      	beq.n	800268c <HAL_DMA_IRQHandler+0x678>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a26      	ldr	r2, [pc, #152]	; (80026b4 <HAL_DMA_IRQHandler+0x6a0>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d036      	beq.n	800268c <HAL_DMA_IRQHandler+0x678>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a25      	ldr	r2, [pc, #148]	; (80026b8 <HAL_DMA_IRQHandler+0x6a4>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d031      	beq.n	800268c <HAL_DMA_IRQHandler+0x678>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a23      	ldr	r2, [pc, #140]	; (80026bc <HAL_DMA_IRQHandler+0x6a8>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d02c      	beq.n	800268c <HAL_DMA_IRQHandler+0x678>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a22      	ldr	r2, [pc, #136]	; (80026c0 <HAL_DMA_IRQHandler+0x6ac>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d027      	beq.n	800268c <HAL_DMA_IRQHandler+0x678>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a20      	ldr	r2, [pc, #128]	; (80026c4 <HAL_DMA_IRQHandler+0x6b0>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d022      	beq.n	800268c <HAL_DMA_IRQHandler+0x678>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a1f      	ldr	r2, [pc, #124]	; (80026c8 <HAL_DMA_IRQHandler+0x6b4>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d01d      	beq.n	800268c <HAL_DMA_IRQHandler+0x678>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a1d      	ldr	r2, [pc, #116]	; (80026cc <HAL_DMA_IRQHandler+0x6b8>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d018      	beq.n	800268c <HAL_DMA_IRQHandler+0x678>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a1c      	ldr	r2, [pc, #112]	; (80026d0 <HAL_DMA_IRQHandler+0x6bc>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d013      	beq.n	800268c <HAL_DMA_IRQHandler+0x678>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a1a      	ldr	r2, [pc, #104]	; (80026d4 <HAL_DMA_IRQHandler+0x6c0>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d00e      	beq.n	800268c <HAL_DMA_IRQHandler+0x678>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a19      	ldr	r2, [pc, #100]	; (80026d8 <HAL_DMA_IRQHandler+0x6c4>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d009      	beq.n	800268c <HAL_DMA_IRQHandler+0x678>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a17      	ldr	r2, [pc, #92]	; (80026dc <HAL_DMA_IRQHandler+0x6c8>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d004      	beq.n	800268c <HAL_DMA_IRQHandler+0x678>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a16      	ldr	r2, [pc, #88]	; (80026e0 <HAL_DMA_IRQHandler+0x6cc>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d12b      	bne.n	80026e4 <HAL_DMA_IRQHandler+0x6d0>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0310 	and.w	r3, r3, #16
 8002696:	2b00      	cmp	r3, #0
 8002698:	bf14      	ite	ne
 800269a:	2301      	movne	r3, #1
 800269c:	2300      	moveq	r3, #0
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	e02a      	b.n	80026f8 <HAL_DMA_IRQHandler+0x6e4>
 80026a2:	bf00      	nop
 80026a4:	40020010 	.word	0x40020010
 80026a8:	40020028 	.word	0x40020028
 80026ac:	40020040 	.word	0x40020040
 80026b0:	40020058 	.word	0x40020058
 80026b4:	40020070 	.word	0x40020070
 80026b8:	40020088 	.word	0x40020088
 80026bc:	400200a0 	.word	0x400200a0
 80026c0:	400200b8 	.word	0x400200b8
 80026c4:	40020410 	.word	0x40020410
 80026c8:	40020428 	.word	0x40020428
 80026cc:	40020440 	.word	0x40020440
 80026d0:	40020458 	.word	0x40020458
 80026d4:	40020470 	.word	0x40020470
 80026d8:	40020488 	.word	0x40020488
 80026dc:	400204a0 	.word	0x400204a0
 80026e0:	400204b8 	.word	0x400204b8
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	bf14      	ite	ne
 80026f2:	2301      	movne	r3, #1
 80026f4:	2300      	moveq	r3, #0
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 8087 	beq.w	800280c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002702:	f003 031f 	and.w	r3, r3, #31
 8002706:	2220      	movs	r2, #32
 8002708:	409a      	lsls	r2, r3
 800270a:	6a3b      	ldr	r3, [r7, #32]
 800270c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b04      	cmp	r3, #4
 8002718:	d139      	bne.n	800278e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 0216 	bic.w	r2, r2, #22
 8002728:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	695a      	ldr	r2, [r3, #20]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002738:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	2b00      	cmp	r3, #0
 8002740:	d103      	bne.n	800274a <HAL_DMA_IRQHandler+0x736>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002746:	2b00      	cmp	r3, #0
 8002748:	d007      	beq.n	800275a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 0208 	bic.w	r2, r2, #8
 8002758:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800275e:	f003 031f 	and.w	r3, r3, #31
 8002762:	223f      	movs	r2, #63	; 0x3f
 8002764:	409a      	lsls	r2, r3
 8002766:	6a3b      	ldr	r3, [r7, #32]
 8002768:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 834a 	beq.w	8002e18 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	4798      	blx	r3
          }
          return;
 800278c:	e344      	b.n	8002e18 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d018      	beq.n	80027ce <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d108      	bne.n	80027bc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d02c      	beq.n	800280c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	4798      	blx	r3
 80027ba:	e027      	b.n	800280c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d023      	beq.n	800280c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	4798      	blx	r3
 80027cc:	e01e      	b.n	800280c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10f      	bne.n	80027fc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 0210 	bic.w	r2, r2, #16
 80027ea:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002800:	2b00      	cmp	r3, #0
 8002802:	d003      	beq.n	800280c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 8306 	beq.w	8002e22 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	f000 8088 	beq.w	8002934 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2204      	movs	r2, #4
 8002828:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a7a      	ldr	r2, [pc, #488]	; (8002a1c <HAL_DMA_IRQHandler+0xa08>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d04a      	beq.n	80028cc <HAL_DMA_IRQHandler+0x8b8>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a79      	ldr	r2, [pc, #484]	; (8002a20 <HAL_DMA_IRQHandler+0xa0c>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d045      	beq.n	80028cc <HAL_DMA_IRQHandler+0x8b8>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a77      	ldr	r2, [pc, #476]	; (8002a24 <HAL_DMA_IRQHandler+0xa10>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d040      	beq.n	80028cc <HAL_DMA_IRQHandler+0x8b8>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a76      	ldr	r2, [pc, #472]	; (8002a28 <HAL_DMA_IRQHandler+0xa14>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d03b      	beq.n	80028cc <HAL_DMA_IRQHandler+0x8b8>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a74      	ldr	r2, [pc, #464]	; (8002a2c <HAL_DMA_IRQHandler+0xa18>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d036      	beq.n	80028cc <HAL_DMA_IRQHandler+0x8b8>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a73      	ldr	r2, [pc, #460]	; (8002a30 <HAL_DMA_IRQHandler+0xa1c>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d031      	beq.n	80028cc <HAL_DMA_IRQHandler+0x8b8>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a71      	ldr	r2, [pc, #452]	; (8002a34 <HAL_DMA_IRQHandler+0xa20>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d02c      	beq.n	80028cc <HAL_DMA_IRQHandler+0x8b8>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a70      	ldr	r2, [pc, #448]	; (8002a38 <HAL_DMA_IRQHandler+0xa24>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d027      	beq.n	80028cc <HAL_DMA_IRQHandler+0x8b8>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a6e      	ldr	r2, [pc, #440]	; (8002a3c <HAL_DMA_IRQHandler+0xa28>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d022      	beq.n	80028cc <HAL_DMA_IRQHandler+0x8b8>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a6d      	ldr	r2, [pc, #436]	; (8002a40 <HAL_DMA_IRQHandler+0xa2c>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d01d      	beq.n	80028cc <HAL_DMA_IRQHandler+0x8b8>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a6b      	ldr	r2, [pc, #428]	; (8002a44 <HAL_DMA_IRQHandler+0xa30>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d018      	beq.n	80028cc <HAL_DMA_IRQHandler+0x8b8>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a6a      	ldr	r2, [pc, #424]	; (8002a48 <HAL_DMA_IRQHandler+0xa34>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d013      	beq.n	80028cc <HAL_DMA_IRQHandler+0x8b8>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a68      	ldr	r2, [pc, #416]	; (8002a4c <HAL_DMA_IRQHandler+0xa38>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d00e      	beq.n	80028cc <HAL_DMA_IRQHandler+0x8b8>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a67      	ldr	r2, [pc, #412]	; (8002a50 <HAL_DMA_IRQHandler+0xa3c>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d009      	beq.n	80028cc <HAL_DMA_IRQHandler+0x8b8>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a65      	ldr	r2, [pc, #404]	; (8002a54 <HAL_DMA_IRQHandler+0xa40>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d004      	beq.n	80028cc <HAL_DMA_IRQHandler+0x8b8>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a64      	ldr	r2, [pc, #400]	; (8002a58 <HAL_DMA_IRQHandler+0xa44>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d108      	bne.n	80028de <HAL_DMA_IRQHandler+0x8ca>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 0201 	bic.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	e007      	b.n	80028ee <HAL_DMA_IRQHandler+0x8da>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 0201 	bic.w	r2, r2, #1
 80028ec:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	3301      	adds	r3, #1
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d307      	bcc.n	800290a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1f2      	bne.n	80028ee <HAL_DMA_IRQHandler+0x8da>
 8002908:	e000      	b.n	800290c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800290a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	d004      	beq.n	8002924 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2203      	movs	r2, #3
 800291e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002922:	e003      	b.n	800292c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 8272 	beq.w	8002e22 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	4798      	blx	r3
 8002946:	e26c      	b.n	8002e22 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a43      	ldr	r2, [pc, #268]	; (8002a5c <HAL_DMA_IRQHandler+0xa48>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d022      	beq.n	8002998 <HAL_DMA_IRQHandler+0x984>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a42      	ldr	r2, [pc, #264]	; (8002a60 <HAL_DMA_IRQHandler+0xa4c>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d01d      	beq.n	8002998 <HAL_DMA_IRQHandler+0x984>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a40      	ldr	r2, [pc, #256]	; (8002a64 <HAL_DMA_IRQHandler+0xa50>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d018      	beq.n	8002998 <HAL_DMA_IRQHandler+0x984>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a3f      	ldr	r2, [pc, #252]	; (8002a68 <HAL_DMA_IRQHandler+0xa54>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d013      	beq.n	8002998 <HAL_DMA_IRQHandler+0x984>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a3d      	ldr	r2, [pc, #244]	; (8002a6c <HAL_DMA_IRQHandler+0xa58>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d00e      	beq.n	8002998 <HAL_DMA_IRQHandler+0x984>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a3c      	ldr	r2, [pc, #240]	; (8002a70 <HAL_DMA_IRQHandler+0xa5c>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d009      	beq.n	8002998 <HAL_DMA_IRQHandler+0x984>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a3a      	ldr	r2, [pc, #232]	; (8002a74 <HAL_DMA_IRQHandler+0xa60>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d004      	beq.n	8002998 <HAL_DMA_IRQHandler+0x984>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a39      	ldr	r2, [pc, #228]	; (8002a78 <HAL_DMA_IRQHandler+0xa64>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d101      	bne.n	800299c <HAL_DMA_IRQHandler+0x988>
 8002998:	2301      	movs	r3, #1
 800299a:	e000      	b.n	800299e <HAL_DMA_IRQHandler+0x98a>
 800299c:	2300      	movs	r3, #0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f000 823f 	beq.w	8002e22 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b0:	f003 031f 	and.w	r3, r3, #31
 80029b4:	2204      	movs	r2, #4
 80029b6:	409a      	lsls	r2, r3
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	4013      	ands	r3, r2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 80cd 	beq.w	8002b5c <HAL_DMA_IRQHandler+0xb48>
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	f003 0304 	and.w	r3, r3, #4
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f000 80c7 	beq.w	8002b5c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d2:	f003 031f 	and.w	r3, r3, #31
 80029d6:	2204      	movs	r2, #4
 80029d8:	409a      	lsls	r2, r3
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d049      	beq.n	8002a7c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d109      	bne.n	8002a06 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 8210 	beq.w	8002e1c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a04:	e20a      	b.n	8002e1c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f000 8206 	beq.w	8002e1c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a18:	e200      	b.n	8002e1c <HAL_DMA_IRQHandler+0xe08>
 8002a1a:	bf00      	nop
 8002a1c:	40020010 	.word	0x40020010
 8002a20:	40020028 	.word	0x40020028
 8002a24:	40020040 	.word	0x40020040
 8002a28:	40020058 	.word	0x40020058
 8002a2c:	40020070 	.word	0x40020070
 8002a30:	40020088 	.word	0x40020088
 8002a34:	400200a0 	.word	0x400200a0
 8002a38:	400200b8 	.word	0x400200b8
 8002a3c:	40020410 	.word	0x40020410
 8002a40:	40020428 	.word	0x40020428
 8002a44:	40020440 	.word	0x40020440
 8002a48:	40020458 	.word	0x40020458
 8002a4c:	40020470 	.word	0x40020470
 8002a50:	40020488 	.word	0x40020488
 8002a54:	400204a0 	.word	0x400204a0
 8002a58:	400204b8 	.word	0x400204b8
 8002a5c:	58025408 	.word	0x58025408
 8002a60:	5802541c 	.word	0x5802541c
 8002a64:	58025430 	.word	0x58025430
 8002a68:	58025444 	.word	0x58025444
 8002a6c:	58025458 	.word	0x58025458
 8002a70:	5802546c 	.word	0x5802546c
 8002a74:	58025480 	.word	0x58025480
 8002a78:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	f003 0320 	and.w	r3, r3, #32
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d160      	bne.n	8002b48 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a7f      	ldr	r2, [pc, #508]	; (8002c88 <HAL_DMA_IRQHandler+0xc74>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d04a      	beq.n	8002b26 <HAL_DMA_IRQHandler+0xb12>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a7d      	ldr	r2, [pc, #500]	; (8002c8c <HAL_DMA_IRQHandler+0xc78>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d045      	beq.n	8002b26 <HAL_DMA_IRQHandler+0xb12>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a7c      	ldr	r2, [pc, #496]	; (8002c90 <HAL_DMA_IRQHandler+0xc7c>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d040      	beq.n	8002b26 <HAL_DMA_IRQHandler+0xb12>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a7a      	ldr	r2, [pc, #488]	; (8002c94 <HAL_DMA_IRQHandler+0xc80>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d03b      	beq.n	8002b26 <HAL_DMA_IRQHandler+0xb12>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a79      	ldr	r2, [pc, #484]	; (8002c98 <HAL_DMA_IRQHandler+0xc84>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d036      	beq.n	8002b26 <HAL_DMA_IRQHandler+0xb12>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a77      	ldr	r2, [pc, #476]	; (8002c9c <HAL_DMA_IRQHandler+0xc88>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d031      	beq.n	8002b26 <HAL_DMA_IRQHandler+0xb12>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a76      	ldr	r2, [pc, #472]	; (8002ca0 <HAL_DMA_IRQHandler+0xc8c>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d02c      	beq.n	8002b26 <HAL_DMA_IRQHandler+0xb12>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a74      	ldr	r2, [pc, #464]	; (8002ca4 <HAL_DMA_IRQHandler+0xc90>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d027      	beq.n	8002b26 <HAL_DMA_IRQHandler+0xb12>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a73      	ldr	r2, [pc, #460]	; (8002ca8 <HAL_DMA_IRQHandler+0xc94>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d022      	beq.n	8002b26 <HAL_DMA_IRQHandler+0xb12>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a71      	ldr	r2, [pc, #452]	; (8002cac <HAL_DMA_IRQHandler+0xc98>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d01d      	beq.n	8002b26 <HAL_DMA_IRQHandler+0xb12>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a70      	ldr	r2, [pc, #448]	; (8002cb0 <HAL_DMA_IRQHandler+0xc9c>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d018      	beq.n	8002b26 <HAL_DMA_IRQHandler+0xb12>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a6e      	ldr	r2, [pc, #440]	; (8002cb4 <HAL_DMA_IRQHandler+0xca0>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d013      	beq.n	8002b26 <HAL_DMA_IRQHandler+0xb12>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a6d      	ldr	r2, [pc, #436]	; (8002cb8 <HAL_DMA_IRQHandler+0xca4>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d00e      	beq.n	8002b26 <HAL_DMA_IRQHandler+0xb12>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a6b      	ldr	r2, [pc, #428]	; (8002cbc <HAL_DMA_IRQHandler+0xca8>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d009      	beq.n	8002b26 <HAL_DMA_IRQHandler+0xb12>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a6a      	ldr	r2, [pc, #424]	; (8002cc0 <HAL_DMA_IRQHandler+0xcac>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d004      	beq.n	8002b26 <HAL_DMA_IRQHandler+0xb12>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a68      	ldr	r2, [pc, #416]	; (8002cc4 <HAL_DMA_IRQHandler+0xcb0>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d108      	bne.n	8002b38 <HAL_DMA_IRQHandler+0xb24>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 0208 	bic.w	r2, r2, #8
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	e007      	b.n	8002b48 <HAL_DMA_IRQHandler+0xb34>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f022 0204 	bic.w	r2, r2, #4
 8002b46:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f000 8165 	beq.w	8002e1c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b5a:	e15f      	b.n	8002e1c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b60:	f003 031f 	and.w	r3, r3, #31
 8002b64:	2202      	movs	r2, #2
 8002b66:	409a      	lsls	r2, r3
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 80c5 	beq.w	8002cfc <HAL_DMA_IRQHandler+0xce8>
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 80bf 	beq.w	8002cfc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b82:	f003 031f 	and.w	r3, r3, #31
 8002b86:	2202      	movs	r2, #2
 8002b88:	409a      	lsls	r2, r3
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d018      	beq.n	8002bca <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d109      	bne.n	8002bb6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f000 813a 	beq.w	8002e20 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002bb4:	e134      	b.n	8002e20 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 8130 	beq.w	8002e20 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002bc8:	e12a      	b.n	8002e20 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	f003 0320 	and.w	r3, r3, #32
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f040 8089 	bne.w	8002ce8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a2b      	ldr	r2, [pc, #172]	; (8002c88 <HAL_DMA_IRQHandler+0xc74>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d04a      	beq.n	8002c76 <HAL_DMA_IRQHandler+0xc62>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a29      	ldr	r2, [pc, #164]	; (8002c8c <HAL_DMA_IRQHandler+0xc78>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d045      	beq.n	8002c76 <HAL_DMA_IRQHandler+0xc62>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a28      	ldr	r2, [pc, #160]	; (8002c90 <HAL_DMA_IRQHandler+0xc7c>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d040      	beq.n	8002c76 <HAL_DMA_IRQHandler+0xc62>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a26      	ldr	r2, [pc, #152]	; (8002c94 <HAL_DMA_IRQHandler+0xc80>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d03b      	beq.n	8002c76 <HAL_DMA_IRQHandler+0xc62>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a25      	ldr	r2, [pc, #148]	; (8002c98 <HAL_DMA_IRQHandler+0xc84>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d036      	beq.n	8002c76 <HAL_DMA_IRQHandler+0xc62>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a23      	ldr	r2, [pc, #140]	; (8002c9c <HAL_DMA_IRQHandler+0xc88>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d031      	beq.n	8002c76 <HAL_DMA_IRQHandler+0xc62>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a22      	ldr	r2, [pc, #136]	; (8002ca0 <HAL_DMA_IRQHandler+0xc8c>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d02c      	beq.n	8002c76 <HAL_DMA_IRQHandler+0xc62>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a20      	ldr	r2, [pc, #128]	; (8002ca4 <HAL_DMA_IRQHandler+0xc90>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d027      	beq.n	8002c76 <HAL_DMA_IRQHandler+0xc62>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a1f      	ldr	r2, [pc, #124]	; (8002ca8 <HAL_DMA_IRQHandler+0xc94>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d022      	beq.n	8002c76 <HAL_DMA_IRQHandler+0xc62>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a1d      	ldr	r2, [pc, #116]	; (8002cac <HAL_DMA_IRQHandler+0xc98>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d01d      	beq.n	8002c76 <HAL_DMA_IRQHandler+0xc62>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a1c      	ldr	r2, [pc, #112]	; (8002cb0 <HAL_DMA_IRQHandler+0xc9c>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d018      	beq.n	8002c76 <HAL_DMA_IRQHandler+0xc62>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a1a      	ldr	r2, [pc, #104]	; (8002cb4 <HAL_DMA_IRQHandler+0xca0>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d013      	beq.n	8002c76 <HAL_DMA_IRQHandler+0xc62>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a19      	ldr	r2, [pc, #100]	; (8002cb8 <HAL_DMA_IRQHandler+0xca4>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d00e      	beq.n	8002c76 <HAL_DMA_IRQHandler+0xc62>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a17      	ldr	r2, [pc, #92]	; (8002cbc <HAL_DMA_IRQHandler+0xca8>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d009      	beq.n	8002c76 <HAL_DMA_IRQHandler+0xc62>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a16      	ldr	r2, [pc, #88]	; (8002cc0 <HAL_DMA_IRQHandler+0xcac>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d004      	beq.n	8002c76 <HAL_DMA_IRQHandler+0xc62>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a14      	ldr	r2, [pc, #80]	; (8002cc4 <HAL_DMA_IRQHandler+0xcb0>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d128      	bne.n	8002cc8 <HAL_DMA_IRQHandler+0xcb4>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 0214 	bic.w	r2, r2, #20
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	e027      	b.n	8002cd8 <HAL_DMA_IRQHandler+0xcc4>
 8002c88:	40020010 	.word	0x40020010
 8002c8c:	40020028 	.word	0x40020028
 8002c90:	40020040 	.word	0x40020040
 8002c94:	40020058 	.word	0x40020058
 8002c98:	40020070 	.word	0x40020070
 8002c9c:	40020088 	.word	0x40020088
 8002ca0:	400200a0 	.word	0x400200a0
 8002ca4:	400200b8 	.word	0x400200b8
 8002ca8:	40020410 	.word	0x40020410
 8002cac:	40020428 	.word	0x40020428
 8002cb0:	40020440 	.word	0x40020440
 8002cb4:	40020458 	.word	0x40020458
 8002cb8:	40020470 	.word	0x40020470
 8002cbc:	40020488 	.word	0x40020488
 8002cc0:	400204a0 	.word	0x400204a0
 8002cc4:	400204b8 	.word	0x400204b8
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 020a 	bic.w	r2, r2, #10
 8002cd6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 8097 	beq.w	8002e20 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002cfa:	e091      	b.n	8002e20 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d00:	f003 031f 	and.w	r3, r3, #31
 8002d04:	2208      	movs	r2, #8
 8002d06:	409a      	lsls	r2, r3
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 8088 	beq.w	8002e22 <HAL_DMA_IRQHandler+0xe0e>
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	f003 0308 	and.w	r3, r3, #8
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f000 8082 	beq.w	8002e22 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a41      	ldr	r2, [pc, #260]	; (8002e28 <HAL_DMA_IRQHandler+0xe14>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d04a      	beq.n	8002dbe <HAL_DMA_IRQHandler+0xdaa>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a3f      	ldr	r2, [pc, #252]	; (8002e2c <HAL_DMA_IRQHandler+0xe18>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d045      	beq.n	8002dbe <HAL_DMA_IRQHandler+0xdaa>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a3e      	ldr	r2, [pc, #248]	; (8002e30 <HAL_DMA_IRQHandler+0xe1c>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d040      	beq.n	8002dbe <HAL_DMA_IRQHandler+0xdaa>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a3c      	ldr	r2, [pc, #240]	; (8002e34 <HAL_DMA_IRQHandler+0xe20>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d03b      	beq.n	8002dbe <HAL_DMA_IRQHandler+0xdaa>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a3b      	ldr	r2, [pc, #236]	; (8002e38 <HAL_DMA_IRQHandler+0xe24>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d036      	beq.n	8002dbe <HAL_DMA_IRQHandler+0xdaa>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a39      	ldr	r2, [pc, #228]	; (8002e3c <HAL_DMA_IRQHandler+0xe28>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d031      	beq.n	8002dbe <HAL_DMA_IRQHandler+0xdaa>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a38      	ldr	r2, [pc, #224]	; (8002e40 <HAL_DMA_IRQHandler+0xe2c>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d02c      	beq.n	8002dbe <HAL_DMA_IRQHandler+0xdaa>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a36      	ldr	r2, [pc, #216]	; (8002e44 <HAL_DMA_IRQHandler+0xe30>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d027      	beq.n	8002dbe <HAL_DMA_IRQHandler+0xdaa>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a35      	ldr	r2, [pc, #212]	; (8002e48 <HAL_DMA_IRQHandler+0xe34>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d022      	beq.n	8002dbe <HAL_DMA_IRQHandler+0xdaa>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a33      	ldr	r2, [pc, #204]	; (8002e4c <HAL_DMA_IRQHandler+0xe38>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d01d      	beq.n	8002dbe <HAL_DMA_IRQHandler+0xdaa>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a32      	ldr	r2, [pc, #200]	; (8002e50 <HAL_DMA_IRQHandler+0xe3c>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d018      	beq.n	8002dbe <HAL_DMA_IRQHandler+0xdaa>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a30      	ldr	r2, [pc, #192]	; (8002e54 <HAL_DMA_IRQHandler+0xe40>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d013      	beq.n	8002dbe <HAL_DMA_IRQHandler+0xdaa>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a2f      	ldr	r2, [pc, #188]	; (8002e58 <HAL_DMA_IRQHandler+0xe44>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d00e      	beq.n	8002dbe <HAL_DMA_IRQHandler+0xdaa>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a2d      	ldr	r2, [pc, #180]	; (8002e5c <HAL_DMA_IRQHandler+0xe48>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d009      	beq.n	8002dbe <HAL_DMA_IRQHandler+0xdaa>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a2c      	ldr	r2, [pc, #176]	; (8002e60 <HAL_DMA_IRQHandler+0xe4c>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d004      	beq.n	8002dbe <HAL_DMA_IRQHandler+0xdaa>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a2a      	ldr	r2, [pc, #168]	; (8002e64 <HAL_DMA_IRQHandler+0xe50>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d108      	bne.n	8002dd0 <HAL_DMA_IRQHandler+0xdbc>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 021c 	bic.w	r2, r2, #28
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	e007      	b.n	8002de0 <HAL_DMA_IRQHandler+0xdcc>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 020e 	bic.w	r2, r2, #14
 8002dde:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de4:	f003 031f 	and.w	r3, r3, #31
 8002de8:	2201      	movs	r2, #1
 8002dea:	409a      	lsls	r2, r3
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d009      	beq.n	8002e22 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	4798      	blx	r3
 8002e16:	e004      	b.n	8002e22 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002e18:	bf00      	nop
 8002e1a:	e002      	b.n	8002e22 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002e1c:	bf00      	nop
 8002e1e:	e000      	b.n	8002e22 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002e20:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002e22:	3728      	adds	r7, #40	; 0x28
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40020010 	.word	0x40020010
 8002e2c:	40020028 	.word	0x40020028
 8002e30:	40020040 	.word	0x40020040
 8002e34:	40020058 	.word	0x40020058
 8002e38:	40020070 	.word	0x40020070
 8002e3c:	40020088 	.word	0x40020088
 8002e40:	400200a0 	.word	0x400200a0
 8002e44:	400200b8 	.word	0x400200b8
 8002e48:	40020410 	.word	0x40020410
 8002e4c:	40020428 	.word	0x40020428
 8002e50:	40020440 	.word	0x40020440
 8002e54:	40020458 	.word	0x40020458
 8002e58:	40020470 	.word	0x40020470
 8002e5c:	40020488 	.word	0x40020488
 8002e60:	400204a0 	.word	0x400204a0
 8002e64:	400204b8 	.word	0x400204b8

08002e68 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b087      	sub	sp, #28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
 8002e74:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e7a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e80:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a7f      	ldr	r2, [pc, #508]	; (8003084 <DMA_SetConfig+0x21c>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d072      	beq.n	8002f72 <DMA_SetConfig+0x10a>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a7d      	ldr	r2, [pc, #500]	; (8003088 <DMA_SetConfig+0x220>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d06d      	beq.n	8002f72 <DMA_SetConfig+0x10a>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a7c      	ldr	r2, [pc, #496]	; (800308c <DMA_SetConfig+0x224>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d068      	beq.n	8002f72 <DMA_SetConfig+0x10a>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a7a      	ldr	r2, [pc, #488]	; (8003090 <DMA_SetConfig+0x228>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d063      	beq.n	8002f72 <DMA_SetConfig+0x10a>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a79      	ldr	r2, [pc, #484]	; (8003094 <DMA_SetConfig+0x22c>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d05e      	beq.n	8002f72 <DMA_SetConfig+0x10a>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a77      	ldr	r2, [pc, #476]	; (8003098 <DMA_SetConfig+0x230>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d059      	beq.n	8002f72 <DMA_SetConfig+0x10a>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a76      	ldr	r2, [pc, #472]	; (800309c <DMA_SetConfig+0x234>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d054      	beq.n	8002f72 <DMA_SetConfig+0x10a>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a74      	ldr	r2, [pc, #464]	; (80030a0 <DMA_SetConfig+0x238>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d04f      	beq.n	8002f72 <DMA_SetConfig+0x10a>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a73      	ldr	r2, [pc, #460]	; (80030a4 <DMA_SetConfig+0x23c>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d04a      	beq.n	8002f72 <DMA_SetConfig+0x10a>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a71      	ldr	r2, [pc, #452]	; (80030a8 <DMA_SetConfig+0x240>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d045      	beq.n	8002f72 <DMA_SetConfig+0x10a>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a70      	ldr	r2, [pc, #448]	; (80030ac <DMA_SetConfig+0x244>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d040      	beq.n	8002f72 <DMA_SetConfig+0x10a>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a6e      	ldr	r2, [pc, #440]	; (80030b0 <DMA_SetConfig+0x248>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d03b      	beq.n	8002f72 <DMA_SetConfig+0x10a>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a6d      	ldr	r2, [pc, #436]	; (80030b4 <DMA_SetConfig+0x24c>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d036      	beq.n	8002f72 <DMA_SetConfig+0x10a>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a6b      	ldr	r2, [pc, #428]	; (80030b8 <DMA_SetConfig+0x250>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d031      	beq.n	8002f72 <DMA_SetConfig+0x10a>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a6a      	ldr	r2, [pc, #424]	; (80030bc <DMA_SetConfig+0x254>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d02c      	beq.n	8002f72 <DMA_SetConfig+0x10a>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a68      	ldr	r2, [pc, #416]	; (80030c0 <DMA_SetConfig+0x258>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d027      	beq.n	8002f72 <DMA_SetConfig+0x10a>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a67      	ldr	r2, [pc, #412]	; (80030c4 <DMA_SetConfig+0x25c>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d022      	beq.n	8002f72 <DMA_SetConfig+0x10a>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a65      	ldr	r2, [pc, #404]	; (80030c8 <DMA_SetConfig+0x260>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d01d      	beq.n	8002f72 <DMA_SetConfig+0x10a>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a64      	ldr	r2, [pc, #400]	; (80030cc <DMA_SetConfig+0x264>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d018      	beq.n	8002f72 <DMA_SetConfig+0x10a>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a62      	ldr	r2, [pc, #392]	; (80030d0 <DMA_SetConfig+0x268>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d013      	beq.n	8002f72 <DMA_SetConfig+0x10a>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a61      	ldr	r2, [pc, #388]	; (80030d4 <DMA_SetConfig+0x26c>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d00e      	beq.n	8002f72 <DMA_SetConfig+0x10a>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a5f      	ldr	r2, [pc, #380]	; (80030d8 <DMA_SetConfig+0x270>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d009      	beq.n	8002f72 <DMA_SetConfig+0x10a>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a5e      	ldr	r2, [pc, #376]	; (80030dc <DMA_SetConfig+0x274>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d004      	beq.n	8002f72 <DMA_SetConfig+0x10a>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a5c      	ldr	r2, [pc, #368]	; (80030e0 <DMA_SetConfig+0x278>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d101      	bne.n	8002f76 <DMA_SetConfig+0x10e>
 8002f72:	2301      	movs	r3, #1
 8002f74:	e000      	b.n	8002f78 <DMA_SetConfig+0x110>
 8002f76:	2300      	movs	r3, #0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00d      	beq.n	8002f98 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002f84:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d004      	beq.n	8002f98 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002f96:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a39      	ldr	r2, [pc, #228]	; (8003084 <DMA_SetConfig+0x21c>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d04a      	beq.n	8003038 <DMA_SetConfig+0x1d0>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a38      	ldr	r2, [pc, #224]	; (8003088 <DMA_SetConfig+0x220>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d045      	beq.n	8003038 <DMA_SetConfig+0x1d0>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a36      	ldr	r2, [pc, #216]	; (800308c <DMA_SetConfig+0x224>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d040      	beq.n	8003038 <DMA_SetConfig+0x1d0>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a35      	ldr	r2, [pc, #212]	; (8003090 <DMA_SetConfig+0x228>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d03b      	beq.n	8003038 <DMA_SetConfig+0x1d0>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a33      	ldr	r2, [pc, #204]	; (8003094 <DMA_SetConfig+0x22c>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d036      	beq.n	8003038 <DMA_SetConfig+0x1d0>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a32      	ldr	r2, [pc, #200]	; (8003098 <DMA_SetConfig+0x230>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d031      	beq.n	8003038 <DMA_SetConfig+0x1d0>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a30      	ldr	r2, [pc, #192]	; (800309c <DMA_SetConfig+0x234>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d02c      	beq.n	8003038 <DMA_SetConfig+0x1d0>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a2f      	ldr	r2, [pc, #188]	; (80030a0 <DMA_SetConfig+0x238>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d027      	beq.n	8003038 <DMA_SetConfig+0x1d0>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a2d      	ldr	r2, [pc, #180]	; (80030a4 <DMA_SetConfig+0x23c>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d022      	beq.n	8003038 <DMA_SetConfig+0x1d0>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a2c      	ldr	r2, [pc, #176]	; (80030a8 <DMA_SetConfig+0x240>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d01d      	beq.n	8003038 <DMA_SetConfig+0x1d0>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a2a      	ldr	r2, [pc, #168]	; (80030ac <DMA_SetConfig+0x244>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d018      	beq.n	8003038 <DMA_SetConfig+0x1d0>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a29      	ldr	r2, [pc, #164]	; (80030b0 <DMA_SetConfig+0x248>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d013      	beq.n	8003038 <DMA_SetConfig+0x1d0>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a27      	ldr	r2, [pc, #156]	; (80030b4 <DMA_SetConfig+0x24c>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d00e      	beq.n	8003038 <DMA_SetConfig+0x1d0>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a26      	ldr	r2, [pc, #152]	; (80030b8 <DMA_SetConfig+0x250>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d009      	beq.n	8003038 <DMA_SetConfig+0x1d0>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a24      	ldr	r2, [pc, #144]	; (80030bc <DMA_SetConfig+0x254>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d004      	beq.n	8003038 <DMA_SetConfig+0x1d0>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a23      	ldr	r2, [pc, #140]	; (80030c0 <DMA_SetConfig+0x258>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d101      	bne.n	800303c <DMA_SetConfig+0x1d4>
 8003038:	2301      	movs	r3, #1
 800303a:	e000      	b.n	800303e <DMA_SetConfig+0x1d6>
 800303c:	2300      	movs	r3, #0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d059      	beq.n	80030f6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003046:	f003 031f 	and.w	r3, r3, #31
 800304a:	223f      	movs	r2, #63	; 0x3f
 800304c:	409a      	lsls	r2, r3
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003060:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	2b40      	cmp	r3, #64	; 0x40
 8003070:	d138      	bne.n	80030e4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68ba      	ldr	r2, [r7, #8]
 8003080:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003082:	e086      	b.n	8003192 <DMA_SetConfig+0x32a>
 8003084:	40020010 	.word	0x40020010
 8003088:	40020028 	.word	0x40020028
 800308c:	40020040 	.word	0x40020040
 8003090:	40020058 	.word	0x40020058
 8003094:	40020070 	.word	0x40020070
 8003098:	40020088 	.word	0x40020088
 800309c:	400200a0 	.word	0x400200a0
 80030a0:	400200b8 	.word	0x400200b8
 80030a4:	40020410 	.word	0x40020410
 80030a8:	40020428 	.word	0x40020428
 80030ac:	40020440 	.word	0x40020440
 80030b0:	40020458 	.word	0x40020458
 80030b4:	40020470 	.word	0x40020470
 80030b8:	40020488 	.word	0x40020488
 80030bc:	400204a0 	.word	0x400204a0
 80030c0:	400204b8 	.word	0x400204b8
 80030c4:	58025408 	.word	0x58025408
 80030c8:	5802541c 	.word	0x5802541c
 80030cc:	58025430 	.word	0x58025430
 80030d0:	58025444 	.word	0x58025444
 80030d4:	58025458 	.word	0x58025458
 80030d8:	5802546c 	.word	0x5802546c
 80030dc:	58025480 	.word	0x58025480
 80030e0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68ba      	ldr	r2, [r7, #8]
 80030ea:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	60da      	str	r2, [r3, #12]
}
 80030f4:	e04d      	b.n	8003192 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a29      	ldr	r2, [pc, #164]	; (80031a0 <DMA_SetConfig+0x338>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d022      	beq.n	8003146 <DMA_SetConfig+0x2de>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a27      	ldr	r2, [pc, #156]	; (80031a4 <DMA_SetConfig+0x33c>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d01d      	beq.n	8003146 <DMA_SetConfig+0x2de>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a26      	ldr	r2, [pc, #152]	; (80031a8 <DMA_SetConfig+0x340>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d018      	beq.n	8003146 <DMA_SetConfig+0x2de>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a24      	ldr	r2, [pc, #144]	; (80031ac <DMA_SetConfig+0x344>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d013      	beq.n	8003146 <DMA_SetConfig+0x2de>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a23      	ldr	r2, [pc, #140]	; (80031b0 <DMA_SetConfig+0x348>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d00e      	beq.n	8003146 <DMA_SetConfig+0x2de>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a21      	ldr	r2, [pc, #132]	; (80031b4 <DMA_SetConfig+0x34c>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d009      	beq.n	8003146 <DMA_SetConfig+0x2de>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a20      	ldr	r2, [pc, #128]	; (80031b8 <DMA_SetConfig+0x350>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d004      	beq.n	8003146 <DMA_SetConfig+0x2de>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a1e      	ldr	r2, [pc, #120]	; (80031bc <DMA_SetConfig+0x354>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d101      	bne.n	800314a <DMA_SetConfig+0x2e2>
 8003146:	2301      	movs	r3, #1
 8003148:	e000      	b.n	800314c <DMA_SetConfig+0x2e4>
 800314a:	2300      	movs	r3, #0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d020      	beq.n	8003192 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003154:	f003 031f 	and.w	r3, r3, #31
 8003158:	2201      	movs	r2, #1
 800315a:	409a      	lsls	r2, r3
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	2b40      	cmp	r3, #64	; 0x40
 800316e:	d108      	bne.n	8003182 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68ba      	ldr	r2, [r7, #8]
 800317e:	60da      	str	r2, [r3, #12]
}
 8003180:	e007      	b.n	8003192 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	60da      	str	r2, [r3, #12]
}
 8003192:	bf00      	nop
 8003194:	371c      	adds	r7, #28
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	58025408 	.word	0x58025408
 80031a4:	5802541c 	.word	0x5802541c
 80031a8:	58025430 	.word	0x58025430
 80031ac:	58025444 	.word	0x58025444
 80031b0:	58025458 	.word	0x58025458
 80031b4:	5802546c 	.word	0x5802546c
 80031b8:	58025480 	.word	0x58025480
 80031bc:	58025494 	.word	0x58025494

080031c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a42      	ldr	r2, [pc, #264]	; (80032d8 <DMA_CalcBaseAndBitshift+0x118>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d04a      	beq.n	8003268 <DMA_CalcBaseAndBitshift+0xa8>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a41      	ldr	r2, [pc, #260]	; (80032dc <DMA_CalcBaseAndBitshift+0x11c>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d045      	beq.n	8003268 <DMA_CalcBaseAndBitshift+0xa8>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a3f      	ldr	r2, [pc, #252]	; (80032e0 <DMA_CalcBaseAndBitshift+0x120>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d040      	beq.n	8003268 <DMA_CalcBaseAndBitshift+0xa8>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a3e      	ldr	r2, [pc, #248]	; (80032e4 <DMA_CalcBaseAndBitshift+0x124>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d03b      	beq.n	8003268 <DMA_CalcBaseAndBitshift+0xa8>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a3c      	ldr	r2, [pc, #240]	; (80032e8 <DMA_CalcBaseAndBitshift+0x128>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d036      	beq.n	8003268 <DMA_CalcBaseAndBitshift+0xa8>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a3b      	ldr	r2, [pc, #236]	; (80032ec <DMA_CalcBaseAndBitshift+0x12c>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d031      	beq.n	8003268 <DMA_CalcBaseAndBitshift+0xa8>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a39      	ldr	r2, [pc, #228]	; (80032f0 <DMA_CalcBaseAndBitshift+0x130>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d02c      	beq.n	8003268 <DMA_CalcBaseAndBitshift+0xa8>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a38      	ldr	r2, [pc, #224]	; (80032f4 <DMA_CalcBaseAndBitshift+0x134>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d027      	beq.n	8003268 <DMA_CalcBaseAndBitshift+0xa8>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a36      	ldr	r2, [pc, #216]	; (80032f8 <DMA_CalcBaseAndBitshift+0x138>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d022      	beq.n	8003268 <DMA_CalcBaseAndBitshift+0xa8>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a35      	ldr	r2, [pc, #212]	; (80032fc <DMA_CalcBaseAndBitshift+0x13c>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d01d      	beq.n	8003268 <DMA_CalcBaseAndBitshift+0xa8>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a33      	ldr	r2, [pc, #204]	; (8003300 <DMA_CalcBaseAndBitshift+0x140>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d018      	beq.n	8003268 <DMA_CalcBaseAndBitshift+0xa8>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a32      	ldr	r2, [pc, #200]	; (8003304 <DMA_CalcBaseAndBitshift+0x144>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d013      	beq.n	8003268 <DMA_CalcBaseAndBitshift+0xa8>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a30      	ldr	r2, [pc, #192]	; (8003308 <DMA_CalcBaseAndBitshift+0x148>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d00e      	beq.n	8003268 <DMA_CalcBaseAndBitshift+0xa8>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a2f      	ldr	r2, [pc, #188]	; (800330c <DMA_CalcBaseAndBitshift+0x14c>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d009      	beq.n	8003268 <DMA_CalcBaseAndBitshift+0xa8>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a2d      	ldr	r2, [pc, #180]	; (8003310 <DMA_CalcBaseAndBitshift+0x150>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d004      	beq.n	8003268 <DMA_CalcBaseAndBitshift+0xa8>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a2c      	ldr	r2, [pc, #176]	; (8003314 <DMA_CalcBaseAndBitshift+0x154>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d101      	bne.n	800326c <DMA_CalcBaseAndBitshift+0xac>
 8003268:	2301      	movs	r3, #1
 800326a:	e000      	b.n	800326e <DMA_CalcBaseAndBitshift+0xae>
 800326c:	2300      	movs	r3, #0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d024      	beq.n	80032bc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	b2db      	uxtb	r3, r3
 8003278:	3b10      	subs	r3, #16
 800327a:	4a27      	ldr	r2, [pc, #156]	; (8003318 <DMA_CalcBaseAndBitshift+0x158>)
 800327c:	fba2 2303 	umull	r2, r3, r2, r3
 8003280:	091b      	lsrs	r3, r3, #4
 8003282:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f003 0307 	and.w	r3, r3, #7
 800328a:	4a24      	ldr	r2, [pc, #144]	; (800331c <DMA_CalcBaseAndBitshift+0x15c>)
 800328c:	5cd3      	ldrb	r3, [r2, r3]
 800328e:	461a      	mov	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2b03      	cmp	r3, #3
 8003298:	d908      	bls.n	80032ac <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	461a      	mov	r2, r3
 80032a0:	4b1f      	ldr	r3, [pc, #124]	; (8003320 <DMA_CalcBaseAndBitshift+0x160>)
 80032a2:	4013      	ands	r3, r2
 80032a4:	1d1a      	adds	r2, r3, #4
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	659a      	str	r2, [r3, #88]	; 0x58
 80032aa:	e00d      	b.n	80032c8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	461a      	mov	r2, r3
 80032b2:	4b1b      	ldr	r3, [pc, #108]	; (8003320 <DMA_CalcBaseAndBitshift+0x160>)
 80032b4:	4013      	ands	r3, r2
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	6593      	str	r3, [r2, #88]	; 0x58
 80032ba:	e005      	b.n	80032c8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3714      	adds	r7, #20
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	40020010 	.word	0x40020010
 80032dc:	40020028 	.word	0x40020028
 80032e0:	40020040 	.word	0x40020040
 80032e4:	40020058 	.word	0x40020058
 80032e8:	40020070 	.word	0x40020070
 80032ec:	40020088 	.word	0x40020088
 80032f0:	400200a0 	.word	0x400200a0
 80032f4:	400200b8 	.word	0x400200b8
 80032f8:	40020410 	.word	0x40020410
 80032fc:	40020428 	.word	0x40020428
 8003300:	40020440 	.word	0x40020440
 8003304:	40020458 	.word	0x40020458
 8003308:	40020470 	.word	0x40020470
 800330c:	40020488 	.word	0x40020488
 8003310:	400204a0 	.word	0x400204a0
 8003314:	400204b8 	.word	0x400204b8
 8003318:	aaaaaaab 	.word	0xaaaaaaab
 800331c:	08008ffc 	.word	0x08008ffc
 8003320:	fffffc00 	.word	0xfffffc00

08003324 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800332c:	2300      	movs	r3, #0
 800332e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d120      	bne.n	800337a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333c:	2b03      	cmp	r3, #3
 800333e:	d858      	bhi.n	80033f2 <DMA_CheckFifoParam+0xce>
 8003340:	a201      	add	r2, pc, #4	; (adr r2, 8003348 <DMA_CheckFifoParam+0x24>)
 8003342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003346:	bf00      	nop
 8003348:	08003359 	.word	0x08003359
 800334c:	0800336b 	.word	0x0800336b
 8003350:	08003359 	.word	0x08003359
 8003354:	080033f3 	.word	0x080033f3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d048      	beq.n	80033f6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003368:	e045      	b.n	80033f6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003372:	d142      	bne.n	80033fa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003378:	e03f      	b.n	80033fa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003382:	d123      	bne.n	80033cc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003388:	2b03      	cmp	r3, #3
 800338a:	d838      	bhi.n	80033fe <DMA_CheckFifoParam+0xda>
 800338c:	a201      	add	r2, pc, #4	; (adr r2, 8003394 <DMA_CheckFifoParam+0x70>)
 800338e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003392:	bf00      	nop
 8003394:	080033a5 	.word	0x080033a5
 8003398:	080033ab 	.word	0x080033ab
 800339c:	080033a5 	.word	0x080033a5
 80033a0:	080033bd 	.word	0x080033bd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	73fb      	strb	r3, [r7, #15]
        break;
 80033a8:	e030      	b.n	800340c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d025      	beq.n	8003402 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80033ba:	e022      	b.n	8003402 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033c4:	d11f      	bne.n	8003406 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80033ca:	e01c      	b.n	8003406 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d902      	bls.n	80033da <DMA_CheckFifoParam+0xb6>
 80033d4:	2b03      	cmp	r3, #3
 80033d6:	d003      	beq.n	80033e0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80033d8:	e018      	b.n	800340c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	73fb      	strb	r3, [r7, #15]
        break;
 80033de:	e015      	b.n	800340c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00e      	beq.n	800340a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	73fb      	strb	r3, [r7, #15]
    break;
 80033f0:	e00b      	b.n	800340a <DMA_CheckFifoParam+0xe6>
        break;
 80033f2:	bf00      	nop
 80033f4:	e00a      	b.n	800340c <DMA_CheckFifoParam+0xe8>
        break;
 80033f6:	bf00      	nop
 80033f8:	e008      	b.n	800340c <DMA_CheckFifoParam+0xe8>
        break;
 80033fa:	bf00      	nop
 80033fc:	e006      	b.n	800340c <DMA_CheckFifoParam+0xe8>
        break;
 80033fe:	bf00      	nop
 8003400:	e004      	b.n	800340c <DMA_CheckFifoParam+0xe8>
        break;
 8003402:	bf00      	nop
 8003404:	e002      	b.n	800340c <DMA_CheckFifoParam+0xe8>
        break;
 8003406:	bf00      	nop
 8003408:	e000      	b.n	800340c <DMA_CheckFifoParam+0xe8>
    break;
 800340a:	bf00      	nop
    }
  }

  return status;
 800340c:	7bfb      	ldrb	r3, [r7, #15]
}
 800340e:	4618      	mov	r0, r3
 8003410:	3714      	adds	r7, #20
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop

0800341c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a38      	ldr	r2, [pc, #224]	; (8003510 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d022      	beq.n	800347a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a36      	ldr	r2, [pc, #216]	; (8003514 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d01d      	beq.n	800347a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a35      	ldr	r2, [pc, #212]	; (8003518 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d018      	beq.n	800347a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a33      	ldr	r2, [pc, #204]	; (800351c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d013      	beq.n	800347a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a32      	ldr	r2, [pc, #200]	; (8003520 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d00e      	beq.n	800347a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a30      	ldr	r2, [pc, #192]	; (8003524 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d009      	beq.n	800347a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a2f      	ldr	r2, [pc, #188]	; (8003528 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d004      	beq.n	800347a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a2d      	ldr	r2, [pc, #180]	; (800352c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d101      	bne.n	800347e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800347a:	2301      	movs	r3, #1
 800347c:	e000      	b.n	8003480 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800347e:	2300      	movs	r3, #0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d01a      	beq.n	80034ba <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	b2db      	uxtb	r3, r3
 800348a:	3b08      	subs	r3, #8
 800348c:	4a28      	ldr	r2, [pc, #160]	; (8003530 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800348e:	fba2 2303 	umull	r2, r3, r2, r3
 8003492:	091b      	lsrs	r3, r3, #4
 8003494:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	4b26      	ldr	r3, [pc, #152]	; (8003534 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800349a:	4413      	add	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	461a      	mov	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a24      	ldr	r2, [pc, #144]	; (8003538 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80034a8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f003 031f 	and.w	r3, r3, #31
 80034b0:	2201      	movs	r2, #1
 80034b2:	409a      	lsls	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80034b8:	e024      	b.n	8003504 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	3b10      	subs	r3, #16
 80034c2:	4a1e      	ldr	r2, [pc, #120]	; (800353c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80034c4:	fba2 2303 	umull	r2, r3, r2, r3
 80034c8:	091b      	lsrs	r3, r3, #4
 80034ca:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	4a1c      	ldr	r2, [pc, #112]	; (8003540 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d806      	bhi.n	80034e2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	4a1b      	ldr	r2, [pc, #108]	; (8003544 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d902      	bls.n	80034e2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	3308      	adds	r3, #8
 80034e0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	4b18      	ldr	r3, [pc, #96]	; (8003548 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80034e6:	4413      	add	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	461a      	mov	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a16      	ldr	r2, [pc, #88]	; (800354c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80034f4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f003 031f 	and.w	r3, r3, #31
 80034fc:	2201      	movs	r2, #1
 80034fe:	409a      	lsls	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003504:	bf00      	nop
 8003506:	3714      	adds	r7, #20
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	58025408 	.word	0x58025408
 8003514:	5802541c 	.word	0x5802541c
 8003518:	58025430 	.word	0x58025430
 800351c:	58025444 	.word	0x58025444
 8003520:	58025458 	.word	0x58025458
 8003524:	5802546c 	.word	0x5802546c
 8003528:	58025480 	.word	0x58025480
 800352c:	58025494 	.word	0x58025494
 8003530:	cccccccd 	.word	0xcccccccd
 8003534:	16009600 	.word	0x16009600
 8003538:	58025880 	.word	0x58025880
 800353c:	aaaaaaab 	.word	0xaaaaaaab
 8003540:	400204b8 	.word	0x400204b8
 8003544:	4002040f 	.word	0x4002040f
 8003548:	10008200 	.word	0x10008200
 800354c:	40020880 	.word	0x40020880

08003550 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	b2db      	uxtb	r3, r3
 800355e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d04a      	beq.n	80035fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2b08      	cmp	r3, #8
 800356a:	d847      	bhi.n	80035fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a25      	ldr	r2, [pc, #148]	; (8003608 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d022      	beq.n	80035bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a24      	ldr	r2, [pc, #144]	; (800360c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d01d      	beq.n	80035bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a22      	ldr	r2, [pc, #136]	; (8003610 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d018      	beq.n	80035bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a21      	ldr	r2, [pc, #132]	; (8003614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d013      	beq.n	80035bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a1f      	ldr	r2, [pc, #124]	; (8003618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d00e      	beq.n	80035bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a1e      	ldr	r2, [pc, #120]	; (800361c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d009      	beq.n	80035bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a1c      	ldr	r2, [pc, #112]	; (8003620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d004      	beq.n	80035bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a1b      	ldr	r2, [pc, #108]	; (8003624 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d101      	bne.n	80035c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80035bc:	2301      	movs	r3, #1
 80035be:	e000      	b.n	80035c2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80035c0:	2300      	movs	r3, #0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00a      	beq.n	80035dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	4b17      	ldr	r3, [pc, #92]	; (8003628 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80035ca:	4413      	add	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	461a      	mov	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a15      	ldr	r2, [pc, #84]	; (800362c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80035d8:	671a      	str	r2, [r3, #112]	; 0x70
 80035da:	e009      	b.n	80035f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	4b14      	ldr	r3, [pc, #80]	; (8003630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80035e0:	4413      	add	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	461a      	mov	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a11      	ldr	r2, [pc, #68]	; (8003634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80035ee:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	3b01      	subs	r3, #1
 80035f4:	2201      	movs	r2, #1
 80035f6:	409a      	lsls	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80035fc:	bf00      	nop
 80035fe:	3714      	adds	r7, #20
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr
 8003608:	58025408 	.word	0x58025408
 800360c:	5802541c 	.word	0x5802541c
 8003610:	58025430 	.word	0x58025430
 8003614:	58025444 	.word	0x58025444
 8003618:	58025458 	.word	0x58025458
 800361c:	5802546c 	.word	0x5802546c
 8003620:	58025480 	.word	0x58025480
 8003624:	58025494 	.word	0x58025494
 8003628:	1600963f 	.word	0x1600963f
 800362c:	58025940 	.word	0x58025940
 8003630:	1000823f 	.word	0x1000823f
 8003634:	40020940 	.word	0x40020940

08003638 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e0cf      	b.n	80037ea <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003650:	2b00      	cmp	r3, #0
 8003652:	d106      	bne.n	8003662 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2223      	movs	r2, #35	; 0x23
 8003658:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f7fd fb41 	bl	8000ce4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003662:	4b64      	ldr	r3, [pc, #400]	; (80037f4 <HAL_ETH_Init+0x1bc>)
 8003664:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003668:	4a62      	ldr	r2, [pc, #392]	; (80037f4 <HAL_ETH_Init+0x1bc>)
 800366a:	f043 0302 	orr.w	r3, r3, #2
 800366e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003672:	4b60      	ldr	r3, [pc, #384]	; (80037f4 <HAL_ETH_Init+0x1bc>)
 8003674:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	60bb      	str	r3, [r7, #8]
 800367e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	7a1b      	ldrb	r3, [r3, #8]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d103      	bne.n	8003690 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003688:	2000      	movs	r0, #0
 800368a:	f7fd ff23 	bl	80014d4 <HAL_SYSCFG_ETHInterfaceSelect>
 800368e:	e003      	b.n	8003698 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003690:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003694:	f7fd ff1e 	bl	80014d4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8003698:	4b57      	ldr	r3, [pc, #348]	; (80037f8 <HAL_ETH_Init+0x1c0>)
 800369a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	6812      	ldr	r2, [r2, #0]
 80036aa:	f043 0301 	orr.w	r3, r3, #1
 80036ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80036b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036b4:	f7fd fed2 	bl	800145c <HAL_GetTick>
 80036b8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80036ba:	e011      	b.n	80036e0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80036bc:	f7fd fece 	bl	800145c <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80036ca:	d909      	bls.n	80036e0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2204      	movs	r2, #4
 80036d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	22e0      	movs	r2, #224	; 0xe0
 80036d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e084      	b.n	80037ea <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1e4      	bne.n	80036bc <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f886 	bl	8003804 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80036f8:	f001 fe96 	bl	8005428 <HAL_RCC_GetHCLKFreq>
 80036fc:	4603      	mov	r3, r0
 80036fe:	4a3f      	ldr	r2, [pc, #252]	; (80037fc <HAL_ETH_Init+0x1c4>)
 8003700:	fba2 2303 	umull	r2, r3, r2, r3
 8003704:	0c9a      	lsrs	r2, r3, #18
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	3a01      	subs	r2, #1
 800370c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 fa71 	bl	8003bf8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800371e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003722:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	6812      	ldr	r2, [r2, #0]
 800372a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800372e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003732:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	f003 0303 	and.w	r3, r3, #3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d009      	beq.n	8003756 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	22e0      	movs	r2, #224	; 0xe0
 800374e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e049      	b.n	80037ea <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800375e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003762:	4b27      	ldr	r3, [pc, #156]	; (8003800 <HAL_ETH_Init+0x1c8>)
 8003764:	4013      	ands	r3, r2
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6952      	ldr	r2, [r2, #20]
 800376a:	0051      	lsls	r1, r2, #1
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	6812      	ldr	r2, [r2, #0]
 8003770:	430b      	orrs	r3, r1
 8003772:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003776:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 fad9 	bl	8003d32 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 fb1f 	bl	8003dc4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	3305      	adds	r3, #5
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	021a      	lsls	r2, r3, #8
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	3304      	adds	r3, #4
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	4619      	mov	r1, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	430a      	orrs	r2, r1
 80037a0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	3303      	adds	r3, #3
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	061a      	lsls	r2, r3, #24
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	3302      	adds	r3, #2
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	041b      	lsls	r3, r3, #16
 80037b8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	3301      	adds	r3, #1
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80037c4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80037d2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80037d4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2210      	movs	r2, #16
 80037e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	58024400 	.word	0x58024400
 80037f8:	58000400 	.word	0x58000400
 80037fc:	431bde83 	.word	0x431bde83
 8003800:	ffff8001 	.word	0xffff8001

08003804 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003814:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800381c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800381e:	f001 fe03 	bl	8005428 <HAL_RCC_GetHCLKFreq>
 8003822:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	4a1e      	ldr	r2, [pc, #120]	; (80038a0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d908      	bls.n	800383e <HAL_ETH_SetMDIOClockRange+0x3a>
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	4a1d      	ldr	r2, [pc, #116]	; (80038a4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d804      	bhi.n	800383e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	e027      	b.n	800388e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	4a18      	ldr	r2, [pc, #96]	; (80038a4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d908      	bls.n	8003858 <HAL_ETH_SetMDIOClockRange+0x54>
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	4a17      	ldr	r2, [pc, #92]	; (80038a8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d204      	bcs.n	8003858 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003854:	60fb      	str	r3, [r7, #12]
 8003856:	e01a      	b.n	800388e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	4a13      	ldr	r2, [pc, #76]	; (80038a8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d303      	bcc.n	8003868 <HAL_ETH_SetMDIOClockRange+0x64>
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	4a12      	ldr	r2, [pc, #72]	; (80038ac <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d911      	bls.n	800388c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	4a10      	ldr	r2, [pc, #64]	; (80038ac <HAL_ETH_SetMDIOClockRange+0xa8>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d908      	bls.n	8003882 <HAL_ETH_SetMDIOClockRange+0x7e>
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	4a0f      	ldr	r2, [pc, #60]	; (80038b0 <HAL_ETH_SetMDIOClockRange+0xac>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d804      	bhi.n	8003882 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	e005      	b.n	800388e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003888:	60fb      	str	r3, [r7, #12]
 800388a:	e000      	b.n	800388e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800388c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003898:	bf00      	nop
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	01312cff 	.word	0x01312cff
 80038a4:	02160ebf 	.word	0x02160ebf
 80038a8:	03938700 	.word	0x03938700
 80038ac:	05f5e0ff 	.word	0x05f5e0ff
 80038b0:	08f0d17f 	.word	0x08f0d17f

080038b4 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80038c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	791b      	ldrb	r3, [r3, #4]
 80038cc:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80038ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	7b1b      	ldrb	r3, [r3, #12]
 80038d4:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80038d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	7b5b      	ldrb	r3, [r3, #13]
 80038dc:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80038de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	7b9b      	ldrb	r3, [r3, #14]
 80038e4:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80038e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	7bdb      	ldrb	r3, [r3, #15]
 80038ec:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80038ee:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	7c12      	ldrb	r2, [r2, #16]
 80038f4:	2a00      	cmp	r2, #0
 80038f6:	d102      	bne.n	80038fe <ETH_SetMACConfig+0x4a>
 80038f8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80038fc:	e000      	b.n	8003900 <ETH_SetMACConfig+0x4c>
 80038fe:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003900:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	7c52      	ldrb	r2, [r2, #17]
 8003906:	2a00      	cmp	r2, #0
 8003908:	d102      	bne.n	8003910 <ETH_SetMACConfig+0x5c>
 800390a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800390e:	e000      	b.n	8003912 <ETH_SetMACConfig+0x5e>
 8003910:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003912:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	7c9b      	ldrb	r3, [r3, #18]
 8003918:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800391a:	431a      	orrs	r2, r3
               macconf->Speed |
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8003920:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8003926:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	7f1b      	ldrb	r3, [r3, #28]
 800392c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800392e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	7f5b      	ldrb	r3, [r3, #29]
 8003934:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003936:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	7f92      	ldrb	r2, [r2, #30]
 800393c:	2a00      	cmp	r2, #0
 800393e:	d102      	bne.n	8003946 <ETH_SetMACConfig+0x92>
 8003940:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003944:	e000      	b.n	8003948 <ETH_SetMACConfig+0x94>
 8003946:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003948:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	7fdb      	ldrb	r3, [r3, #31]
 800394e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003950:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003958:	2a00      	cmp	r2, #0
 800395a:	d102      	bne.n	8003962 <ETH_SetMACConfig+0xae>
 800395c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003960:	e000      	b.n	8003964 <ETH_SetMACConfig+0xb0>
 8003962:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003964:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800396a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003972:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8003974:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800397a:	4313      	orrs	r3, r2
 800397c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	4b56      	ldr	r3, [pc, #344]	; (8003ae0 <ETH_SetMACConfig+0x22c>)
 8003986:	4013      	ands	r3, r2
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	6812      	ldr	r2, [r2, #0]
 800398c:	68f9      	ldr	r1, [r7, #12]
 800398e:	430b      	orrs	r3, r1
 8003990:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003996:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800399e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80039a0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80039a8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80039aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80039b2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80039b4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80039b6:	683a      	ldr	r2, [r7, #0]
 80039b8:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80039bc:	2a00      	cmp	r2, #0
 80039be:	d102      	bne.n	80039c6 <ETH_SetMACConfig+0x112>
 80039c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80039c4:	e000      	b.n	80039c8 <ETH_SetMACConfig+0x114>
 80039c6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80039c8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80039ce:	4313      	orrs	r3, r2
 80039d0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	4b42      	ldr	r3, [pc, #264]	; (8003ae4 <ETH_SetMACConfig+0x230>)
 80039da:	4013      	ands	r3, r2
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	6812      	ldr	r2, [r2, #0]
 80039e0:	68f9      	ldr	r1, [r7, #12]
 80039e2:	430b      	orrs	r3, r1
 80039e4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039ec:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80039f2:	4313      	orrs	r3, r2
 80039f4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68da      	ldr	r2, [r3, #12]
 80039fc:	4b3a      	ldr	r3, [pc, #232]	; (8003ae8 <ETH_SetMACConfig+0x234>)
 80039fe:	4013      	ands	r3, r2
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	6812      	ldr	r2, [r2, #0]
 8003a04:	68f9      	ldr	r1, [r7, #12]
 8003a06:	430b      	orrs	r3, r1
 8003a08:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003a10:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003a16:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003a1e:	2a00      	cmp	r2, #0
 8003a20:	d101      	bne.n	8003a26 <ETH_SetMACConfig+0x172>
 8003a22:	2280      	movs	r2, #128	; 0x80
 8003a24:	e000      	b.n	8003a28 <ETH_SetMACConfig+0x174>
 8003a26:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003a28:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a2e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003a30:	4313      	orrs	r3, r2
 8003a32:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a3a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8003a3e:	4013      	ands	r3, r2
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	6812      	ldr	r2, [r2, #0]
 8003a44:	68f9      	ldr	r1, [r7, #12]
 8003a46:	430b      	orrs	r3, r1
 8003a48:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003a50:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003a58:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a66:	f023 0103 	bic.w	r1, r3, #3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	430a      	orrs	r2, r1
 8003a72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8003a7e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8003a9a:	2a00      	cmp	r2, #0
 8003a9c:	d101      	bne.n	8003aa2 <ETH_SetMACConfig+0x1ee>
 8003a9e:	2240      	movs	r2, #64	; 0x40
 8003aa0:	e000      	b.n	8003aa4 <ETH_SetMACConfig+0x1f0>
 8003aa2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003aa4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003aac:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003aae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8003ab6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003ac4:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8003ad4:	bf00      	nop
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	00048083 	.word	0x00048083
 8003ae4:	c0f88000 	.word	0xc0f88000
 8003ae8:	fffffef0 	.word	0xfffffef0

08003aec <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	4b38      	ldr	r3, [pc, #224]	; (8003be4 <ETH_SetDMAConfig+0xf8>)
 8003b02:	4013      	ands	r3, r2
 8003b04:	683a      	ldr	r2, [r7, #0]
 8003b06:	6811      	ldr	r1, [r2, #0]
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	6812      	ldr	r2, [r2, #0]
 8003b0c:	430b      	orrs	r3, r1
 8003b0e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b12:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	791b      	ldrb	r3, [r3, #4]
 8003b18:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003b1e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	7b1b      	ldrb	r3, [r3, #12]
 8003b24:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003b26:	4313      	orrs	r3, r2
 8003b28:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	4b2c      	ldr	r3, [pc, #176]	; (8003be8 <ETH_SetDMAConfig+0xfc>)
 8003b36:	4013      	ands	r3, r2
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	6812      	ldr	r2, [r2, #0]
 8003b3c:	68f9      	ldr	r1, [r7, #12]
 8003b3e:	430b      	orrs	r3, r1
 8003b40:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b44:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	7b5b      	ldrb	r3, [r3, #13]
 8003b4a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003b50:	4313      	orrs	r3, r2
 8003b52:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b5c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8003b60:	4b22      	ldr	r3, [pc, #136]	; (8003bec <ETH_SetDMAConfig+0x100>)
 8003b62:	4013      	ands	r3, r2
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	6812      	ldr	r2, [r2, #0]
 8003b68:	68f9      	ldr	r1, [r7, #12]
 8003b6a:	430b      	orrs	r3, r1
 8003b6c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b70:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	7d1b      	ldrb	r3, [r3, #20]
 8003b7c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003b7e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	7f5b      	ldrb	r3, [r3, #29]
 8003b84:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003b86:	4313      	orrs	r3, r2
 8003b88:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b92:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8003b96:	4b16      	ldr	r3, [pc, #88]	; (8003bf0 <ETH_SetDMAConfig+0x104>)
 8003b98:	4013      	ands	r3, r2
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6812      	ldr	r2, [r2, #0]
 8003b9e:	68f9      	ldr	r1, [r7, #12]
 8003ba0:	430b      	orrs	r3, r1
 8003ba2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ba6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	7f1b      	ldrb	r3, [r3, #28]
 8003bae:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bc0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003bc4:	4b0b      	ldr	r3, [pc, #44]	; (8003bf4 <ETH_SetDMAConfig+0x108>)
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	6812      	ldr	r2, [r2, #0]
 8003bcc:	68f9      	ldr	r1, [r7, #12]
 8003bce:	430b      	orrs	r3, r1
 8003bd0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003bd4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8003bd8:	bf00      	nop
 8003bda:	3714      	adds	r7, #20
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	ffff87fd 	.word	0xffff87fd
 8003be8:	ffff2ffe 	.word	0xffff2ffe
 8003bec:	fffec000 	.word	0xfffec000
 8003bf0:	ffc0efef 	.word	0xffc0efef
 8003bf4:	7fc0ffff 	.word	0x7fc0ffff

08003bf8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b0a4      	sub	sp, #144	; 0x90
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003c00:	2301      	movs	r3, #1
 8003c02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003c06:	2300      	movs	r3, #0
 8003c08:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003c10:	2300      	movs	r3, #0
 8003c12:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003c16:	2301      	movs	r3, #1
 8003c18:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003c22:	2301      	movs	r3, #1
 8003c24:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003c34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c38:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8003c40:	2300      	movs	r3, #0
 8003c42:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003c44:	2300      	movs	r3, #0
 8003c46:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8003c50:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8003c54:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003c56:	2300      	movs	r3, #0
 8003c58:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8003c60:	2301      	movs	r3, #1
 8003c62:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003c66:	2300      	movs	r3, #0
 8003c68:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003c72:	2300      	movs	r3, #0
 8003c74:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8003c76:	2300      	movs	r3, #0
 8003c78:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003c84:	2300      	movs	r3, #0
 8003c86:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003c90:	2320      	movs	r3, #32
 8003c92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003c96:	2301      	movs	r3, #1
 8003c98:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003ca2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8003ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003ca8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003cac:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003cdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f7ff fde6 	bl	80038b4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003cec:	2301      	movs	r3, #1
 8003cee:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003d02:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003d06:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003d0c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003d10:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003d12:	2300      	movs	r3, #0
 8003d14:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8003d18:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003d1c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003d1e:	f107 0308 	add.w	r3, r7, #8
 8003d22:	4619      	mov	r1, r3
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f7ff fee1 	bl	8003aec <ETH_SetDMAConfig>
}
 8003d2a:	bf00      	nop
 8003d2c:	3790      	adds	r7, #144	; 0x90
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003d32:	b480      	push	{r7}
 8003d34:	b085      	sub	sp, #20
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60fb      	str	r3, [r7, #12]
 8003d3e:	e01d      	b.n	8003d7c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68d9      	ldr	r1, [r3, #12]
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	4613      	mov	r3, r2
 8003d48:	005b      	lsls	r3, r3, #1
 8003d4a:	4413      	add	r3, r2
 8003d4c:	00db      	lsls	r3, r3, #3
 8003d4e:	440b      	add	r3, r1
 8003d50:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	2200      	movs	r2, #0
 8003d56:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	2200      	movs	r2, #0
 8003d62:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	2200      	movs	r2, #0
 8003d68:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003d6a:	68b9      	ldr	r1, [r7, #8]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	3206      	adds	r2, #6
 8003d72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	60fb      	str	r3, [r7, #12]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2b03      	cmp	r3, #3
 8003d80:	d9de      	bls.n	8003d40 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d90:	461a      	mov	r2, r3
 8003d92:	2303      	movs	r3, #3
 8003d94:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68da      	ldr	r2, [r3, #12]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003da4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68da      	ldr	r2, [r3, #12]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003db4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8003db8:	bf00      	nop
 8003dba:	3714      	adds	r7, #20
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003dcc:	2300      	movs	r3, #0
 8003dce:	60fb      	str	r3, [r7, #12]
 8003dd0:	e023      	b.n	8003e1a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6919      	ldr	r1, [r3, #16]
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	4413      	add	r3, r2
 8003dde:	00db      	lsls	r3, r3, #3
 8003de0:	440b      	add	r3, r1
 8003de2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	2200      	movs	r2, #0
 8003de8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	2200      	movs	r2, #0
 8003dee:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	2200      	movs	r2, #0
 8003df4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	2200      	movs	r2, #0
 8003e06:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003e08:	68b9      	ldr	r1, [r7, #8]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	3212      	adds	r2, #18
 8003e10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	3301      	adds	r3, #1
 8003e18:	60fb      	str	r3, [r7, #12]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d9d8      	bls.n	8003dd2 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e46:	461a      	mov	r2, r3
 8003e48:	2303      	movs	r3, #3
 8003e4a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	691a      	ldr	r2, [r3, #16]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e5a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e6e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8003e72:	bf00      	nop
 8003e74:	3714      	adds	r7, #20
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
	...

08003e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b089      	sub	sp, #36	; 0x24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003e8e:	4b89      	ldr	r3, [pc, #548]	; (80040b4 <HAL_GPIO_Init+0x234>)
 8003e90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003e92:	e194      	b.n	80041be <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	2101      	movs	r1, #1
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f000 8186 	beq.w	80041b8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f003 0303 	and.w	r3, r3, #3
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d005      	beq.n	8003ec4 <HAL_GPIO_Init+0x44>
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f003 0303 	and.w	r3, r3, #3
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d130      	bne.n	8003f26 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	2203      	movs	r2, #3
 8003ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed4:	43db      	mvns	r3, r3
 8003ed6:	69ba      	ldr	r2, [r7, #24]
 8003ed8:	4013      	ands	r3, r2
 8003eda:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	68da      	ldr	r2, [r3, #12]
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003efa:	2201      	movs	r2, #1
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	fa02 f303 	lsl.w	r3, r2, r3
 8003f02:	43db      	mvns	r3, r3
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	4013      	ands	r3, r2
 8003f08:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	091b      	lsrs	r3, r3, #4
 8003f10:	f003 0201 	and.w	r2, r3, #1
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1a:	69ba      	ldr	r2, [r7, #24]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	69ba      	ldr	r2, [r7, #24]
 8003f24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f003 0303 	and.w	r3, r3, #3
 8003f2e:	2b03      	cmp	r3, #3
 8003f30:	d017      	beq.n	8003f62 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	2203      	movs	r2, #3
 8003f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f42:	43db      	mvns	r3, r3
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	4013      	ands	r3, r2
 8003f48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	689a      	ldr	r2, [r3, #8]
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	fa02 f303 	lsl.w	r3, r2, r3
 8003f56:	69ba      	ldr	r2, [r7, #24]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f003 0303 	and.w	r3, r3, #3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d123      	bne.n	8003fb6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	08da      	lsrs	r2, r3, #3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	3208      	adds	r2, #8
 8003f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	f003 0307 	and.w	r3, r3, #7
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	220f      	movs	r2, #15
 8003f86:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8a:	43db      	mvns	r3, r3
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	4013      	ands	r3, r2
 8003f90:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	691a      	ldr	r2, [r3, #16]
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	08da      	lsrs	r2, r3, #3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	3208      	adds	r2, #8
 8003fb0:	69b9      	ldr	r1, [r7, #24]
 8003fb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	005b      	lsls	r3, r3, #1
 8003fc0:	2203      	movs	r2, #3
 8003fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc6:	43db      	mvns	r3, r3
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	4013      	ands	r3, r2
 8003fcc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f003 0203 	and.w	r2, r3, #3
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	fa02 f303 	lsl.w	r3, r2, r3
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 80e0 	beq.w	80041b8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ff8:	4b2f      	ldr	r3, [pc, #188]	; (80040b8 <HAL_GPIO_Init+0x238>)
 8003ffa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ffe:	4a2e      	ldr	r2, [pc, #184]	; (80040b8 <HAL_GPIO_Init+0x238>)
 8004000:	f043 0302 	orr.w	r3, r3, #2
 8004004:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004008:	4b2b      	ldr	r3, [pc, #172]	; (80040b8 <HAL_GPIO_Init+0x238>)
 800400a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004016:	4a29      	ldr	r2, [pc, #164]	; (80040bc <HAL_GPIO_Init+0x23c>)
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	089b      	lsrs	r3, r3, #2
 800401c:	3302      	adds	r3, #2
 800401e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004022:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	f003 0303 	and.w	r3, r3, #3
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	220f      	movs	r2, #15
 800402e:	fa02 f303 	lsl.w	r3, r2, r3
 8004032:	43db      	mvns	r3, r3
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	4013      	ands	r3, r2
 8004038:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a20      	ldr	r2, [pc, #128]	; (80040c0 <HAL_GPIO_Init+0x240>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d052      	beq.n	80040e8 <HAL_GPIO_Init+0x268>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a1f      	ldr	r2, [pc, #124]	; (80040c4 <HAL_GPIO_Init+0x244>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d031      	beq.n	80040ae <HAL_GPIO_Init+0x22e>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a1e      	ldr	r2, [pc, #120]	; (80040c8 <HAL_GPIO_Init+0x248>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d02b      	beq.n	80040aa <HAL_GPIO_Init+0x22a>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a1d      	ldr	r2, [pc, #116]	; (80040cc <HAL_GPIO_Init+0x24c>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d025      	beq.n	80040a6 <HAL_GPIO_Init+0x226>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a1c      	ldr	r2, [pc, #112]	; (80040d0 <HAL_GPIO_Init+0x250>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d01f      	beq.n	80040a2 <HAL_GPIO_Init+0x222>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a1b      	ldr	r2, [pc, #108]	; (80040d4 <HAL_GPIO_Init+0x254>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d019      	beq.n	800409e <HAL_GPIO_Init+0x21e>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a1a      	ldr	r2, [pc, #104]	; (80040d8 <HAL_GPIO_Init+0x258>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d013      	beq.n	800409a <HAL_GPIO_Init+0x21a>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a19      	ldr	r2, [pc, #100]	; (80040dc <HAL_GPIO_Init+0x25c>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d00d      	beq.n	8004096 <HAL_GPIO_Init+0x216>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a18      	ldr	r2, [pc, #96]	; (80040e0 <HAL_GPIO_Init+0x260>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d007      	beq.n	8004092 <HAL_GPIO_Init+0x212>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a17      	ldr	r2, [pc, #92]	; (80040e4 <HAL_GPIO_Init+0x264>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d101      	bne.n	800408e <HAL_GPIO_Init+0x20e>
 800408a:	2309      	movs	r3, #9
 800408c:	e02d      	b.n	80040ea <HAL_GPIO_Init+0x26a>
 800408e:	230a      	movs	r3, #10
 8004090:	e02b      	b.n	80040ea <HAL_GPIO_Init+0x26a>
 8004092:	2308      	movs	r3, #8
 8004094:	e029      	b.n	80040ea <HAL_GPIO_Init+0x26a>
 8004096:	2307      	movs	r3, #7
 8004098:	e027      	b.n	80040ea <HAL_GPIO_Init+0x26a>
 800409a:	2306      	movs	r3, #6
 800409c:	e025      	b.n	80040ea <HAL_GPIO_Init+0x26a>
 800409e:	2305      	movs	r3, #5
 80040a0:	e023      	b.n	80040ea <HAL_GPIO_Init+0x26a>
 80040a2:	2304      	movs	r3, #4
 80040a4:	e021      	b.n	80040ea <HAL_GPIO_Init+0x26a>
 80040a6:	2303      	movs	r3, #3
 80040a8:	e01f      	b.n	80040ea <HAL_GPIO_Init+0x26a>
 80040aa:	2302      	movs	r3, #2
 80040ac:	e01d      	b.n	80040ea <HAL_GPIO_Init+0x26a>
 80040ae:	2301      	movs	r3, #1
 80040b0:	e01b      	b.n	80040ea <HAL_GPIO_Init+0x26a>
 80040b2:	bf00      	nop
 80040b4:	58000080 	.word	0x58000080
 80040b8:	58024400 	.word	0x58024400
 80040bc:	58000400 	.word	0x58000400
 80040c0:	58020000 	.word	0x58020000
 80040c4:	58020400 	.word	0x58020400
 80040c8:	58020800 	.word	0x58020800
 80040cc:	58020c00 	.word	0x58020c00
 80040d0:	58021000 	.word	0x58021000
 80040d4:	58021400 	.word	0x58021400
 80040d8:	58021800 	.word	0x58021800
 80040dc:	58021c00 	.word	0x58021c00
 80040e0:	58022000 	.word	0x58022000
 80040e4:	58022400 	.word	0x58022400
 80040e8:	2300      	movs	r3, #0
 80040ea:	69fa      	ldr	r2, [r7, #28]
 80040ec:	f002 0203 	and.w	r2, r2, #3
 80040f0:	0092      	lsls	r2, r2, #2
 80040f2:	4093      	lsls	r3, r2
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040fa:	4938      	ldr	r1, [pc, #224]	; (80041dc <HAL_GPIO_Init+0x35c>)
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	089b      	lsrs	r3, r3, #2
 8004100:	3302      	adds	r3, #2
 8004102:	69ba      	ldr	r2, [r7, #24]
 8004104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	43db      	mvns	r3, r3
 8004114:	69ba      	ldr	r2, [r7, #24]
 8004116:	4013      	ands	r3, r2
 8004118:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d003      	beq.n	800412e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004126:	69ba      	ldr	r2, [r7, #24]
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	4313      	orrs	r3, r2
 800412c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800412e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004136:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	43db      	mvns	r3, r3
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	4013      	ands	r3, r2
 8004146:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d003      	beq.n	800415c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	4313      	orrs	r3, r2
 800415a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800415c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	43db      	mvns	r3, r3
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	4013      	ands	r3, r2
 8004172:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d003      	beq.n	8004188 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	4313      	orrs	r3, r2
 8004186:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	69ba      	ldr	r2, [r7, #24]
 800418c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	43db      	mvns	r3, r3
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	4013      	ands	r3, r2
 800419c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d003      	beq.n	80041b2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80041aa:	69ba      	ldr	r2, [r7, #24]
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	3301      	adds	r3, #1
 80041bc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	fa22 f303 	lsr.w	r3, r2, r3
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f47f ae63 	bne.w	8003e94 <HAL_GPIO_Init+0x14>
  }
}
 80041ce:	bf00      	nop
 80041d0:	bf00      	nop
 80041d2:	3724      	adds	r7, #36	; 0x24
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr
 80041dc:	58000400 	.word	0x58000400

080041e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	460b      	mov	r3, r1
 80041ea:	807b      	strh	r3, [r7, #2]
 80041ec:	4613      	mov	r3, r2
 80041ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041f0:	787b      	ldrb	r3, [r7, #1]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d003      	beq.n	80041fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041f6:	887a      	ldrh	r2, [r7, #2]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80041fc:	e003      	b.n	8004206 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80041fe:	887b      	ldrh	r3, [r7, #2]
 8004200:	041a      	lsls	r2, r3, #16
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	619a      	str	r2, [r3, #24]
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr

08004212 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004212:	b480      	push	{r7}
 8004214:	b085      	sub	sp, #20
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
 800421a:	460b      	mov	r3, r1
 800421c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004224:	887a      	ldrh	r2, [r7, #2]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	4013      	ands	r3, r2
 800422a:	041a      	lsls	r2, r3, #16
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	43d9      	mvns	r1, r3
 8004230:	887b      	ldrh	r3, [r7, #2]
 8004232:	400b      	ands	r3, r1
 8004234:	431a      	orrs	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	619a      	str	r2, [r3, #24]
}
 800423a:	bf00      	nop
 800423c:	3714      	adds	r7, #20
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr

08004246 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004246:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004248:	b08f      	sub	sp, #60	; 0x3c
 800424a:	af0a      	add	r7, sp, #40	; 0x28
 800424c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d101      	bne.n	8004258 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e116      	b.n	8004486 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d106      	bne.n	8004278 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7fc feea 	bl	800104c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2203      	movs	r2, #3
 800427c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004288:	2b00      	cmp	r3, #0
 800428a:	d102      	bne.n	8004292 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4618      	mov	r0, r3
 8004298:	f004 fbd4 	bl	8008a44 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	603b      	str	r3, [r7, #0]
 80042a2:	687e      	ldr	r6, [r7, #4]
 80042a4:	466d      	mov	r5, sp
 80042a6:	f106 0410 	add.w	r4, r6, #16
 80042aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80042b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80042ba:	1d33      	adds	r3, r6, #4
 80042bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042be:	6838      	ldr	r0, [r7, #0]
 80042c0:	f004 fb52 	bl	8008968 <USB_CoreInit>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d005      	beq.n	80042d6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2202      	movs	r2, #2
 80042ce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e0d7      	b.n	8004486 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2100      	movs	r1, #0
 80042dc:	4618      	mov	r0, r3
 80042de:	f004 fbc2 	bl	8008a66 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042e2:	2300      	movs	r3, #0
 80042e4:	73fb      	strb	r3, [r7, #15]
 80042e6:	e04a      	b.n	800437e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80042e8:	7bfa      	ldrb	r2, [r7, #15]
 80042ea:	6879      	ldr	r1, [r7, #4]
 80042ec:	4613      	mov	r3, r2
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	4413      	add	r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	440b      	add	r3, r1
 80042f6:	333d      	adds	r3, #61	; 0x3d
 80042f8:	2201      	movs	r2, #1
 80042fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80042fc:	7bfa      	ldrb	r2, [r7, #15]
 80042fe:	6879      	ldr	r1, [r7, #4]
 8004300:	4613      	mov	r3, r2
 8004302:	00db      	lsls	r3, r3, #3
 8004304:	4413      	add	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	440b      	add	r3, r1
 800430a:	333c      	adds	r3, #60	; 0x3c
 800430c:	7bfa      	ldrb	r2, [r7, #15]
 800430e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004310:	7bfa      	ldrb	r2, [r7, #15]
 8004312:	7bfb      	ldrb	r3, [r7, #15]
 8004314:	b298      	uxth	r0, r3
 8004316:	6879      	ldr	r1, [r7, #4]
 8004318:	4613      	mov	r3, r2
 800431a:	00db      	lsls	r3, r3, #3
 800431c:	4413      	add	r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	440b      	add	r3, r1
 8004322:	3344      	adds	r3, #68	; 0x44
 8004324:	4602      	mov	r2, r0
 8004326:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004328:	7bfa      	ldrb	r2, [r7, #15]
 800432a:	6879      	ldr	r1, [r7, #4]
 800432c:	4613      	mov	r3, r2
 800432e:	00db      	lsls	r3, r3, #3
 8004330:	4413      	add	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	440b      	add	r3, r1
 8004336:	3340      	adds	r3, #64	; 0x40
 8004338:	2200      	movs	r2, #0
 800433a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800433c:	7bfa      	ldrb	r2, [r7, #15]
 800433e:	6879      	ldr	r1, [r7, #4]
 8004340:	4613      	mov	r3, r2
 8004342:	00db      	lsls	r3, r3, #3
 8004344:	4413      	add	r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	440b      	add	r3, r1
 800434a:	3348      	adds	r3, #72	; 0x48
 800434c:	2200      	movs	r2, #0
 800434e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004350:	7bfa      	ldrb	r2, [r7, #15]
 8004352:	6879      	ldr	r1, [r7, #4]
 8004354:	4613      	mov	r3, r2
 8004356:	00db      	lsls	r3, r3, #3
 8004358:	4413      	add	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	440b      	add	r3, r1
 800435e:	334c      	adds	r3, #76	; 0x4c
 8004360:	2200      	movs	r2, #0
 8004362:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004364:	7bfa      	ldrb	r2, [r7, #15]
 8004366:	6879      	ldr	r1, [r7, #4]
 8004368:	4613      	mov	r3, r2
 800436a:	00db      	lsls	r3, r3, #3
 800436c:	4413      	add	r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	440b      	add	r3, r1
 8004372:	3354      	adds	r3, #84	; 0x54
 8004374:	2200      	movs	r2, #0
 8004376:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004378:	7bfb      	ldrb	r3, [r7, #15]
 800437a:	3301      	adds	r3, #1
 800437c:	73fb      	strb	r3, [r7, #15]
 800437e:	7bfa      	ldrb	r2, [r7, #15]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	429a      	cmp	r2, r3
 8004386:	d3af      	bcc.n	80042e8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004388:	2300      	movs	r3, #0
 800438a:	73fb      	strb	r3, [r7, #15]
 800438c:	e044      	b.n	8004418 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800438e:	7bfa      	ldrb	r2, [r7, #15]
 8004390:	6879      	ldr	r1, [r7, #4]
 8004392:	4613      	mov	r3, r2
 8004394:	00db      	lsls	r3, r3, #3
 8004396:	4413      	add	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	440b      	add	r3, r1
 800439c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80043a0:	2200      	movs	r2, #0
 80043a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80043a4:	7bfa      	ldrb	r2, [r7, #15]
 80043a6:	6879      	ldr	r1, [r7, #4]
 80043a8:	4613      	mov	r3, r2
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	4413      	add	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	440b      	add	r3, r1
 80043b2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80043b6:	7bfa      	ldrb	r2, [r7, #15]
 80043b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80043ba:	7bfa      	ldrb	r2, [r7, #15]
 80043bc:	6879      	ldr	r1, [r7, #4]
 80043be:	4613      	mov	r3, r2
 80043c0:	00db      	lsls	r3, r3, #3
 80043c2:	4413      	add	r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	440b      	add	r3, r1
 80043c8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80043cc:	2200      	movs	r2, #0
 80043ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80043d0:	7bfa      	ldrb	r2, [r7, #15]
 80043d2:	6879      	ldr	r1, [r7, #4]
 80043d4:	4613      	mov	r3, r2
 80043d6:	00db      	lsls	r3, r3, #3
 80043d8:	4413      	add	r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	440b      	add	r3, r1
 80043de:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80043e2:	2200      	movs	r2, #0
 80043e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80043e6:	7bfa      	ldrb	r2, [r7, #15]
 80043e8:	6879      	ldr	r1, [r7, #4]
 80043ea:	4613      	mov	r3, r2
 80043ec:	00db      	lsls	r3, r3, #3
 80043ee:	4413      	add	r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	440b      	add	r3, r1
 80043f4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80043f8:	2200      	movs	r2, #0
 80043fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80043fc:	7bfa      	ldrb	r2, [r7, #15]
 80043fe:	6879      	ldr	r1, [r7, #4]
 8004400:	4613      	mov	r3, r2
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	4413      	add	r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	440b      	add	r3, r1
 800440a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800440e:	2200      	movs	r2, #0
 8004410:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004412:	7bfb      	ldrb	r3, [r7, #15]
 8004414:	3301      	adds	r3, #1
 8004416:	73fb      	strb	r3, [r7, #15]
 8004418:	7bfa      	ldrb	r2, [r7, #15]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	429a      	cmp	r2, r3
 8004420:	d3b5      	bcc.n	800438e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	603b      	str	r3, [r7, #0]
 8004428:	687e      	ldr	r6, [r7, #4]
 800442a:	466d      	mov	r5, sp
 800442c:	f106 0410 	add.w	r4, r6, #16
 8004430:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004432:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004434:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004436:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004438:	e894 0003 	ldmia.w	r4, {r0, r1}
 800443c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004440:	1d33      	adds	r3, r6, #4
 8004442:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004444:	6838      	ldr	r0, [r7, #0]
 8004446:	f004 fb5b 	bl	8008b00 <USB_DevInit>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d005      	beq.n	800445c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2202      	movs	r2, #2
 8004454:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e014      	b.n	8004486 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004470:	2b01      	cmp	r3, #1
 8004472:	d102      	bne.n	800447a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 f80b 	bl	8004490 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4618      	mov	r0, r3
 8004480:	f004 fd19 	bl	8008eb6 <USB_DevDisconnect>

  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3714      	adds	r7, #20
 800448a:	46bd      	mov	sp, r7
 800448c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004490 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2201      	movs	r2, #1
 80044a2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044be:	4b05      	ldr	r3, [pc, #20]	; (80044d4 <HAL_PCDEx_ActivateLPM+0x44>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3714      	adds	r7, #20
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr
 80044d4:	10000003 	.word	0x10000003

080044d8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80044e0:	4b19      	ldr	r3, [pc, #100]	; (8004548 <HAL_PWREx_ConfigSupply+0x70>)
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	f003 0304 	and.w	r3, r3, #4
 80044e8:	2b04      	cmp	r3, #4
 80044ea:	d00a      	beq.n	8004502 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80044ec:	4b16      	ldr	r3, [pc, #88]	; (8004548 <HAL_PWREx_ConfigSupply+0x70>)
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	f003 0307 	and.w	r3, r3, #7
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d001      	beq.n	80044fe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e01f      	b.n	800453e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80044fe:	2300      	movs	r3, #0
 8004500:	e01d      	b.n	800453e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004502:	4b11      	ldr	r3, [pc, #68]	; (8004548 <HAL_PWREx_ConfigSupply+0x70>)
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f023 0207 	bic.w	r2, r3, #7
 800450a:	490f      	ldr	r1, [pc, #60]	; (8004548 <HAL_PWREx_ConfigSupply+0x70>)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4313      	orrs	r3, r2
 8004510:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004512:	f7fc ffa3 	bl	800145c <HAL_GetTick>
 8004516:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004518:	e009      	b.n	800452e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800451a:	f7fc ff9f 	bl	800145c <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004528:	d901      	bls.n	800452e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e007      	b.n	800453e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800452e:	4b06      	ldr	r3, [pc, #24]	; (8004548 <HAL_PWREx_ConfigSupply+0x70>)
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004536:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800453a:	d1ee      	bne.n	800451a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	58024800 	.word	0x58024800

0800454c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800454c:	b480      	push	{r7}
 800454e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004550:	4b05      	ldr	r3, [pc, #20]	; (8004568 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	4a04      	ldr	r2, [pc, #16]	; (8004568 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004556:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800455a:	60d3      	str	r3, [r2, #12]
}
 800455c:	bf00      	nop
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	58024800 	.word	0x58024800

0800456c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b08c      	sub	sp, #48	; 0x30
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d102      	bne.n	8004580 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	f000 bc1d 	b.w	8004dba <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 8087 	beq.w	800469c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800458e:	4b99      	ldr	r3, [pc, #612]	; (80047f4 <HAL_RCC_OscConfig+0x288>)
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004596:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004598:	4b96      	ldr	r3, [pc, #600]	; (80047f4 <HAL_RCC_OscConfig+0x288>)
 800459a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800459e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a0:	2b10      	cmp	r3, #16
 80045a2:	d007      	beq.n	80045b4 <HAL_RCC_OscConfig+0x48>
 80045a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a6:	2b18      	cmp	r3, #24
 80045a8:	d110      	bne.n	80045cc <HAL_RCC_OscConfig+0x60>
 80045aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ac:	f003 0303 	and.w	r3, r3, #3
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d10b      	bne.n	80045cc <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045b4:	4b8f      	ldr	r3, [pc, #572]	; (80047f4 <HAL_RCC_OscConfig+0x288>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d06c      	beq.n	800469a <HAL_RCC_OscConfig+0x12e>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d168      	bne.n	800469a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e3f6      	b.n	8004dba <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045d4:	d106      	bne.n	80045e4 <HAL_RCC_OscConfig+0x78>
 80045d6:	4b87      	ldr	r3, [pc, #540]	; (80047f4 <HAL_RCC_OscConfig+0x288>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a86      	ldr	r2, [pc, #536]	; (80047f4 <HAL_RCC_OscConfig+0x288>)
 80045dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045e0:	6013      	str	r3, [r2, #0]
 80045e2:	e02e      	b.n	8004642 <HAL_RCC_OscConfig+0xd6>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d10c      	bne.n	8004606 <HAL_RCC_OscConfig+0x9a>
 80045ec:	4b81      	ldr	r3, [pc, #516]	; (80047f4 <HAL_RCC_OscConfig+0x288>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a80      	ldr	r2, [pc, #512]	; (80047f4 <HAL_RCC_OscConfig+0x288>)
 80045f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045f6:	6013      	str	r3, [r2, #0]
 80045f8:	4b7e      	ldr	r3, [pc, #504]	; (80047f4 <HAL_RCC_OscConfig+0x288>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a7d      	ldr	r2, [pc, #500]	; (80047f4 <HAL_RCC_OscConfig+0x288>)
 80045fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004602:	6013      	str	r3, [r2, #0]
 8004604:	e01d      	b.n	8004642 <HAL_RCC_OscConfig+0xd6>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800460e:	d10c      	bne.n	800462a <HAL_RCC_OscConfig+0xbe>
 8004610:	4b78      	ldr	r3, [pc, #480]	; (80047f4 <HAL_RCC_OscConfig+0x288>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a77      	ldr	r2, [pc, #476]	; (80047f4 <HAL_RCC_OscConfig+0x288>)
 8004616:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800461a:	6013      	str	r3, [r2, #0]
 800461c:	4b75      	ldr	r3, [pc, #468]	; (80047f4 <HAL_RCC_OscConfig+0x288>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a74      	ldr	r2, [pc, #464]	; (80047f4 <HAL_RCC_OscConfig+0x288>)
 8004622:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004626:	6013      	str	r3, [r2, #0]
 8004628:	e00b      	b.n	8004642 <HAL_RCC_OscConfig+0xd6>
 800462a:	4b72      	ldr	r3, [pc, #456]	; (80047f4 <HAL_RCC_OscConfig+0x288>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a71      	ldr	r2, [pc, #452]	; (80047f4 <HAL_RCC_OscConfig+0x288>)
 8004630:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004634:	6013      	str	r3, [r2, #0]
 8004636:	4b6f      	ldr	r3, [pc, #444]	; (80047f4 <HAL_RCC_OscConfig+0x288>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a6e      	ldr	r2, [pc, #440]	; (80047f4 <HAL_RCC_OscConfig+0x288>)
 800463c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004640:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d013      	beq.n	8004672 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464a:	f7fc ff07 	bl	800145c <HAL_GetTick>
 800464e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004650:	e008      	b.n	8004664 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004652:	f7fc ff03 	bl	800145c <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	2b64      	cmp	r3, #100	; 0x64
 800465e:	d901      	bls.n	8004664 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e3aa      	b.n	8004dba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004664:	4b63      	ldr	r3, [pc, #396]	; (80047f4 <HAL_RCC_OscConfig+0x288>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d0f0      	beq.n	8004652 <HAL_RCC_OscConfig+0xe6>
 8004670:	e014      	b.n	800469c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004672:	f7fc fef3 	bl	800145c <HAL_GetTick>
 8004676:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004678:	e008      	b.n	800468c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800467a:	f7fc feef 	bl	800145c <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b64      	cmp	r3, #100	; 0x64
 8004686:	d901      	bls.n	800468c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e396      	b.n	8004dba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800468c:	4b59      	ldr	r3, [pc, #356]	; (80047f4 <HAL_RCC_OscConfig+0x288>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1f0      	bne.n	800467a <HAL_RCC_OscConfig+0x10e>
 8004698:	e000      	b.n	800469c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800469a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0302 	and.w	r3, r3, #2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f000 80cb 	beq.w	8004840 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046aa:	4b52      	ldr	r3, [pc, #328]	; (80047f4 <HAL_RCC_OscConfig+0x288>)
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046b2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80046b4:	4b4f      	ldr	r3, [pc, #316]	; (80047f4 <HAL_RCC_OscConfig+0x288>)
 80046b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80046ba:	6a3b      	ldr	r3, [r7, #32]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d007      	beq.n	80046d0 <HAL_RCC_OscConfig+0x164>
 80046c0:	6a3b      	ldr	r3, [r7, #32]
 80046c2:	2b18      	cmp	r3, #24
 80046c4:	d156      	bne.n	8004774 <HAL_RCC_OscConfig+0x208>
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	f003 0303 	and.w	r3, r3, #3
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d151      	bne.n	8004774 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046d0:	4b48      	ldr	r3, [pc, #288]	; (80047f4 <HAL_RCC_OscConfig+0x288>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0304 	and.w	r3, r3, #4
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d005      	beq.n	80046e8 <HAL_RCC_OscConfig+0x17c>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d101      	bne.n	80046e8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e368      	b.n	8004dba <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80046e8:	4b42      	ldr	r3, [pc, #264]	; (80047f4 <HAL_RCC_OscConfig+0x288>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f023 0219 	bic.w	r2, r3, #25
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	493f      	ldr	r1, [pc, #252]	; (80047f4 <HAL_RCC_OscConfig+0x288>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80046fa:	f7fc feaf 	bl	800145c <HAL_GetTick>
 80046fe:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004700:	e008      	b.n	8004714 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004702:	f7fc feab 	bl	800145c <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d901      	bls.n	8004714 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e352      	b.n	8004dba <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004714:	4b37      	ldr	r3, [pc, #220]	; (80047f4 <HAL_RCC_OscConfig+0x288>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0304 	and.w	r3, r3, #4
 800471c:	2b00      	cmp	r3, #0
 800471e:	d0f0      	beq.n	8004702 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004720:	f7fc fecc 	bl	80014bc <HAL_GetREVID>
 8004724:	4603      	mov	r3, r0
 8004726:	f241 0203 	movw	r2, #4099	; 0x1003
 800472a:	4293      	cmp	r3, r2
 800472c:	d817      	bhi.n	800475e <HAL_RCC_OscConfig+0x1f2>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	2b40      	cmp	r3, #64	; 0x40
 8004734:	d108      	bne.n	8004748 <HAL_RCC_OscConfig+0x1dc>
 8004736:	4b2f      	ldr	r3, [pc, #188]	; (80047f4 <HAL_RCC_OscConfig+0x288>)
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800473e:	4a2d      	ldr	r2, [pc, #180]	; (80047f4 <HAL_RCC_OscConfig+0x288>)
 8004740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004744:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004746:	e07b      	b.n	8004840 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004748:	4b2a      	ldr	r3, [pc, #168]	; (80047f4 <HAL_RCC_OscConfig+0x288>)
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	031b      	lsls	r3, r3, #12
 8004756:	4927      	ldr	r1, [pc, #156]	; (80047f4 <HAL_RCC_OscConfig+0x288>)
 8004758:	4313      	orrs	r3, r2
 800475a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800475c:	e070      	b.n	8004840 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800475e:	4b25      	ldr	r3, [pc, #148]	; (80047f4 <HAL_RCC_OscConfig+0x288>)
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	061b      	lsls	r3, r3, #24
 800476c:	4921      	ldr	r1, [pc, #132]	; (80047f4 <HAL_RCC_OscConfig+0x288>)
 800476e:	4313      	orrs	r3, r2
 8004770:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004772:	e065      	b.n	8004840 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d048      	beq.n	800480e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800477c:	4b1d      	ldr	r3, [pc, #116]	; (80047f4 <HAL_RCC_OscConfig+0x288>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f023 0219 	bic.w	r2, r3, #25
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	491a      	ldr	r1, [pc, #104]	; (80047f4 <HAL_RCC_OscConfig+0x288>)
 800478a:	4313      	orrs	r3, r2
 800478c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800478e:	f7fc fe65 	bl	800145c <HAL_GetTick>
 8004792:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004794:	e008      	b.n	80047a8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004796:	f7fc fe61 	bl	800145c <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d901      	bls.n	80047a8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e308      	b.n	8004dba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047a8:	4b12      	ldr	r3, [pc, #72]	; (80047f4 <HAL_RCC_OscConfig+0x288>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0304 	and.w	r3, r3, #4
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d0f0      	beq.n	8004796 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047b4:	f7fc fe82 	bl	80014bc <HAL_GetREVID>
 80047b8:	4603      	mov	r3, r0
 80047ba:	f241 0203 	movw	r2, #4099	; 0x1003
 80047be:	4293      	cmp	r3, r2
 80047c0:	d81a      	bhi.n	80047f8 <HAL_RCC_OscConfig+0x28c>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	2b40      	cmp	r3, #64	; 0x40
 80047c8:	d108      	bne.n	80047dc <HAL_RCC_OscConfig+0x270>
 80047ca:	4b0a      	ldr	r3, [pc, #40]	; (80047f4 <HAL_RCC_OscConfig+0x288>)
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80047d2:	4a08      	ldr	r2, [pc, #32]	; (80047f4 <HAL_RCC_OscConfig+0x288>)
 80047d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047d8:	6053      	str	r3, [r2, #4]
 80047da:	e031      	b.n	8004840 <HAL_RCC_OscConfig+0x2d4>
 80047dc:	4b05      	ldr	r3, [pc, #20]	; (80047f4 <HAL_RCC_OscConfig+0x288>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	031b      	lsls	r3, r3, #12
 80047ea:	4902      	ldr	r1, [pc, #8]	; (80047f4 <HAL_RCC_OscConfig+0x288>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	604b      	str	r3, [r1, #4]
 80047f0:	e026      	b.n	8004840 <HAL_RCC_OscConfig+0x2d4>
 80047f2:	bf00      	nop
 80047f4:	58024400 	.word	0x58024400
 80047f8:	4b9a      	ldr	r3, [pc, #616]	; (8004a64 <HAL_RCC_OscConfig+0x4f8>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	061b      	lsls	r3, r3, #24
 8004806:	4997      	ldr	r1, [pc, #604]	; (8004a64 <HAL_RCC_OscConfig+0x4f8>)
 8004808:	4313      	orrs	r3, r2
 800480a:	604b      	str	r3, [r1, #4]
 800480c:	e018      	b.n	8004840 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800480e:	4b95      	ldr	r3, [pc, #596]	; (8004a64 <HAL_RCC_OscConfig+0x4f8>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a94      	ldr	r2, [pc, #592]	; (8004a64 <HAL_RCC_OscConfig+0x4f8>)
 8004814:	f023 0301 	bic.w	r3, r3, #1
 8004818:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800481a:	f7fc fe1f 	bl	800145c <HAL_GetTick>
 800481e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004820:	e008      	b.n	8004834 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004822:	f7fc fe1b 	bl	800145c <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	2b02      	cmp	r3, #2
 800482e:	d901      	bls.n	8004834 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e2c2      	b.n	8004dba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004834:	4b8b      	ldr	r3, [pc, #556]	; (8004a64 <HAL_RCC_OscConfig+0x4f8>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0304 	and.w	r3, r3, #4
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1f0      	bne.n	8004822 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0310 	and.w	r3, r3, #16
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 80a9 	beq.w	80049a0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800484e:	4b85      	ldr	r3, [pc, #532]	; (8004a64 <HAL_RCC_OscConfig+0x4f8>)
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004856:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004858:	4b82      	ldr	r3, [pc, #520]	; (8004a64 <HAL_RCC_OscConfig+0x4f8>)
 800485a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800485c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	2b08      	cmp	r3, #8
 8004862:	d007      	beq.n	8004874 <HAL_RCC_OscConfig+0x308>
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	2b18      	cmp	r3, #24
 8004868:	d13a      	bne.n	80048e0 <HAL_RCC_OscConfig+0x374>
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	f003 0303 	and.w	r3, r3, #3
 8004870:	2b01      	cmp	r3, #1
 8004872:	d135      	bne.n	80048e0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004874:	4b7b      	ldr	r3, [pc, #492]	; (8004a64 <HAL_RCC_OscConfig+0x4f8>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800487c:	2b00      	cmp	r3, #0
 800487e:	d005      	beq.n	800488c <HAL_RCC_OscConfig+0x320>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	69db      	ldr	r3, [r3, #28]
 8004884:	2b80      	cmp	r3, #128	; 0x80
 8004886:	d001      	beq.n	800488c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e296      	b.n	8004dba <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800488c:	f7fc fe16 	bl	80014bc <HAL_GetREVID>
 8004890:	4603      	mov	r3, r0
 8004892:	f241 0203 	movw	r2, #4099	; 0x1003
 8004896:	4293      	cmp	r3, r2
 8004898:	d817      	bhi.n	80048ca <HAL_RCC_OscConfig+0x35e>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	2b20      	cmp	r3, #32
 80048a0:	d108      	bne.n	80048b4 <HAL_RCC_OscConfig+0x348>
 80048a2:	4b70      	ldr	r3, [pc, #448]	; (8004a64 <HAL_RCC_OscConfig+0x4f8>)
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80048aa:	4a6e      	ldr	r2, [pc, #440]	; (8004a64 <HAL_RCC_OscConfig+0x4f8>)
 80048ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048b0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80048b2:	e075      	b.n	80049a0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80048b4:	4b6b      	ldr	r3, [pc, #428]	; (8004a64 <HAL_RCC_OscConfig+0x4f8>)
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a1b      	ldr	r3, [r3, #32]
 80048c0:	069b      	lsls	r3, r3, #26
 80048c2:	4968      	ldr	r1, [pc, #416]	; (8004a64 <HAL_RCC_OscConfig+0x4f8>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80048c8:	e06a      	b.n	80049a0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80048ca:	4b66      	ldr	r3, [pc, #408]	; (8004a64 <HAL_RCC_OscConfig+0x4f8>)
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	061b      	lsls	r3, r3, #24
 80048d8:	4962      	ldr	r1, [pc, #392]	; (8004a64 <HAL_RCC_OscConfig+0x4f8>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80048de:	e05f      	b.n	80049a0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	69db      	ldr	r3, [r3, #28]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d042      	beq.n	800496e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80048e8:	4b5e      	ldr	r3, [pc, #376]	; (8004a64 <HAL_RCC_OscConfig+0x4f8>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a5d      	ldr	r2, [pc, #372]	; (8004a64 <HAL_RCC_OscConfig+0x4f8>)
 80048ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f4:	f7fc fdb2 	bl	800145c <HAL_GetTick>
 80048f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80048fa:	e008      	b.n	800490e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80048fc:	f7fc fdae 	bl	800145c <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	2b02      	cmp	r3, #2
 8004908:	d901      	bls.n	800490e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e255      	b.n	8004dba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800490e:	4b55      	ldr	r3, [pc, #340]	; (8004a64 <HAL_RCC_OscConfig+0x4f8>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004916:	2b00      	cmp	r3, #0
 8004918:	d0f0      	beq.n	80048fc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800491a:	f7fc fdcf 	bl	80014bc <HAL_GetREVID>
 800491e:	4603      	mov	r3, r0
 8004920:	f241 0203 	movw	r2, #4099	; 0x1003
 8004924:	4293      	cmp	r3, r2
 8004926:	d817      	bhi.n	8004958 <HAL_RCC_OscConfig+0x3ec>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a1b      	ldr	r3, [r3, #32]
 800492c:	2b20      	cmp	r3, #32
 800492e:	d108      	bne.n	8004942 <HAL_RCC_OscConfig+0x3d6>
 8004930:	4b4c      	ldr	r3, [pc, #304]	; (8004a64 <HAL_RCC_OscConfig+0x4f8>)
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004938:	4a4a      	ldr	r2, [pc, #296]	; (8004a64 <HAL_RCC_OscConfig+0x4f8>)
 800493a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800493e:	6053      	str	r3, [r2, #4]
 8004940:	e02e      	b.n	80049a0 <HAL_RCC_OscConfig+0x434>
 8004942:	4b48      	ldr	r3, [pc, #288]	; (8004a64 <HAL_RCC_OscConfig+0x4f8>)
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	069b      	lsls	r3, r3, #26
 8004950:	4944      	ldr	r1, [pc, #272]	; (8004a64 <HAL_RCC_OscConfig+0x4f8>)
 8004952:	4313      	orrs	r3, r2
 8004954:	604b      	str	r3, [r1, #4]
 8004956:	e023      	b.n	80049a0 <HAL_RCC_OscConfig+0x434>
 8004958:	4b42      	ldr	r3, [pc, #264]	; (8004a64 <HAL_RCC_OscConfig+0x4f8>)
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a1b      	ldr	r3, [r3, #32]
 8004964:	061b      	lsls	r3, r3, #24
 8004966:	493f      	ldr	r1, [pc, #252]	; (8004a64 <HAL_RCC_OscConfig+0x4f8>)
 8004968:	4313      	orrs	r3, r2
 800496a:	60cb      	str	r3, [r1, #12]
 800496c:	e018      	b.n	80049a0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800496e:	4b3d      	ldr	r3, [pc, #244]	; (8004a64 <HAL_RCC_OscConfig+0x4f8>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a3c      	ldr	r2, [pc, #240]	; (8004a64 <HAL_RCC_OscConfig+0x4f8>)
 8004974:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004978:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800497a:	f7fc fd6f 	bl	800145c <HAL_GetTick>
 800497e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004980:	e008      	b.n	8004994 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004982:	f7fc fd6b 	bl	800145c <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	2b02      	cmp	r3, #2
 800498e:	d901      	bls.n	8004994 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e212      	b.n	8004dba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004994:	4b33      	ldr	r3, [pc, #204]	; (8004a64 <HAL_RCC_OscConfig+0x4f8>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1f0      	bne.n	8004982 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0308 	and.w	r3, r3, #8
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d036      	beq.n	8004a1a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d019      	beq.n	80049e8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049b4:	4b2b      	ldr	r3, [pc, #172]	; (8004a64 <HAL_RCC_OscConfig+0x4f8>)
 80049b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049b8:	4a2a      	ldr	r2, [pc, #168]	; (8004a64 <HAL_RCC_OscConfig+0x4f8>)
 80049ba:	f043 0301 	orr.w	r3, r3, #1
 80049be:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c0:	f7fc fd4c 	bl	800145c <HAL_GetTick>
 80049c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80049c6:	e008      	b.n	80049da <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049c8:	f7fc fd48 	bl	800145c <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d901      	bls.n	80049da <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e1ef      	b.n	8004dba <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80049da:	4b22      	ldr	r3, [pc, #136]	; (8004a64 <HAL_RCC_OscConfig+0x4f8>)
 80049dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d0f0      	beq.n	80049c8 <HAL_RCC_OscConfig+0x45c>
 80049e6:	e018      	b.n	8004a1a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049e8:	4b1e      	ldr	r3, [pc, #120]	; (8004a64 <HAL_RCC_OscConfig+0x4f8>)
 80049ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049ec:	4a1d      	ldr	r2, [pc, #116]	; (8004a64 <HAL_RCC_OscConfig+0x4f8>)
 80049ee:	f023 0301 	bic.w	r3, r3, #1
 80049f2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f4:	f7fc fd32 	bl	800145c <HAL_GetTick>
 80049f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80049fa:	e008      	b.n	8004a0e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049fc:	f7fc fd2e 	bl	800145c <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e1d5      	b.n	8004dba <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004a0e:	4b15      	ldr	r3, [pc, #84]	; (8004a64 <HAL_RCC_OscConfig+0x4f8>)
 8004a10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1f0      	bne.n	80049fc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0320 	and.w	r3, r3, #32
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d039      	beq.n	8004a9a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d01c      	beq.n	8004a68 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a2e:	4b0d      	ldr	r3, [pc, #52]	; (8004a64 <HAL_RCC_OscConfig+0x4f8>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a0c      	ldr	r2, [pc, #48]	; (8004a64 <HAL_RCC_OscConfig+0x4f8>)
 8004a34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a38:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004a3a:	f7fc fd0f 	bl	800145c <HAL_GetTick>
 8004a3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004a40:	e008      	b.n	8004a54 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004a42:	f7fc fd0b 	bl	800145c <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d901      	bls.n	8004a54 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e1b2      	b.n	8004dba <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004a54:	4b03      	ldr	r3, [pc, #12]	; (8004a64 <HAL_RCC_OscConfig+0x4f8>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d0f0      	beq.n	8004a42 <HAL_RCC_OscConfig+0x4d6>
 8004a60:	e01b      	b.n	8004a9a <HAL_RCC_OscConfig+0x52e>
 8004a62:	bf00      	nop
 8004a64:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a68:	4b9b      	ldr	r3, [pc, #620]	; (8004cd8 <HAL_RCC_OscConfig+0x76c>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a9a      	ldr	r2, [pc, #616]	; (8004cd8 <HAL_RCC_OscConfig+0x76c>)
 8004a6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a72:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004a74:	f7fc fcf2 	bl	800145c <HAL_GetTick>
 8004a78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004a7a:	e008      	b.n	8004a8e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004a7c:	f7fc fcee 	bl	800145c <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d901      	bls.n	8004a8e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e195      	b.n	8004dba <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004a8e:	4b92      	ldr	r3, [pc, #584]	; (8004cd8 <HAL_RCC_OscConfig+0x76c>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1f0      	bne.n	8004a7c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0304 	and.w	r3, r3, #4
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f000 8081 	beq.w	8004baa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004aa8:	4b8c      	ldr	r3, [pc, #560]	; (8004cdc <HAL_RCC_OscConfig+0x770>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a8b      	ldr	r2, [pc, #556]	; (8004cdc <HAL_RCC_OscConfig+0x770>)
 8004aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ab2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ab4:	f7fc fcd2 	bl	800145c <HAL_GetTick>
 8004ab8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004aba:	e008      	b.n	8004ace <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004abc:	f7fc fcce 	bl	800145c <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b64      	cmp	r3, #100	; 0x64
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e175      	b.n	8004dba <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ace:	4b83      	ldr	r3, [pc, #524]	; (8004cdc <HAL_RCC_OscConfig+0x770>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d0f0      	beq.n	8004abc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d106      	bne.n	8004af0 <HAL_RCC_OscConfig+0x584>
 8004ae2:	4b7d      	ldr	r3, [pc, #500]	; (8004cd8 <HAL_RCC_OscConfig+0x76c>)
 8004ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae6:	4a7c      	ldr	r2, [pc, #496]	; (8004cd8 <HAL_RCC_OscConfig+0x76c>)
 8004ae8:	f043 0301 	orr.w	r3, r3, #1
 8004aec:	6713      	str	r3, [r2, #112]	; 0x70
 8004aee:	e02d      	b.n	8004b4c <HAL_RCC_OscConfig+0x5e0>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10c      	bne.n	8004b12 <HAL_RCC_OscConfig+0x5a6>
 8004af8:	4b77      	ldr	r3, [pc, #476]	; (8004cd8 <HAL_RCC_OscConfig+0x76c>)
 8004afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004afc:	4a76      	ldr	r2, [pc, #472]	; (8004cd8 <HAL_RCC_OscConfig+0x76c>)
 8004afe:	f023 0301 	bic.w	r3, r3, #1
 8004b02:	6713      	str	r3, [r2, #112]	; 0x70
 8004b04:	4b74      	ldr	r3, [pc, #464]	; (8004cd8 <HAL_RCC_OscConfig+0x76c>)
 8004b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b08:	4a73      	ldr	r2, [pc, #460]	; (8004cd8 <HAL_RCC_OscConfig+0x76c>)
 8004b0a:	f023 0304 	bic.w	r3, r3, #4
 8004b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8004b10:	e01c      	b.n	8004b4c <HAL_RCC_OscConfig+0x5e0>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	2b05      	cmp	r3, #5
 8004b18:	d10c      	bne.n	8004b34 <HAL_RCC_OscConfig+0x5c8>
 8004b1a:	4b6f      	ldr	r3, [pc, #444]	; (8004cd8 <HAL_RCC_OscConfig+0x76c>)
 8004b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b1e:	4a6e      	ldr	r2, [pc, #440]	; (8004cd8 <HAL_RCC_OscConfig+0x76c>)
 8004b20:	f043 0304 	orr.w	r3, r3, #4
 8004b24:	6713      	str	r3, [r2, #112]	; 0x70
 8004b26:	4b6c      	ldr	r3, [pc, #432]	; (8004cd8 <HAL_RCC_OscConfig+0x76c>)
 8004b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b2a:	4a6b      	ldr	r2, [pc, #428]	; (8004cd8 <HAL_RCC_OscConfig+0x76c>)
 8004b2c:	f043 0301 	orr.w	r3, r3, #1
 8004b30:	6713      	str	r3, [r2, #112]	; 0x70
 8004b32:	e00b      	b.n	8004b4c <HAL_RCC_OscConfig+0x5e0>
 8004b34:	4b68      	ldr	r3, [pc, #416]	; (8004cd8 <HAL_RCC_OscConfig+0x76c>)
 8004b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b38:	4a67      	ldr	r2, [pc, #412]	; (8004cd8 <HAL_RCC_OscConfig+0x76c>)
 8004b3a:	f023 0301 	bic.w	r3, r3, #1
 8004b3e:	6713      	str	r3, [r2, #112]	; 0x70
 8004b40:	4b65      	ldr	r3, [pc, #404]	; (8004cd8 <HAL_RCC_OscConfig+0x76c>)
 8004b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b44:	4a64      	ldr	r2, [pc, #400]	; (8004cd8 <HAL_RCC_OscConfig+0x76c>)
 8004b46:	f023 0304 	bic.w	r3, r3, #4
 8004b4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d015      	beq.n	8004b80 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b54:	f7fc fc82 	bl	800145c <HAL_GetTick>
 8004b58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b5a:	e00a      	b.n	8004b72 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b5c:	f7fc fc7e 	bl	800145c <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e123      	b.n	8004dba <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b72:	4b59      	ldr	r3, [pc, #356]	; (8004cd8 <HAL_RCC_OscConfig+0x76c>)
 8004b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b76:	f003 0302 	and.w	r3, r3, #2
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d0ee      	beq.n	8004b5c <HAL_RCC_OscConfig+0x5f0>
 8004b7e:	e014      	b.n	8004baa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b80:	f7fc fc6c 	bl	800145c <HAL_GetTick>
 8004b84:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b86:	e00a      	b.n	8004b9e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b88:	f7fc fc68 	bl	800145c <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d901      	bls.n	8004b9e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e10d      	b.n	8004dba <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b9e:	4b4e      	ldr	r3, [pc, #312]	; (8004cd8 <HAL_RCC_OscConfig+0x76c>)
 8004ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba2:	f003 0302 	and.w	r3, r3, #2
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1ee      	bne.n	8004b88 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	f000 8102 	beq.w	8004db8 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004bb4:	4b48      	ldr	r3, [pc, #288]	; (8004cd8 <HAL_RCC_OscConfig+0x76c>)
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bbc:	2b18      	cmp	r3, #24
 8004bbe:	f000 80bd 	beq.w	8004d3c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	f040 809e 	bne.w	8004d08 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bcc:	4b42      	ldr	r3, [pc, #264]	; (8004cd8 <HAL_RCC_OscConfig+0x76c>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a41      	ldr	r2, [pc, #260]	; (8004cd8 <HAL_RCC_OscConfig+0x76c>)
 8004bd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd8:	f7fc fc40 	bl	800145c <HAL_GetTick>
 8004bdc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bde:	e008      	b.n	8004bf2 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004be0:	f7fc fc3c 	bl	800145c <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e0e3      	b.n	8004dba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bf2:	4b39      	ldr	r3, [pc, #228]	; (8004cd8 <HAL_RCC_OscConfig+0x76c>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1f0      	bne.n	8004be0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bfe:	4b36      	ldr	r3, [pc, #216]	; (8004cd8 <HAL_RCC_OscConfig+0x76c>)
 8004c00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c02:	4b37      	ldr	r3, [pc, #220]	; (8004ce0 <HAL_RCC_OscConfig+0x774>)
 8004c04:	4013      	ands	r3, r2
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004c0e:	0112      	lsls	r2, r2, #4
 8004c10:	430a      	orrs	r2, r1
 8004c12:	4931      	ldr	r1, [pc, #196]	; (8004cd8 <HAL_RCC_OscConfig+0x76c>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	628b      	str	r3, [r1, #40]	; 0x28
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c26:	3b01      	subs	r3, #1
 8004c28:	025b      	lsls	r3, r3, #9
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	431a      	orrs	r2, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c32:	3b01      	subs	r3, #1
 8004c34:	041b      	lsls	r3, r3, #16
 8004c36:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c40:	3b01      	subs	r3, #1
 8004c42:	061b      	lsls	r3, r3, #24
 8004c44:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004c48:	4923      	ldr	r1, [pc, #140]	; (8004cd8 <HAL_RCC_OscConfig+0x76c>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004c4e:	4b22      	ldr	r3, [pc, #136]	; (8004cd8 <HAL_RCC_OscConfig+0x76c>)
 8004c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c52:	4a21      	ldr	r2, [pc, #132]	; (8004cd8 <HAL_RCC_OscConfig+0x76c>)
 8004c54:	f023 0301 	bic.w	r3, r3, #1
 8004c58:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004c5a:	4b1f      	ldr	r3, [pc, #124]	; (8004cd8 <HAL_RCC_OscConfig+0x76c>)
 8004c5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c5e:	4b21      	ldr	r3, [pc, #132]	; (8004ce4 <HAL_RCC_OscConfig+0x778>)
 8004c60:	4013      	ands	r3, r2
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004c66:	00d2      	lsls	r2, r2, #3
 8004c68:	491b      	ldr	r1, [pc, #108]	; (8004cd8 <HAL_RCC_OscConfig+0x76c>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004c6e:	4b1a      	ldr	r3, [pc, #104]	; (8004cd8 <HAL_RCC_OscConfig+0x76c>)
 8004c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c72:	f023 020c 	bic.w	r2, r3, #12
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7a:	4917      	ldr	r1, [pc, #92]	; (8004cd8 <HAL_RCC_OscConfig+0x76c>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004c80:	4b15      	ldr	r3, [pc, #84]	; (8004cd8 <HAL_RCC_OscConfig+0x76c>)
 8004c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c84:	f023 0202 	bic.w	r2, r3, #2
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c8c:	4912      	ldr	r1, [pc, #72]	; (8004cd8 <HAL_RCC_OscConfig+0x76c>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004c92:	4b11      	ldr	r3, [pc, #68]	; (8004cd8 <HAL_RCC_OscConfig+0x76c>)
 8004c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c96:	4a10      	ldr	r2, [pc, #64]	; (8004cd8 <HAL_RCC_OscConfig+0x76c>)
 8004c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c9e:	4b0e      	ldr	r3, [pc, #56]	; (8004cd8 <HAL_RCC_OscConfig+0x76c>)
 8004ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca2:	4a0d      	ldr	r2, [pc, #52]	; (8004cd8 <HAL_RCC_OscConfig+0x76c>)
 8004ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ca8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004caa:	4b0b      	ldr	r3, [pc, #44]	; (8004cd8 <HAL_RCC_OscConfig+0x76c>)
 8004cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cae:	4a0a      	ldr	r2, [pc, #40]	; (8004cd8 <HAL_RCC_OscConfig+0x76c>)
 8004cb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cb4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004cb6:	4b08      	ldr	r3, [pc, #32]	; (8004cd8 <HAL_RCC_OscConfig+0x76c>)
 8004cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cba:	4a07      	ldr	r2, [pc, #28]	; (8004cd8 <HAL_RCC_OscConfig+0x76c>)
 8004cbc:	f043 0301 	orr.w	r3, r3, #1
 8004cc0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cc2:	4b05      	ldr	r3, [pc, #20]	; (8004cd8 <HAL_RCC_OscConfig+0x76c>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a04      	ldr	r2, [pc, #16]	; (8004cd8 <HAL_RCC_OscConfig+0x76c>)
 8004cc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ccc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cce:	f7fc fbc5 	bl	800145c <HAL_GetTick>
 8004cd2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004cd4:	e011      	b.n	8004cfa <HAL_RCC_OscConfig+0x78e>
 8004cd6:	bf00      	nop
 8004cd8:	58024400 	.word	0x58024400
 8004cdc:	58024800 	.word	0x58024800
 8004ce0:	fffffc0c 	.word	0xfffffc0c
 8004ce4:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ce8:	f7fc fbb8 	bl	800145c <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d901      	bls.n	8004cfa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e05f      	b.n	8004dba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004cfa:	4b32      	ldr	r3, [pc, #200]	; (8004dc4 <HAL_RCC_OscConfig+0x858>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d0f0      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x77c>
 8004d06:	e057      	b.n	8004db8 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d08:	4b2e      	ldr	r3, [pc, #184]	; (8004dc4 <HAL_RCC_OscConfig+0x858>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a2d      	ldr	r2, [pc, #180]	; (8004dc4 <HAL_RCC_OscConfig+0x858>)
 8004d0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d14:	f7fc fba2 	bl	800145c <HAL_GetTick>
 8004d18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d1a:	e008      	b.n	8004d2e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d1c:	f7fc fb9e 	bl	800145c <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d901      	bls.n	8004d2e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e045      	b.n	8004dba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d2e:	4b25      	ldr	r3, [pc, #148]	; (8004dc4 <HAL_RCC_OscConfig+0x858>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1f0      	bne.n	8004d1c <HAL_RCC_OscConfig+0x7b0>
 8004d3a:	e03d      	b.n	8004db8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004d3c:	4b21      	ldr	r3, [pc, #132]	; (8004dc4 <HAL_RCC_OscConfig+0x858>)
 8004d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d40:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004d42:	4b20      	ldr	r3, [pc, #128]	; (8004dc4 <HAL_RCC_OscConfig+0x858>)
 8004d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d46:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d031      	beq.n	8004db4 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	f003 0203 	and.w	r2, r3, #3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d12a      	bne.n	8004db4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	091b      	lsrs	r3, r3, #4
 8004d62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d122      	bne.n	8004db4 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d78:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d11a      	bne.n	8004db4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	0a5b      	lsrs	r3, r3, #9
 8004d82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d8a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d111      	bne.n	8004db4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	0c1b      	lsrs	r3, r3, #16
 8004d94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d108      	bne.n	8004db4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	0e1b      	lsrs	r3, r3, #24
 8004da6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dae:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d001      	beq.n	8004db8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e000      	b.n	8004dba <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3730      	adds	r7, #48	; 0x30
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	58024400 	.word	0x58024400

08004dc8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b086      	sub	sp, #24
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d101      	bne.n	8004ddc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e19c      	b.n	8005116 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ddc:	4b8a      	ldr	r3, [pc, #552]	; (8005008 <HAL_RCC_ClockConfig+0x240>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 030f 	and.w	r3, r3, #15
 8004de4:	683a      	ldr	r2, [r7, #0]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d910      	bls.n	8004e0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dea:	4b87      	ldr	r3, [pc, #540]	; (8005008 <HAL_RCC_ClockConfig+0x240>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f023 020f 	bic.w	r2, r3, #15
 8004df2:	4985      	ldr	r1, [pc, #532]	; (8005008 <HAL_RCC_ClockConfig+0x240>)
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dfa:	4b83      	ldr	r3, [pc, #524]	; (8005008 <HAL_RCC_ClockConfig+0x240>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 030f 	and.w	r3, r3, #15
 8004e02:	683a      	ldr	r2, [r7, #0]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d001      	beq.n	8004e0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e184      	b.n	8005116 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0304 	and.w	r3, r3, #4
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d010      	beq.n	8004e3a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	691a      	ldr	r2, [r3, #16]
 8004e1c:	4b7b      	ldr	r3, [pc, #492]	; (800500c <HAL_RCC_ClockConfig+0x244>)
 8004e1e:	699b      	ldr	r3, [r3, #24]
 8004e20:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d908      	bls.n	8004e3a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004e28:	4b78      	ldr	r3, [pc, #480]	; (800500c <HAL_RCC_ClockConfig+0x244>)
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	4975      	ldr	r1, [pc, #468]	; (800500c <HAL_RCC_ClockConfig+0x244>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0308 	and.w	r3, r3, #8
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d010      	beq.n	8004e68 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	695a      	ldr	r2, [r3, #20]
 8004e4a:	4b70      	ldr	r3, [pc, #448]	; (800500c <HAL_RCC_ClockConfig+0x244>)
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d908      	bls.n	8004e68 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004e56:	4b6d      	ldr	r3, [pc, #436]	; (800500c <HAL_RCC_ClockConfig+0x244>)
 8004e58:	69db      	ldr	r3, [r3, #28]
 8004e5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	496a      	ldr	r1, [pc, #424]	; (800500c <HAL_RCC_ClockConfig+0x244>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0310 	and.w	r3, r3, #16
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d010      	beq.n	8004e96 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	699a      	ldr	r2, [r3, #24]
 8004e78:	4b64      	ldr	r3, [pc, #400]	; (800500c <HAL_RCC_ClockConfig+0x244>)
 8004e7a:	69db      	ldr	r3, [r3, #28]
 8004e7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d908      	bls.n	8004e96 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004e84:	4b61      	ldr	r3, [pc, #388]	; (800500c <HAL_RCC_ClockConfig+0x244>)
 8004e86:	69db      	ldr	r3, [r3, #28]
 8004e88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	495e      	ldr	r1, [pc, #376]	; (800500c <HAL_RCC_ClockConfig+0x244>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0320 	and.w	r3, r3, #32
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d010      	beq.n	8004ec4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	69da      	ldr	r2, [r3, #28]
 8004ea6:	4b59      	ldr	r3, [pc, #356]	; (800500c <HAL_RCC_ClockConfig+0x244>)
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d908      	bls.n	8004ec4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004eb2:	4b56      	ldr	r3, [pc, #344]	; (800500c <HAL_RCC_ClockConfig+0x244>)
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	69db      	ldr	r3, [r3, #28]
 8004ebe:	4953      	ldr	r1, [pc, #332]	; (800500c <HAL_RCC_ClockConfig+0x244>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0302 	and.w	r3, r3, #2
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d010      	beq.n	8004ef2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	68da      	ldr	r2, [r3, #12]
 8004ed4:	4b4d      	ldr	r3, [pc, #308]	; (800500c <HAL_RCC_ClockConfig+0x244>)
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	f003 030f 	and.w	r3, r3, #15
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d908      	bls.n	8004ef2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ee0:	4b4a      	ldr	r3, [pc, #296]	; (800500c <HAL_RCC_ClockConfig+0x244>)
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	f023 020f 	bic.w	r2, r3, #15
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	4947      	ldr	r1, [pc, #284]	; (800500c <HAL_RCC_ClockConfig+0x244>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d055      	beq.n	8004faa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004efe:	4b43      	ldr	r3, [pc, #268]	; (800500c <HAL_RCC_ClockConfig+0x244>)
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	4940      	ldr	r1, [pc, #256]	; (800500c <HAL_RCC_ClockConfig+0x244>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d107      	bne.n	8004f28 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f18:	4b3c      	ldr	r3, [pc, #240]	; (800500c <HAL_RCC_ClockConfig+0x244>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d121      	bne.n	8004f68 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e0f6      	b.n	8005116 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	2b03      	cmp	r3, #3
 8004f2e:	d107      	bne.n	8004f40 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f30:	4b36      	ldr	r3, [pc, #216]	; (800500c <HAL_RCC_ClockConfig+0x244>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d115      	bne.n	8004f68 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e0ea      	b.n	8005116 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d107      	bne.n	8004f58 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f48:	4b30      	ldr	r3, [pc, #192]	; (800500c <HAL_RCC_ClockConfig+0x244>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d109      	bne.n	8004f68 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e0de      	b.n	8005116 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f58:	4b2c      	ldr	r3, [pc, #176]	; (800500c <HAL_RCC_ClockConfig+0x244>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0304 	and.w	r3, r3, #4
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d101      	bne.n	8004f68 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e0d6      	b.n	8005116 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f68:	4b28      	ldr	r3, [pc, #160]	; (800500c <HAL_RCC_ClockConfig+0x244>)
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	f023 0207 	bic.w	r2, r3, #7
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	4925      	ldr	r1, [pc, #148]	; (800500c <HAL_RCC_ClockConfig+0x244>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f7a:	f7fc fa6f 	bl	800145c <HAL_GetTick>
 8004f7e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f80:	e00a      	b.n	8004f98 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f82:	f7fc fa6b 	bl	800145c <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d901      	bls.n	8004f98 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e0be      	b.n	8005116 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f98:	4b1c      	ldr	r3, [pc, #112]	; (800500c <HAL_RCC_ClockConfig+0x244>)
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	00db      	lsls	r3, r3, #3
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d1eb      	bne.n	8004f82 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0302 	and.w	r3, r3, #2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d010      	beq.n	8004fd8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	68da      	ldr	r2, [r3, #12]
 8004fba:	4b14      	ldr	r3, [pc, #80]	; (800500c <HAL_RCC_ClockConfig+0x244>)
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	f003 030f 	and.w	r3, r3, #15
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d208      	bcs.n	8004fd8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fc6:	4b11      	ldr	r3, [pc, #68]	; (800500c <HAL_RCC_ClockConfig+0x244>)
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	f023 020f 	bic.w	r2, r3, #15
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	490e      	ldr	r1, [pc, #56]	; (800500c <HAL_RCC_ClockConfig+0x244>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fd8:	4b0b      	ldr	r3, [pc, #44]	; (8005008 <HAL_RCC_ClockConfig+0x240>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 030f 	and.w	r3, r3, #15
 8004fe0:	683a      	ldr	r2, [r7, #0]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d214      	bcs.n	8005010 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fe6:	4b08      	ldr	r3, [pc, #32]	; (8005008 <HAL_RCC_ClockConfig+0x240>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f023 020f 	bic.w	r2, r3, #15
 8004fee:	4906      	ldr	r1, [pc, #24]	; (8005008 <HAL_RCC_ClockConfig+0x240>)
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ff6:	4b04      	ldr	r3, [pc, #16]	; (8005008 <HAL_RCC_ClockConfig+0x240>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 030f 	and.w	r3, r3, #15
 8004ffe:	683a      	ldr	r2, [r7, #0]
 8005000:	429a      	cmp	r2, r3
 8005002:	d005      	beq.n	8005010 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e086      	b.n	8005116 <HAL_RCC_ClockConfig+0x34e>
 8005008:	52002000 	.word	0x52002000
 800500c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0304 	and.w	r3, r3, #4
 8005018:	2b00      	cmp	r3, #0
 800501a:	d010      	beq.n	800503e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	691a      	ldr	r2, [r3, #16]
 8005020:	4b3f      	ldr	r3, [pc, #252]	; (8005120 <HAL_RCC_ClockConfig+0x358>)
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005028:	429a      	cmp	r2, r3
 800502a:	d208      	bcs.n	800503e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800502c:	4b3c      	ldr	r3, [pc, #240]	; (8005120 <HAL_RCC_ClockConfig+0x358>)
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	4939      	ldr	r1, [pc, #228]	; (8005120 <HAL_RCC_ClockConfig+0x358>)
 800503a:	4313      	orrs	r3, r2
 800503c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0308 	and.w	r3, r3, #8
 8005046:	2b00      	cmp	r3, #0
 8005048:	d010      	beq.n	800506c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	695a      	ldr	r2, [r3, #20]
 800504e:	4b34      	ldr	r3, [pc, #208]	; (8005120 <HAL_RCC_ClockConfig+0x358>)
 8005050:	69db      	ldr	r3, [r3, #28]
 8005052:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005056:	429a      	cmp	r2, r3
 8005058:	d208      	bcs.n	800506c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800505a:	4b31      	ldr	r3, [pc, #196]	; (8005120 <HAL_RCC_ClockConfig+0x358>)
 800505c:	69db      	ldr	r3, [r3, #28]
 800505e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	492e      	ldr	r1, [pc, #184]	; (8005120 <HAL_RCC_ClockConfig+0x358>)
 8005068:	4313      	orrs	r3, r2
 800506a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0310 	and.w	r3, r3, #16
 8005074:	2b00      	cmp	r3, #0
 8005076:	d010      	beq.n	800509a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	699a      	ldr	r2, [r3, #24]
 800507c:	4b28      	ldr	r3, [pc, #160]	; (8005120 <HAL_RCC_ClockConfig+0x358>)
 800507e:	69db      	ldr	r3, [r3, #28]
 8005080:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005084:	429a      	cmp	r2, r3
 8005086:	d208      	bcs.n	800509a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005088:	4b25      	ldr	r3, [pc, #148]	; (8005120 <HAL_RCC_ClockConfig+0x358>)
 800508a:	69db      	ldr	r3, [r3, #28]
 800508c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	4922      	ldr	r1, [pc, #136]	; (8005120 <HAL_RCC_ClockConfig+0x358>)
 8005096:	4313      	orrs	r3, r2
 8005098:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0320 	and.w	r3, r3, #32
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d010      	beq.n	80050c8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	69da      	ldr	r2, [r3, #28]
 80050aa:	4b1d      	ldr	r3, [pc, #116]	; (8005120 <HAL_RCC_ClockConfig+0x358>)
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d208      	bcs.n	80050c8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80050b6:	4b1a      	ldr	r3, [pc, #104]	; (8005120 <HAL_RCC_ClockConfig+0x358>)
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	69db      	ldr	r3, [r3, #28]
 80050c2:	4917      	ldr	r1, [pc, #92]	; (8005120 <HAL_RCC_ClockConfig+0x358>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80050c8:	f000 f834 	bl	8005134 <HAL_RCC_GetSysClockFreq>
 80050cc:	4602      	mov	r2, r0
 80050ce:	4b14      	ldr	r3, [pc, #80]	; (8005120 <HAL_RCC_ClockConfig+0x358>)
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	0a1b      	lsrs	r3, r3, #8
 80050d4:	f003 030f 	and.w	r3, r3, #15
 80050d8:	4912      	ldr	r1, [pc, #72]	; (8005124 <HAL_RCC_ClockConfig+0x35c>)
 80050da:	5ccb      	ldrb	r3, [r1, r3]
 80050dc:	f003 031f 	and.w	r3, r3, #31
 80050e0:	fa22 f303 	lsr.w	r3, r2, r3
 80050e4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80050e6:	4b0e      	ldr	r3, [pc, #56]	; (8005120 <HAL_RCC_ClockConfig+0x358>)
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	f003 030f 	and.w	r3, r3, #15
 80050ee:	4a0d      	ldr	r2, [pc, #52]	; (8005124 <HAL_RCC_ClockConfig+0x35c>)
 80050f0:	5cd3      	ldrb	r3, [r2, r3]
 80050f2:	f003 031f 	and.w	r3, r3, #31
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	fa22 f303 	lsr.w	r3, r2, r3
 80050fc:	4a0a      	ldr	r2, [pc, #40]	; (8005128 <HAL_RCC_ClockConfig+0x360>)
 80050fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005100:	4a0a      	ldr	r2, [pc, #40]	; (800512c <HAL_RCC_ClockConfig+0x364>)
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005106:	4b0a      	ldr	r3, [pc, #40]	; (8005130 <HAL_RCC_ClockConfig+0x368>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4618      	mov	r0, r3
 800510c:	f7fc f95c 	bl	80013c8 <HAL_InitTick>
 8005110:	4603      	mov	r3, r0
 8005112:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005114:	7bfb      	ldrb	r3, [r7, #15]
}
 8005116:	4618      	mov	r0, r3
 8005118:	3718      	adds	r7, #24
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	58024400 	.word	0x58024400
 8005124:	08008fec 	.word	0x08008fec
 8005128:	24000004 	.word	0x24000004
 800512c:	24000000 	.word	0x24000000
 8005130:	24000008 	.word	0x24000008

08005134 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005134:	b480      	push	{r7}
 8005136:	b089      	sub	sp, #36	; 0x24
 8005138:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800513a:	4bb3      	ldr	r3, [pc, #716]	; (8005408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005142:	2b18      	cmp	r3, #24
 8005144:	f200 8155 	bhi.w	80053f2 <HAL_RCC_GetSysClockFreq+0x2be>
 8005148:	a201      	add	r2, pc, #4	; (adr r2, 8005150 <HAL_RCC_GetSysClockFreq+0x1c>)
 800514a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800514e:	bf00      	nop
 8005150:	080051b5 	.word	0x080051b5
 8005154:	080053f3 	.word	0x080053f3
 8005158:	080053f3 	.word	0x080053f3
 800515c:	080053f3 	.word	0x080053f3
 8005160:	080053f3 	.word	0x080053f3
 8005164:	080053f3 	.word	0x080053f3
 8005168:	080053f3 	.word	0x080053f3
 800516c:	080053f3 	.word	0x080053f3
 8005170:	080051db 	.word	0x080051db
 8005174:	080053f3 	.word	0x080053f3
 8005178:	080053f3 	.word	0x080053f3
 800517c:	080053f3 	.word	0x080053f3
 8005180:	080053f3 	.word	0x080053f3
 8005184:	080053f3 	.word	0x080053f3
 8005188:	080053f3 	.word	0x080053f3
 800518c:	080053f3 	.word	0x080053f3
 8005190:	080051e1 	.word	0x080051e1
 8005194:	080053f3 	.word	0x080053f3
 8005198:	080053f3 	.word	0x080053f3
 800519c:	080053f3 	.word	0x080053f3
 80051a0:	080053f3 	.word	0x080053f3
 80051a4:	080053f3 	.word	0x080053f3
 80051a8:	080053f3 	.word	0x080053f3
 80051ac:	080053f3 	.word	0x080053f3
 80051b0:	080051e7 	.word	0x080051e7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051b4:	4b94      	ldr	r3, [pc, #592]	; (8005408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0320 	and.w	r3, r3, #32
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d009      	beq.n	80051d4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80051c0:	4b91      	ldr	r3, [pc, #580]	; (8005408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	08db      	lsrs	r3, r3, #3
 80051c6:	f003 0303 	and.w	r3, r3, #3
 80051ca:	4a90      	ldr	r2, [pc, #576]	; (800540c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80051cc:	fa22 f303 	lsr.w	r3, r2, r3
 80051d0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80051d2:	e111      	b.n	80053f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80051d4:	4b8d      	ldr	r3, [pc, #564]	; (800540c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80051d6:	61bb      	str	r3, [r7, #24]
    break;
 80051d8:	e10e      	b.n	80053f8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80051da:	4b8d      	ldr	r3, [pc, #564]	; (8005410 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80051dc:	61bb      	str	r3, [r7, #24]
    break;
 80051de:	e10b      	b.n	80053f8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80051e0:	4b8c      	ldr	r3, [pc, #560]	; (8005414 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80051e2:	61bb      	str	r3, [r7, #24]
    break;
 80051e4:	e108      	b.n	80053f8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80051e6:	4b88      	ldr	r3, [pc, #544]	; (8005408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ea:	f003 0303 	and.w	r3, r3, #3
 80051ee:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80051f0:	4b85      	ldr	r3, [pc, #532]	; (8005408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f4:	091b      	lsrs	r3, r3, #4
 80051f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051fa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80051fc:	4b82      	ldr	r3, [pc, #520]	; (8005408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005200:	f003 0301 	and.w	r3, r3, #1
 8005204:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005206:	4b80      	ldr	r3, [pc, #512]	; (8005408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800520a:	08db      	lsrs	r3, r3, #3
 800520c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	fb02 f303 	mul.w	r3, r2, r3
 8005216:	ee07 3a90 	vmov	s15, r3
 800521a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800521e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	2b00      	cmp	r3, #0
 8005226:	f000 80e1 	beq.w	80053ec <HAL_RCC_GetSysClockFreq+0x2b8>
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	2b02      	cmp	r3, #2
 800522e:	f000 8083 	beq.w	8005338 <HAL_RCC_GetSysClockFreq+0x204>
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	2b02      	cmp	r3, #2
 8005236:	f200 80a1 	bhi.w	800537c <HAL_RCC_GetSysClockFreq+0x248>
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d003      	beq.n	8005248 <HAL_RCC_GetSysClockFreq+0x114>
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	2b01      	cmp	r3, #1
 8005244:	d056      	beq.n	80052f4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005246:	e099      	b.n	800537c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005248:	4b6f      	ldr	r3, [pc, #444]	; (8005408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0320 	and.w	r3, r3, #32
 8005250:	2b00      	cmp	r3, #0
 8005252:	d02d      	beq.n	80052b0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005254:	4b6c      	ldr	r3, [pc, #432]	; (8005408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	08db      	lsrs	r3, r3, #3
 800525a:	f003 0303 	and.w	r3, r3, #3
 800525e:	4a6b      	ldr	r2, [pc, #428]	; (800540c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005260:	fa22 f303 	lsr.w	r3, r2, r3
 8005264:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	ee07 3a90 	vmov	s15, r3
 800526c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	ee07 3a90 	vmov	s15, r3
 8005276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800527a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800527e:	4b62      	ldr	r3, [pc, #392]	; (8005408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005286:	ee07 3a90 	vmov	s15, r3
 800528a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800528e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005292:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005418 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800529a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800529e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80052ae:	e087      	b.n	80053c0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	ee07 3a90 	vmov	s15, r3
 80052b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ba:	eddf 6a58 	vldr	s13, [pc, #352]	; 800541c <HAL_RCC_GetSysClockFreq+0x2e8>
 80052be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052c2:	4b51      	ldr	r3, [pc, #324]	; (8005408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ca:	ee07 3a90 	vmov	s15, r3
 80052ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80052d6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005418 <HAL_RCC_GetSysClockFreq+0x2e4>
 80052da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052f2:	e065      	b.n	80053c0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	ee07 3a90 	vmov	s15, r3
 80052fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052fe:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005420 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005306:	4b40      	ldr	r3, [pc, #256]	; (8005408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800530e:	ee07 3a90 	vmov	s15, r3
 8005312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005316:	ed97 6a02 	vldr	s12, [r7, #8]
 800531a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005418 <HAL_RCC_GetSysClockFreq+0x2e4>
 800531e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005326:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800532a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800532e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005332:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005336:	e043      	b.n	80053c0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	ee07 3a90 	vmov	s15, r3
 800533e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005342:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005424 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800534a:	4b2f      	ldr	r3, [pc, #188]	; (8005408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800534c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005352:	ee07 3a90 	vmov	s15, r3
 8005356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800535a:	ed97 6a02 	vldr	s12, [r7, #8]
 800535e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005418 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800536a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800536e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005376:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800537a:	e021      	b.n	80053c0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	ee07 3a90 	vmov	s15, r3
 8005382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005386:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005420 <HAL_RCC_GetSysClockFreq+0x2ec>
 800538a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800538e:	4b1e      	ldr	r3, [pc, #120]	; (8005408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005396:	ee07 3a90 	vmov	s15, r3
 800539a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800539e:	ed97 6a02 	vldr	s12, [r7, #8]
 80053a2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005418 <HAL_RCC_GetSysClockFreq+0x2e4>
 80053a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053be:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80053c0:	4b11      	ldr	r3, [pc, #68]	; (8005408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c4:	0a5b      	lsrs	r3, r3, #9
 80053c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053ca:	3301      	adds	r3, #1
 80053cc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	ee07 3a90 	vmov	s15, r3
 80053d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80053d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80053dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053e4:	ee17 3a90 	vmov	r3, s15
 80053e8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80053ea:	e005      	b.n	80053f8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80053ec:	2300      	movs	r3, #0
 80053ee:	61bb      	str	r3, [r7, #24]
    break;
 80053f0:	e002      	b.n	80053f8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80053f2:	4b07      	ldr	r3, [pc, #28]	; (8005410 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80053f4:	61bb      	str	r3, [r7, #24]
    break;
 80053f6:	bf00      	nop
  }

  return sysclockfreq;
 80053f8:	69bb      	ldr	r3, [r7, #24]
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3724      	adds	r7, #36	; 0x24
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	58024400 	.word	0x58024400
 800540c:	03d09000 	.word	0x03d09000
 8005410:	003d0900 	.word	0x003d0900
 8005414:	007a1200 	.word	0x007a1200
 8005418:	46000000 	.word	0x46000000
 800541c:	4c742400 	.word	0x4c742400
 8005420:	4a742400 	.word	0x4a742400
 8005424:	4af42400 	.word	0x4af42400

08005428 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800542e:	f7ff fe81 	bl	8005134 <HAL_RCC_GetSysClockFreq>
 8005432:	4602      	mov	r2, r0
 8005434:	4b10      	ldr	r3, [pc, #64]	; (8005478 <HAL_RCC_GetHCLKFreq+0x50>)
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	0a1b      	lsrs	r3, r3, #8
 800543a:	f003 030f 	and.w	r3, r3, #15
 800543e:	490f      	ldr	r1, [pc, #60]	; (800547c <HAL_RCC_GetHCLKFreq+0x54>)
 8005440:	5ccb      	ldrb	r3, [r1, r3]
 8005442:	f003 031f 	and.w	r3, r3, #31
 8005446:	fa22 f303 	lsr.w	r3, r2, r3
 800544a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800544c:	4b0a      	ldr	r3, [pc, #40]	; (8005478 <HAL_RCC_GetHCLKFreq+0x50>)
 800544e:	699b      	ldr	r3, [r3, #24]
 8005450:	f003 030f 	and.w	r3, r3, #15
 8005454:	4a09      	ldr	r2, [pc, #36]	; (800547c <HAL_RCC_GetHCLKFreq+0x54>)
 8005456:	5cd3      	ldrb	r3, [r2, r3]
 8005458:	f003 031f 	and.w	r3, r3, #31
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	fa22 f303 	lsr.w	r3, r2, r3
 8005462:	4a07      	ldr	r2, [pc, #28]	; (8005480 <HAL_RCC_GetHCLKFreq+0x58>)
 8005464:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005466:	4a07      	ldr	r2, [pc, #28]	; (8005484 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800546c:	4b04      	ldr	r3, [pc, #16]	; (8005480 <HAL_RCC_GetHCLKFreq+0x58>)
 800546e:	681b      	ldr	r3, [r3, #0]
}
 8005470:	4618      	mov	r0, r3
 8005472:	3708      	adds	r7, #8
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	58024400 	.word	0x58024400
 800547c:	08008fec 	.word	0x08008fec
 8005480:	24000004 	.word	0x24000004
 8005484:	24000000 	.word	0x24000000

08005488 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800548c:	f7ff ffcc 	bl	8005428 <HAL_RCC_GetHCLKFreq>
 8005490:	4602      	mov	r2, r0
 8005492:	4b06      	ldr	r3, [pc, #24]	; (80054ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8005494:	69db      	ldr	r3, [r3, #28]
 8005496:	091b      	lsrs	r3, r3, #4
 8005498:	f003 0307 	and.w	r3, r3, #7
 800549c:	4904      	ldr	r1, [pc, #16]	; (80054b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800549e:	5ccb      	ldrb	r3, [r1, r3]
 80054a0:	f003 031f 	and.w	r3, r3, #31
 80054a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	58024400 	.word	0x58024400
 80054b0:	08008fec 	.word	0x08008fec

080054b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80054b8:	f7ff ffb6 	bl	8005428 <HAL_RCC_GetHCLKFreq>
 80054bc:	4602      	mov	r2, r0
 80054be:	4b06      	ldr	r3, [pc, #24]	; (80054d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054c0:	69db      	ldr	r3, [r3, #28]
 80054c2:	0a1b      	lsrs	r3, r3, #8
 80054c4:	f003 0307 	and.w	r3, r3, #7
 80054c8:	4904      	ldr	r1, [pc, #16]	; (80054dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80054ca:	5ccb      	ldrb	r3, [r1, r3]
 80054cc:	f003 031f 	and.w	r3, r3, #31
 80054d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	58024400 	.word	0x58024400
 80054dc:	08008fec 	.word	0x08008fec

080054e0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b086      	sub	sp, #24
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80054e8:	2300      	movs	r3, #0
 80054ea:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80054ec:	2300      	movs	r3, #0
 80054ee:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d03f      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005500:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005504:	d02a      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005506:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800550a:	d824      	bhi.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800550c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005510:	d018      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005512:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005516:	d81e      	bhi.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005518:	2b00      	cmp	r3, #0
 800551a:	d003      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800551c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005520:	d007      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005522:	e018      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005524:	4ba3      	ldr	r3, [pc, #652]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005528:	4aa2      	ldr	r2, [pc, #648]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800552a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800552e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005530:	e015      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	3304      	adds	r3, #4
 8005536:	2102      	movs	r1, #2
 8005538:	4618      	mov	r0, r3
 800553a:	f001 f9d5 	bl	80068e8 <RCCEx_PLL2_Config>
 800553e:	4603      	mov	r3, r0
 8005540:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005542:	e00c      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	3324      	adds	r3, #36	; 0x24
 8005548:	2102      	movs	r1, #2
 800554a:	4618      	mov	r0, r3
 800554c:	f001 fa7e 	bl	8006a4c <RCCEx_PLL3_Config>
 8005550:	4603      	mov	r3, r0
 8005552:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005554:	e003      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	75fb      	strb	r3, [r7, #23]
      break;
 800555a:	e000      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800555c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800555e:	7dfb      	ldrb	r3, [r7, #23]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d109      	bne.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005564:	4b93      	ldr	r3, [pc, #588]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005568:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005570:	4990      	ldr	r1, [pc, #576]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005572:	4313      	orrs	r3, r2
 8005574:	650b      	str	r3, [r1, #80]	; 0x50
 8005576:	e001      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005578:	7dfb      	ldrb	r3, [r7, #23]
 800557a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005584:	2b00      	cmp	r3, #0
 8005586:	d03d      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800558c:	2b04      	cmp	r3, #4
 800558e:	d826      	bhi.n	80055de <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005590:	a201      	add	r2, pc, #4	; (adr r2, 8005598 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005596:	bf00      	nop
 8005598:	080055ad 	.word	0x080055ad
 800559c:	080055bb 	.word	0x080055bb
 80055a0:	080055cd 	.word	0x080055cd
 80055a4:	080055e5 	.word	0x080055e5
 80055a8:	080055e5 	.word	0x080055e5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055ac:	4b81      	ldr	r3, [pc, #516]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80055ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b0:	4a80      	ldr	r2, [pc, #512]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80055b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80055b8:	e015      	b.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	3304      	adds	r3, #4
 80055be:	2100      	movs	r1, #0
 80055c0:	4618      	mov	r0, r3
 80055c2:	f001 f991 	bl	80068e8 <RCCEx_PLL2_Config>
 80055c6:	4603      	mov	r3, r0
 80055c8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80055ca:	e00c      	b.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	3324      	adds	r3, #36	; 0x24
 80055d0:	2100      	movs	r1, #0
 80055d2:	4618      	mov	r0, r3
 80055d4:	f001 fa3a 	bl	8006a4c <RCCEx_PLL3_Config>
 80055d8:	4603      	mov	r3, r0
 80055da:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80055dc:	e003      	b.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	75fb      	strb	r3, [r7, #23]
      break;
 80055e2:	e000      	b.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80055e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055e6:	7dfb      	ldrb	r3, [r7, #23]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d109      	bne.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055ec:	4b71      	ldr	r3, [pc, #452]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80055ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055f0:	f023 0207 	bic.w	r2, r3, #7
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055f8:	496e      	ldr	r1, [pc, #440]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	650b      	str	r3, [r1, #80]	; 0x50
 80055fe:	e001      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005600:	7dfb      	ldrb	r3, [r7, #23]
 8005602:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800560c:	2b00      	cmp	r3, #0
 800560e:	d042      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005614:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005618:	d02b      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800561a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800561e:	d825      	bhi.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005620:	2bc0      	cmp	r3, #192	; 0xc0
 8005622:	d028      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005624:	2bc0      	cmp	r3, #192	; 0xc0
 8005626:	d821      	bhi.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005628:	2b80      	cmp	r3, #128	; 0x80
 800562a:	d016      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800562c:	2b80      	cmp	r3, #128	; 0x80
 800562e:	d81d      	bhi.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005630:	2b00      	cmp	r3, #0
 8005632:	d002      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005634:	2b40      	cmp	r3, #64	; 0x40
 8005636:	d007      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005638:	e018      	b.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800563a:	4b5e      	ldr	r3, [pc, #376]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800563c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563e:	4a5d      	ldr	r2, [pc, #372]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005644:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005646:	e017      	b.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	3304      	adds	r3, #4
 800564c:	2100      	movs	r1, #0
 800564e:	4618      	mov	r0, r3
 8005650:	f001 f94a 	bl	80068e8 <RCCEx_PLL2_Config>
 8005654:	4603      	mov	r3, r0
 8005656:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005658:	e00e      	b.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	3324      	adds	r3, #36	; 0x24
 800565e:	2100      	movs	r1, #0
 8005660:	4618      	mov	r0, r3
 8005662:	f001 f9f3 	bl	8006a4c <RCCEx_PLL3_Config>
 8005666:	4603      	mov	r3, r0
 8005668:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800566a:	e005      	b.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	75fb      	strb	r3, [r7, #23]
      break;
 8005670:	e002      	b.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005672:	bf00      	nop
 8005674:	e000      	b.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005676:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005678:	7dfb      	ldrb	r3, [r7, #23]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d109      	bne.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800567e:	4b4d      	ldr	r3, [pc, #308]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005682:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800568a:	494a      	ldr	r1, [pc, #296]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800568c:	4313      	orrs	r3, r2
 800568e:	650b      	str	r3, [r1, #80]	; 0x50
 8005690:	e001      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005692:	7dfb      	ldrb	r3, [r7, #23]
 8005694:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d049      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80056a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056ac:	d030      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80056ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056b2:	d82a      	bhi.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80056b4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80056b8:	d02c      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80056ba:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80056be:	d824      	bhi.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80056c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056c4:	d018      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80056c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056ca:	d81e      	bhi.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d003      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80056d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056d4:	d007      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80056d6:	e018      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056d8:	4b36      	ldr	r3, [pc, #216]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80056da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056dc:	4a35      	ldr	r2, [pc, #212]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80056de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80056e4:	e017      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	3304      	adds	r3, #4
 80056ea:	2100      	movs	r1, #0
 80056ec:	4618      	mov	r0, r3
 80056ee:	f001 f8fb 	bl	80068e8 <RCCEx_PLL2_Config>
 80056f2:	4603      	mov	r3, r0
 80056f4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80056f6:	e00e      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	3324      	adds	r3, #36	; 0x24
 80056fc:	2100      	movs	r1, #0
 80056fe:	4618      	mov	r0, r3
 8005700:	f001 f9a4 	bl	8006a4c <RCCEx_PLL3_Config>
 8005704:	4603      	mov	r3, r0
 8005706:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005708:	e005      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	75fb      	strb	r3, [r7, #23]
      break;
 800570e:	e002      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005710:	bf00      	nop
 8005712:	e000      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005714:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005716:	7dfb      	ldrb	r3, [r7, #23]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d10a      	bne.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800571c:	4b25      	ldr	r3, [pc, #148]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800571e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005720:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800572a:	4922      	ldr	r1, [pc, #136]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800572c:	4313      	orrs	r3, r2
 800572e:	658b      	str	r3, [r1, #88]	; 0x58
 8005730:	e001      	b.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005732:	7dfb      	ldrb	r3, [r7, #23]
 8005734:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800573e:	2b00      	cmp	r3, #0
 8005740:	d04b      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005748:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800574c:	d030      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800574e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005752:	d82a      	bhi.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005754:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005758:	d02e      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800575a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800575e:	d824      	bhi.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005760:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005764:	d018      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005766:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800576a:	d81e      	bhi.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800576c:	2b00      	cmp	r3, #0
 800576e:	d003      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005770:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005774:	d007      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005776:	e018      	b.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005778:	4b0e      	ldr	r3, [pc, #56]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800577a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577c:	4a0d      	ldr	r2, [pc, #52]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800577e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005782:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005784:	e019      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	3304      	adds	r3, #4
 800578a:	2100      	movs	r1, #0
 800578c:	4618      	mov	r0, r3
 800578e:	f001 f8ab 	bl	80068e8 <RCCEx_PLL2_Config>
 8005792:	4603      	mov	r3, r0
 8005794:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005796:	e010      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	3324      	adds	r3, #36	; 0x24
 800579c:	2100      	movs	r1, #0
 800579e:	4618      	mov	r0, r3
 80057a0:	f001 f954 	bl	8006a4c <RCCEx_PLL3_Config>
 80057a4:	4603      	mov	r3, r0
 80057a6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80057a8:	e007      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	75fb      	strb	r3, [r7, #23]
      break;
 80057ae:	e004      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80057b0:	bf00      	nop
 80057b2:	e002      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80057b4:	58024400 	.word	0x58024400
      break;
 80057b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057ba:	7dfb      	ldrb	r3, [r7, #23]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d10a      	bne.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80057c0:	4b99      	ldr	r3, [pc, #612]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80057c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80057ce:	4996      	ldr	r1, [pc, #600]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	658b      	str	r3, [r1, #88]	; 0x58
 80057d4:	e001      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057d6:	7dfb      	ldrb	r3, [r7, #23]
 80057d8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d032      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057ea:	2b30      	cmp	r3, #48	; 0x30
 80057ec:	d01c      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80057ee:	2b30      	cmp	r3, #48	; 0x30
 80057f0:	d817      	bhi.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80057f2:	2b20      	cmp	r3, #32
 80057f4:	d00c      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80057f6:	2b20      	cmp	r3, #32
 80057f8:	d813      	bhi.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d016      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80057fe:	2b10      	cmp	r3, #16
 8005800:	d10f      	bne.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005802:	4b89      	ldr	r3, [pc, #548]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005806:	4a88      	ldr	r2, [pc, #544]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800580c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800580e:	e00e      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	3304      	adds	r3, #4
 8005814:	2102      	movs	r1, #2
 8005816:	4618      	mov	r0, r3
 8005818:	f001 f866 	bl	80068e8 <RCCEx_PLL2_Config>
 800581c:	4603      	mov	r3, r0
 800581e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005820:	e005      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	75fb      	strb	r3, [r7, #23]
      break;
 8005826:	e002      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005828:	bf00      	nop
 800582a:	e000      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800582c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800582e:	7dfb      	ldrb	r3, [r7, #23]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d109      	bne.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005834:	4b7c      	ldr	r3, [pc, #496]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005838:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005840:	4979      	ldr	r1, [pc, #484]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005842:	4313      	orrs	r3, r2
 8005844:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005846:	e001      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005848:	7dfb      	ldrb	r3, [r7, #23]
 800584a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d047      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800585c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005860:	d030      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005862:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005866:	d82a      	bhi.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005868:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800586c:	d02c      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800586e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005872:	d824      	bhi.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005874:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005878:	d018      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800587a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800587e:	d81e      	bhi.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005880:	2b00      	cmp	r3, #0
 8005882:	d003      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8005884:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005888:	d007      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800588a:	e018      	b.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800588c:	4b66      	ldr	r3, [pc, #408]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800588e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005890:	4a65      	ldr	r2, [pc, #404]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005892:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005896:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005898:	e017      	b.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	3304      	adds	r3, #4
 800589e:	2100      	movs	r1, #0
 80058a0:	4618      	mov	r0, r3
 80058a2:	f001 f821 	bl	80068e8 <RCCEx_PLL2_Config>
 80058a6:	4603      	mov	r3, r0
 80058a8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80058aa:	e00e      	b.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	3324      	adds	r3, #36	; 0x24
 80058b0:	2100      	movs	r1, #0
 80058b2:	4618      	mov	r0, r3
 80058b4:	f001 f8ca 	bl	8006a4c <RCCEx_PLL3_Config>
 80058b8:	4603      	mov	r3, r0
 80058ba:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80058bc:	e005      	b.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	75fb      	strb	r3, [r7, #23]
      break;
 80058c2:	e002      	b.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80058c4:	bf00      	nop
 80058c6:	e000      	b.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80058c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058ca:	7dfb      	ldrb	r3, [r7, #23]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d109      	bne.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80058d0:	4b55      	ldr	r3, [pc, #340]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80058d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058d4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058dc:	4952      	ldr	r1, [pc, #328]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	650b      	str	r3, [r1, #80]	; 0x50
 80058e2:	e001      	b.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e4:	7dfb      	ldrb	r3, [r7, #23]
 80058e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d049      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058fc:	d02e      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80058fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005902:	d828      	bhi.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005904:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005908:	d02a      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800590a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800590e:	d822      	bhi.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005910:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005914:	d026      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8005916:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800591a:	d81c      	bhi.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800591c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005920:	d010      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8005922:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005926:	d816      	bhi.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005928:	2b00      	cmp	r3, #0
 800592a:	d01d      	beq.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800592c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005930:	d111      	bne.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	3304      	adds	r3, #4
 8005936:	2101      	movs	r1, #1
 8005938:	4618      	mov	r0, r3
 800593a:	f000 ffd5 	bl	80068e8 <RCCEx_PLL2_Config>
 800593e:	4603      	mov	r3, r0
 8005940:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005942:	e012      	b.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	3324      	adds	r3, #36	; 0x24
 8005948:	2101      	movs	r1, #1
 800594a:	4618      	mov	r0, r3
 800594c:	f001 f87e 	bl	8006a4c <RCCEx_PLL3_Config>
 8005950:	4603      	mov	r3, r0
 8005952:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005954:	e009      	b.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	75fb      	strb	r3, [r7, #23]
      break;
 800595a:	e006      	b.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800595c:	bf00      	nop
 800595e:	e004      	b.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005960:	bf00      	nop
 8005962:	e002      	b.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005964:	bf00      	nop
 8005966:	e000      	b.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005968:	bf00      	nop
    }

    if(ret == HAL_OK)
 800596a:	7dfb      	ldrb	r3, [r7, #23]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d109      	bne.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005970:	4b2d      	ldr	r3, [pc, #180]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005974:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800597c:	492a      	ldr	r1, [pc, #168]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800597e:	4313      	orrs	r3, r2
 8005980:	650b      	str	r3, [r1, #80]	; 0x50
 8005982:	e001      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005984:	7dfb      	ldrb	r3, [r7, #23]
 8005986:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d04d      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800599a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800599e:	d02e      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80059a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059a4:	d828      	bhi.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80059a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059aa:	d02a      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80059ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059b0:	d822      	bhi.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80059b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80059b6:	d026      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x526>
 80059b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80059bc:	d81c      	bhi.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80059be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059c2:	d010      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80059c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059c8:	d816      	bhi.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d01d      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80059ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059d2:	d111      	bne.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	3304      	adds	r3, #4
 80059d8:	2101      	movs	r1, #1
 80059da:	4618      	mov	r0, r3
 80059dc:	f000 ff84 	bl	80068e8 <RCCEx_PLL2_Config>
 80059e0:	4603      	mov	r3, r0
 80059e2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80059e4:	e012      	b.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	3324      	adds	r3, #36	; 0x24
 80059ea:	2101      	movs	r1, #1
 80059ec:	4618      	mov	r0, r3
 80059ee:	f001 f82d 	bl	8006a4c <RCCEx_PLL3_Config>
 80059f2:	4603      	mov	r3, r0
 80059f4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80059f6:	e009      	b.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	75fb      	strb	r3, [r7, #23]
      break;
 80059fc:	e006      	b.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80059fe:	bf00      	nop
 8005a00:	e004      	b.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005a02:	bf00      	nop
 8005a04:	e002      	b.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005a06:	bf00      	nop
 8005a08:	e000      	b.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005a0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a0c:	7dfb      	ldrb	r3, [r7, #23]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10c      	bne.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005a12:	4b05      	ldr	r3, [pc, #20]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a16:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005a20:	4901      	ldr	r1, [pc, #4]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005a22:	4313      	orrs	r3, r2
 8005a24:	658b      	str	r3, [r1, #88]	; 0x58
 8005a26:	e003      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005a28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a2c:	7dfb      	ldrb	r3, [r7, #23]
 8005a2e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d02f      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a44:	d00e      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8005a46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a4a:	d814      	bhi.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d015      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8005a50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a54:	d10f      	bne.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a56:	4baf      	ldr	r3, [pc, #700]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5a:	4aae      	ldr	r2, [pc, #696]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005a62:	e00c      	b.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	3304      	adds	r3, #4
 8005a68:	2101      	movs	r1, #1
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f000 ff3c 	bl	80068e8 <RCCEx_PLL2_Config>
 8005a70:	4603      	mov	r3, r0
 8005a72:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005a74:	e003      	b.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	75fb      	strb	r3, [r7, #23]
      break;
 8005a7a:	e000      	b.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8005a7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a7e:	7dfb      	ldrb	r3, [r7, #23]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d109      	bne.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005a84:	4ba3      	ldr	r3, [pc, #652]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a88:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a90:	49a0      	ldr	r1, [pc, #640]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a92:	4313      	orrs	r3, r2
 8005a94:	650b      	str	r3, [r1, #80]	; 0x50
 8005a96:	e001      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a98:	7dfb      	ldrb	r3, [r7, #23]
 8005a9a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d032      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aac:	2b03      	cmp	r3, #3
 8005aae:	d81b      	bhi.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005ab0:	a201      	add	r2, pc, #4	; (adr r2, 8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8005ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab6:	bf00      	nop
 8005ab8:	08005aef 	.word	0x08005aef
 8005abc:	08005ac9 	.word	0x08005ac9
 8005ac0:	08005ad7 	.word	0x08005ad7
 8005ac4:	08005aef 	.word	0x08005aef
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ac8:	4b92      	ldr	r3, [pc, #584]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005acc:	4a91      	ldr	r2, [pc, #580]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005ace:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ad2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005ad4:	e00c      	b.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	3304      	adds	r3, #4
 8005ada:	2102      	movs	r1, #2
 8005adc:	4618      	mov	r0, r3
 8005ade:	f000 ff03 	bl	80068e8 <RCCEx_PLL2_Config>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005ae6:	e003      	b.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	75fb      	strb	r3, [r7, #23]
      break;
 8005aec:	e000      	b.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005aee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005af0:	7dfb      	ldrb	r3, [r7, #23]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d109      	bne.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005af6:	4b87      	ldr	r3, [pc, #540]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005afa:	f023 0203 	bic.w	r2, r3, #3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b02:	4984      	ldr	r1, [pc, #528]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005b04:	4313      	orrs	r3, r2
 8005b06:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005b08:	e001      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b0a:	7dfb      	ldrb	r3, [r7, #23]
 8005b0c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	f000 8086 	beq.w	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b1c:	4b7e      	ldr	r3, [pc, #504]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a7d      	ldr	r2, [pc, #500]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b28:	f7fb fc98 	bl	800145c <HAL_GetTick>
 8005b2c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b2e:	e009      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b30:	f7fb fc94 	bl	800145c <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	2b64      	cmp	r3, #100	; 0x64
 8005b3c:	d902      	bls.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	75fb      	strb	r3, [r7, #23]
        break;
 8005b42:	e005      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b44:	4b74      	ldr	r3, [pc, #464]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d0ef      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005b50:	7dfb      	ldrb	r3, [r7, #23]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d166      	bne.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005b56:	4b6f      	ldr	r3, [pc, #444]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005b58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b60:	4053      	eors	r3, r2
 8005b62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d013      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b6a:	4b6a      	ldr	r3, [pc, #424]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b72:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b74:	4b67      	ldr	r3, [pc, #412]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b78:	4a66      	ldr	r2, [pc, #408]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005b7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b7e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b80:	4b64      	ldr	r3, [pc, #400]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b84:	4a63      	ldr	r2, [pc, #396]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005b86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b8a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005b8c:	4a61      	ldr	r2, [pc, #388]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b9c:	d115      	bne.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b9e:	f7fb fc5d 	bl	800145c <HAL_GetTick>
 8005ba2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ba4:	e00b      	b.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ba6:	f7fb fc59 	bl	800145c <HAL_GetTick>
 8005baa:	4602      	mov	r2, r0
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d902      	bls.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	75fb      	strb	r3, [r7, #23]
            break;
 8005bbc:	e005      	b.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005bbe:	4b55      	ldr	r3, [pc, #340]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc2:	f003 0302 	and.w	r3, r3, #2
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d0ed      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8005bca:	7dfb      	ldrb	r3, [r7, #23]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d126      	bne.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005bd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bde:	d10d      	bne.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005be0:	4b4c      	ldr	r3, [pc, #304]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005bee:	0919      	lsrs	r1, r3, #4
 8005bf0:	4b4a      	ldr	r3, [pc, #296]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8005bf2:	400b      	ands	r3, r1
 8005bf4:	4947      	ldr	r1, [pc, #284]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	610b      	str	r3, [r1, #16]
 8005bfa:	e005      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005bfc:	4b45      	ldr	r3, [pc, #276]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	4a44      	ldr	r2, [pc, #272]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005c02:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005c06:	6113      	str	r3, [r2, #16]
 8005c08:	4b42      	ldr	r3, [pc, #264]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005c0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c16:	493f      	ldr	r1, [pc, #252]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	670b      	str	r3, [r1, #112]	; 0x70
 8005c1c:	e004      	b.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c1e:	7dfb      	ldrb	r3, [r7, #23]
 8005c20:	75bb      	strb	r3, [r7, #22]
 8005c22:	e001      	b.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c24:	7dfb      	ldrb	r3, [r7, #23]
 8005c26:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0301 	and.w	r3, r3, #1
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f000 8085 	beq.w	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c3a:	2b28      	cmp	r3, #40	; 0x28
 8005c3c:	d866      	bhi.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005c3e:	a201      	add	r2, pc, #4	; (adr r2, 8005c44 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c44:	08005d21 	.word	0x08005d21
 8005c48:	08005d0d 	.word	0x08005d0d
 8005c4c:	08005d0d 	.word	0x08005d0d
 8005c50:	08005d0d 	.word	0x08005d0d
 8005c54:	08005d0d 	.word	0x08005d0d
 8005c58:	08005d0d 	.word	0x08005d0d
 8005c5c:	08005d0d 	.word	0x08005d0d
 8005c60:	08005d0d 	.word	0x08005d0d
 8005c64:	08005ce9 	.word	0x08005ce9
 8005c68:	08005d0d 	.word	0x08005d0d
 8005c6c:	08005d0d 	.word	0x08005d0d
 8005c70:	08005d0d 	.word	0x08005d0d
 8005c74:	08005d0d 	.word	0x08005d0d
 8005c78:	08005d0d 	.word	0x08005d0d
 8005c7c:	08005d0d 	.word	0x08005d0d
 8005c80:	08005d0d 	.word	0x08005d0d
 8005c84:	08005cfb 	.word	0x08005cfb
 8005c88:	08005d0d 	.word	0x08005d0d
 8005c8c:	08005d0d 	.word	0x08005d0d
 8005c90:	08005d0d 	.word	0x08005d0d
 8005c94:	08005d0d 	.word	0x08005d0d
 8005c98:	08005d0d 	.word	0x08005d0d
 8005c9c:	08005d0d 	.word	0x08005d0d
 8005ca0:	08005d0d 	.word	0x08005d0d
 8005ca4:	08005d21 	.word	0x08005d21
 8005ca8:	08005d0d 	.word	0x08005d0d
 8005cac:	08005d0d 	.word	0x08005d0d
 8005cb0:	08005d0d 	.word	0x08005d0d
 8005cb4:	08005d0d 	.word	0x08005d0d
 8005cb8:	08005d0d 	.word	0x08005d0d
 8005cbc:	08005d0d 	.word	0x08005d0d
 8005cc0:	08005d0d 	.word	0x08005d0d
 8005cc4:	08005d21 	.word	0x08005d21
 8005cc8:	08005d0d 	.word	0x08005d0d
 8005ccc:	08005d0d 	.word	0x08005d0d
 8005cd0:	08005d0d 	.word	0x08005d0d
 8005cd4:	08005d0d 	.word	0x08005d0d
 8005cd8:	08005d0d 	.word	0x08005d0d
 8005cdc:	08005d0d 	.word	0x08005d0d
 8005ce0:	08005d0d 	.word	0x08005d0d
 8005ce4:	08005d21 	.word	0x08005d21
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	3304      	adds	r3, #4
 8005cec:	2101      	movs	r1, #1
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f000 fdfa 	bl	80068e8 <RCCEx_PLL2_Config>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005cf8:	e013      	b.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	3324      	adds	r3, #36	; 0x24
 8005cfe:	2101      	movs	r1, #1
 8005d00:	4618      	mov	r0, r3
 8005d02:	f000 fea3 	bl	8006a4c <RCCEx_PLL3_Config>
 8005d06:	4603      	mov	r3, r0
 8005d08:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005d0a:	e00a      	b.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	75fb      	strb	r3, [r7, #23]
      break;
 8005d10:	e007      	b.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005d12:	bf00      	nop
 8005d14:	58024400 	.word	0x58024400
 8005d18:	58024800 	.word	0x58024800
 8005d1c:	00ffffcf 	.word	0x00ffffcf
      break;
 8005d20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d22:	7dfb      	ldrb	r3, [r7, #23]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d109      	bne.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005d28:	4b96      	ldr	r3, [pc, #600]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d2c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d34:	4993      	ldr	r1, [pc, #588]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005d36:	4313      	orrs	r3, r2
 8005d38:	654b      	str	r3, [r1, #84]	; 0x54
 8005d3a:	e001      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d3c:	7dfb      	ldrb	r3, [r7, #23]
 8005d3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0302 	and.w	r3, r3, #2
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d038      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d50:	2b05      	cmp	r3, #5
 8005d52:	d821      	bhi.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8005d54:	a201      	add	r2, pc, #4	; (adr r2, 8005d5c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8005d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d5a:	bf00      	nop
 8005d5c:	08005d9f 	.word	0x08005d9f
 8005d60:	08005d75 	.word	0x08005d75
 8005d64:	08005d87 	.word	0x08005d87
 8005d68:	08005d9f 	.word	0x08005d9f
 8005d6c:	08005d9f 	.word	0x08005d9f
 8005d70:	08005d9f 	.word	0x08005d9f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	3304      	adds	r3, #4
 8005d78:	2101      	movs	r1, #1
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f000 fdb4 	bl	80068e8 <RCCEx_PLL2_Config>
 8005d80:	4603      	mov	r3, r0
 8005d82:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005d84:	e00c      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	3324      	adds	r3, #36	; 0x24
 8005d8a:	2101      	movs	r1, #1
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f000 fe5d 	bl	8006a4c <RCCEx_PLL3_Config>
 8005d92:	4603      	mov	r3, r0
 8005d94:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005d96:	e003      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	75fb      	strb	r3, [r7, #23]
      break;
 8005d9c:	e000      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8005d9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005da0:	7dfb      	ldrb	r3, [r7, #23]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d109      	bne.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005da6:	4b77      	ldr	r3, [pc, #476]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005daa:	f023 0207 	bic.w	r2, r3, #7
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005db2:	4974      	ldr	r1, [pc, #464]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005db4:	4313      	orrs	r3, r2
 8005db6:	654b      	str	r3, [r1, #84]	; 0x54
 8005db8:	e001      	b.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dba:	7dfb      	ldrb	r3, [r7, #23]
 8005dbc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0304 	and.w	r3, r3, #4
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d03a      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dd0:	2b05      	cmp	r3, #5
 8005dd2:	d821      	bhi.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8005dd4:	a201      	add	r2, pc, #4	; (adr r2, 8005ddc <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8005dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dda:	bf00      	nop
 8005ddc:	08005e1f 	.word	0x08005e1f
 8005de0:	08005df5 	.word	0x08005df5
 8005de4:	08005e07 	.word	0x08005e07
 8005de8:	08005e1f 	.word	0x08005e1f
 8005dec:	08005e1f 	.word	0x08005e1f
 8005df0:	08005e1f 	.word	0x08005e1f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	3304      	adds	r3, #4
 8005df8:	2101      	movs	r1, #1
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f000 fd74 	bl	80068e8 <RCCEx_PLL2_Config>
 8005e00:	4603      	mov	r3, r0
 8005e02:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005e04:	e00c      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	3324      	adds	r3, #36	; 0x24
 8005e0a:	2101      	movs	r1, #1
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f000 fe1d 	bl	8006a4c <RCCEx_PLL3_Config>
 8005e12:	4603      	mov	r3, r0
 8005e14:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005e16:	e003      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	75fb      	strb	r3, [r7, #23]
      break;
 8005e1c:	e000      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8005e1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e20:	7dfb      	ldrb	r3, [r7, #23]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d10a      	bne.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e26:	4b57      	ldr	r3, [pc, #348]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e2a:	f023 0207 	bic.w	r2, r3, #7
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e34:	4953      	ldr	r1, [pc, #332]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005e36:	4313      	orrs	r3, r2
 8005e38:	658b      	str	r3, [r1, #88]	; 0x58
 8005e3a:	e001      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e3c:	7dfb      	ldrb	r3, [r7, #23]
 8005e3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0320 	and.w	r3, r3, #32
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d04b      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e56:	d02e      	beq.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005e58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e5c:	d828      	bhi.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e62:	d02a      	beq.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e68:	d822      	bhi.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005e6a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e6e:	d026      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005e70:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e74:	d81c      	bhi.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005e76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e7a:	d010      	beq.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8005e7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e80:	d816      	bhi.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d01d      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8005e86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e8a:	d111      	bne.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	3304      	adds	r3, #4
 8005e90:	2100      	movs	r1, #0
 8005e92:	4618      	mov	r0, r3
 8005e94:	f000 fd28 	bl	80068e8 <RCCEx_PLL2_Config>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005e9c:	e012      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	3324      	adds	r3, #36	; 0x24
 8005ea2:	2102      	movs	r1, #2
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f000 fdd1 	bl	8006a4c <RCCEx_PLL3_Config>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005eae:	e009      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	75fb      	strb	r3, [r7, #23]
      break;
 8005eb4:	e006      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005eb6:	bf00      	nop
 8005eb8:	e004      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005eba:	bf00      	nop
 8005ebc:	e002      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005ebe:	bf00      	nop
 8005ec0:	e000      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005ec2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ec4:	7dfb      	ldrb	r3, [r7, #23]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10a      	bne.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005eca:	4b2e      	ldr	r3, [pc, #184]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ece:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ed8:	492a      	ldr	r1, [pc, #168]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005eda:	4313      	orrs	r3, r2
 8005edc:	654b      	str	r3, [r1, #84]	; 0x54
 8005ede:	e001      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ee0:	7dfb      	ldrb	r3, [r7, #23]
 8005ee2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d04d      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ef6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005efa:	d02e      	beq.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005efc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005f00:	d828      	bhi.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005f02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f06:	d02a      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005f08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f0c:	d822      	bhi.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005f0e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f12:	d026      	beq.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005f14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f18:	d81c      	bhi.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005f1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f1e:	d010      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8005f20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f24:	d816      	bhi.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d01d      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8005f2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f2e:	d111      	bne.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	3304      	adds	r3, #4
 8005f34:	2100      	movs	r1, #0
 8005f36:	4618      	mov	r0, r3
 8005f38:	f000 fcd6 	bl	80068e8 <RCCEx_PLL2_Config>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005f40:	e012      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	3324      	adds	r3, #36	; 0x24
 8005f46:	2102      	movs	r1, #2
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f000 fd7f 	bl	8006a4c <RCCEx_PLL3_Config>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005f52:	e009      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	75fb      	strb	r3, [r7, #23]
      break;
 8005f58:	e006      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005f5a:	bf00      	nop
 8005f5c:	e004      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005f5e:	bf00      	nop
 8005f60:	e002      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005f62:	bf00      	nop
 8005f64:	e000      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005f66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f68:	7dfb      	ldrb	r3, [r7, #23]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d10c      	bne.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005f6e:	4b05      	ldr	r3, [pc, #20]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f72:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f7c:	4901      	ldr	r1, [pc, #4]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	658b      	str	r3, [r1, #88]	; 0x58
 8005f82:	e003      	b.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005f84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f88:	7dfb      	ldrb	r3, [r7, #23]
 8005f8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d04b      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f9e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005fa2:	d02e      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005fa4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005fa8:	d828      	bhi.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005faa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fae:	d02a      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005fb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fb4:	d822      	bhi.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005fb6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005fba:	d026      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8005fbc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005fc0:	d81c      	bhi.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005fc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fc6:	d010      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8005fc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fcc:	d816      	bhi.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d01d      	beq.n	800600e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8005fd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fd6:	d111      	bne.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	3304      	adds	r3, #4
 8005fdc:	2100      	movs	r1, #0
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f000 fc82 	bl	80068e8 <RCCEx_PLL2_Config>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005fe8:	e012      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	3324      	adds	r3, #36	; 0x24
 8005fee:	2102      	movs	r1, #2
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f000 fd2b 	bl	8006a4c <RCCEx_PLL3_Config>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005ffa:	e009      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	75fb      	strb	r3, [r7, #23]
      break;
 8006000:	e006      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006002:	bf00      	nop
 8006004:	e004      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006006:	bf00      	nop
 8006008:	e002      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800600a:	bf00      	nop
 800600c:	e000      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800600e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006010:	7dfb      	ldrb	r3, [r7, #23]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10a      	bne.n	800602c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006016:	4b9d      	ldr	r3, [pc, #628]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800601a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006024:	4999      	ldr	r1, [pc, #612]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006026:	4313      	orrs	r3, r2
 8006028:	658b      	str	r3, [r1, #88]	; 0x58
 800602a:	e001      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800602c:	7dfb      	ldrb	r3, [r7, #23]
 800602e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 0308 	and.w	r3, r3, #8
 8006038:	2b00      	cmp	r3, #0
 800603a:	d01a      	beq.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006046:	d10a      	bne.n	800605e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	3324      	adds	r3, #36	; 0x24
 800604c:	2102      	movs	r1, #2
 800604e:	4618      	mov	r0, r3
 8006050:	f000 fcfc 	bl	8006a4c <RCCEx_PLL3_Config>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d001      	beq.n	800605e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800605e:	4b8b      	ldr	r3, [pc, #556]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006062:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800606c:	4987      	ldr	r1, [pc, #540]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800606e:	4313      	orrs	r3, r2
 8006070:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0310 	and.w	r3, r3, #16
 800607a:	2b00      	cmp	r3, #0
 800607c:	d01a      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006084:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006088:	d10a      	bne.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	3324      	adds	r3, #36	; 0x24
 800608e:	2102      	movs	r1, #2
 8006090:	4618      	mov	r0, r3
 8006092:	f000 fcdb 	bl	8006a4c <RCCEx_PLL3_Config>
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d001      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80060a0:	4b7a      	ldr	r3, [pc, #488]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80060a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060ae:	4977      	ldr	r1, [pc, #476]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80060b0:	4313      	orrs	r3, r2
 80060b2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d034      	beq.n	800612a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80060c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060ca:	d01d      	beq.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80060cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060d0:	d817      	bhi.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d003      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80060d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060da:	d009      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80060dc:	e011      	b.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	3304      	adds	r3, #4
 80060e2:	2100      	movs	r1, #0
 80060e4:	4618      	mov	r0, r3
 80060e6:	f000 fbff 	bl	80068e8 <RCCEx_PLL2_Config>
 80060ea:	4603      	mov	r3, r0
 80060ec:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80060ee:	e00c      	b.n	800610a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	3324      	adds	r3, #36	; 0x24
 80060f4:	2102      	movs	r1, #2
 80060f6:	4618      	mov	r0, r3
 80060f8:	f000 fca8 	bl	8006a4c <RCCEx_PLL3_Config>
 80060fc:	4603      	mov	r3, r0
 80060fe:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006100:	e003      	b.n	800610a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	75fb      	strb	r3, [r7, #23]
      break;
 8006106:	e000      	b.n	800610a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8006108:	bf00      	nop
    }

    if(ret == HAL_OK)
 800610a:	7dfb      	ldrb	r3, [r7, #23]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d10a      	bne.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006110:	4b5e      	ldr	r3, [pc, #376]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006114:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800611e:	495b      	ldr	r1, [pc, #364]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006120:	4313      	orrs	r3, r2
 8006122:	658b      	str	r3, [r1, #88]	; 0x58
 8006124:	e001      	b.n	800612a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006126:	7dfb      	ldrb	r3, [r7, #23]
 8006128:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006132:	2b00      	cmp	r3, #0
 8006134:	d033      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800613c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006140:	d01c      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8006142:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006146:	d816      	bhi.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8006148:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800614c:	d003      	beq.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800614e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006152:	d007      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8006154:	e00f      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006156:	4b4d      	ldr	r3, [pc, #308]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800615a:	4a4c      	ldr	r2, [pc, #304]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800615c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006160:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006162:	e00c      	b.n	800617e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	3324      	adds	r3, #36	; 0x24
 8006168:	2101      	movs	r1, #1
 800616a:	4618      	mov	r0, r3
 800616c:	f000 fc6e 	bl	8006a4c <RCCEx_PLL3_Config>
 8006170:	4603      	mov	r3, r0
 8006172:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006174:	e003      	b.n	800617e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	75fb      	strb	r3, [r7, #23]
      break;
 800617a:	e000      	b.n	800617e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800617c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800617e:	7dfb      	ldrb	r3, [r7, #23]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d10a      	bne.n	800619a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006184:	4b41      	ldr	r3, [pc, #260]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006188:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006192:	493e      	ldr	r1, [pc, #248]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006194:	4313      	orrs	r3, r2
 8006196:	654b      	str	r3, [r1, #84]	; 0x54
 8006198:	e001      	b.n	800619e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800619a:	7dfb      	ldrb	r3, [r7, #23]
 800619c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d029      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d003      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80061b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061b6:	d007      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80061b8:	e00f      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061ba:	4b34      	ldr	r3, [pc, #208]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80061bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061be:	4a33      	ldr	r2, [pc, #204]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80061c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80061c6:	e00b      	b.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	3304      	adds	r3, #4
 80061cc:	2102      	movs	r1, #2
 80061ce:	4618      	mov	r0, r3
 80061d0:	f000 fb8a 	bl	80068e8 <RCCEx_PLL2_Config>
 80061d4:	4603      	mov	r3, r0
 80061d6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80061d8:	e002      	b.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	75fb      	strb	r3, [r7, #23]
      break;
 80061de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061e0:	7dfb      	ldrb	r3, [r7, #23]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d109      	bne.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80061e6:	4b29      	ldr	r3, [pc, #164]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80061e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061f2:	4926      	ldr	r1, [pc, #152]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80061f4:	4313      	orrs	r3, r2
 80061f6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80061f8:	e001      	b.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061fa:	7dfb      	ldrb	r3, [r7, #23]
 80061fc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00a      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	3324      	adds	r3, #36	; 0x24
 800620e:	2102      	movs	r1, #2
 8006210:	4618      	mov	r0, r3
 8006212:	f000 fc1b 	bl	8006a4c <RCCEx_PLL3_Config>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d001      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d033      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006230:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006234:	d017      	beq.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006236:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800623a:	d811      	bhi.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800623c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006240:	d013      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006242:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006246:	d80b      	bhi.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006248:	2b00      	cmp	r3, #0
 800624a:	d010      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800624c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006250:	d106      	bne.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006252:	4b0e      	ldr	r3, [pc, #56]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006256:	4a0d      	ldr	r2, [pc, #52]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006258:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800625c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800625e:	e007      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	75fb      	strb	r3, [r7, #23]
      break;
 8006264:	e004      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006266:	bf00      	nop
 8006268:	e002      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800626a:	bf00      	nop
 800626c:	e000      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800626e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006270:	7dfb      	ldrb	r3, [r7, #23]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d10c      	bne.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006276:	4b05      	ldr	r3, [pc, #20]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800627a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006282:	4902      	ldr	r1, [pc, #8]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006284:	4313      	orrs	r3, r2
 8006286:	654b      	str	r3, [r1, #84]	; 0x54
 8006288:	e004      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800628a:	bf00      	nop
 800628c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006290:	7dfb      	ldrb	r3, [r7, #23]
 8006292:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800629c:	2b00      	cmp	r3, #0
 800629e:	d008      	beq.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80062a0:	4b31      	ldr	r3, [pc, #196]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80062a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ac:	492e      	ldr	r1, [pc, #184]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80062ae:	4313      	orrs	r3, r2
 80062b0:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d009      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80062be:	4b2a      	ldr	r3, [pc, #168]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80062cc:	4926      	ldr	r1, [pc, #152]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80062ce:	4313      	orrs	r3, r2
 80062d0:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d008      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80062de:	4b22      	ldr	r3, [pc, #136]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80062e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062e2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062ea:	491f      	ldr	r1, [pc, #124]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80062ec:	4313      	orrs	r3, r2
 80062ee:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00d      	beq.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80062fc:	4b1a      	ldr	r3, [pc, #104]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	4a19      	ldr	r2, [pc, #100]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006302:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006306:	6113      	str	r3, [r2, #16]
 8006308:	4b17      	ldr	r3, [pc, #92]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800630a:	691a      	ldr	r2, [r3, #16]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006312:	4915      	ldr	r1, [pc, #84]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006314:	4313      	orrs	r3, r2
 8006316:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	da08      	bge.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006320:	4b11      	ldr	r3, [pc, #68]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006324:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800632c:	490e      	ldr	r1, [pc, #56]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800632e:	4313      	orrs	r3, r2
 8006330:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d009      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800633e:	4b0a      	ldr	r3, [pc, #40]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006342:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800634c:	4906      	ldr	r1, [pc, #24]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800634e:	4313      	orrs	r3, r2
 8006350:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006352:	7dbb      	ldrb	r3, [r7, #22]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d101      	bne.n	800635c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8006358:	2300      	movs	r3, #0
 800635a:	e000      	b.n	800635e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
}
 800635e:	4618      	mov	r0, r3
 8006360:	3718      	adds	r7, #24
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	58024400 	.word	0x58024400

0800636c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006370:	f7ff f85a 	bl	8005428 <HAL_RCC_GetHCLKFreq>
 8006374:	4602      	mov	r2, r0
 8006376:	4b06      	ldr	r3, [pc, #24]	; (8006390 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006378:	6a1b      	ldr	r3, [r3, #32]
 800637a:	091b      	lsrs	r3, r3, #4
 800637c:	f003 0307 	and.w	r3, r3, #7
 8006380:	4904      	ldr	r1, [pc, #16]	; (8006394 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006382:	5ccb      	ldrb	r3, [r1, r3]
 8006384:	f003 031f 	and.w	r3, r3, #31
 8006388:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800638c:	4618      	mov	r0, r3
 800638e:	bd80      	pop	{r7, pc}
 8006390:	58024400 	.word	0x58024400
 8006394:	08008fec 	.word	0x08008fec

08006398 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006398:	b480      	push	{r7}
 800639a:	b089      	sub	sp, #36	; 0x24
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80063a0:	4ba1      	ldr	r3, [pc, #644]	; (8006628 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a4:	f003 0303 	and.w	r3, r3, #3
 80063a8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80063aa:	4b9f      	ldr	r3, [pc, #636]	; (8006628 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ae:	0b1b      	lsrs	r3, r3, #12
 80063b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063b4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80063b6:	4b9c      	ldr	r3, [pc, #624]	; (8006628 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ba:	091b      	lsrs	r3, r3, #4
 80063bc:	f003 0301 	and.w	r3, r3, #1
 80063c0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80063c2:	4b99      	ldr	r3, [pc, #612]	; (8006628 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063c6:	08db      	lsrs	r3, r3, #3
 80063c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	fb02 f303 	mul.w	r3, r2, r3
 80063d2:	ee07 3a90 	vmov	s15, r3
 80063d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f000 8111 	beq.w	8006608 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	f000 8083 	beq.w	80064f4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	f200 80a1 	bhi.w	8006538 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d003      	beq.n	8006404 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d056      	beq.n	80064b0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006402:	e099      	b.n	8006538 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006404:	4b88      	ldr	r3, [pc, #544]	; (8006628 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0320 	and.w	r3, r3, #32
 800640c:	2b00      	cmp	r3, #0
 800640e:	d02d      	beq.n	800646c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006410:	4b85      	ldr	r3, [pc, #532]	; (8006628 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	08db      	lsrs	r3, r3, #3
 8006416:	f003 0303 	and.w	r3, r3, #3
 800641a:	4a84      	ldr	r2, [pc, #528]	; (800662c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800641c:	fa22 f303 	lsr.w	r3, r2, r3
 8006420:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	ee07 3a90 	vmov	s15, r3
 8006428:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	ee07 3a90 	vmov	s15, r3
 8006432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006436:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800643a:	4b7b      	ldr	r3, [pc, #492]	; (8006628 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800643c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006442:	ee07 3a90 	vmov	s15, r3
 8006446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800644a:	ed97 6a03 	vldr	s12, [r7, #12]
 800644e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006630 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006452:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006456:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800645a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800645e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006462:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006466:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800646a:	e087      	b.n	800657c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	ee07 3a90 	vmov	s15, r3
 8006472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006476:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006634 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800647a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800647e:	4b6a      	ldr	r3, [pc, #424]	; (8006628 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006486:	ee07 3a90 	vmov	s15, r3
 800648a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800648e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006492:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006630 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006496:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800649a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800649e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80064ae:	e065      	b.n	800657c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	ee07 3a90 	vmov	s15, r3
 80064b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006638 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80064be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064c2:	4b59      	ldr	r3, [pc, #356]	; (8006628 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064ca:	ee07 3a90 	vmov	s15, r3
 80064ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80064d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006630 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80064da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80064f2:	e043      	b.n	800657c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	ee07 3a90 	vmov	s15, r3
 80064fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800663c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006506:	4b48      	ldr	r3, [pc, #288]	; (8006628 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800650a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800650e:	ee07 3a90 	vmov	s15, r3
 8006512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006516:	ed97 6a03 	vldr	s12, [r7, #12]
 800651a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006630 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800651e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006522:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006526:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800652a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800652e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006532:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006536:	e021      	b.n	800657c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	ee07 3a90 	vmov	s15, r3
 800653e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006542:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006638 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800654a:	4b37      	ldr	r3, [pc, #220]	; (8006628 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800654c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800654e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006552:	ee07 3a90 	vmov	s15, r3
 8006556:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800655a:	ed97 6a03 	vldr	s12, [r7, #12]
 800655e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006630 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006562:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006566:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800656a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800656e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006576:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800657a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800657c:	4b2a      	ldr	r3, [pc, #168]	; (8006628 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800657e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006580:	0a5b      	lsrs	r3, r3, #9
 8006582:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006586:	ee07 3a90 	vmov	s15, r3
 800658a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800658e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006592:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006596:	edd7 6a07 	vldr	s13, [r7, #28]
 800659a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800659e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065a2:	ee17 2a90 	vmov	r2, s15
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80065aa:	4b1f      	ldr	r3, [pc, #124]	; (8006628 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ae:	0c1b      	lsrs	r3, r3, #16
 80065b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065b4:	ee07 3a90 	vmov	s15, r3
 80065b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80065c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80065c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80065c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065d0:	ee17 2a90 	vmov	r2, s15
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80065d8:	4b13      	ldr	r3, [pc, #76]	; (8006628 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065dc:	0e1b      	lsrs	r3, r3, #24
 80065de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065e2:	ee07 3a90 	vmov	s15, r3
 80065e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80065ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80065f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80065f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065fe:	ee17 2a90 	vmov	r2, s15
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006606:	e008      	b.n	800661a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	609a      	str	r2, [r3, #8]
}
 800661a:	bf00      	nop
 800661c:	3724      	adds	r7, #36	; 0x24
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	58024400 	.word	0x58024400
 800662c:	03d09000 	.word	0x03d09000
 8006630:	46000000 	.word	0x46000000
 8006634:	4c742400 	.word	0x4c742400
 8006638:	4a742400 	.word	0x4a742400
 800663c:	4af42400 	.word	0x4af42400

08006640 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006640:	b480      	push	{r7}
 8006642:	b089      	sub	sp, #36	; 0x24
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006648:	4ba1      	ldr	r3, [pc, #644]	; (80068d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800664a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800664c:	f003 0303 	and.w	r3, r3, #3
 8006650:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006652:	4b9f      	ldr	r3, [pc, #636]	; (80068d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006656:	0d1b      	lsrs	r3, r3, #20
 8006658:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800665c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800665e:	4b9c      	ldr	r3, [pc, #624]	; (80068d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006662:	0a1b      	lsrs	r3, r3, #8
 8006664:	f003 0301 	and.w	r3, r3, #1
 8006668:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800666a:	4b99      	ldr	r3, [pc, #612]	; (80068d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800666c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800666e:	08db      	lsrs	r3, r3, #3
 8006670:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006674:	693a      	ldr	r2, [r7, #16]
 8006676:	fb02 f303 	mul.w	r3, r2, r3
 800667a:	ee07 3a90 	vmov	s15, r3
 800667e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006682:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	2b00      	cmp	r3, #0
 800668a:	f000 8111 	beq.w	80068b0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	2b02      	cmp	r3, #2
 8006692:	f000 8083 	beq.w	800679c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	2b02      	cmp	r3, #2
 800669a:	f200 80a1 	bhi.w	80067e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d003      	beq.n	80066ac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d056      	beq.n	8006758 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80066aa:	e099      	b.n	80067e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066ac:	4b88      	ldr	r3, [pc, #544]	; (80068d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 0320 	and.w	r3, r3, #32
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d02d      	beq.n	8006714 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80066b8:	4b85      	ldr	r3, [pc, #532]	; (80068d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	08db      	lsrs	r3, r3, #3
 80066be:	f003 0303 	and.w	r3, r3, #3
 80066c2:	4a84      	ldr	r2, [pc, #528]	; (80068d4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80066c4:	fa22 f303 	lsr.w	r3, r2, r3
 80066c8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	ee07 3a90 	vmov	s15, r3
 80066d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	ee07 3a90 	vmov	s15, r3
 80066da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066e2:	4b7b      	ldr	r3, [pc, #492]	; (80068d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066ea:	ee07 3a90 	vmov	s15, r3
 80066ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80066f6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80068d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80066fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006702:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006706:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800670a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800670e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006712:	e087      	b.n	8006824 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	ee07 3a90 	vmov	s15, r3
 800671a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800671e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80068dc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006722:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006726:	4b6a      	ldr	r3, [pc, #424]	; (80068d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800672e:	ee07 3a90 	vmov	s15, r3
 8006732:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006736:	ed97 6a03 	vldr	s12, [r7, #12]
 800673a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80068d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800673e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006742:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006746:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800674a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800674e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006752:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006756:	e065      	b.n	8006824 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	ee07 3a90 	vmov	s15, r3
 800675e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006762:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80068e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006766:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800676a:	4b59      	ldr	r3, [pc, #356]	; (80068d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800676c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006772:	ee07 3a90 	vmov	s15, r3
 8006776:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800677a:	ed97 6a03 	vldr	s12, [r7, #12]
 800677e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80068d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006782:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006786:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800678a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800678e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006796:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800679a:	e043      	b.n	8006824 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	ee07 3a90 	vmov	s15, r3
 80067a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067a6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80068e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80067aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067ae:	4b48      	ldr	r3, [pc, #288]	; (80068d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067b6:	ee07 3a90 	vmov	s15, r3
 80067ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067be:	ed97 6a03 	vldr	s12, [r7, #12]
 80067c2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80068d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80067c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80067de:	e021      	b.n	8006824 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	ee07 3a90 	vmov	s15, r3
 80067e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80068e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80067ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067f2:	4b37      	ldr	r3, [pc, #220]	; (80068d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067fa:	ee07 3a90 	vmov	s15, r3
 80067fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006802:	ed97 6a03 	vldr	s12, [r7, #12]
 8006806:	eddf 5a34 	vldr	s11, [pc, #208]	; 80068d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800680a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800680e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006812:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800681a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800681e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006822:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006824:	4b2a      	ldr	r3, [pc, #168]	; (80068d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006828:	0a5b      	lsrs	r3, r3, #9
 800682a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800682e:	ee07 3a90 	vmov	s15, r3
 8006832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006836:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800683a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800683e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006842:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006846:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800684a:	ee17 2a90 	vmov	r2, s15
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006852:	4b1f      	ldr	r3, [pc, #124]	; (80068d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006856:	0c1b      	lsrs	r3, r3, #16
 8006858:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800685c:	ee07 3a90 	vmov	s15, r3
 8006860:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006864:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006868:	ee37 7a87 	vadd.f32	s14, s15, s14
 800686c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006870:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006874:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006878:	ee17 2a90 	vmov	r2, s15
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006880:	4b13      	ldr	r3, [pc, #76]	; (80068d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006884:	0e1b      	lsrs	r3, r3, #24
 8006886:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800688a:	ee07 3a90 	vmov	s15, r3
 800688e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006892:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006896:	ee37 7a87 	vadd.f32	s14, s15, s14
 800689a:	edd7 6a07 	vldr	s13, [r7, #28]
 800689e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068a6:	ee17 2a90 	vmov	r2, s15
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80068ae:	e008      	b.n	80068c2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	609a      	str	r2, [r3, #8]
}
 80068c2:	bf00      	nop
 80068c4:	3724      	adds	r7, #36	; 0x24
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	58024400 	.word	0x58024400
 80068d4:	03d09000 	.word	0x03d09000
 80068d8:	46000000 	.word	0x46000000
 80068dc:	4c742400 	.word	0x4c742400
 80068e0:	4a742400 	.word	0x4a742400
 80068e4:	4af42400 	.word	0x4af42400

080068e8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80068f2:	2300      	movs	r3, #0
 80068f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80068f6:	4b53      	ldr	r3, [pc, #332]	; (8006a44 <RCCEx_PLL2_Config+0x15c>)
 80068f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fa:	f003 0303 	and.w	r3, r3, #3
 80068fe:	2b03      	cmp	r3, #3
 8006900:	d101      	bne.n	8006906 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	e099      	b.n	8006a3a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006906:	4b4f      	ldr	r3, [pc, #316]	; (8006a44 <RCCEx_PLL2_Config+0x15c>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a4e      	ldr	r2, [pc, #312]	; (8006a44 <RCCEx_PLL2_Config+0x15c>)
 800690c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006910:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006912:	f7fa fda3 	bl	800145c <HAL_GetTick>
 8006916:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006918:	e008      	b.n	800692c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800691a:	f7fa fd9f 	bl	800145c <HAL_GetTick>
 800691e:	4602      	mov	r2, r0
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	2b02      	cmp	r3, #2
 8006926:	d901      	bls.n	800692c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006928:	2303      	movs	r3, #3
 800692a:	e086      	b.n	8006a3a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800692c:	4b45      	ldr	r3, [pc, #276]	; (8006a44 <RCCEx_PLL2_Config+0x15c>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006934:	2b00      	cmp	r3, #0
 8006936:	d1f0      	bne.n	800691a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006938:	4b42      	ldr	r3, [pc, #264]	; (8006a44 <RCCEx_PLL2_Config+0x15c>)
 800693a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800693c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	031b      	lsls	r3, r3, #12
 8006946:	493f      	ldr	r1, [pc, #252]	; (8006a44 <RCCEx_PLL2_Config+0x15c>)
 8006948:	4313      	orrs	r3, r2
 800694a:	628b      	str	r3, [r1, #40]	; 0x28
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	3b01      	subs	r3, #1
 8006952:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	3b01      	subs	r3, #1
 800695c:	025b      	lsls	r3, r3, #9
 800695e:	b29b      	uxth	r3, r3
 8006960:	431a      	orrs	r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	3b01      	subs	r3, #1
 8006968:	041b      	lsls	r3, r3, #16
 800696a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800696e:	431a      	orrs	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	691b      	ldr	r3, [r3, #16]
 8006974:	3b01      	subs	r3, #1
 8006976:	061b      	lsls	r3, r3, #24
 8006978:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800697c:	4931      	ldr	r1, [pc, #196]	; (8006a44 <RCCEx_PLL2_Config+0x15c>)
 800697e:	4313      	orrs	r3, r2
 8006980:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006982:	4b30      	ldr	r3, [pc, #192]	; (8006a44 <RCCEx_PLL2_Config+0x15c>)
 8006984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006986:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	695b      	ldr	r3, [r3, #20]
 800698e:	492d      	ldr	r1, [pc, #180]	; (8006a44 <RCCEx_PLL2_Config+0x15c>)
 8006990:	4313      	orrs	r3, r2
 8006992:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006994:	4b2b      	ldr	r3, [pc, #172]	; (8006a44 <RCCEx_PLL2_Config+0x15c>)
 8006996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006998:	f023 0220 	bic.w	r2, r3, #32
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	4928      	ldr	r1, [pc, #160]	; (8006a44 <RCCEx_PLL2_Config+0x15c>)
 80069a2:	4313      	orrs	r3, r2
 80069a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80069a6:	4b27      	ldr	r3, [pc, #156]	; (8006a44 <RCCEx_PLL2_Config+0x15c>)
 80069a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069aa:	4a26      	ldr	r2, [pc, #152]	; (8006a44 <RCCEx_PLL2_Config+0x15c>)
 80069ac:	f023 0310 	bic.w	r3, r3, #16
 80069b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80069b2:	4b24      	ldr	r3, [pc, #144]	; (8006a44 <RCCEx_PLL2_Config+0x15c>)
 80069b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069b6:	4b24      	ldr	r3, [pc, #144]	; (8006a48 <RCCEx_PLL2_Config+0x160>)
 80069b8:	4013      	ands	r3, r2
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	69d2      	ldr	r2, [r2, #28]
 80069be:	00d2      	lsls	r2, r2, #3
 80069c0:	4920      	ldr	r1, [pc, #128]	; (8006a44 <RCCEx_PLL2_Config+0x15c>)
 80069c2:	4313      	orrs	r3, r2
 80069c4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80069c6:	4b1f      	ldr	r3, [pc, #124]	; (8006a44 <RCCEx_PLL2_Config+0x15c>)
 80069c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ca:	4a1e      	ldr	r2, [pc, #120]	; (8006a44 <RCCEx_PLL2_Config+0x15c>)
 80069cc:	f043 0310 	orr.w	r3, r3, #16
 80069d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d106      	bne.n	80069e6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80069d8:	4b1a      	ldr	r3, [pc, #104]	; (8006a44 <RCCEx_PLL2_Config+0x15c>)
 80069da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069dc:	4a19      	ldr	r2, [pc, #100]	; (8006a44 <RCCEx_PLL2_Config+0x15c>)
 80069de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80069e4:	e00f      	b.n	8006a06 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d106      	bne.n	80069fa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80069ec:	4b15      	ldr	r3, [pc, #84]	; (8006a44 <RCCEx_PLL2_Config+0x15c>)
 80069ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f0:	4a14      	ldr	r2, [pc, #80]	; (8006a44 <RCCEx_PLL2_Config+0x15c>)
 80069f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80069f8:	e005      	b.n	8006a06 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80069fa:	4b12      	ldr	r3, [pc, #72]	; (8006a44 <RCCEx_PLL2_Config+0x15c>)
 80069fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069fe:	4a11      	ldr	r2, [pc, #68]	; (8006a44 <RCCEx_PLL2_Config+0x15c>)
 8006a00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006a04:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006a06:	4b0f      	ldr	r3, [pc, #60]	; (8006a44 <RCCEx_PLL2_Config+0x15c>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a0e      	ldr	r2, [pc, #56]	; (8006a44 <RCCEx_PLL2_Config+0x15c>)
 8006a0c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a12:	f7fa fd23 	bl	800145c <HAL_GetTick>
 8006a16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006a18:	e008      	b.n	8006a2c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006a1a:	f7fa fd1f 	bl	800145c <HAL_GetTick>
 8006a1e:	4602      	mov	r2, r0
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	1ad3      	subs	r3, r2, r3
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	d901      	bls.n	8006a2c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	e006      	b.n	8006a3a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006a2c:	4b05      	ldr	r3, [pc, #20]	; (8006a44 <RCCEx_PLL2_Config+0x15c>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d0f0      	beq.n	8006a1a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	58024400 	.word	0x58024400
 8006a48:	ffff0007 	.word	0xffff0007

08006a4c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a56:	2300      	movs	r3, #0
 8006a58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006a5a:	4b53      	ldr	r3, [pc, #332]	; (8006ba8 <RCCEx_PLL3_Config+0x15c>)
 8006a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a5e:	f003 0303 	and.w	r3, r3, #3
 8006a62:	2b03      	cmp	r3, #3
 8006a64:	d101      	bne.n	8006a6a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e099      	b.n	8006b9e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006a6a:	4b4f      	ldr	r3, [pc, #316]	; (8006ba8 <RCCEx_PLL3_Config+0x15c>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a4e      	ldr	r2, [pc, #312]	; (8006ba8 <RCCEx_PLL3_Config+0x15c>)
 8006a70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a76:	f7fa fcf1 	bl	800145c <HAL_GetTick>
 8006a7a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006a7c:	e008      	b.n	8006a90 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006a7e:	f7fa fced 	bl	800145c <HAL_GetTick>
 8006a82:	4602      	mov	r2, r0
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	d901      	bls.n	8006a90 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	e086      	b.n	8006b9e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006a90:	4b45      	ldr	r3, [pc, #276]	; (8006ba8 <RCCEx_PLL3_Config+0x15c>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d1f0      	bne.n	8006a7e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006a9c:	4b42      	ldr	r3, [pc, #264]	; (8006ba8 <RCCEx_PLL3_Config+0x15c>)
 8006a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	051b      	lsls	r3, r3, #20
 8006aaa:	493f      	ldr	r1, [pc, #252]	; (8006ba8 <RCCEx_PLL3_Config+0x15c>)
 8006aac:	4313      	orrs	r3, r2
 8006aae:	628b      	str	r3, [r1, #40]	; 0x28
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	3b01      	subs	r3, #1
 8006ab6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	025b      	lsls	r3, r3, #9
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	431a      	orrs	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	3b01      	subs	r3, #1
 8006acc:	041b      	lsls	r3, r3, #16
 8006ace:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006ad2:	431a      	orrs	r2, r3
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	3b01      	subs	r3, #1
 8006ada:	061b      	lsls	r3, r3, #24
 8006adc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006ae0:	4931      	ldr	r1, [pc, #196]	; (8006ba8 <RCCEx_PLL3_Config+0x15c>)
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006ae6:	4b30      	ldr	r3, [pc, #192]	; (8006ba8 <RCCEx_PLL3_Config+0x15c>)
 8006ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	695b      	ldr	r3, [r3, #20]
 8006af2:	492d      	ldr	r1, [pc, #180]	; (8006ba8 <RCCEx_PLL3_Config+0x15c>)
 8006af4:	4313      	orrs	r3, r2
 8006af6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006af8:	4b2b      	ldr	r3, [pc, #172]	; (8006ba8 <RCCEx_PLL3_Config+0x15c>)
 8006afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006afc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	699b      	ldr	r3, [r3, #24]
 8006b04:	4928      	ldr	r1, [pc, #160]	; (8006ba8 <RCCEx_PLL3_Config+0x15c>)
 8006b06:	4313      	orrs	r3, r2
 8006b08:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006b0a:	4b27      	ldr	r3, [pc, #156]	; (8006ba8 <RCCEx_PLL3_Config+0x15c>)
 8006b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b0e:	4a26      	ldr	r2, [pc, #152]	; (8006ba8 <RCCEx_PLL3_Config+0x15c>)
 8006b10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006b16:	4b24      	ldr	r3, [pc, #144]	; (8006ba8 <RCCEx_PLL3_Config+0x15c>)
 8006b18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b1a:	4b24      	ldr	r3, [pc, #144]	; (8006bac <RCCEx_PLL3_Config+0x160>)
 8006b1c:	4013      	ands	r3, r2
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	69d2      	ldr	r2, [r2, #28]
 8006b22:	00d2      	lsls	r2, r2, #3
 8006b24:	4920      	ldr	r1, [pc, #128]	; (8006ba8 <RCCEx_PLL3_Config+0x15c>)
 8006b26:	4313      	orrs	r3, r2
 8006b28:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006b2a:	4b1f      	ldr	r3, [pc, #124]	; (8006ba8 <RCCEx_PLL3_Config+0x15c>)
 8006b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b2e:	4a1e      	ldr	r2, [pc, #120]	; (8006ba8 <RCCEx_PLL3_Config+0x15c>)
 8006b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d106      	bne.n	8006b4a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006b3c:	4b1a      	ldr	r3, [pc, #104]	; (8006ba8 <RCCEx_PLL3_Config+0x15c>)
 8006b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b40:	4a19      	ldr	r2, [pc, #100]	; (8006ba8 <RCCEx_PLL3_Config+0x15c>)
 8006b42:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006b46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006b48:	e00f      	b.n	8006b6a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d106      	bne.n	8006b5e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006b50:	4b15      	ldr	r3, [pc, #84]	; (8006ba8 <RCCEx_PLL3_Config+0x15c>)
 8006b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b54:	4a14      	ldr	r2, [pc, #80]	; (8006ba8 <RCCEx_PLL3_Config+0x15c>)
 8006b56:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006b5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006b5c:	e005      	b.n	8006b6a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006b5e:	4b12      	ldr	r3, [pc, #72]	; (8006ba8 <RCCEx_PLL3_Config+0x15c>)
 8006b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b62:	4a11      	ldr	r2, [pc, #68]	; (8006ba8 <RCCEx_PLL3_Config+0x15c>)
 8006b64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b68:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006b6a:	4b0f      	ldr	r3, [pc, #60]	; (8006ba8 <RCCEx_PLL3_Config+0x15c>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a0e      	ldr	r2, [pc, #56]	; (8006ba8 <RCCEx_PLL3_Config+0x15c>)
 8006b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b76:	f7fa fc71 	bl	800145c <HAL_GetTick>
 8006b7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006b7c:	e008      	b.n	8006b90 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006b7e:	f7fa fc6d 	bl	800145c <HAL_GetTick>
 8006b82:	4602      	mov	r2, r0
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	1ad3      	subs	r3, r2, r3
 8006b88:	2b02      	cmp	r3, #2
 8006b8a:	d901      	bls.n	8006b90 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006b8c:	2303      	movs	r3, #3
 8006b8e:	e006      	b.n	8006b9e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006b90:	4b05      	ldr	r3, [pc, #20]	; (8006ba8 <RCCEx_PLL3_Config+0x15c>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d0f0      	beq.n	8006b7e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3710      	adds	r7, #16
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	58024400 	.word	0x58024400
 8006bac:	ffff0007 	.word	0xffff0007

08006bb0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d101      	bne.n	8006bc2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e049      	b.n	8006c56 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d106      	bne.n	8006bdc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f7fa f952 	bl	8000e80 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2202      	movs	r2, #2
 8006be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	3304      	adds	r3, #4
 8006bec:	4619      	mov	r1, r3
 8006bee:	4610      	mov	r0, r2
 8006bf0:	f000 fb1e 	bl	8007230 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3708      	adds	r7, #8
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
	...

08006c60 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d104      	bne.n	8006c7a <HAL_TIM_IC_Start+0x1a>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	e023      	b.n	8006cc2 <HAL_TIM_IC_Start+0x62>
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	2b04      	cmp	r3, #4
 8006c7e:	d104      	bne.n	8006c8a <HAL_TIM_IC_Start+0x2a>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	e01b      	b.n	8006cc2 <HAL_TIM_IC_Start+0x62>
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	2b08      	cmp	r3, #8
 8006c8e:	d104      	bne.n	8006c9a <HAL_TIM_IC_Start+0x3a>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	e013      	b.n	8006cc2 <HAL_TIM_IC_Start+0x62>
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	2b0c      	cmp	r3, #12
 8006c9e:	d104      	bne.n	8006caa <HAL_TIM_IC_Start+0x4a>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	e00b      	b.n	8006cc2 <HAL_TIM_IC_Start+0x62>
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	2b10      	cmp	r3, #16
 8006cae:	d104      	bne.n	8006cba <HAL_TIM_IC_Start+0x5a>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	e003      	b.n	8006cc2 <HAL_TIM_IC_Start+0x62>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d104      	bne.n	8006cd4 <HAL_TIM_IC_Start+0x74>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	e013      	b.n	8006cfc <HAL_TIM_IC_Start+0x9c>
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	2b04      	cmp	r3, #4
 8006cd8:	d104      	bne.n	8006ce4 <HAL_TIM_IC_Start+0x84>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	e00b      	b.n	8006cfc <HAL_TIM_IC_Start+0x9c>
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	2b08      	cmp	r3, #8
 8006ce8:	d104      	bne.n	8006cf4 <HAL_TIM_IC_Start+0x94>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	e003      	b.n	8006cfc <HAL_TIM_IC_Start+0x9c>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cfe:	7bfb      	ldrb	r3, [r7, #15]
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d102      	bne.n	8006d0a <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006d04:	7bbb      	ldrb	r3, [r7, #14]
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d001      	beq.n	8006d0e <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e097      	b.n	8006e3e <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d104      	bne.n	8006d1e <HAL_TIM_IC_Start+0xbe>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2202      	movs	r2, #2
 8006d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d1c:	e023      	b.n	8006d66 <HAL_TIM_IC_Start+0x106>
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	2b04      	cmp	r3, #4
 8006d22:	d104      	bne.n	8006d2e <HAL_TIM_IC_Start+0xce>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2202      	movs	r2, #2
 8006d28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d2c:	e01b      	b.n	8006d66 <HAL_TIM_IC_Start+0x106>
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	2b08      	cmp	r3, #8
 8006d32:	d104      	bne.n	8006d3e <HAL_TIM_IC_Start+0xde>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2202      	movs	r2, #2
 8006d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d3c:	e013      	b.n	8006d66 <HAL_TIM_IC_Start+0x106>
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	2b0c      	cmp	r3, #12
 8006d42:	d104      	bne.n	8006d4e <HAL_TIM_IC_Start+0xee>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2202      	movs	r2, #2
 8006d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d4c:	e00b      	b.n	8006d66 <HAL_TIM_IC_Start+0x106>
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	2b10      	cmp	r3, #16
 8006d52:	d104      	bne.n	8006d5e <HAL_TIM_IC_Start+0xfe>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2202      	movs	r2, #2
 8006d58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d5c:	e003      	b.n	8006d66 <HAL_TIM_IC_Start+0x106>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2202      	movs	r2, #2
 8006d62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d104      	bne.n	8006d76 <HAL_TIM_IC_Start+0x116>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2202      	movs	r2, #2
 8006d70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d74:	e013      	b.n	8006d9e <HAL_TIM_IC_Start+0x13e>
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	2b04      	cmp	r3, #4
 8006d7a:	d104      	bne.n	8006d86 <HAL_TIM_IC_Start+0x126>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2202      	movs	r2, #2
 8006d80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d84:	e00b      	b.n	8006d9e <HAL_TIM_IC_Start+0x13e>
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	2b08      	cmp	r3, #8
 8006d8a:	d104      	bne.n	8006d96 <HAL_TIM_IC_Start+0x136>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2202      	movs	r2, #2
 8006d90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006d94:	e003      	b.n	8006d9e <HAL_TIM_IC_Start+0x13e>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2202      	movs	r2, #2
 8006d9a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2201      	movs	r2, #1
 8006da4:	6839      	ldr	r1, [r7, #0]
 8006da6:	4618      	mov	r0, r3
 8006da8:	f000 fc06 	bl	80075b8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a25      	ldr	r2, [pc, #148]	; (8006e48 <HAL_TIM_IC_Start+0x1e8>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d022      	beq.n	8006dfc <HAL_TIM_IC_Start+0x19c>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dbe:	d01d      	beq.n	8006dfc <HAL_TIM_IC_Start+0x19c>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a21      	ldr	r2, [pc, #132]	; (8006e4c <HAL_TIM_IC_Start+0x1ec>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d018      	beq.n	8006dfc <HAL_TIM_IC_Start+0x19c>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a20      	ldr	r2, [pc, #128]	; (8006e50 <HAL_TIM_IC_Start+0x1f0>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d013      	beq.n	8006dfc <HAL_TIM_IC_Start+0x19c>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a1e      	ldr	r2, [pc, #120]	; (8006e54 <HAL_TIM_IC_Start+0x1f4>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d00e      	beq.n	8006dfc <HAL_TIM_IC_Start+0x19c>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a1d      	ldr	r2, [pc, #116]	; (8006e58 <HAL_TIM_IC_Start+0x1f8>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d009      	beq.n	8006dfc <HAL_TIM_IC_Start+0x19c>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a1b      	ldr	r2, [pc, #108]	; (8006e5c <HAL_TIM_IC_Start+0x1fc>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d004      	beq.n	8006dfc <HAL_TIM_IC_Start+0x19c>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a1a      	ldr	r2, [pc, #104]	; (8006e60 <HAL_TIM_IC_Start+0x200>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d115      	bne.n	8006e28 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	689a      	ldr	r2, [r3, #8]
 8006e02:	4b18      	ldr	r3, [pc, #96]	; (8006e64 <HAL_TIM_IC_Start+0x204>)
 8006e04:	4013      	ands	r3, r2
 8006e06:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	2b06      	cmp	r3, #6
 8006e0c:	d015      	beq.n	8006e3a <HAL_TIM_IC_Start+0x1da>
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e14:	d011      	beq.n	8006e3a <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f042 0201 	orr.w	r2, r2, #1
 8006e24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e26:	e008      	b.n	8006e3a <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f042 0201 	orr.w	r2, r2, #1
 8006e36:	601a      	str	r2, [r3, #0]
 8006e38:	e000      	b.n	8006e3c <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e3a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3710      	adds	r7, #16
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	40010000 	.word	0x40010000
 8006e4c:	40000400 	.word	0x40000400
 8006e50:	40000800 	.word	0x40000800
 8006e54:	40000c00 	.word	0x40000c00
 8006e58:	40010400 	.word	0x40010400
 8006e5c:	40001800 	.word	0x40001800
 8006e60:	40014000 	.word	0x40014000
 8006e64:	00010007 	.word	0x00010007

08006e68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	f003 0302 	and.w	r3, r3, #2
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	d122      	bne.n	8006ec4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	f003 0302 	and.w	r3, r3, #2
 8006e88:	2b02      	cmp	r3, #2
 8006e8a:	d11b      	bne.n	8006ec4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f06f 0202 	mvn.w	r2, #2
 8006e94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	699b      	ldr	r3, [r3, #24]
 8006ea2:	f003 0303 	and.w	r3, r3, #3
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d003      	beq.n	8006eb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f7f9 fee8 	bl	8000c80 <HAL_TIM_IC_CaptureCallback>
 8006eb0:	e005      	b.n	8006ebe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 f99d 	bl	80071f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 f9a4 	bl	8007206 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	f003 0304 	and.w	r3, r3, #4
 8006ece:	2b04      	cmp	r3, #4
 8006ed0:	d122      	bne.n	8006f18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	f003 0304 	and.w	r3, r3, #4
 8006edc:	2b04      	cmp	r3, #4
 8006ede:	d11b      	bne.n	8006f18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f06f 0204 	mvn.w	r2, #4
 8006ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2202      	movs	r2, #2
 8006eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	699b      	ldr	r3, [r3, #24]
 8006ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d003      	beq.n	8006f06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f7f9 febe 	bl	8000c80 <HAL_TIM_IC_CaptureCallback>
 8006f04:	e005      	b.n	8006f12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f973 	bl	80071f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 f97a 	bl	8007206 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	f003 0308 	and.w	r3, r3, #8
 8006f22:	2b08      	cmp	r3, #8
 8006f24:	d122      	bne.n	8006f6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	f003 0308 	and.w	r3, r3, #8
 8006f30:	2b08      	cmp	r3, #8
 8006f32:	d11b      	bne.n	8006f6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f06f 0208 	mvn.w	r2, #8
 8006f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2204      	movs	r2, #4
 8006f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	69db      	ldr	r3, [r3, #28]
 8006f4a:	f003 0303 	and.w	r3, r3, #3
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d003      	beq.n	8006f5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f7f9 fe94 	bl	8000c80 <HAL_TIM_IC_CaptureCallback>
 8006f58:	e005      	b.n	8006f66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 f949 	bl	80071f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 f950 	bl	8007206 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	f003 0310 	and.w	r3, r3, #16
 8006f76:	2b10      	cmp	r3, #16
 8006f78:	d122      	bne.n	8006fc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	f003 0310 	and.w	r3, r3, #16
 8006f84:	2b10      	cmp	r3, #16
 8006f86:	d11b      	bne.n	8006fc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f06f 0210 	mvn.w	r2, #16
 8006f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2208      	movs	r2, #8
 8006f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	69db      	ldr	r3, [r3, #28]
 8006f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d003      	beq.n	8006fae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f7f9 fe6a 	bl	8000c80 <HAL_TIM_IC_CaptureCallback>
 8006fac:	e005      	b.n	8006fba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 f91f 	bl	80071f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 f926 	bl	8007206 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	f003 0301 	and.w	r3, r3, #1
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d10e      	bne.n	8006fec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	f003 0301 	and.w	r3, r3, #1
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d107      	bne.n	8006fec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f06f 0201 	mvn.w	r2, #1
 8006fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 f8f9 	bl	80071de <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ff6:	2b80      	cmp	r3, #128	; 0x80
 8006ff8:	d10e      	bne.n	8007018 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007004:	2b80      	cmp	r3, #128	; 0x80
 8007006:	d107      	bne.n	8007018 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 fb8e 	bl	8007734 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	691b      	ldr	r3, [r3, #16]
 800701e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007026:	d10e      	bne.n	8007046 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	68db      	ldr	r3, [r3, #12]
 800702e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007032:	2b80      	cmp	r3, #128	; 0x80
 8007034:	d107      	bne.n	8007046 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800703e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 fb81 	bl	8007748 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007050:	2b40      	cmp	r3, #64	; 0x40
 8007052:	d10e      	bne.n	8007072 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800705e:	2b40      	cmp	r3, #64	; 0x40
 8007060:	d107      	bne.n	8007072 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800706a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 f8d4 	bl	800721a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	691b      	ldr	r3, [r3, #16]
 8007078:	f003 0320 	and.w	r3, r3, #32
 800707c:	2b20      	cmp	r3, #32
 800707e:	d10e      	bne.n	800709e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	f003 0320 	and.w	r3, r3, #32
 800708a:	2b20      	cmp	r3, #32
 800708c:	d107      	bne.n	800709e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f06f 0220 	mvn.w	r2, #32
 8007096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 fb41 	bl	8007720 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800709e:	bf00      	nop
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b086      	sub	sp, #24
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	60f8      	str	r0, [r7, #12]
 80070ae:	60b9      	str	r1, [r7, #8]
 80070b0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070b2:	2300      	movs	r3, #0
 80070b4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d101      	bne.n	80070c4 <HAL_TIM_IC_ConfigChannel+0x1e>
 80070c0:	2302      	movs	r3, #2
 80070c2:	e088      	b.n	80071d6 <HAL_TIM_IC_ConfigChannel+0x130>
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d11b      	bne.n	800710a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6818      	ldr	r0, [r3, #0]
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	6819      	ldr	r1, [r3, #0]
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	685a      	ldr	r2, [r3, #4]
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	f000 f93f 	bl	8007364 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	699a      	ldr	r2, [r3, #24]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f022 020c 	bic.w	r2, r2, #12
 80070f4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	6999      	ldr	r1, [r3, #24]
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	689a      	ldr	r2, [r3, #8]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	430a      	orrs	r2, r1
 8007106:	619a      	str	r2, [r3, #24]
 8007108:	e060      	b.n	80071cc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2b04      	cmp	r3, #4
 800710e:	d11c      	bne.n	800714a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6818      	ldr	r0, [r3, #0]
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	6819      	ldr	r1, [r3, #0]
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	685a      	ldr	r2, [r3, #4]
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	f000 f994 	bl	800744c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	699a      	ldr	r2, [r3, #24]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007132:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6999      	ldr	r1, [r3, #24]
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	021a      	lsls	r2, r3, #8
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	430a      	orrs	r2, r1
 8007146:	619a      	str	r2, [r3, #24]
 8007148:	e040      	b.n	80071cc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2b08      	cmp	r3, #8
 800714e:	d11b      	bne.n	8007188 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6818      	ldr	r0, [r3, #0]
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	6819      	ldr	r1, [r3, #0]
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	685a      	ldr	r2, [r3, #4]
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	f000 f9b1 	bl	80074c6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	69da      	ldr	r2, [r3, #28]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f022 020c 	bic.w	r2, r2, #12
 8007172:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	69d9      	ldr	r1, [r3, #28]
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	689a      	ldr	r2, [r3, #8]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	430a      	orrs	r2, r1
 8007184:	61da      	str	r2, [r3, #28]
 8007186:	e021      	b.n	80071cc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2b0c      	cmp	r3, #12
 800718c:	d11c      	bne.n	80071c8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	6818      	ldr	r0, [r3, #0]
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	6819      	ldr	r1, [r3, #0]
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	685a      	ldr	r2, [r3, #4]
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	f000 f9ce 	bl	800753e <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	69da      	ldr	r2, [r3, #28]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80071b0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	69d9      	ldr	r1, [r3, #28]
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	021a      	lsls	r2, r3, #8
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	430a      	orrs	r2, r1
 80071c4:	61da      	str	r2, [r3, #28]
 80071c6:	e001      	b.n	80071cc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80071d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3718      	adds	r7, #24
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}

080071de <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071de:	b480      	push	{r7}
 80071e0:	b083      	sub	sp, #12
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80071e6:	bf00      	nop
 80071e8:	370c      	adds	r7, #12
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr

080071f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071f2:	b480      	push	{r7}
 80071f4:	b083      	sub	sp, #12
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80071fa:	bf00      	nop
 80071fc:	370c      	adds	r7, #12
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr

08007206 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007206:	b480      	push	{r7}
 8007208:	b083      	sub	sp, #12
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800720e:	bf00      	nop
 8007210:	370c      	adds	r7, #12
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr

0800721a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800721a:	b480      	push	{r7}
 800721c:	b083      	sub	sp, #12
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007222:	bf00      	nop
 8007224:	370c      	adds	r7, #12
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr
	...

08007230 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007230:	b480      	push	{r7}
 8007232:	b085      	sub	sp, #20
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4a40      	ldr	r2, [pc, #256]	; (8007344 <TIM_Base_SetConfig+0x114>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d013      	beq.n	8007270 <TIM_Base_SetConfig+0x40>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800724e:	d00f      	beq.n	8007270 <TIM_Base_SetConfig+0x40>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a3d      	ldr	r2, [pc, #244]	; (8007348 <TIM_Base_SetConfig+0x118>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d00b      	beq.n	8007270 <TIM_Base_SetConfig+0x40>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a3c      	ldr	r2, [pc, #240]	; (800734c <TIM_Base_SetConfig+0x11c>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d007      	beq.n	8007270 <TIM_Base_SetConfig+0x40>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	4a3b      	ldr	r2, [pc, #236]	; (8007350 <TIM_Base_SetConfig+0x120>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d003      	beq.n	8007270 <TIM_Base_SetConfig+0x40>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4a3a      	ldr	r2, [pc, #232]	; (8007354 <TIM_Base_SetConfig+0x124>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d108      	bne.n	8007282 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007276:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	4313      	orrs	r3, r2
 8007280:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4a2f      	ldr	r2, [pc, #188]	; (8007344 <TIM_Base_SetConfig+0x114>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d01f      	beq.n	80072ca <TIM_Base_SetConfig+0x9a>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007290:	d01b      	beq.n	80072ca <TIM_Base_SetConfig+0x9a>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4a2c      	ldr	r2, [pc, #176]	; (8007348 <TIM_Base_SetConfig+0x118>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d017      	beq.n	80072ca <TIM_Base_SetConfig+0x9a>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a2b      	ldr	r2, [pc, #172]	; (800734c <TIM_Base_SetConfig+0x11c>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d013      	beq.n	80072ca <TIM_Base_SetConfig+0x9a>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4a2a      	ldr	r2, [pc, #168]	; (8007350 <TIM_Base_SetConfig+0x120>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d00f      	beq.n	80072ca <TIM_Base_SetConfig+0x9a>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4a29      	ldr	r2, [pc, #164]	; (8007354 <TIM_Base_SetConfig+0x124>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d00b      	beq.n	80072ca <TIM_Base_SetConfig+0x9a>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4a28      	ldr	r2, [pc, #160]	; (8007358 <TIM_Base_SetConfig+0x128>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d007      	beq.n	80072ca <TIM_Base_SetConfig+0x9a>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a27      	ldr	r2, [pc, #156]	; (800735c <TIM_Base_SetConfig+0x12c>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d003      	beq.n	80072ca <TIM_Base_SetConfig+0x9a>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4a26      	ldr	r2, [pc, #152]	; (8007360 <TIM_Base_SetConfig+0x130>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d108      	bne.n	80072dc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	68fa      	ldr	r2, [r7, #12]
 80072d8:	4313      	orrs	r3, r2
 80072da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	695b      	ldr	r3, [r3, #20]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	68fa      	ldr	r2, [r7, #12]
 80072ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	689a      	ldr	r2, [r3, #8]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	4a10      	ldr	r2, [pc, #64]	; (8007344 <TIM_Base_SetConfig+0x114>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d00f      	beq.n	8007328 <TIM_Base_SetConfig+0xf8>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4a12      	ldr	r2, [pc, #72]	; (8007354 <TIM_Base_SetConfig+0x124>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d00b      	beq.n	8007328 <TIM_Base_SetConfig+0xf8>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4a11      	ldr	r2, [pc, #68]	; (8007358 <TIM_Base_SetConfig+0x128>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d007      	beq.n	8007328 <TIM_Base_SetConfig+0xf8>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4a10      	ldr	r2, [pc, #64]	; (800735c <TIM_Base_SetConfig+0x12c>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d003      	beq.n	8007328 <TIM_Base_SetConfig+0xf8>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4a0f      	ldr	r2, [pc, #60]	; (8007360 <TIM_Base_SetConfig+0x130>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d103      	bne.n	8007330 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	691a      	ldr	r2, [r3, #16]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	615a      	str	r2, [r3, #20]
}
 8007336:	bf00      	nop
 8007338:	3714      	adds	r7, #20
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr
 8007342:	bf00      	nop
 8007344:	40010000 	.word	0x40010000
 8007348:	40000400 	.word	0x40000400
 800734c:	40000800 	.word	0x40000800
 8007350:	40000c00 	.word	0x40000c00
 8007354:	40010400 	.word	0x40010400
 8007358:	40014000 	.word	0x40014000
 800735c:	40014400 	.word	0x40014400
 8007360:	40014800 	.word	0x40014800

08007364 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007364:	b480      	push	{r7}
 8007366:	b087      	sub	sp, #28
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	607a      	str	r2, [r7, #4]
 8007370:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6a1b      	ldr	r3, [r3, #32]
 8007376:	f023 0201 	bic.w	r2, r3, #1
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	699b      	ldr	r3, [r3, #24]
 8007382:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6a1b      	ldr	r3, [r3, #32]
 8007388:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	4a28      	ldr	r2, [pc, #160]	; (8007430 <TIM_TI1_SetConfig+0xcc>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d01b      	beq.n	80073ca <TIM_TI1_SetConfig+0x66>
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007398:	d017      	beq.n	80073ca <TIM_TI1_SetConfig+0x66>
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	4a25      	ldr	r2, [pc, #148]	; (8007434 <TIM_TI1_SetConfig+0xd0>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d013      	beq.n	80073ca <TIM_TI1_SetConfig+0x66>
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	4a24      	ldr	r2, [pc, #144]	; (8007438 <TIM_TI1_SetConfig+0xd4>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d00f      	beq.n	80073ca <TIM_TI1_SetConfig+0x66>
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	4a23      	ldr	r2, [pc, #140]	; (800743c <TIM_TI1_SetConfig+0xd8>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d00b      	beq.n	80073ca <TIM_TI1_SetConfig+0x66>
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	4a22      	ldr	r2, [pc, #136]	; (8007440 <TIM_TI1_SetConfig+0xdc>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d007      	beq.n	80073ca <TIM_TI1_SetConfig+0x66>
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	4a21      	ldr	r2, [pc, #132]	; (8007444 <TIM_TI1_SetConfig+0xe0>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d003      	beq.n	80073ca <TIM_TI1_SetConfig+0x66>
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	4a20      	ldr	r2, [pc, #128]	; (8007448 <TIM_TI1_SetConfig+0xe4>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d101      	bne.n	80073ce <TIM_TI1_SetConfig+0x6a>
 80073ca:	2301      	movs	r3, #1
 80073cc:	e000      	b.n	80073d0 <TIM_TI1_SetConfig+0x6c>
 80073ce:	2300      	movs	r3, #0
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d008      	beq.n	80073e6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	f023 0303 	bic.w	r3, r3, #3
 80073da:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80073dc:	697a      	ldr	r2, [r7, #20]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	617b      	str	r3, [r7, #20]
 80073e4:	e003      	b.n	80073ee <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	f043 0301 	orr.w	r3, r3, #1
 80073ec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	011b      	lsls	r3, r3, #4
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	697a      	ldr	r2, [r7, #20]
 80073fe:	4313      	orrs	r3, r2
 8007400:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	f023 030a 	bic.w	r3, r3, #10
 8007408:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	f003 030a 	and.w	r3, r3, #10
 8007410:	693a      	ldr	r2, [r7, #16]
 8007412:	4313      	orrs	r3, r2
 8007414:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	697a      	ldr	r2, [r7, #20]
 800741a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	693a      	ldr	r2, [r7, #16]
 8007420:	621a      	str	r2, [r3, #32]
}
 8007422:	bf00      	nop
 8007424:	371c      	adds	r7, #28
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr
 800742e:	bf00      	nop
 8007430:	40010000 	.word	0x40010000
 8007434:	40000400 	.word	0x40000400
 8007438:	40000800 	.word	0x40000800
 800743c:	40000c00 	.word	0x40000c00
 8007440:	40010400 	.word	0x40010400
 8007444:	40001800 	.word	0x40001800
 8007448:	40014000 	.word	0x40014000

0800744c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800744c:	b480      	push	{r7}
 800744e:	b087      	sub	sp, #28
 8007450:	af00      	add	r7, sp, #0
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	60b9      	str	r1, [r7, #8]
 8007456:	607a      	str	r2, [r7, #4]
 8007458:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	6a1b      	ldr	r3, [r3, #32]
 800745e:	f023 0210 	bic.w	r2, r3, #16
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	699b      	ldr	r3, [r3, #24]
 800746a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6a1b      	ldr	r3, [r3, #32]
 8007470:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007478:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	021b      	lsls	r3, r3, #8
 800747e:	697a      	ldr	r2, [r7, #20]
 8007480:	4313      	orrs	r3, r2
 8007482:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800748a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	031b      	lsls	r3, r3, #12
 8007490:	b29b      	uxth	r3, r3
 8007492:	697a      	ldr	r2, [r7, #20]
 8007494:	4313      	orrs	r3, r2
 8007496:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800749e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	011b      	lsls	r3, r3, #4
 80074a4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80074a8:	693a      	ldr	r2, [r7, #16]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	697a      	ldr	r2, [r7, #20]
 80074b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	693a      	ldr	r2, [r7, #16]
 80074b8:	621a      	str	r2, [r3, #32]
}
 80074ba:	bf00      	nop
 80074bc:	371c      	adds	r7, #28
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr

080074c6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80074c6:	b480      	push	{r7}
 80074c8:	b087      	sub	sp, #28
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	60f8      	str	r0, [r7, #12]
 80074ce:	60b9      	str	r1, [r7, #8]
 80074d0:	607a      	str	r2, [r7, #4]
 80074d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	6a1b      	ldr	r3, [r3, #32]
 80074d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	69db      	ldr	r3, [r3, #28]
 80074e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	6a1b      	ldr	r3, [r3, #32]
 80074ea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	f023 0303 	bic.w	r3, r3, #3
 80074f2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80074f4:	697a      	ldr	r2, [r7, #20]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4313      	orrs	r3, r2
 80074fa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007502:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	011b      	lsls	r3, r3, #4
 8007508:	b2db      	uxtb	r3, r3
 800750a:	697a      	ldr	r2, [r7, #20]
 800750c:	4313      	orrs	r3, r2
 800750e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007516:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	021b      	lsls	r3, r3, #8
 800751c:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007520:	693a      	ldr	r2, [r7, #16]
 8007522:	4313      	orrs	r3, r2
 8007524:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	697a      	ldr	r2, [r7, #20]
 800752a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	693a      	ldr	r2, [r7, #16]
 8007530:	621a      	str	r2, [r3, #32]
}
 8007532:	bf00      	nop
 8007534:	371c      	adds	r7, #28
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr

0800753e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800753e:	b480      	push	{r7}
 8007540:	b087      	sub	sp, #28
 8007542:	af00      	add	r7, sp, #0
 8007544:	60f8      	str	r0, [r7, #12]
 8007546:	60b9      	str	r1, [r7, #8]
 8007548:	607a      	str	r2, [r7, #4]
 800754a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6a1b      	ldr	r3, [r3, #32]
 8007550:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	69db      	ldr	r3, [r3, #28]
 800755c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6a1b      	ldr	r3, [r3, #32]
 8007562:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800756a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	021b      	lsls	r3, r3, #8
 8007570:	697a      	ldr	r2, [r7, #20]
 8007572:	4313      	orrs	r3, r2
 8007574:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800757c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	031b      	lsls	r3, r3, #12
 8007582:	b29b      	uxth	r3, r3
 8007584:	697a      	ldr	r2, [r7, #20]
 8007586:	4313      	orrs	r3, r2
 8007588:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007590:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	031b      	lsls	r3, r3, #12
 8007596:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800759a:	693a      	ldr	r2, [r7, #16]
 800759c:	4313      	orrs	r3, r2
 800759e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	697a      	ldr	r2, [r7, #20]
 80075a4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	693a      	ldr	r2, [r7, #16]
 80075aa:	621a      	str	r2, [r3, #32]
}
 80075ac:	bf00      	nop
 80075ae:	371c      	adds	r7, #28
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b087      	sub	sp, #28
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	f003 031f 	and.w	r3, r3, #31
 80075ca:	2201      	movs	r2, #1
 80075cc:	fa02 f303 	lsl.w	r3, r2, r3
 80075d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6a1a      	ldr	r2, [r3, #32]
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	43db      	mvns	r3, r3
 80075da:	401a      	ands	r2, r3
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6a1a      	ldr	r2, [r3, #32]
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	f003 031f 	and.w	r3, r3, #31
 80075ea:	6879      	ldr	r1, [r7, #4]
 80075ec:	fa01 f303 	lsl.w	r3, r1, r3
 80075f0:	431a      	orrs	r2, r3
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	621a      	str	r2, [r3, #32]
}
 80075f6:	bf00      	nop
 80075f8:	371c      	adds	r7, #28
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr
	...

08007604 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007604:	b480      	push	{r7}
 8007606:	b085      	sub	sp, #20
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007614:	2b01      	cmp	r3, #1
 8007616:	d101      	bne.n	800761c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007618:	2302      	movs	r3, #2
 800761a:	e06d      	b.n	80076f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2202      	movs	r2, #2
 8007628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a30      	ldr	r2, [pc, #192]	; (8007704 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d004      	beq.n	8007650 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a2f      	ldr	r2, [pc, #188]	; (8007708 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d108      	bne.n	8007662 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007656:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	4313      	orrs	r3, r2
 8007660:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007668:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	68fa      	ldr	r2, [r7, #12]
 8007670:	4313      	orrs	r3, r2
 8007672:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	68fa      	ldr	r2, [r7, #12]
 800767a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a20      	ldr	r2, [pc, #128]	; (8007704 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d022      	beq.n	80076cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800768e:	d01d      	beq.n	80076cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a1d      	ldr	r2, [pc, #116]	; (800770c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d018      	beq.n	80076cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a1c      	ldr	r2, [pc, #112]	; (8007710 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d013      	beq.n	80076cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a1a      	ldr	r2, [pc, #104]	; (8007714 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d00e      	beq.n	80076cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a15      	ldr	r2, [pc, #84]	; (8007708 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d009      	beq.n	80076cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a16      	ldr	r2, [pc, #88]	; (8007718 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d004      	beq.n	80076cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a15      	ldr	r2, [pc, #84]	; (800771c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d10c      	bne.n	80076e6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	68ba      	ldr	r2, [r7, #8]
 80076da:	4313      	orrs	r3, r2
 80076dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	68ba      	ldr	r2, [r7, #8]
 80076e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2201      	movs	r2, #1
 80076ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076f6:	2300      	movs	r3, #0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3714      	adds	r7, #20
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr
 8007704:	40010000 	.word	0x40010000
 8007708:	40010400 	.word	0x40010400
 800770c:	40000400 	.word	0x40000400
 8007710:	40000800 	.word	0x40000800
 8007714:	40000c00 	.word	0x40000c00
 8007718:	40001800 	.word	0x40001800
 800771c:	40014000 	.word	0x40014000

08007720 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007728:	bf00      	nop
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800773c:	bf00      	nop
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007750:	bf00      	nop
 8007752:	370c      	adds	r7, #12
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b082      	sub	sp, #8
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d101      	bne.n	800776e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	e042      	b.n	80077f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007774:	2b00      	cmp	r3, #0
 8007776:	d106      	bne.n	8007786 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f7f9 fbfd 	bl	8000f80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2224      	movs	r2, #36	; 0x24
 800778a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f022 0201 	bic.w	r2, r2, #1
 800779c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 f8c2 	bl	8007928 <UART_SetConfig>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d101      	bne.n	80077ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	e022      	b.n	80077f4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d002      	beq.n	80077bc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 fe1e 	bl	80083f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	685a      	ldr	r2, [r3, #4]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80077ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	689a      	ldr	r2, [r3, #8]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80077da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f042 0201 	orr.w	r2, r2, #1
 80077ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 fea5 	bl	800853c <UART_CheckIdleState>
 80077f2:	4603      	mov	r3, r0
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3708      	adds	r7, #8
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b08a      	sub	sp, #40	; 0x28
 8007800:	af02      	add	r7, sp, #8
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	60b9      	str	r1, [r7, #8]
 8007806:	603b      	str	r3, [r7, #0]
 8007808:	4613      	mov	r3, r2
 800780a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007812:	2b20      	cmp	r3, #32
 8007814:	f040 8083 	bne.w	800791e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d002      	beq.n	8007824 <HAL_UART_Transmit+0x28>
 800781e:	88fb      	ldrh	r3, [r7, #6]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d101      	bne.n	8007828 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	e07b      	b.n	8007920 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800782e:	2b01      	cmp	r3, #1
 8007830:	d101      	bne.n	8007836 <HAL_UART_Transmit+0x3a>
 8007832:	2302      	movs	r3, #2
 8007834:	e074      	b.n	8007920 <HAL_UART_Transmit+0x124>
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2201      	movs	r2, #1
 800783a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2200      	movs	r2, #0
 8007842:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2221      	movs	r2, #33	; 0x21
 800784a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800784e:	f7f9 fe05 	bl	800145c <HAL_GetTick>
 8007852:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	88fa      	ldrh	r2, [r7, #6]
 8007858:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	88fa      	ldrh	r2, [r7, #6]
 8007860:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800786c:	d108      	bne.n	8007880 <HAL_UART_Transmit+0x84>
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	691b      	ldr	r3, [r3, #16]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d104      	bne.n	8007880 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007876:	2300      	movs	r3, #0
 8007878:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	61bb      	str	r3, [r7, #24]
 800787e:	e003      	b.n	8007888 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007884:	2300      	movs	r3, #0
 8007886:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2200      	movs	r2, #0
 800788c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007890:	e02c      	b.n	80078ec <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	9300      	str	r3, [sp, #0]
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	2200      	movs	r2, #0
 800789a:	2180      	movs	r1, #128	; 0x80
 800789c:	68f8      	ldr	r0, [r7, #12]
 800789e:	f000 fe98 	bl	80085d2 <UART_WaitOnFlagUntilTimeout>
 80078a2:	4603      	mov	r3, r0
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d001      	beq.n	80078ac <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80078a8:	2303      	movs	r3, #3
 80078aa:	e039      	b.n	8007920 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d10b      	bne.n	80078ca <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80078b2:	69bb      	ldr	r3, [r7, #24]
 80078b4:	881b      	ldrh	r3, [r3, #0]
 80078b6:	461a      	mov	r2, r3
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078c0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	3302      	adds	r3, #2
 80078c6:	61bb      	str	r3, [r7, #24]
 80078c8:	e007      	b.n	80078da <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80078ca:	69fb      	ldr	r3, [r7, #28]
 80078cc:	781a      	ldrb	r2, [r3, #0]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	3301      	adds	r3, #1
 80078d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	3b01      	subs	r3, #1
 80078e4:	b29a      	uxth	r2, r3
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d1cc      	bne.n	8007892 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	9300      	str	r3, [sp, #0]
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	2200      	movs	r2, #0
 8007900:	2140      	movs	r1, #64	; 0x40
 8007902:	68f8      	ldr	r0, [r7, #12]
 8007904:	f000 fe65 	bl	80085d2 <UART_WaitOnFlagUntilTimeout>
 8007908:	4603      	mov	r3, r0
 800790a:	2b00      	cmp	r3, #0
 800790c:	d001      	beq.n	8007912 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800790e:	2303      	movs	r3, #3
 8007910:	e006      	b.n	8007920 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2220      	movs	r2, #32
 8007916:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800791a:	2300      	movs	r3, #0
 800791c:	e000      	b.n	8007920 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800791e:	2302      	movs	r3, #2
  }
}
 8007920:	4618      	mov	r0, r3
 8007922:	3720      	adds	r7, #32
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007928:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800792c:	b092      	sub	sp, #72	; 0x48
 800792e:	af00      	add	r7, sp, #0
 8007930:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007932:	2300      	movs	r3, #0
 8007934:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	689a      	ldr	r2, [r3, #8]
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	691b      	ldr	r3, [r3, #16]
 8007940:	431a      	orrs	r2, r3
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	695b      	ldr	r3, [r3, #20]
 8007946:	431a      	orrs	r2, r3
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	69db      	ldr	r3, [r3, #28]
 800794c:	4313      	orrs	r3, r2
 800794e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	4bbe      	ldr	r3, [pc, #760]	; (8007c50 <UART_SetConfig+0x328>)
 8007958:	4013      	ands	r3, r2
 800795a:	697a      	ldr	r2, [r7, #20]
 800795c:	6812      	ldr	r2, [r2, #0]
 800795e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007960:	430b      	orrs	r3, r1
 8007962:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	68da      	ldr	r2, [r3, #12]
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	430a      	orrs	r2, r1
 8007978:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	699b      	ldr	r3, [r3, #24]
 800797e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4ab3      	ldr	r2, [pc, #716]	; (8007c54 <UART_SetConfig+0x32c>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d004      	beq.n	8007994 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	6a1b      	ldr	r3, [r3, #32]
 800798e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007990:	4313      	orrs	r3, r2
 8007992:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	689a      	ldr	r2, [r3, #8]
 800799a:	4baf      	ldr	r3, [pc, #700]	; (8007c58 <UART_SetConfig+0x330>)
 800799c:	4013      	ands	r3, r2
 800799e:	697a      	ldr	r2, [r7, #20]
 80079a0:	6812      	ldr	r2, [r2, #0]
 80079a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80079a4:	430b      	orrs	r3, r1
 80079a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ae:	f023 010f 	bic.w	r1, r3, #15
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	430a      	orrs	r2, r1
 80079bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4aa6      	ldr	r2, [pc, #664]	; (8007c5c <UART_SetConfig+0x334>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d177      	bne.n	8007ab8 <UART_SetConfig+0x190>
 80079c8:	4ba5      	ldr	r3, [pc, #660]	; (8007c60 <UART_SetConfig+0x338>)
 80079ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079d0:	2b28      	cmp	r3, #40	; 0x28
 80079d2:	d86d      	bhi.n	8007ab0 <UART_SetConfig+0x188>
 80079d4:	a201      	add	r2, pc, #4	; (adr r2, 80079dc <UART_SetConfig+0xb4>)
 80079d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079da:	bf00      	nop
 80079dc:	08007a81 	.word	0x08007a81
 80079e0:	08007ab1 	.word	0x08007ab1
 80079e4:	08007ab1 	.word	0x08007ab1
 80079e8:	08007ab1 	.word	0x08007ab1
 80079ec:	08007ab1 	.word	0x08007ab1
 80079f0:	08007ab1 	.word	0x08007ab1
 80079f4:	08007ab1 	.word	0x08007ab1
 80079f8:	08007ab1 	.word	0x08007ab1
 80079fc:	08007a89 	.word	0x08007a89
 8007a00:	08007ab1 	.word	0x08007ab1
 8007a04:	08007ab1 	.word	0x08007ab1
 8007a08:	08007ab1 	.word	0x08007ab1
 8007a0c:	08007ab1 	.word	0x08007ab1
 8007a10:	08007ab1 	.word	0x08007ab1
 8007a14:	08007ab1 	.word	0x08007ab1
 8007a18:	08007ab1 	.word	0x08007ab1
 8007a1c:	08007a91 	.word	0x08007a91
 8007a20:	08007ab1 	.word	0x08007ab1
 8007a24:	08007ab1 	.word	0x08007ab1
 8007a28:	08007ab1 	.word	0x08007ab1
 8007a2c:	08007ab1 	.word	0x08007ab1
 8007a30:	08007ab1 	.word	0x08007ab1
 8007a34:	08007ab1 	.word	0x08007ab1
 8007a38:	08007ab1 	.word	0x08007ab1
 8007a3c:	08007a99 	.word	0x08007a99
 8007a40:	08007ab1 	.word	0x08007ab1
 8007a44:	08007ab1 	.word	0x08007ab1
 8007a48:	08007ab1 	.word	0x08007ab1
 8007a4c:	08007ab1 	.word	0x08007ab1
 8007a50:	08007ab1 	.word	0x08007ab1
 8007a54:	08007ab1 	.word	0x08007ab1
 8007a58:	08007ab1 	.word	0x08007ab1
 8007a5c:	08007aa1 	.word	0x08007aa1
 8007a60:	08007ab1 	.word	0x08007ab1
 8007a64:	08007ab1 	.word	0x08007ab1
 8007a68:	08007ab1 	.word	0x08007ab1
 8007a6c:	08007ab1 	.word	0x08007ab1
 8007a70:	08007ab1 	.word	0x08007ab1
 8007a74:	08007ab1 	.word	0x08007ab1
 8007a78:	08007ab1 	.word	0x08007ab1
 8007a7c:	08007aa9 	.word	0x08007aa9
 8007a80:	2301      	movs	r3, #1
 8007a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a86:	e222      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007a88:	2304      	movs	r3, #4
 8007a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a8e:	e21e      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007a90:	2308      	movs	r3, #8
 8007a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a96:	e21a      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007a98:	2310      	movs	r3, #16
 8007a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a9e:	e216      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007aa0:	2320      	movs	r3, #32
 8007aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aa6:	e212      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007aa8:	2340      	movs	r3, #64	; 0x40
 8007aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aae:	e20e      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007ab0:	2380      	movs	r3, #128	; 0x80
 8007ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ab6:	e20a      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a69      	ldr	r2, [pc, #420]	; (8007c64 <UART_SetConfig+0x33c>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d130      	bne.n	8007b24 <UART_SetConfig+0x1fc>
 8007ac2:	4b67      	ldr	r3, [pc, #412]	; (8007c60 <UART_SetConfig+0x338>)
 8007ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ac6:	f003 0307 	and.w	r3, r3, #7
 8007aca:	2b05      	cmp	r3, #5
 8007acc:	d826      	bhi.n	8007b1c <UART_SetConfig+0x1f4>
 8007ace:	a201      	add	r2, pc, #4	; (adr r2, 8007ad4 <UART_SetConfig+0x1ac>)
 8007ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ad4:	08007aed 	.word	0x08007aed
 8007ad8:	08007af5 	.word	0x08007af5
 8007adc:	08007afd 	.word	0x08007afd
 8007ae0:	08007b05 	.word	0x08007b05
 8007ae4:	08007b0d 	.word	0x08007b0d
 8007ae8:	08007b15 	.word	0x08007b15
 8007aec:	2300      	movs	r3, #0
 8007aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007af2:	e1ec      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007af4:	2304      	movs	r3, #4
 8007af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007afa:	e1e8      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007afc:	2308      	movs	r3, #8
 8007afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b02:	e1e4      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007b04:	2310      	movs	r3, #16
 8007b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b0a:	e1e0      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007b0c:	2320      	movs	r3, #32
 8007b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b12:	e1dc      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007b14:	2340      	movs	r3, #64	; 0x40
 8007b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b1a:	e1d8      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007b1c:	2380      	movs	r3, #128	; 0x80
 8007b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b22:	e1d4      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a4f      	ldr	r2, [pc, #316]	; (8007c68 <UART_SetConfig+0x340>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d130      	bne.n	8007b90 <UART_SetConfig+0x268>
 8007b2e:	4b4c      	ldr	r3, [pc, #304]	; (8007c60 <UART_SetConfig+0x338>)
 8007b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b32:	f003 0307 	and.w	r3, r3, #7
 8007b36:	2b05      	cmp	r3, #5
 8007b38:	d826      	bhi.n	8007b88 <UART_SetConfig+0x260>
 8007b3a:	a201      	add	r2, pc, #4	; (adr r2, 8007b40 <UART_SetConfig+0x218>)
 8007b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b40:	08007b59 	.word	0x08007b59
 8007b44:	08007b61 	.word	0x08007b61
 8007b48:	08007b69 	.word	0x08007b69
 8007b4c:	08007b71 	.word	0x08007b71
 8007b50:	08007b79 	.word	0x08007b79
 8007b54:	08007b81 	.word	0x08007b81
 8007b58:	2300      	movs	r3, #0
 8007b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b5e:	e1b6      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007b60:	2304      	movs	r3, #4
 8007b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b66:	e1b2      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007b68:	2308      	movs	r3, #8
 8007b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b6e:	e1ae      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007b70:	2310      	movs	r3, #16
 8007b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b76:	e1aa      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007b78:	2320      	movs	r3, #32
 8007b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b7e:	e1a6      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007b80:	2340      	movs	r3, #64	; 0x40
 8007b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b86:	e1a2      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007b88:	2380      	movs	r3, #128	; 0x80
 8007b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b8e:	e19e      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a35      	ldr	r2, [pc, #212]	; (8007c6c <UART_SetConfig+0x344>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d130      	bne.n	8007bfc <UART_SetConfig+0x2d4>
 8007b9a:	4b31      	ldr	r3, [pc, #196]	; (8007c60 <UART_SetConfig+0x338>)
 8007b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b9e:	f003 0307 	and.w	r3, r3, #7
 8007ba2:	2b05      	cmp	r3, #5
 8007ba4:	d826      	bhi.n	8007bf4 <UART_SetConfig+0x2cc>
 8007ba6:	a201      	add	r2, pc, #4	; (adr r2, 8007bac <UART_SetConfig+0x284>)
 8007ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bac:	08007bc5 	.word	0x08007bc5
 8007bb0:	08007bcd 	.word	0x08007bcd
 8007bb4:	08007bd5 	.word	0x08007bd5
 8007bb8:	08007bdd 	.word	0x08007bdd
 8007bbc:	08007be5 	.word	0x08007be5
 8007bc0:	08007bed 	.word	0x08007bed
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bca:	e180      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007bcc:	2304      	movs	r3, #4
 8007bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bd2:	e17c      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007bd4:	2308      	movs	r3, #8
 8007bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bda:	e178      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007bdc:	2310      	movs	r3, #16
 8007bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007be2:	e174      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007be4:	2320      	movs	r3, #32
 8007be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bea:	e170      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007bec:	2340      	movs	r3, #64	; 0x40
 8007bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bf2:	e16c      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007bf4:	2380      	movs	r3, #128	; 0x80
 8007bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bfa:	e168      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a1b      	ldr	r2, [pc, #108]	; (8007c70 <UART_SetConfig+0x348>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d142      	bne.n	8007c8c <UART_SetConfig+0x364>
 8007c06:	4b16      	ldr	r3, [pc, #88]	; (8007c60 <UART_SetConfig+0x338>)
 8007c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c0a:	f003 0307 	and.w	r3, r3, #7
 8007c0e:	2b05      	cmp	r3, #5
 8007c10:	d838      	bhi.n	8007c84 <UART_SetConfig+0x35c>
 8007c12:	a201      	add	r2, pc, #4	; (adr r2, 8007c18 <UART_SetConfig+0x2f0>)
 8007c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c18:	08007c31 	.word	0x08007c31
 8007c1c:	08007c39 	.word	0x08007c39
 8007c20:	08007c41 	.word	0x08007c41
 8007c24:	08007c49 	.word	0x08007c49
 8007c28:	08007c75 	.word	0x08007c75
 8007c2c:	08007c7d 	.word	0x08007c7d
 8007c30:	2300      	movs	r3, #0
 8007c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c36:	e14a      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007c38:	2304      	movs	r3, #4
 8007c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c3e:	e146      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007c40:	2308      	movs	r3, #8
 8007c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c46:	e142      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007c48:	2310      	movs	r3, #16
 8007c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c4e:	e13e      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007c50:	cfff69f3 	.word	0xcfff69f3
 8007c54:	58000c00 	.word	0x58000c00
 8007c58:	11fff4ff 	.word	0x11fff4ff
 8007c5c:	40011000 	.word	0x40011000
 8007c60:	58024400 	.word	0x58024400
 8007c64:	40004400 	.word	0x40004400
 8007c68:	40004800 	.word	0x40004800
 8007c6c:	40004c00 	.word	0x40004c00
 8007c70:	40005000 	.word	0x40005000
 8007c74:	2320      	movs	r3, #32
 8007c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c7a:	e128      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007c7c:	2340      	movs	r3, #64	; 0x40
 8007c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c82:	e124      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007c84:	2380      	movs	r3, #128	; 0x80
 8007c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c8a:	e120      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4acb      	ldr	r2, [pc, #812]	; (8007fc0 <UART_SetConfig+0x698>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d176      	bne.n	8007d84 <UART_SetConfig+0x45c>
 8007c96:	4bcb      	ldr	r3, [pc, #812]	; (8007fc4 <UART_SetConfig+0x69c>)
 8007c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c9e:	2b28      	cmp	r3, #40	; 0x28
 8007ca0:	d86c      	bhi.n	8007d7c <UART_SetConfig+0x454>
 8007ca2:	a201      	add	r2, pc, #4	; (adr r2, 8007ca8 <UART_SetConfig+0x380>)
 8007ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca8:	08007d4d 	.word	0x08007d4d
 8007cac:	08007d7d 	.word	0x08007d7d
 8007cb0:	08007d7d 	.word	0x08007d7d
 8007cb4:	08007d7d 	.word	0x08007d7d
 8007cb8:	08007d7d 	.word	0x08007d7d
 8007cbc:	08007d7d 	.word	0x08007d7d
 8007cc0:	08007d7d 	.word	0x08007d7d
 8007cc4:	08007d7d 	.word	0x08007d7d
 8007cc8:	08007d55 	.word	0x08007d55
 8007ccc:	08007d7d 	.word	0x08007d7d
 8007cd0:	08007d7d 	.word	0x08007d7d
 8007cd4:	08007d7d 	.word	0x08007d7d
 8007cd8:	08007d7d 	.word	0x08007d7d
 8007cdc:	08007d7d 	.word	0x08007d7d
 8007ce0:	08007d7d 	.word	0x08007d7d
 8007ce4:	08007d7d 	.word	0x08007d7d
 8007ce8:	08007d5d 	.word	0x08007d5d
 8007cec:	08007d7d 	.word	0x08007d7d
 8007cf0:	08007d7d 	.word	0x08007d7d
 8007cf4:	08007d7d 	.word	0x08007d7d
 8007cf8:	08007d7d 	.word	0x08007d7d
 8007cfc:	08007d7d 	.word	0x08007d7d
 8007d00:	08007d7d 	.word	0x08007d7d
 8007d04:	08007d7d 	.word	0x08007d7d
 8007d08:	08007d65 	.word	0x08007d65
 8007d0c:	08007d7d 	.word	0x08007d7d
 8007d10:	08007d7d 	.word	0x08007d7d
 8007d14:	08007d7d 	.word	0x08007d7d
 8007d18:	08007d7d 	.word	0x08007d7d
 8007d1c:	08007d7d 	.word	0x08007d7d
 8007d20:	08007d7d 	.word	0x08007d7d
 8007d24:	08007d7d 	.word	0x08007d7d
 8007d28:	08007d6d 	.word	0x08007d6d
 8007d2c:	08007d7d 	.word	0x08007d7d
 8007d30:	08007d7d 	.word	0x08007d7d
 8007d34:	08007d7d 	.word	0x08007d7d
 8007d38:	08007d7d 	.word	0x08007d7d
 8007d3c:	08007d7d 	.word	0x08007d7d
 8007d40:	08007d7d 	.word	0x08007d7d
 8007d44:	08007d7d 	.word	0x08007d7d
 8007d48:	08007d75 	.word	0x08007d75
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d52:	e0bc      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007d54:	2304      	movs	r3, #4
 8007d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d5a:	e0b8      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007d5c:	2308      	movs	r3, #8
 8007d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d62:	e0b4      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007d64:	2310      	movs	r3, #16
 8007d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d6a:	e0b0      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007d6c:	2320      	movs	r3, #32
 8007d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d72:	e0ac      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007d74:	2340      	movs	r3, #64	; 0x40
 8007d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d7a:	e0a8      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007d7c:	2380      	movs	r3, #128	; 0x80
 8007d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d82:	e0a4      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a8f      	ldr	r2, [pc, #572]	; (8007fc8 <UART_SetConfig+0x6a0>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d130      	bne.n	8007df0 <UART_SetConfig+0x4c8>
 8007d8e:	4b8d      	ldr	r3, [pc, #564]	; (8007fc4 <UART_SetConfig+0x69c>)
 8007d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d92:	f003 0307 	and.w	r3, r3, #7
 8007d96:	2b05      	cmp	r3, #5
 8007d98:	d826      	bhi.n	8007de8 <UART_SetConfig+0x4c0>
 8007d9a:	a201      	add	r2, pc, #4	; (adr r2, 8007da0 <UART_SetConfig+0x478>)
 8007d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da0:	08007db9 	.word	0x08007db9
 8007da4:	08007dc1 	.word	0x08007dc1
 8007da8:	08007dc9 	.word	0x08007dc9
 8007dac:	08007dd1 	.word	0x08007dd1
 8007db0:	08007dd9 	.word	0x08007dd9
 8007db4:	08007de1 	.word	0x08007de1
 8007db8:	2300      	movs	r3, #0
 8007dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dbe:	e086      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007dc0:	2304      	movs	r3, #4
 8007dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dc6:	e082      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007dc8:	2308      	movs	r3, #8
 8007dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dce:	e07e      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007dd0:	2310      	movs	r3, #16
 8007dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dd6:	e07a      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007dd8:	2320      	movs	r3, #32
 8007dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dde:	e076      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007de0:	2340      	movs	r3, #64	; 0x40
 8007de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007de6:	e072      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007de8:	2380      	movs	r3, #128	; 0x80
 8007dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dee:	e06e      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a75      	ldr	r2, [pc, #468]	; (8007fcc <UART_SetConfig+0x6a4>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d130      	bne.n	8007e5c <UART_SetConfig+0x534>
 8007dfa:	4b72      	ldr	r3, [pc, #456]	; (8007fc4 <UART_SetConfig+0x69c>)
 8007dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dfe:	f003 0307 	and.w	r3, r3, #7
 8007e02:	2b05      	cmp	r3, #5
 8007e04:	d826      	bhi.n	8007e54 <UART_SetConfig+0x52c>
 8007e06:	a201      	add	r2, pc, #4	; (adr r2, 8007e0c <UART_SetConfig+0x4e4>)
 8007e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e0c:	08007e25 	.word	0x08007e25
 8007e10:	08007e2d 	.word	0x08007e2d
 8007e14:	08007e35 	.word	0x08007e35
 8007e18:	08007e3d 	.word	0x08007e3d
 8007e1c:	08007e45 	.word	0x08007e45
 8007e20:	08007e4d 	.word	0x08007e4d
 8007e24:	2300      	movs	r3, #0
 8007e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e2a:	e050      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007e2c:	2304      	movs	r3, #4
 8007e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e32:	e04c      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007e34:	2308      	movs	r3, #8
 8007e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e3a:	e048      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007e3c:	2310      	movs	r3, #16
 8007e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e42:	e044      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007e44:	2320      	movs	r3, #32
 8007e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e4a:	e040      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007e4c:	2340      	movs	r3, #64	; 0x40
 8007e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e52:	e03c      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007e54:	2380      	movs	r3, #128	; 0x80
 8007e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e5a:	e038      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a5b      	ldr	r2, [pc, #364]	; (8007fd0 <UART_SetConfig+0x6a8>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d130      	bne.n	8007ec8 <UART_SetConfig+0x5a0>
 8007e66:	4b57      	ldr	r3, [pc, #348]	; (8007fc4 <UART_SetConfig+0x69c>)
 8007e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e6a:	f003 0307 	and.w	r3, r3, #7
 8007e6e:	2b05      	cmp	r3, #5
 8007e70:	d826      	bhi.n	8007ec0 <UART_SetConfig+0x598>
 8007e72:	a201      	add	r2, pc, #4	; (adr r2, 8007e78 <UART_SetConfig+0x550>)
 8007e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e78:	08007e91 	.word	0x08007e91
 8007e7c:	08007e99 	.word	0x08007e99
 8007e80:	08007ea1 	.word	0x08007ea1
 8007e84:	08007ea9 	.word	0x08007ea9
 8007e88:	08007eb1 	.word	0x08007eb1
 8007e8c:	08007eb9 	.word	0x08007eb9
 8007e90:	2302      	movs	r3, #2
 8007e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e96:	e01a      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007e98:	2304      	movs	r3, #4
 8007e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e9e:	e016      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007ea0:	2308      	movs	r3, #8
 8007ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ea6:	e012      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007ea8:	2310      	movs	r3, #16
 8007eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007eae:	e00e      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007eb0:	2320      	movs	r3, #32
 8007eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007eb6:	e00a      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007eb8:	2340      	movs	r3, #64	; 0x40
 8007eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ebe:	e006      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007ec0:	2380      	movs	r3, #128	; 0x80
 8007ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ec6:	e002      	b.n	8007ece <UART_SetConfig+0x5a6>
 8007ec8:	2380      	movs	r3, #128	; 0x80
 8007eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a3f      	ldr	r2, [pc, #252]	; (8007fd0 <UART_SetConfig+0x6a8>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	f040 80f8 	bne.w	80080ca <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007eda:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007ede:	2b20      	cmp	r3, #32
 8007ee0:	dc46      	bgt.n	8007f70 <UART_SetConfig+0x648>
 8007ee2:	2b02      	cmp	r3, #2
 8007ee4:	f2c0 8082 	blt.w	8007fec <UART_SetConfig+0x6c4>
 8007ee8:	3b02      	subs	r3, #2
 8007eea:	2b1e      	cmp	r3, #30
 8007eec:	d87e      	bhi.n	8007fec <UART_SetConfig+0x6c4>
 8007eee:	a201      	add	r2, pc, #4	; (adr r2, 8007ef4 <UART_SetConfig+0x5cc>)
 8007ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef4:	08007f77 	.word	0x08007f77
 8007ef8:	08007fed 	.word	0x08007fed
 8007efc:	08007f7f 	.word	0x08007f7f
 8007f00:	08007fed 	.word	0x08007fed
 8007f04:	08007fed 	.word	0x08007fed
 8007f08:	08007fed 	.word	0x08007fed
 8007f0c:	08007f8f 	.word	0x08007f8f
 8007f10:	08007fed 	.word	0x08007fed
 8007f14:	08007fed 	.word	0x08007fed
 8007f18:	08007fed 	.word	0x08007fed
 8007f1c:	08007fed 	.word	0x08007fed
 8007f20:	08007fed 	.word	0x08007fed
 8007f24:	08007fed 	.word	0x08007fed
 8007f28:	08007fed 	.word	0x08007fed
 8007f2c:	08007f9f 	.word	0x08007f9f
 8007f30:	08007fed 	.word	0x08007fed
 8007f34:	08007fed 	.word	0x08007fed
 8007f38:	08007fed 	.word	0x08007fed
 8007f3c:	08007fed 	.word	0x08007fed
 8007f40:	08007fed 	.word	0x08007fed
 8007f44:	08007fed 	.word	0x08007fed
 8007f48:	08007fed 	.word	0x08007fed
 8007f4c:	08007fed 	.word	0x08007fed
 8007f50:	08007fed 	.word	0x08007fed
 8007f54:	08007fed 	.word	0x08007fed
 8007f58:	08007fed 	.word	0x08007fed
 8007f5c:	08007fed 	.word	0x08007fed
 8007f60:	08007fed 	.word	0x08007fed
 8007f64:	08007fed 	.word	0x08007fed
 8007f68:	08007fed 	.word	0x08007fed
 8007f6c:	08007fdf 	.word	0x08007fdf
 8007f70:	2b40      	cmp	r3, #64	; 0x40
 8007f72:	d037      	beq.n	8007fe4 <UART_SetConfig+0x6bc>
 8007f74:	e03a      	b.n	8007fec <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007f76:	f7fe f9f9 	bl	800636c <HAL_RCCEx_GetD3PCLK1Freq>
 8007f7a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007f7c:	e03c      	b.n	8007ff8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7fe fa08 	bl	8006398 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f8c:	e034      	b.n	8007ff8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f8e:	f107 0318 	add.w	r3, r7, #24
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7fe fb54 	bl	8006640 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f9c:	e02c      	b.n	8007ff8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f9e:	4b09      	ldr	r3, [pc, #36]	; (8007fc4 <UART_SetConfig+0x69c>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f003 0320 	and.w	r3, r3, #32
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d016      	beq.n	8007fd8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007faa:	4b06      	ldr	r3, [pc, #24]	; (8007fc4 <UART_SetConfig+0x69c>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	08db      	lsrs	r3, r3, #3
 8007fb0:	f003 0303 	and.w	r3, r3, #3
 8007fb4:	4a07      	ldr	r2, [pc, #28]	; (8007fd4 <UART_SetConfig+0x6ac>)
 8007fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8007fba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007fbc:	e01c      	b.n	8007ff8 <UART_SetConfig+0x6d0>
 8007fbe:	bf00      	nop
 8007fc0:	40011400 	.word	0x40011400
 8007fc4:	58024400 	.word	0x58024400
 8007fc8:	40007800 	.word	0x40007800
 8007fcc:	40007c00 	.word	0x40007c00
 8007fd0:	58000c00 	.word	0x58000c00
 8007fd4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007fd8:	4b9d      	ldr	r3, [pc, #628]	; (8008250 <UART_SetConfig+0x928>)
 8007fda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fdc:	e00c      	b.n	8007ff8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007fde:	4b9d      	ldr	r3, [pc, #628]	; (8008254 <UART_SetConfig+0x92c>)
 8007fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fe2:	e009      	b.n	8007ff8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fe4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fea:	e005      	b.n	8007ff8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007fec:	2300      	movs	r3, #0
 8007fee:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007ff6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	f000 81de 	beq.w	80083bc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008004:	4a94      	ldr	r2, [pc, #592]	; (8008258 <UART_SetConfig+0x930>)
 8008006:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800800a:	461a      	mov	r2, r3
 800800c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800800e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008012:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	685a      	ldr	r2, [r3, #4]
 8008018:	4613      	mov	r3, r2
 800801a:	005b      	lsls	r3, r3, #1
 800801c:	4413      	add	r3, r2
 800801e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008020:	429a      	cmp	r2, r3
 8008022:	d305      	bcc.n	8008030 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800802a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800802c:	429a      	cmp	r2, r3
 800802e:	d903      	bls.n	8008038 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008030:	2301      	movs	r3, #1
 8008032:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008036:	e1c1      	b.n	80083bc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800803a:	2200      	movs	r2, #0
 800803c:	60bb      	str	r3, [r7, #8]
 800803e:	60fa      	str	r2, [r7, #12]
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008044:	4a84      	ldr	r2, [pc, #528]	; (8008258 <UART_SetConfig+0x930>)
 8008046:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800804a:	b29b      	uxth	r3, r3
 800804c:	2200      	movs	r2, #0
 800804e:	603b      	str	r3, [r7, #0]
 8008050:	607a      	str	r2, [r7, #4]
 8008052:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008056:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800805a:	f7f8 f93d 	bl	80002d8 <__aeabi_uldivmod>
 800805e:	4602      	mov	r2, r0
 8008060:	460b      	mov	r3, r1
 8008062:	4610      	mov	r0, r2
 8008064:	4619      	mov	r1, r3
 8008066:	f04f 0200 	mov.w	r2, #0
 800806a:	f04f 0300 	mov.w	r3, #0
 800806e:	020b      	lsls	r3, r1, #8
 8008070:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008074:	0202      	lsls	r2, r0, #8
 8008076:	6979      	ldr	r1, [r7, #20]
 8008078:	6849      	ldr	r1, [r1, #4]
 800807a:	0849      	lsrs	r1, r1, #1
 800807c:	2000      	movs	r0, #0
 800807e:	460c      	mov	r4, r1
 8008080:	4605      	mov	r5, r0
 8008082:	eb12 0804 	adds.w	r8, r2, r4
 8008086:	eb43 0905 	adc.w	r9, r3, r5
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	469a      	mov	sl, r3
 8008092:	4693      	mov	fp, r2
 8008094:	4652      	mov	r2, sl
 8008096:	465b      	mov	r3, fp
 8008098:	4640      	mov	r0, r8
 800809a:	4649      	mov	r1, r9
 800809c:	f7f8 f91c 	bl	80002d8 <__aeabi_uldivmod>
 80080a0:	4602      	mov	r2, r0
 80080a2:	460b      	mov	r3, r1
 80080a4:	4613      	mov	r3, r2
 80080a6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80080a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080ae:	d308      	bcc.n	80080c2 <UART_SetConfig+0x79a>
 80080b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080b6:	d204      	bcs.n	80080c2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080be:	60da      	str	r2, [r3, #12]
 80080c0:	e17c      	b.n	80083bc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80080c8:	e178      	b.n	80083bc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	69db      	ldr	r3, [r3, #28]
 80080ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080d2:	f040 80c5 	bne.w	8008260 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80080d6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80080da:	2b20      	cmp	r3, #32
 80080dc:	dc48      	bgt.n	8008170 <UART_SetConfig+0x848>
 80080de:	2b00      	cmp	r3, #0
 80080e0:	db7b      	blt.n	80081da <UART_SetConfig+0x8b2>
 80080e2:	2b20      	cmp	r3, #32
 80080e4:	d879      	bhi.n	80081da <UART_SetConfig+0x8b2>
 80080e6:	a201      	add	r2, pc, #4	; (adr r2, 80080ec <UART_SetConfig+0x7c4>)
 80080e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ec:	08008177 	.word	0x08008177
 80080f0:	0800817f 	.word	0x0800817f
 80080f4:	080081db 	.word	0x080081db
 80080f8:	080081db 	.word	0x080081db
 80080fc:	08008187 	.word	0x08008187
 8008100:	080081db 	.word	0x080081db
 8008104:	080081db 	.word	0x080081db
 8008108:	080081db 	.word	0x080081db
 800810c:	08008197 	.word	0x08008197
 8008110:	080081db 	.word	0x080081db
 8008114:	080081db 	.word	0x080081db
 8008118:	080081db 	.word	0x080081db
 800811c:	080081db 	.word	0x080081db
 8008120:	080081db 	.word	0x080081db
 8008124:	080081db 	.word	0x080081db
 8008128:	080081db 	.word	0x080081db
 800812c:	080081a7 	.word	0x080081a7
 8008130:	080081db 	.word	0x080081db
 8008134:	080081db 	.word	0x080081db
 8008138:	080081db 	.word	0x080081db
 800813c:	080081db 	.word	0x080081db
 8008140:	080081db 	.word	0x080081db
 8008144:	080081db 	.word	0x080081db
 8008148:	080081db 	.word	0x080081db
 800814c:	080081db 	.word	0x080081db
 8008150:	080081db 	.word	0x080081db
 8008154:	080081db 	.word	0x080081db
 8008158:	080081db 	.word	0x080081db
 800815c:	080081db 	.word	0x080081db
 8008160:	080081db 	.word	0x080081db
 8008164:	080081db 	.word	0x080081db
 8008168:	080081db 	.word	0x080081db
 800816c:	080081cd 	.word	0x080081cd
 8008170:	2b40      	cmp	r3, #64	; 0x40
 8008172:	d02e      	beq.n	80081d2 <UART_SetConfig+0x8aa>
 8008174:	e031      	b.n	80081da <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008176:	f7fd f987 	bl	8005488 <HAL_RCC_GetPCLK1Freq>
 800817a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800817c:	e033      	b.n	80081e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800817e:	f7fd f999 	bl	80054b4 <HAL_RCC_GetPCLK2Freq>
 8008182:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008184:	e02f      	b.n	80081e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008186:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800818a:	4618      	mov	r0, r3
 800818c:	f7fe f904 	bl	8006398 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008192:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008194:	e027      	b.n	80081e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008196:	f107 0318 	add.w	r3, r7, #24
 800819a:	4618      	mov	r0, r3
 800819c:	f7fe fa50 	bl	8006640 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081a4:	e01f      	b.n	80081e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081a6:	4b2d      	ldr	r3, [pc, #180]	; (800825c <UART_SetConfig+0x934>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f003 0320 	and.w	r3, r3, #32
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d009      	beq.n	80081c6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80081b2:	4b2a      	ldr	r3, [pc, #168]	; (800825c <UART_SetConfig+0x934>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	08db      	lsrs	r3, r3, #3
 80081b8:	f003 0303 	and.w	r3, r3, #3
 80081bc:	4a24      	ldr	r2, [pc, #144]	; (8008250 <UART_SetConfig+0x928>)
 80081be:	fa22 f303 	lsr.w	r3, r2, r3
 80081c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80081c4:	e00f      	b.n	80081e6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80081c6:	4b22      	ldr	r3, [pc, #136]	; (8008250 <UART_SetConfig+0x928>)
 80081c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081ca:	e00c      	b.n	80081e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80081cc:	4b21      	ldr	r3, [pc, #132]	; (8008254 <UART_SetConfig+0x92c>)
 80081ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081d0:	e009      	b.n	80081e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081d8:	e005      	b.n	80081e6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80081da:	2300      	movs	r3, #0
 80081dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80081e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80081e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	f000 80e7 	beq.w	80083bc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f2:	4a19      	ldr	r2, [pc, #100]	; (8008258 <UART_SetConfig+0x930>)
 80081f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081f8:	461a      	mov	r2, r3
 80081fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008200:	005a      	lsls	r2, r3, #1
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	085b      	lsrs	r3, r3, #1
 8008208:	441a      	add	r2, r3
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008212:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008216:	2b0f      	cmp	r3, #15
 8008218:	d916      	bls.n	8008248 <UART_SetConfig+0x920>
 800821a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800821c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008220:	d212      	bcs.n	8008248 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008224:	b29b      	uxth	r3, r3
 8008226:	f023 030f 	bic.w	r3, r3, #15
 800822a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800822c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800822e:	085b      	lsrs	r3, r3, #1
 8008230:	b29b      	uxth	r3, r3
 8008232:	f003 0307 	and.w	r3, r3, #7
 8008236:	b29a      	uxth	r2, r3
 8008238:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800823a:	4313      	orrs	r3, r2
 800823c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008244:	60da      	str	r2, [r3, #12]
 8008246:	e0b9      	b.n	80083bc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008248:	2301      	movs	r3, #1
 800824a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800824e:	e0b5      	b.n	80083bc <UART_SetConfig+0xa94>
 8008250:	03d09000 	.word	0x03d09000
 8008254:	003d0900 	.word	0x003d0900
 8008258:	08009004 	.word	0x08009004
 800825c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008260:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008264:	2b20      	cmp	r3, #32
 8008266:	dc49      	bgt.n	80082fc <UART_SetConfig+0x9d4>
 8008268:	2b00      	cmp	r3, #0
 800826a:	db7c      	blt.n	8008366 <UART_SetConfig+0xa3e>
 800826c:	2b20      	cmp	r3, #32
 800826e:	d87a      	bhi.n	8008366 <UART_SetConfig+0xa3e>
 8008270:	a201      	add	r2, pc, #4	; (adr r2, 8008278 <UART_SetConfig+0x950>)
 8008272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008276:	bf00      	nop
 8008278:	08008303 	.word	0x08008303
 800827c:	0800830b 	.word	0x0800830b
 8008280:	08008367 	.word	0x08008367
 8008284:	08008367 	.word	0x08008367
 8008288:	08008313 	.word	0x08008313
 800828c:	08008367 	.word	0x08008367
 8008290:	08008367 	.word	0x08008367
 8008294:	08008367 	.word	0x08008367
 8008298:	08008323 	.word	0x08008323
 800829c:	08008367 	.word	0x08008367
 80082a0:	08008367 	.word	0x08008367
 80082a4:	08008367 	.word	0x08008367
 80082a8:	08008367 	.word	0x08008367
 80082ac:	08008367 	.word	0x08008367
 80082b0:	08008367 	.word	0x08008367
 80082b4:	08008367 	.word	0x08008367
 80082b8:	08008333 	.word	0x08008333
 80082bc:	08008367 	.word	0x08008367
 80082c0:	08008367 	.word	0x08008367
 80082c4:	08008367 	.word	0x08008367
 80082c8:	08008367 	.word	0x08008367
 80082cc:	08008367 	.word	0x08008367
 80082d0:	08008367 	.word	0x08008367
 80082d4:	08008367 	.word	0x08008367
 80082d8:	08008367 	.word	0x08008367
 80082dc:	08008367 	.word	0x08008367
 80082e0:	08008367 	.word	0x08008367
 80082e4:	08008367 	.word	0x08008367
 80082e8:	08008367 	.word	0x08008367
 80082ec:	08008367 	.word	0x08008367
 80082f0:	08008367 	.word	0x08008367
 80082f4:	08008367 	.word	0x08008367
 80082f8:	08008359 	.word	0x08008359
 80082fc:	2b40      	cmp	r3, #64	; 0x40
 80082fe:	d02e      	beq.n	800835e <UART_SetConfig+0xa36>
 8008300:	e031      	b.n	8008366 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008302:	f7fd f8c1 	bl	8005488 <HAL_RCC_GetPCLK1Freq>
 8008306:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008308:	e033      	b.n	8008372 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800830a:	f7fd f8d3 	bl	80054b4 <HAL_RCC_GetPCLK2Freq>
 800830e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008310:	e02f      	b.n	8008372 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008316:	4618      	mov	r0, r3
 8008318:	f7fe f83e 	bl	8006398 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800831c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800831e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008320:	e027      	b.n	8008372 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008322:	f107 0318 	add.w	r3, r7, #24
 8008326:	4618      	mov	r0, r3
 8008328:	f7fe f98a 	bl	8006640 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008330:	e01f      	b.n	8008372 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008332:	4b2d      	ldr	r3, [pc, #180]	; (80083e8 <UART_SetConfig+0xac0>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f003 0320 	and.w	r3, r3, #32
 800833a:	2b00      	cmp	r3, #0
 800833c:	d009      	beq.n	8008352 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800833e:	4b2a      	ldr	r3, [pc, #168]	; (80083e8 <UART_SetConfig+0xac0>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	08db      	lsrs	r3, r3, #3
 8008344:	f003 0303 	and.w	r3, r3, #3
 8008348:	4a28      	ldr	r2, [pc, #160]	; (80083ec <UART_SetConfig+0xac4>)
 800834a:	fa22 f303 	lsr.w	r3, r2, r3
 800834e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008350:	e00f      	b.n	8008372 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008352:	4b26      	ldr	r3, [pc, #152]	; (80083ec <UART_SetConfig+0xac4>)
 8008354:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008356:	e00c      	b.n	8008372 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008358:	4b25      	ldr	r3, [pc, #148]	; (80083f0 <UART_SetConfig+0xac8>)
 800835a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800835c:	e009      	b.n	8008372 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800835e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008362:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008364:	e005      	b.n	8008372 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008366:	2300      	movs	r3, #0
 8008368:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008370:	bf00      	nop
    }

    if (pclk != 0U)
 8008372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008374:	2b00      	cmp	r3, #0
 8008376:	d021      	beq.n	80083bc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800837c:	4a1d      	ldr	r2, [pc, #116]	; (80083f4 <UART_SetConfig+0xacc>)
 800837e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008382:	461a      	mov	r2, r3
 8008384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008386:	fbb3 f2f2 	udiv	r2, r3, r2
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	085b      	lsrs	r3, r3, #1
 8008390:	441a      	add	r2, r3
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	fbb2 f3f3 	udiv	r3, r2, r3
 800839a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800839c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800839e:	2b0f      	cmp	r3, #15
 80083a0:	d909      	bls.n	80083b6 <UART_SetConfig+0xa8e>
 80083a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083a8:	d205      	bcs.n	80083b6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80083aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ac:	b29a      	uxth	r2, r3
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	60da      	str	r2, [r3, #12]
 80083b4:	e002      	b.n	80083bc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80083b6:	2301      	movs	r3, #1
 80083b8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	2201      	movs	r2, #1
 80083c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	2201      	movs	r2, #1
 80083c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	2200      	movs	r2, #0
 80083d0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	2200      	movs	r2, #0
 80083d6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80083d8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3748      	adds	r7, #72	; 0x48
 80083e0:	46bd      	mov	sp, r7
 80083e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083e6:	bf00      	nop
 80083e8:	58024400 	.word	0x58024400
 80083ec:	03d09000 	.word	0x03d09000
 80083f0:	003d0900 	.word	0x003d0900
 80083f4:	08009004 	.word	0x08009004

080083f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b083      	sub	sp, #12
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008404:	f003 0301 	and.w	r3, r3, #1
 8008408:	2b00      	cmp	r3, #0
 800840a:	d00a      	beq.n	8008422 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	430a      	orrs	r2, r1
 8008420:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008426:	f003 0302 	and.w	r3, r3, #2
 800842a:	2b00      	cmp	r3, #0
 800842c:	d00a      	beq.n	8008444 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	430a      	orrs	r2, r1
 8008442:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008448:	f003 0304 	and.w	r3, r3, #4
 800844c:	2b00      	cmp	r3, #0
 800844e:	d00a      	beq.n	8008466 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	430a      	orrs	r2, r1
 8008464:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800846a:	f003 0308 	and.w	r3, r3, #8
 800846e:	2b00      	cmp	r3, #0
 8008470:	d00a      	beq.n	8008488 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	430a      	orrs	r2, r1
 8008486:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800848c:	f003 0310 	and.w	r3, r3, #16
 8008490:	2b00      	cmp	r3, #0
 8008492:	d00a      	beq.n	80084aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	430a      	orrs	r2, r1
 80084a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ae:	f003 0320 	and.w	r3, r3, #32
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d00a      	beq.n	80084cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	430a      	orrs	r2, r1
 80084ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d01a      	beq.n	800850e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	430a      	orrs	r2, r1
 80084ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084f6:	d10a      	bne.n	800850e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	430a      	orrs	r2, r1
 800850c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00a      	beq.n	8008530 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	430a      	orrs	r2, r1
 800852e:	605a      	str	r2, [r3, #4]
  }
}
 8008530:	bf00      	nop
 8008532:	370c      	adds	r7, #12
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr

0800853c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b086      	sub	sp, #24
 8008540:	af02      	add	r7, sp, #8
 8008542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800854c:	f7f8 ff86 	bl	800145c <HAL_GetTick>
 8008550:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f003 0308 	and.w	r3, r3, #8
 800855c:	2b08      	cmp	r3, #8
 800855e:	d10e      	bne.n	800857e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008560:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008564:	9300      	str	r3, [sp, #0]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2200      	movs	r2, #0
 800856a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 f82f 	bl	80085d2 <UART_WaitOnFlagUntilTimeout>
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	d001      	beq.n	800857e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800857a:	2303      	movs	r3, #3
 800857c:	e025      	b.n	80085ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f003 0304 	and.w	r3, r3, #4
 8008588:	2b04      	cmp	r3, #4
 800858a:	d10e      	bne.n	80085aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800858c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008590:	9300      	str	r3, [sp, #0]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2200      	movs	r2, #0
 8008596:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 f819 	bl	80085d2 <UART_WaitOnFlagUntilTimeout>
 80085a0:	4603      	mov	r3, r0
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d001      	beq.n	80085aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085a6:	2303      	movs	r3, #3
 80085a8:	e00f      	b.n	80085ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2220      	movs	r2, #32
 80085ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2220      	movs	r2, #32
 80085b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3710      	adds	r7, #16
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}

080085d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80085d2:	b580      	push	{r7, lr}
 80085d4:	b09c      	sub	sp, #112	; 0x70
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	60f8      	str	r0, [r7, #12]
 80085da:	60b9      	str	r1, [r7, #8]
 80085dc:	603b      	str	r3, [r7, #0]
 80085de:	4613      	mov	r3, r2
 80085e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085e2:	e0a9      	b.n	8008738 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ea:	f000 80a5 	beq.w	8008738 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085ee:	f7f8 ff35 	bl	800145c <HAL_GetTick>
 80085f2:	4602      	mov	r2, r0
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	1ad3      	subs	r3, r2, r3
 80085f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d302      	bcc.n	8008604 <UART_WaitOnFlagUntilTimeout+0x32>
 80085fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008600:	2b00      	cmp	r3, #0
 8008602:	d140      	bne.n	8008686 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800860a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800860c:	e853 3f00 	ldrex	r3, [r3]
 8008610:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008614:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008618:	667b      	str	r3, [r7, #100]	; 0x64
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	461a      	mov	r2, r3
 8008620:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008622:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008624:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008626:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008628:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800862a:	e841 2300 	strex	r3, r2, [r1]
 800862e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008630:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008632:	2b00      	cmp	r3, #0
 8008634:	d1e6      	bne.n	8008604 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	3308      	adds	r3, #8
 800863c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800863e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008640:	e853 3f00 	ldrex	r3, [r3]
 8008644:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008648:	f023 0301 	bic.w	r3, r3, #1
 800864c:	663b      	str	r3, [r7, #96]	; 0x60
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	3308      	adds	r3, #8
 8008654:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008656:	64ba      	str	r2, [r7, #72]	; 0x48
 8008658:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800865a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800865c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800865e:	e841 2300 	strex	r3, r2, [r1]
 8008662:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008666:	2b00      	cmp	r3, #0
 8008668:	d1e5      	bne.n	8008636 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2220      	movs	r2, #32
 800866e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2220      	movs	r2, #32
 8008676:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2200      	movs	r2, #0
 800867e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008682:	2303      	movs	r3, #3
 8008684:	e069      	b.n	800875a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f003 0304 	and.w	r3, r3, #4
 8008690:	2b00      	cmp	r3, #0
 8008692:	d051      	beq.n	8008738 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	69db      	ldr	r3, [r3, #28]
 800869a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800869e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086a2:	d149      	bne.n	8008738 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80086ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b6:	e853 3f00 	ldrex	r3, [r3]
 80086ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80086c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	461a      	mov	r2, r3
 80086ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086cc:	637b      	str	r3, [r7, #52]	; 0x34
 80086ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80086d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086d4:	e841 2300 	strex	r3, r2, [r1]
 80086d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80086da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d1e6      	bne.n	80086ae <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	3308      	adds	r3, #8
 80086e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	e853 3f00 	ldrex	r3, [r3]
 80086ee:	613b      	str	r3, [r7, #16]
   return(result);
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	f023 0301 	bic.w	r3, r3, #1
 80086f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	3308      	adds	r3, #8
 80086fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008700:	623a      	str	r2, [r7, #32]
 8008702:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008704:	69f9      	ldr	r1, [r7, #28]
 8008706:	6a3a      	ldr	r2, [r7, #32]
 8008708:	e841 2300 	strex	r3, r2, [r1]
 800870c:	61bb      	str	r3, [r7, #24]
   return(result);
 800870e:	69bb      	ldr	r3, [r7, #24]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d1e5      	bne.n	80086e0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2220      	movs	r2, #32
 8008718:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2220      	movs	r2, #32
 8008720:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2220      	movs	r2, #32
 8008728:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2200      	movs	r2, #0
 8008730:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008734:	2303      	movs	r3, #3
 8008736:	e010      	b.n	800875a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	69da      	ldr	r2, [r3, #28]
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	4013      	ands	r3, r2
 8008742:	68ba      	ldr	r2, [r7, #8]
 8008744:	429a      	cmp	r2, r3
 8008746:	bf0c      	ite	eq
 8008748:	2301      	moveq	r3, #1
 800874a:	2300      	movne	r3, #0
 800874c:	b2db      	uxtb	r3, r3
 800874e:	461a      	mov	r2, r3
 8008750:	79fb      	ldrb	r3, [r7, #7]
 8008752:	429a      	cmp	r2, r3
 8008754:	f43f af46 	beq.w	80085e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008758:	2300      	movs	r3, #0
}
 800875a:	4618      	mov	r0, r3
 800875c:	3770      	adds	r7, #112	; 0x70
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008762:	b480      	push	{r7}
 8008764:	b085      	sub	sp, #20
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008770:	2b01      	cmp	r3, #1
 8008772:	d101      	bne.n	8008778 <HAL_UARTEx_DisableFifoMode+0x16>
 8008774:	2302      	movs	r3, #2
 8008776:	e027      	b.n	80087c8 <HAL_UARTEx_DisableFifoMode+0x66>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2201      	movs	r2, #1
 800877c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2224      	movs	r2, #36	; 0x24
 8008784:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f022 0201 	bic.w	r2, r2, #1
 800879e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80087a6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2200      	movs	r2, #0
 80087ac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	68fa      	ldr	r2, [r7, #12]
 80087b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2220      	movs	r2, #32
 80087ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80087c6:	2300      	movs	r3, #0
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3714      	adds	r7, #20
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr

080087d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d101      	bne.n	80087ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80087e8:	2302      	movs	r3, #2
 80087ea:	e02d      	b.n	8008848 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2201      	movs	r2, #1
 80087f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2224      	movs	r2, #36	; 0x24
 80087f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f022 0201 	bic.w	r2, r2, #1
 8008812:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	683a      	ldr	r2, [r7, #0]
 8008824:	430a      	orrs	r2, r1
 8008826:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f000 f84f 	bl	80088cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	68fa      	ldr	r2, [r7, #12]
 8008834:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2220      	movs	r2, #32
 800883a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2200      	movs	r2, #0
 8008842:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008846:	2300      	movs	r3, #0
}
 8008848:	4618      	mov	r0, r3
 800884a:	3710      	adds	r7, #16
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008860:	2b01      	cmp	r3, #1
 8008862:	d101      	bne.n	8008868 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008864:	2302      	movs	r3, #2
 8008866:	e02d      	b.n	80088c4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2201      	movs	r2, #1
 800886c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2224      	movs	r2, #36	; 0x24
 8008874:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	681a      	ldr	r2, [r3, #0]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f022 0201 	bic.w	r2, r2, #1
 800888e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	689b      	ldr	r3, [r3, #8]
 8008896:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	683a      	ldr	r2, [r7, #0]
 80088a0:	430a      	orrs	r2, r1
 80088a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 f811 	bl	80088cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	68fa      	ldr	r2, [r7, #12]
 80088b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2220      	movs	r2, #32
 80088b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2200      	movs	r2, #0
 80088be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3710      	adds	r7, #16
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b085      	sub	sp, #20
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d108      	bne.n	80088ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2201      	movs	r2, #1
 80088e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2201      	movs	r2, #1
 80088e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80088ec:	e031      	b.n	8008952 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80088ee:	2310      	movs	r3, #16
 80088f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80088f2:	2310      	movs	r3, #16
 80088f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	689b      	ldr	r3, [r3, #8]
 80088fc:	0e5b      	lsrs	r3, r3, #25
 80088fe:	b2db      	uxtb	r3, r3
 8008900:	f003 0307 	and.w	r3, r3, #7
 8008904:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	0f5b      	lsrs	r3, r3, #29
 800890e:	b2db      	uxtb	r3, r3
 8008910:	f003 0307 	and.w	r3, r3, #7
 8008914:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008916:	7bbb      	ldrb	r3, [r7, #14]
 8008918:	7b3a      	ldrb	r2, [r7, #12]
 800891a:	4911      	ldr	r1, [pc, #68]	; (8008960 <UARTEx_SetNbDataToProcess+0x94>)
 800891c:	5c8a      	ldrb	r2, [r1, r2]
 800891e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008922:	7b3a      	ldrb	r2, [r7, #12]
 8008924:	490f      	ldr	r1, [pc, #60]	; (8008964 <UARTEx_SetNbDataToProcess+0x98>)
 8008926:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008928:	fb93 f3f2 	sdiv	r3, r3, r2
 800892c:	b29a      	uxth	r2, r3
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008934:	7bfb      	ldrb	r3, [r7, #15]
 8008936:	7b7a      	ldrb	r2, [r7, #13]
 8008938:	4909      	ldr	r1, [pc, #36]	; (8008960 <UARTEx_SetNbDataToProcess+0x94>)
 800893a:	5c8a      	ldrb	r2, [r1, r2]
 800893c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008940:	7b7a      	ldrb	r2, [r7, #13]
 8008942:	4908      	ldr	r1, [pc, #32]	; (8008964 <UARTEx_SetNbDataToProcess+0x98>)
 8008944:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008946:	fb93 f3f2 	sdiv	r3, r3, r2
 800894a:	b29a      	uxth	r2, r3
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008952:	bf00      	nop
 8008954:	3714      	adds	r7, #20
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr
 800895e:	bf00      	nop
 8008960:	0800901c 	.word	0x0800901c
 8008964:	08009024 	.word	0x08009024

08008968 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008968:	b084      	sub	sp, #16
 800896a:	b580      	push	{r7, lr}
 800896c:	b084      	sub	sp, #16
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
 8008972:	f107 001c 	add.w	r0, r7, #28
 8008976:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800897a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897c:	2b01      	cmp	r3, #1
 800897e:	d120      	bne.n	80089c2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008984:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	68da      	ldr	r2, [r3, #12]
 8008990:	4b2a      	ldr	r3, [pc, #168]	; (8008a3c <USB_CoreInit+0xd4>)
 8008992:	4013      	ands	r3, r2
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80089a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d105      	bne.n	80089b6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	68db      	ldr	r3, [r3, #12]
 80089ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 faac 	bl	8008f14 <USB_CoreReset>
 80089bc:	4603      	mov	r3, r0
 80089be:	73fb      	strb	r3, [r7, #15]
 80089c0:	e01a      	b.n	80089f8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	68db      	ldr	r3, [r3, #12]
 80089c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 faa0 	bl	8008f14 <USB_CoreReset>
 80089d4:	4603      	mov	r3, r0
 80089d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80089d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d106      	bne.n	80089ec <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	639a      	str	r2, [r3, #56]	; 0x38
 80089ea:	e005      	b.n	80089f8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80089f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d116      	bne.n	8008a2c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a02:	b29a      	uxth	r2, r3
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008a0c:	4b0c      	ldr	r3, [pc, #48]	; (8008a40 <USB_CoreInit+0xd8>)
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	f043 0206 	orr.w	r2, r3, #6
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	689b      	ldr	r3, [r3, #8]
 8008a24:	f043 0220 	orr.w	r2, r3, #32
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3710      	adds	r7, #16
 8008a32:	46bd      	mov	sp, r7
 8008a34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a38:	b004      	add	sp, #16
 8008a3a:	4770      	bx	lr
 8008a3c:	ffbdffbf 	.word	0xffbdffbf
 8008a40:	03ee0000 	.word	0x03ee0000

08008a44 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b083      	sub	sp, #12
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	f023 0201 	bic.w	r2, r3, #1
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008a58:	2300      	movs	r3, #0
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	370c      	adds	r7, #12
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr

08008a66 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008a66:	b580      	push	{r7, lr}
 8008a68:	b084      	sub	sp, #16
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
 8008a6e:	460b      	mov	r3, r1
 8008a70:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008a72:	2300      	movs	r3, #0
 8008a74:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	68db      	ldr	r3, [r3, #12]
 8008a7a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008a82:	78fb      	ldrb	r3, [r7, #3]
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d115      	bne.n	8008ab4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	68db      	ldr	r3, [r3, #12]
 8008a8c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008a94:	2001      	movs	r0, #1
 8008a96:	f7f8 fced 	bl	8001474 <HAL_Delay>
      ms++;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 fa29 	bl	8008ef8 <USB_GetMode>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d01e      	beq.n	8008aea <USB_SetCurrentMode+0x84>
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2b31      	cmp	r3, #49	; 0x31
 8008ab0:	d9f0      	bls.n	8008a94 <USB_SetCurrentMode+0x2e>
 8008ab2:	e01a      	b.n	8008aea <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008ab4:	78fb      	ldrb	r3, [r7, #3]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d115      	bne.n	8008ae6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	68db      	ldr	r3, [r3, #12]
 8008abe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008ac6:	2001      	movs	r0, #1
 8008ac8:	f7f8 fcd4 	bl	8001474 <HAL_Delay>
      ms++;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	3301      	adds	r3, #1
 8008ad0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 fa10 	bl	8008ef8 <USB_GetMode>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d005      	beq.n	8008aea <USB_SetCurrentMode+0x84>
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2b31      	cmp	r3, #49	; 0x31
 8008ae2:	d9f0      	bls.n	8008ac6 <USB_SetCurrentMode+0x60>
 8008ae4:	e001      	b.n	8008aea <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e005      	b.n	8008af6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2b32      	cmp	r3, #50	; 0x32
 8008aee:	d101      	bne.n	8008af4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008af0:	2301      	movs	r3, #1
 8008af2:	e000      	b.n	8008af6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008af4:	2300      	movs	r3, #0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3710      	adds	r7, #16
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
	...

08008b00 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b00:	b084      	sub	sp, #16
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b086      	sub	sp, #24
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
 8008b0a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008b0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008b12:	2300      	movs	r3, #0
 8008b14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	613b      	str	r3, [r7, #16]
 8008b1e:	e009      	b.n	8008b34 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	3340      	adds	r3, #64	; 0x40
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	4413      	add	r3, r2
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	3301      	adds	r3, #1
 8008b32:	613b      	str	r3, [r7, #16]
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	2b0e      	cmp	r3, #14
 8008b38:	d9f2      	bls.n	8008b20 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008b3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d11c      	bne.n	8008b7a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	68fa      	ldr	r2, [r7, #12]
 8008b4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b4e:	f043 0302 	orr.w	r3, r3, #2
 8008b52:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b58:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	601a      	str	r2, [r3, #0]
 8008b78:	e005      	b.n	8008b86 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b7e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	2300      	movs	r3, #0
 8008b90:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b98:	4619      	mov	r1, r3
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	680b      	ldr	r3, [r1, #0]
 8008ba4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d10c      	bne.n	8008bc6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d104      	bne.n	8008bbc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008bb2:	2100      	movs	r1, #0
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 f965 	bl	8008e84 <USB_SetDevSpeed>
 8008bba:	e008      	b.n	8008bce <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008bbc:	2101      	movs	r1, #1
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 f960 	bl	8008e84 <USB_SetDevSpeed>
 8008bc4:	e003      	b.n	8008bce <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008bc6:	2103      	movs	r1, #3
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 f95b 	bl	8008e84 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008bce:	2110      	movs	r1, #16
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 f8f3 	bl	8008dbc <USB_FlushTxFifo>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d001      	beq.n	8008be0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008bdc:	2301      	movs	r3, #1
 8008bde:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f000 f91f 	bl	8008e24 <USB_FlushRxFifo>
 8008be6:	4603      	mov	r3, r0
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d001      	beq.n	8008bf0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008bec:	2301      	movs	r3, #1
 8008bee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c02:	461a      	mov	r2, r3
 8008c04:	2300      	movs	r3, #0
 8008c06:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c0e:	461a      	mov	r2, r3
 8008c10:	2300      	movs	r3, #0
 8008c12:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c14:	2300      	movs	r3, #0
 8008c16:	613b      	str	r3, [r7, #16]
 8008c18:	e043      	b.n	8008ca2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	015a      	lsls	r2, r3, #5
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	4413      	add	r3, r2
 8008c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c30:	d118      	bne.n	8008c64 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d10a      	bne.n	8008c4e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	015a      	lsls	r2, r3, #5
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	4413      	add	r3, r2
 8008c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c44:	461a      	mov	r2, r3
 8008c46:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008c4a:	6013      	str	r3, [r2, #0]
 8008c4c:	e013      	b.n	8008c76 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	015a      	lsls	r2, r3, #5
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	4413      	add	r3, r2
 8008c56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008c60:	6013      	str	r3, [r2, #0]
 8008c62:	e008      	b.n	8008c76 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	015a      	lsls	r2, r3, #5
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	4413      	add	r3, r2
 8008c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c70:	461a      	mov	r2, r3
 8008c72:	2300      	movs	r3, #0
 8008c74:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	015a      	lsls	r2, r3, #5
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	4413      	add	r3, r2
 8008c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c82:	461a      	mov	r2, r3
 8008c84:	2300      	movs	r3, #0
 8008c86:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	015a      	lsls	r2, r3, #5
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	4413      	add	r3, r2
 8008c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c94:	461a      	mov	r2, r3
 8008c96:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008c9a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	613b      	str	r3, [r7, #16]
 8008ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca4:	693a      	ldr	r2, [r7, #16]
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d3b7      	bcc.n	8008c1a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008caa:	2300      	movs	r3, #0
 8008cac:	613b      	str	r3, [r7, #16]
 8008cae:	e043      	b.n	8008d38 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	015a      	lsls	r2, r3, #5
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008cc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008cc6:	d118      	bne.n	8008cfa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d10a      	bne.n	8008ce4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	015a      	lsls	r2, r3, #5
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	4413      	add	r3, r2
 8008cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cda:	461a      	mov	r2, r3
 8008cdc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008ce0:	6013      	str	r3, [r2, #0]
 8008ce2:	e013      	b.n	8008d0c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	015a      	lsls	r2, r3, #5
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	4413      	add	r3, r2
 8008cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008cf6:	6013      	str	r3, [r2, #0]
 8008cf8:	e008      	b.n	8008d0c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	015a      	lsls	r2, r3, #5
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	4413      	add	r3, r2
 8008d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d06:	461a      	mov	r2, r3
 8008d08:	2300      	movs	r3, #0
 8008d0a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	015a      	lsls	r2, r3, #5
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	4413      	add	r3, r2
 8008d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d18:	461a      	mov	r2, r3
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	015a      	lsls	r2, r3, #5
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	4413      	add	r3, r2
 8008d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008d30:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	3301      	adds	r3, #1
 8008d36:	613b      	str	r3, [r7, #16]
 8008d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3a:	693a      	ldr	r2, [r7, #16]
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d3b7      	bcc.n	8008cb0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d46:	691b      	ldr	r3, [r3, #16]
 8008d48:	68fa      	ldr	r2, [r7, #12]
 8008d4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d52:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2200      	movs	r2, #0
 8008d58:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008d60:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d105      	bne.n	8008d74 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	699b      	ldr	r3, [r3, #24]
 8008d6c:	f043 0210 	orr.w	r2, r3, #16
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	699a      	ldr	r2, [r3, #24]
 8008d78:	4b0e      	ldr	r3, [pc, #56]	; (8008db4 <USB_DevInit+0x2b4>)
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d005      	beq.n	8008d92 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	699b      	ldr	r3, [r3, #24]
 8008d8a:	f043 0208 	orr.w	r2, r3, #8
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d105      	bne.n	8008da4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	699a      	ldr	r2, [r3, #24]
 8008d9c:	4b06      	ldr	r3, [pc, #24]	; (8008db8 <USB_DevInit+0x2b8>)
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008da4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3718      	adds	r7, #24
 8008daa:	46bd      	mov	sp, r7
 8008dac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008db0:	b004      	add	sp, #16
 8008db2:	4770      	bx	lr
 8008db4:	803c3800 	.word	0x803c3800
 8008db8:	40000004 	.word	0x40000004

08008dbc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b085      	sub	sp, #20
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	3301      	adds	r3, #1
 8008dce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	4a13      	ldr	r2, [pc, #76]	; (8008e20 <USB_FlushTxFifo+0x64>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d901      	bls.n	8008ddc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008dd8:	2303      	movs	r3, #3
 8008dda:	e01b      	b.n	8008e14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	691b      	ldr	r3, [r3, #16]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	daf2      	bge.n	8008dca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008de4:	2300      	movs	r3, #0
 8008de6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	019b      	lsls	r3, r3, #6
 8008dec:	f043 0220 	orr.w	r2, r3, #32
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	3301      	adds	r3, #1
 8008df8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	4a08      	ldr	r2, [pc, #32]	; (8008e20 <USB_FlushTxFifo+0x64>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d901      	bls.n	8008e06 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008e02:	2303      	movs	r3, #3
 8008e04:	e006      	b.n	8008e14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	691b      	ldr	r3, [r3, #16]
 8008e0a:	f003 0320 	and.w	r3, r3, #32
 8008e0e:	2b20      	cmp	r3, #32
 8008e10:	d0f0      	beq.n	8008df4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008e12:	2300      	movs	r3, #0
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3714      	adds	r7, #20
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr
 8008e20:	00030d40 	.word	0x00030d40

08008e24 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b085      	sub	sp, #20
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	3301      	adds	r3, #1
 8008e34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	4a11      	ldr	r2, [pc, #68]	; (8008e80 <USB_FlushRxFifo+0x5c>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d901      	bls.n	8008e42 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008e3e:	2303      	movs	r3, #3
 8008e40:	e018      	b.n	8008e74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	691b      	ldr	r3, [r3, #16]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	daf2      	bge.n	8008e30 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2210      	movs	r2, #16
 8008e52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	3301      	adds	r3, #1
 8008e58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	4a08      	ldr	r2, [pc, #32]	; (8008e80 <USB_FlushRxFifo+0x5c>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d901      	bls.n	8008e66 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008e62:	2303      	movs	r3, #3
 8008e64:	e006      	b.n	8008e74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	691b      	ldr	r3, [r3, #16]
 8008e6a:	f003 0310 	and.w	r3, r3, #16
 8008e6e:	2b10      	cmp	r3, #16
 8008e70:	d0f0      	beq.n	8008e54 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008e72:	2300      	movs	r3, #0
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3714      	adds	r7, #20
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr
 8008e80:	00030d40 	.word	0x00030d40

08008e84 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b085      	sub	sp, #20
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	460b      	mov	r3, r1
 8008e8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	78fb      	ldrb	r3, [r7, #3]
 8008e9e:	68f9      	ldr	r1, [r7, #12]
 8008ea0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008ea8:	2300      	movs	r3, #0
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3714      	adds	r7, #20
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb4:	4770      	bx	lr

08008eb6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008eb6:	b480      	push	{r7}
 8008eb8:	b085      	sub	sp, #20
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	68fa      	ldr	r2, [r7, #12]
 8008ecc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008ed0:	f023 0303 	bic.w	r3, r3, #3
 8008ed4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	68fa      	ldr	r2, [r7, #12]
 8008ee0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ee4:	f043 0302 	orr.w	r3, r3, #2
 8008ee8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008eea:	2300      	movs	r3, #0
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3714      	adds	r7, #20
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr

08008ef8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b083      	sub	sp, #12
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	695b      	ldr	r3, [r3, #20]
 8008f04:	f003 0301 	and.w	r3, r3, #1
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	370c      	adds	r7, #12
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr

08008f14 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b085      	sub	sp, #20
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	3301      	adds	r3, #1
 8008f24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	4a13      	ldr	r2, [pc, #76]	; (8008f78 <USB_CoreReset+0x64>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d901      	bls.n	8008f32 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008f2e:	2303      	movs	r3, #3
 8008f30:	e01b      	b.n	8008f6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	691b      	ldr	r3, [r3, #16]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	daf2      	bge.n	8008f20 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	691b      	ldr	r3, [r3, #16]
 8008f42:	f043 0201 	orr.w	r2, r3, #1
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	4a09      	ldr	r2, [pc, #36]	; (8008f78 <USB_CoreReset+0x64>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d901      	bls.n	8008f5c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008f58:	2303      	movs	r3, #3
 8008f5a:	e006      	b.n	8008f6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	691b      	ldr	r3, [r3, #16]
 8008f60:	f003 0301 	and.w	r3, r3, #1
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d0f0      	beq.n	8008f4a <USB_CoreReset+0x36>

  return HAL_OK;
 8008f68:	2300      	movs	r3, #0
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3714      	adds	r7, #20
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f74:	4770      	bx	lr
 8008f76:	bf00      	nop
 8008f78:	00030d40 	.word	0x00030d40

08008f7c <__libc_init_array>:
 8008f7c:	b570      	push	{r4, r5, r6, lr}
 8008f7e:	4d0d      	ldr	r5, [pc, #52]	; (8008fb4 <__libc_init_array+0x38>)
 8008f80:	4c0d      	ldr	r4, [pc, #52]	; (8008fb8 <__libc_init_array+0x3c>)
 8008f82:	1b64      	subs	r4, r4, r5
 8008f84:	10a4      	asrs	r4, r4, #2
 8008f86:	2600      	movs	r6, #0
 8008f88:	42a6      	cmp	r6, r4
 8008f8a:	d109      	bne.n	8008fa0 <__libc_init_array+0x24>
 8008f8c:	4d0b      	ldr	r5, [pc, #44]	; (8008fbc <__libc_init_array+0x40>)
 8008f8e:	4c0c      	ldr	r4, [pc, #48]	; (8008fc0 <__libc_init_array+0x44>)
 8008f90:	f000 f820 	bl	8008fd4 <_init>
 8008f94:	1b64      	subs	r4, r4, r5
 8008f96:	10a4      	asrs	r4, r4, #2
 8008f98:	2600      	movs	r6, #0
 8008f9a:	42a6      	cmp	r6, r4
 8008f9c:	d105      	bne.n	8008faa <__libc_init_array+0x2e>
 8008f9e:	bd70      	pop	{r4, r5, r6, pc}
 8008fa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fa4:	4798      	blx	r3
 8008fa6:	3601      	adds	r6, #1
 8008fa8:	e7ee      	b.n	8008f88 <__libc_init_array+0xc>
 8008faa:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fae:	4798      	blx	r3
 8008fb0:	3601      	adds	r6, #1
 8008fb2:	e7f2      	b.n	8008f9a <__libc_init_array+0x1e>
 8008fb4:	08009034 	.word	0x08009034
 8008fb8:	08009034 	.word	0x08009034
 8008fbc:	08009034 	.word	0x08009034
 8008fc0:	08009038 	.word	0x08009038

08008fc4 <memset>:
 8008fc4:	4402      	add	r2, r0
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d100      	bne.n	8008fce <memset+0xa>
 8008fcc:	4770      	bx	lr
 8008fce:	f803 1b01 	strb.w	r1, [r3], #1
 8008fd2:	e7f9      	b.n	8008fc8 <memset+0x4>

08008fd4 <_init>:
 8008fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fd6:	bf00      	nop
 8008fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fda:	bc08      	pop	{r3}
 8008fdc:	469e      	mov	lr, r3
 8008fde:	4770      	bx	lr

08008fe0 <_fini>:
 8008fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fe2:	bf00      	nop
 8008fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fe6:	bc08      	pop	{r3}
 8008fe8:	469e      	mov	lr, r3
 8008fea:	4770      	bx	lr
