
SERDES_Test_Reception.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009970  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009c08  08009c08  00019c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009c48  08009c48  00019c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009c50  08009c50  00019c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009c54  08009c54  00019c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08009c58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  08009c68  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  08009cc8  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ed8  240000d0  08009d28  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24002fa8  08009d28  00022fa8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f854  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f53  00000000  00000000  0003f952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b8  00000000  00000000  000428a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014b0  00000000  00000000  00043e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038f13  00000000  00000000  00045310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c196  00000000  00000000  0007e223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016d74e  00000000  00000000  0009a3b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00207b07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e38  00000000  00000000  00207b58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009bf0 	.word	0x08009bf0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08009bf0 	.word	0x08009bf0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f001 f860 	bl	80016a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f8b4 	bl	8000750 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 face 	bl	8000b88 <MX_GPIO_Init>
  MX_ETH_Init();
 80005ec:	f000 f934 	bl	8000858 <MX_ETH_Init>
  MX_DMA_Init();
 80005f0:	f000 faaa 	bl	8000b48 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f4:	f000 fa76 	bl	8000ae4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 80005f8:	f000 f97a 	bl	80008f0 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 80005fc:	f000 fa26 	bl	8000a4c <MX_USART3_UART_Init>
  MX_TIM5_Init();
 8000600:	f000 f9ca 	bl	8000998 <MX_TIM5_Init>

  //Enable Ref clock for PLL of SERDES... Bad Idea because we need stable clock at both side of data communication
  //HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);

  	// Create a function for DMA Transfer complete interruption
  	  hdma_tim2_ch4.XferCpltCallback = TransferComplete;
 8000604:	4b3c      	ldr	r3, [pc, #240]	; (80006f8 <main+0x11c>)
 8000606:	4a3d      	ldr	r2, [pc, #244]	; (80006fc <main+0x120>)
 8000608:	63da      	str	r2, [r3, #60]	; 0x3c

	// Enable interrupt for DMA (Transfer completed)
	__HAL_DMA_ENABLE_IT(&hdma_tim2_ch4, DMA_IT_TC);
 800060a:	4b3b      	ldr	r3, [pc, #236]	; (80006f8 <main+0x11c>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a3c      	ldr	r2, [pc, #240]	; (8000700 <main+0x124>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d04a      	beq.n	80006aa <main+0xce>
 8000614:	4b38      	ldr	r3, [pc, #224]	; (80006f8 <main+0x11c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a3a      	ldr	r2, [pc, #232]	; (8000704 <main+0x128>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d045      	beq.n	80006aa <main+0xce>
 800061e:	4b36      	ldr	r3, [pc, #216]	; (80006f8 <main+0x11c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a39      	ldr	r2, [pc, #228]	; (8000708 <main+0x12c>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d040      	beq.n	80006aa <main+0xce>
 8000628:	4b33      	ldr	r3, [pc, #204]	; (80006f8 <main+0x11c>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a37      	ldr	r2, [pc, #220]	; (800070c <main+0x130>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d03b      	beq.n	80006aa <main+0xce>
 8000632:	4b31      	ldr	r3, [pc, #196]	; (80006f8 <main+0x11c>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a36      	ldr	r2, [pc, #216]	; (8000710 <main+0x134>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d036      	beq.n	80006aa <main+0xce>
 800063c:	4b2e      	ldr	r3, [pc, #184]	; (80006f8 <main+0x11c>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a34      	ldr	r2, [pc, #208]	; (8000714 <main+0x138>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d031      	beq.n	80006aa <main+0xce>
 8000646:	4b2c      	ldr	r3, [pc, #176]	; (80006f8 <main+0x11c>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a33      	ldr	r2, [pc, #204]	; (8000718 <main+0x13c>)
 800064c:	4293      	cmp	r3, r2
 800064e:	d02c      	beq.n	80006aa <main+0xce>
 8000650:	4b29      	ldr	r3, [pc, #164]	; (80006f8 <main+0x11c>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a31      	ldr	r2, [pc, #196]	; (800071c <main+0x140>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d027      	beq.n	80006aa <main+0xce>
 800065a:	4b27      	ldr	r3, [pc, #156]	; (80006f8 <main+0x11c>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a30      	ldr	r2, [pc, #192]	; (8000720 <main+0x144>)
 8000660:	4293      	cmp	r3, r2
 8000662:	d022      	beq.n	80006aa <main+0xce>
 8000664:	4b24      	ldr	r3, [pc, #144]	; (80006f8 <main+0x11c>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a2e      	ldr	r2, [pc, #184]	; (8000724 <main+0x148>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d01d      	beq.n	80006aa <main+0xce>
 800066e:	4b22      	ldr	r3, [pc, #136]	; (80006f8 <main+0x11c>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a2d      	ldr	r2, [pc, #180]	; (8000728 <main+0x14c>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d018      	beq.n	80006aa <main+0xce>
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <main+0x11c>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a2b      	ldr	r2, [pc, #172]	; (800072c <main+0x150>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d013      	beq.n	80006aa <main+0xce>
 8000682:	4b1d      	ldr	r3, [pc, #116]	; (80006f8 <main+0x11c>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a2a      	ldr	r2, [pc, #168]	; (8000730 <main+0x154>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d00e      	beq.n	80006aa <main+0xce>
 800068c:	4b1a      	ldr	r3, [pc, #104]	; (80006f8 <main+0x11c>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a28      	ldr	r2, [pc, #160]	; (8000734 <main+0x158>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d009      	beq.n	80006aa <main+0xce>
 8000696:	4b18      	ldr	r3, [pc, #96]	; (80006f8 <main+0x11c>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a27      	ldr	r2, [pc, #156]	; (8000738 <main+0x15c>)
 800069c:	4293      	cmp	r3, r2
 800069e:	d004      	beq.n	80006aa <main+0xce>
 80006a0:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <main+0x11c>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a25      	ldr	r2, [pc, #148]	; (800073c <main+0x160>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d108      	bne.n	80006bc <main+0xe0>
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <main+0x11c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	681a      	ldr	r2, [r3, #0]
 80006b0:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <main+0x11c>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f042 0210 	orr.w	r2, r2, #16
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	e007      	b.n	80006cc <main+0xf0>
 80006bc:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <main+0x11c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	4b0d      	ldr	r3, [pc, #52]	; (80006f8 <main+0x11c>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f042 0202 	orr.w	r2, r2, #2
 80006ca:	601a      	str	r2, [r3, #0]

	// Start DMA transfer from GPIO Port E
	HAL_DMA_Start(&hdma_tim2_ch4, (uint32_t) &GPIOE->IDR, (uint32_t) RecievedData, TRANSFER_SIZE);
 80006cc:	4a1c      	ldr	r2, [pc, #112]	; (8000740 <main+0x164>)
 80006ce:	f242 731a 	movw	r3, #10010	; 0x271a
 80006d2:	491c      	ldr	r1, [pc, #112]	; (8000744 <main+0x168>)
 80006d4:	4808      	ldr	r0, [pc, #32]	; (80006f8 <main+0x11c>)
 80006d6:	f001 fd27 	bl	8002128 <HAL_DMA_Start>

	// Start input capture of the TIMER 2 at pin PA3 (Channel 4 of the TIMER)
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_4);
 80006da:	210c      	movs	r1, #12
 80006dc:	481a      	ldr	r0, [pc, #104]	; (8000748 <main+0x16c>)
 80006de:	f006 fcd9 	bl	8007094 <HAL_TIM_IC_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80006e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006e6:	4819      	ldr	r0, [pc, #100]	; (800074c <main+0x170>)
 80006e8:	f003 ff3d 	bl	8004566 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80006ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006f0:	f001 f86a 	bl	80017c8 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80006f4:	e7f5      	b.n	80006e2 <main+0x106>
 80006f6:	bf00      	nop
 80006f8:	2400026c 	.word	0x2400026c
 80006fc:	08000d99 	.word	0x08000d99
 8000700:	40020010 	.word	0x40020010
 8000704:	40020028 	.word	0x40020028
 8000708:	40020040 	.word	0x40020040
 800070c:	40020058 	.word	0x40020058
 8000710:	40020070 	.word	0x40020070
 8000714:	40020088 	.word	0x40020088
 8000718:	400200a0 	.word	0x400200a0
 800071c:	400200b8 	.word	0x400200b8
 8000720:	40020410 	.word	0x40020410
 8000724:	40020428 	.word	0x40020428
 8000728:	40020440 	.word	0x40020440
 800072c:	40020458 	.word	0x40020458
 8000730:	40020470 	.word	0x40020470
 8000734:	40020488 	.word	0x40020488
 8000738:	400204a0 	.word	0x400204a0
 800073c:	400204b8 	.word	0x400204b8
 8000740:	24000880 	.word	0x24000880
 8000744:	58021010 	.word	0x58021010
 8000748:	240001d4 	.word	0x240001d4
 800074c:	58020400 	.word	0x58020400

08000750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b09c      	sub	sp, #112	; 0x70
 8000754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000756:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800075a:	224c      	movs	r2, #76	; 0x4c
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f009 fa3e 	bl	8009be0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	2220      	movs	r2, #32
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f009 fa38 	bl	8009be0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000770:	2002      	movs	r0, #2
 8000772:	f004 f875 	bl	8004860 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000776:	2300      	movs	r3, #0
 8000778:	603b      	str	r3, [r7, #0]
 800077a:	4b34      	ldr	r3, [pc, #208]	; (800084c <SystemClock_Config+0xfc>)
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	4a33      	ldr	r2, [pc, #204]	; (800084c <SystemClock_Config+0xfc>)
 8000780:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000784:	6193      	str	r3, [r2, #24]
 8000786:	4b31      	ldr	r3, [pc, #196]	; (800084c <SystemClock_Config+0xfc>)
 8000788:	699b      	ldr	r3, [r3, #24]
 800078a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800078e:	603b      	str	r3, [r7, #0]
 8000790:	4b2f      	ldr	r3, [pc, #188]	; (8000850 <SystemClock_Config+0x100>)
 8000792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000794:	4a2e      	ldr	r2, [pc, #184]	; (8000850 <SystemClock_Config+0x100>)
 8000796:	f043 0301 	orr.w	r3, r3, #1
 800079a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800079c:	4b2c      	ldr	r3, [pc, #176]	; (8000850 <SystemClock_Config+0x100>)
 800079e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007a0:	f003 0301 	and.w	r3, r3, #1
 80007a4:	603b      	str	r3, [r7, #0]
 80007a6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007a8:	bf00      	nop
 80007aa:	4b28      	ldr	r3, [pc, #160]	; (800084c <SystemClock_Config+0xfc>)
 80007ac:	699b      	ldr	r3, [r3, #24]
 80007ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007b6:	d1f8      	bne.n	80007aa <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80007b8:	4b26      	ldr	r3, [pc, #152]	; (8000854 <SystemClock_Config+0x104>)
 80007ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007bc:	f023 0303 	bic.w	r3, r3, #3
 80007c0:	4a24      	ldr	r2, [pc, #144]	; (8000854 <SystemClock_Config+0x104>)
 80007c2:	f043 0302 	orr.w	r3, r3, #2
 80007c6:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007c8:	2301      	movs	r3, #1
 80007ca:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007cc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d2:	2302      	movs	r3, #2
 80007d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007d6:	2302      	movs	r3, #2
 80007d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007da:	2301      	movs	r3, #1
 80007dc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 80007de:	2378      	movs	r3, #120	; 0x78
 80007e0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007e2:	2302      	movs	r3, #2
 80007e4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007e6:	2304      	movs	r3, #4
 80007e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007ea:	2302      	movs	r3, #2
 80007ec:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007ee:	230c      	movs	r3, #12
 80007f0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007f2:	2300      	movs	r3, #0
 80007f4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007fe:	4618      	mov	r0, r3
 8000800:	f004 f878 	bl	80048f4 <HAL_RCC_OscConfig>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800080a:	f000 fb89 	bl	8000f20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080e:	233f      	movs	r3, #63	; 0x3f
 8000810:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000812:	2303      	movs	r3, #3
 8000814:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800081a:	2308      	movs	r3, #8
 800081c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800081e:	2340      	movs	r3, #64	; 0x40
 8000820:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000822:	2340      	movs	r3, #64	; 0x40
 8000824:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000826:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800082a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800082c:	2340      	movs	r3, #64	; 0x40
 800082e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	2104      	movs	r1, #4
 8000834:	4618      	mov	r0, r3
 8000836:	f004 fc8b 	bl	8005150 <HAL_RCC_ClockConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000840:	f000 fb6e 	bl	8000f20 <Error_Handler>
  }
}
 8000844:	bf00      	nop
 8000846:	3770      	adds	r7, #112	; 0x70
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	58024800 	.word	0x58024800
 8000850:	58000400 	.word	0x58000400
 8000854:	58024400 	.word	0x58024400

08000858 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800085c:	4b1e      	ldr	r3, [pc, #120]	; (80008d8 <MX_ETH_Init+0x80>)
 800085e:	4a1f      	ldr	r2, [pc, #124]	; (80008dc <MX_ETH_Init+0x84>)
 8000860:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000862:	4b1f      	ldr	r3, [pc, #124]	; (80008e0 <MX_ETH_Init+0x88>)
 8000864:	2200      	movs	r2, #0
 8000866:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000868:	4b1d      	ldr	r3, [pc, #116]	; (80008e0 <MX_ETH_Init+0x88>)
 800086a:	2280      	movs	r2, #128	; 0x80
 800086c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800086e:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <MX_ETH_Init+0x88>)
 8000870:	22e1      	movs	r2, #225	; 0xe1
 8000872:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000874:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <MX_ETH_Init+0x88>)
 8000876:	2200      	movs	r2, #0
 8000878:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800087a:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <MX_ETH_Init+0x88>)
 800087c:	2200      	movs	r2, #0
 800087e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000880:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <MX_ETH_Init+0x88>)
 8000882:	2200      	movs	r2, #0
 8000884:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000886:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <MX_ETH_Init+0x80>)
 8000888:	4a15      	ldr	r2, [pc, #84]	; (80008e0 <MX_ETH_Init+0x88>)
 800088a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <MX_ETH_Init+0x80>)
 800088e:	2201      	movs	r2, #1
 8000890:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_ETH_Init+0x80>)
 8000894:	4a13      	ldr	r2, [pc, #76]	; (80008e4 <MX_ETH_Init+0x8c>)
 8000896:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <MX_ETH_Init+0x80>)
 800089a:	4a13      	ldr	r2, [pc, #76]	; (80008e8 <MX_ETH_Init+0x90>)
 800089c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_ETH_Init+0x80>)
 80008a0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80008a4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008a6:	480c      	ldr	r0, [pc, #48]	; (80008d8 <MX_ETH_Init+0x80>)
 80008a8:	f003 f870 	bl	800398c <HAL_ETH_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80008b2:	f000 fb35 	bl	8000f20 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008b6:	2238      	movs	r2, #56	; 0x38
 80008b8:	2100      	movs	r1, #0
 80008ba:	480c      	ldr	r0, [pc, #48]	; (80008ec <MX_ETH_Init+0x94>)
 80008bc:	f009 f990 	bl	8009be0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008c0:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <MX_ETH_Init+0x94>)
 80008c2:	2221      	movs	r2, #33	; 0x21
 80008c4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008c6:	4b09      	ldr	r3, [pc, #36]	; (80008ec <MX_ETH_Init+0x94>)
 80008c8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80008cc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008ce:	4b07      	ldr	r3, [pc, #28]	; (80008ec <MX_ETH_Init+0x94>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	24000124 	.word	0x24000124
 80008dc:	40028000 	.word	0x40028000
 80008e0:	24002f9c 	.word	0x24002f9c
 80008e4:	24000070 	.word	0x24000070
 80008e8:	24000010 	.word	0x24000010
 80008ec:	240000ec 	.word	0x240000ec

080008f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b088      	sub	sp, #32
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800090e:	4b21      	ldr	r3, [pc, #132]	; (8000994 <MX_TIM2_Init+0xa4>)
 8000910:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000914:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000916:	4b1f      	ldr	r3, [pc, #124]	; (8000994 <MX_TIM2_Init+0xa4>)
 8000918:	2200      	movs	r2, #0
 800091a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091c:	4b1d      	ldr	r3, [pc, #116]	; (8000994 <MX_TIM2_Init+0xa4>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000922:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <MX_TIM2_Init+0xa4>)
 8000924:	f04f 32ff 	mov.w	r2, #4294967295
 8000928:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800092a:	4b1a      	ldr	r3, [pc, #104]	; (8000994 <MX_TIM2_Init+0xa4>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000930:	4b18      	ldr	r3, [pc, #96]	; (8000994 <MX_TIM2_Init+0xa4>)
 8000932:	2200      	movs	r2, #0
 8000934:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000936:	4817      	ldr	r0, [pc, #92]	; (8000994 <MX_TIM2_Init+0xa4>)
 8000938:	f006 fb55 	bl	8006fe6 <HAL_TIM_IC_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000942:	f000 faed 	bl	8000f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800094a:	2380      	movs	r3, #128	; 0x80
 800094c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	4619      	mov	r1, r3
 8000954:	480f      	ldr	r0, [pc, #60]	; (8000994 <MX_TIM2_Init+0xa4>)
 8000956:	f007 fc63 	bl	8008220 <HAL_TIMEx_MasterConfigSynchronization>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000960:	f000 fade 	bl	8000f20 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000964:	2302      	movs	r3, #2
 8000966:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000968:	2301      	movs	r3, #1
 800096a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	220c      	movs	r2, #12
 8000978:	4619      	mov	r1, r3
 800097a:	4806      	ldr	r0, [pc, #24]	; (8000994 <MX_TIM2_Init+0xa4>)
 800097c:	f006 fdad 	bl	80074da <HAL_TIM_IC_ConfigChannel>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000986:	f000 facb 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	3720      	adds	r7, #32
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	240001d4 	.word	0x240001d4

08000998 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	; 0x28
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009aa:	463b      	mov	r3, r7
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
 80009b8:	615a      	str	r2, [r3, #20]
 80009ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80009bc:	4b21      	ldr	r3, [pc, #132]	; (8000a44 <MX_TIM5_Init+0xac>)
 80009be:	4a22      	ldr	r2, [pc, #136]	; (8000a48 <MX_TIM5_Init+0xb0>)
 80009c0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80009c2:	4b20      	ldr	r3, [pc, #128]	; (8000a44 <MX_TIM5_Init+0xac>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c8:	4b1e      	ldr	r3, [pc, #120]	; (8000a44 <MX_TIM5_Init+0xac>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 15;
 80009ce:	4b1d      	ldr	r3, [pc, #116]	; (8000a44 <MX_TIM5_Init+0xac>)
 80009d0:	220f      	movs	r2, #15
 80009d2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d4:	4b1b      	ldr	r3, [pc, #108]	; (8000a44 <MX_TIM5_Init+0xac>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009da:	4b1a      	ldr	r3, [pc, #104]	; (8000a44 <MX_TIM5_Init+0xac>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80009e0:	4818      	ldr	r0, [pc, #96]	; (8000a44 <MX_TIM5_Init+0xac>)
 80009e2:	f006 faa9 	bl	8006f38 <HAL_TIM_PWM_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80009ec:	f000 fa98 	bl	8000f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f4:	2300      	movs	r3, #0
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	4619      	mov	r1, r3
 80009fe:	4811      	ldr	r0, [pc, #68]	; (8000a44 <MX_TIM5_Init+0xac>)
 8000a00:	f007 fc0e 	bl	8008220 <HAL_TIMEx_MasterConfigSynchronization>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8000a0a:	f000 fa89 	bl	8000f20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a0e:	2360      	movs	r3, #96	; 0x60
 8000a10:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 8;
 8000a12:	2308      	movs	r3, #8
 8000a14:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a16:	2300      	movs	r3, #0
 8000a18:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a1e:	463b      	mov	r3, r7
 8000a20:	2200      	movs	r2, #0
 8000a22:	4619      	mov	r1, r3
 8000a24:	4807      	ldr	r0, [pc, #28]	; (8000a44 <MX_TIM5_Init+0xac>)
 8000a26:	f006 fdf5 	bl	8007614 <HAL_TIM_PWM_ConfigChannel>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8000a30:	f000 fa76 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000a34:	4803      	ldr	r0, [pc, #12]	; (8000a44 <MX_TIM5_Init+0xac>)
 8000a36:	f000 fc03 	bl	8001240 <HAL_TIM_MspPostInit>

}
 8000a3a:	bf00      	nop
 8000a3c:	3728      	adds	r7, #40	; 0x28
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	24000220 	.word	0x24000220
 8000a48:	40000c00 	.word	0x40000c00

08000a4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a50:	4b22      	ldr	r3, [pc, #136]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a52:	4a23      	ldr	r2, [pc, #140]	; (8000ae0 <MX_USART3_UART_Init+0x94>)
 8000a54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a56:	4b21      	ldr	r3, [pc, #132]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5e:	4b1f      	ldr	r3, [pc, #124]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a64:	4b1d      	ldr	r3, [pc, #116]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a6a:	4b1c      	ldr	r3, [pc, #112]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a70:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a72:	220c      	movs	r2, #12
 8000a74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a76:	4b19      	ldr	r3, [pc, #100]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a7c:	4b17      	ldr	r3, [pc, #92]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a82:	4b16      	ldr	r3, [pc, #88]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a88:	4b14      	ldr	r3, [pc, #80]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a8e:	4b13      	ldr	r3, [pc, #76]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a94:	4811      	ldr	r0, [pc, #68]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a96:	f007 fc6f 	bl	8008378 <HAL_UART_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000aa0:	f000 fa3e 	bl	8000f20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	480d      	ldr	r0, [pc, #52]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000aa8:	f008 fca2 	bl	80093f0 <HAL_UARTEx_SetTxFifoThreshold>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ab2:	f000 fa35 	bl	8000f20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4808      	ldr	r0, [pc, #32]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000aba:	f008 fcd7 	bl	800946c <HAL_UARTEx_SetRxFifoThreshold>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ac4:	f000 fa2c 	bl	8000f20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ac8:	4804      	ldr	r0, [pc, #16]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000aca:	f008 fc58 	bl	800937e <HAL_UARTEx_DisableFifoMode>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ad4:	f000 fa24 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	240002e4 	.word	0x240002e4
 8000ae0:	40004800 	.word	0x40004800

08000ae4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ae8:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aea:	4a16      	ldr	r2, [pc, #88]	; (8000b44 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000aec:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000aee:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000af0:	2209      	movs	r2, #9
 8000af2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000af4:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000af6:	2202      	movs	r2, #2
 8000af8:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000afa:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b00:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b02:	2202      	movs	r2, #2
 8000b04:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b12:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000b18:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b1e:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b2a:	4805      	ldr	r0, [pc, #20]	; (8000b40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b2c:	f003 fd4f 	bl	80045ce <HAL_PCD_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000b36:	f000 f9f3 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	24000374 	.word	0x24000374
 8000b44:	40080000 	.word	0x40080000

08000b48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <MX_DMA_Init+0x3c>)
 8000b50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b54:	4a0b      	ldr	r2, [pc, #44]	; (8000b84 <MX_DMA_Init+0x3c>)
 8000b56:	f043 0301 	orr.w	r3, r3, #1
 8000b5a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <MX_DMA_Init+0x3c>)
 8000b60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b64:	f003 0301 	and.w	r3, r3, #1
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2100      	movs	r1, #0
 8000b70:	200c      	movs	r0, #12
 8000b72:	f000 ff48 	bl	8001a06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b76:	200c      	movs	r0, #12
 8000b78:	f000 ff5f 	bl	8001a3a <HAL_NVIC_EnableIRQ>

}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	58024400 	.word	0x58024400

08000b88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08c      	sub	sp, #48	; 0x30
 8000b8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8e:	f107 031c 	add.w	r3, r7, #28
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	609a      	str	r2, [r3, #8]
 8000b9a:	60da      	str	r2, [r3, #12]
 8000b9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b9e:	4b78      	ldr	r3, [pc, #480]	; (8000d80 <MX_GPIO_Init+0x1f8>)
 8000ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba4:	4a76      	ldr	r2, [pc, #472]	; (8000d80 <MX_GPIO_Init+0x1f8>)
 8000ba6:	f043 0310 	orr.w	r3, r3, #16
 8000baa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bae:	4b74      	ldr	r3, [pc, #464]	; (8000d80 <MX_GPIO_Init+0x1f8>)
 8000bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb4:	f003 0310 	and.w	r3, r3, #16
 8000bb8:	61bb      	str	r3, [r7, #24]
 8000bba:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bbc:	4b70      	ldr	r3, [pc, #448]	; (8000d80 <MX_GPIO_Init+0x1f8>)
 8000bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc2:	4a6f      	ldr	r2, [pc, #444]	; (8000d80 <MX_GPIO_Init+0x1f8>)
 8000bc4:	f043 0304 	orr.w	r3, r3, #4
 8000bc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bcc:	4b6c      	ldr	r3, [pc, #432]	; (8000d80 <MX_GPIO_Init+0x1f8>)
 8000bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd2:	f003 0304 	and.w	r3, r3, #4
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bda:	4b69      	ldr	r3, [pc, #420]	; (8000d80 <MX_GPIO_Init+0x1f8>)
 8000bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be0:	4a67      	ldr	r2, [pc, #412]	; (8000d80 <MX_GPIO_Init+0x1f8>)
 8000be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000be6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bea:	4b65      	ldr	r3, [pc, #404]	; (8000d80 <MX_GPIO_Init+0x1f8>)
 8000bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf8:	4b61      	ldr	r3, [pc, #388]	; (8000d80 <MX_GPIO_Init+0x1f8>)
 8000bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfe:	4a60      	ldr	r2, [pc, #384]	; (8000d80 <MX_GPIO_Init+0x1f8>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c08:	4b5d      	ldr	r3, [pc, #372]	; (8000d80 <MX_GPIO_Init+0x1f8>)
 8000c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c16:	4b5a      	ldr	r3, [pc, #360]	; (8000d80 <MX_GPIO_Init+0x1f8>)
 8000c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1c:	4a58      	ldr	r2, [pc, #352]	; (8000d80 <MX_GPIO_Init+0x1f8>)
 8000c1e:	f043 0302 	orr.w	r3, r3, #2
 8000c22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c26:	4b56      	ldr	r3, [pc, #344]	; (8000d80 <MX_GPIO_Init+0x1f8>)
 8000c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2c:	f003 0302 	and.w	r3, r3, #2
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c34:	4b52      	ldr	r3, [pc, #328]	; (8000d80 <MX_GPIO_Init+0x1f8>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	4a51      	ldr	r2, [pc, #324]	; (8000d80 <MX_GPIO_Init+0x1f8>)
 8000c3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c44:	4b4e      	ldr	r3, [pc, #312]	; (8000d80 <MX_GPIO_Init+0x1f8>)
 8000c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c52:	4b4b      	ldr	r3, [pc, #300]	; (8000d80 <MX_GPIO_Init+0x1f8>)
 8000c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c58:	4a49      	ldr	r2, [pc, #292]	; (8000d80 <MX_GPIO_Init+0x1f8>)
 8000c5a:	f043 0308 	orr.w	r3, r3, #8
 8000c5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c62:	4b47      	ldr	r3, [pc, #284]	; (8000d80 <MX_GPIO_Init+0x1f8>)
 8000c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c68:	f003 0308 	and.w	r3, r3, #8
 8000c6c:	603b      	str	r3, [r7, #0]
 8000c6e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000c70:	2200      	movs	r2, #0
 8000c72:	f244 0101 	movw	r1, #16385	; 0x4001
 8000c76:	4843      	ldr	r0, [pc, #268]	; (8000d84 <MX_GPIO_Init+0x1fc>)
 8000c78:	f003 fc5c 	bl	8004534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c82:	4841      	ldr	r0, [pc, #260]	; (8000d88 <MX_GPIO_Init+0x200>)
 8000c84:	f003 fc56 	bl	8004534 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DATA_IN_2_Pin DATA_IN_3_Pin DATA_IN_4_Pin DATA_IN_5_Pin
                           DATA_IN_6_Pin DATA_IN_7_Pin DATA_IN_0_Pin DATA_IN_1_Pin */
  GPIO_InitStruct.Pin = DATA_IN_2_Pin|DATA_IN_3_Pin|DATA_IN_4_Pin|DATA_IN_5_Pin
 8000c88:	23ff      	movs	r3, #255	; 0xff
 8000c8a:	61fb      	str	r3, [r7, #28]
                          |DATA_IN_6_Pin|DATA_IN_7_Pin|DATA_IN_0_Pin|DATA_IN_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c90:	2302      	movs	r3, #2
 8000c92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c94:	f107 031c 	add.w	r3, r7, #28
 8000c98:	4619      	mov	r1, r3
 8000c9a:	483c      	ldr	r0, [pc, #240]	; (8000d8c <MX_GPIO_Init+0x204>)
 8000c9c:	f003 fa9a 	bl	80041d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ca0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ca6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000caa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cb0:	f107 031c 	add.w	r3, r7, #28
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4836      	ldr	r0, [pc, #216]	; (8000d90 <MX_GPIO_Init+0x208>)
 8000cb8:	f003 fa8c 	bl	80041d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000cbc:	f244 0301 	movw	r3, #16385	; 0x4001
 8000cc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cce:	f107 031c 	add.w	r3, r7, #28
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	482b      	ldr	r0, [pc, #172]	; (8000d84 <MX_GPIO_Init+0x1fc>)
 8000cd6:	f003 fa7d 	bl	80041d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : nLOCKED_Pin LOCK_L_Pin */
  GPIO_InitStruct.Pin = nLOCKED_Pin|LOCK_L_Pin;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cde:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ce2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ce8:	f107 031c 	add.w	r3, r7, #28
 8000cec:	4619      	mov	r1, r3
 8000cee:	4829      	ldr	r0, [pc, #164]	; (8000d94 <MX_GPIO_Init+0x20c>)
 8000cf0:	f003 fa70 	bl	80041d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_TRANSACTION_Pin */
  GPIO_InitStruct.Pin = START_TRANSACTION_Pin;
 8000cf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cfa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d00:	2302      	movs	r3, #2
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(START_TRANSACTION_GPIO_Port, &GPIO_InitStruct);
 8000d04:	f107 031c 	add.w	r3, r7, #28
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4820      	ldr	r0, [pc, #128]	; (8000d8c <MX_GPIO_Init+0x204>)
 8000d0c:	f003 fa62 	bl	80041d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000d10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d16:	2301      	movs	r3, #1
 8000d18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d22:	f107 031c 	add.w	r3, r7, #28
 8000d26:	4619      	mov	r1, r3
 8000d28:	4817      	ldr	r0, [pc, #92]	; (8000d88 <MX_GPIO_Init+0x200>)
 8000d2a:	f003 fa53 	bl	80041d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000d2e:	2380      	movs	r3, #128	; 0x80
 8000d30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d32:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000d3c:	f107 031c 	add.w	r3, r7, #28
 8000d40:	4619      	mov	r1, r3
 8000d42:	4814      	ldr	r0, [pc, #80]	; (8000d94 <MX_GPIO_Init+0x20c>)
 8000d44:	f003 fa46 	bl	80041d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	2006      	movs	r0, #6
 8000d4e:	f000 fe5a 	bl	8001a06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000d52:	2006      	movs	r0, #6
 8000d54:	f000 fe71 	bl	8001a3a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	2007      	movs	r0, #7
 8000d5e:	f000 fe52 	bl	8001a06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000d62:	2007      	movs	r0, #7
 8000d64:	f000 fe69 	bl	8001a3a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	2017      	movs	r0, #23
 8000d6e:	f000 fe4a 	bl	8001a06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d72:	2017      	movs	r0, #23
 8000d74:	f000 fe61 	bl	8001a3a <HAL_NVIC_EnableIRQ>

}
 8000d78:	bf00      	nop
 8000d7a:	3730      	adds	r7, #48	; 0x30
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	58024400 	.word	0x58024400
 8000d84:	58020400 	.word	0x58020400
 8000d88:	58020c00 	.word	0x58020c00
 8000d8c:	58021000 	.word	0x58021000
 8000d90:	58020800 	.word	0x58020800
 8000d94:	58021800 	.word	0x58021800

08000d98 <TransferComplete>:

/* USER CODE BEGIN 4 */


static void TransferComplete(DMA_HandleTypeDef *DmaHandle)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	TIM2->DIER &=~ TIM_DIER_CC4DE;
 8000da0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000da4:	68db      	ldr	r3, [r3, #12]
 8000da6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000daa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000dae:	60d3      	str	r3, [r2, #12]
	HAL_UART_Transmit(&huart3, RecievedData, TRANSFER_SIZE, 10);
 8000db0:	230a      	movs	r3, #10
 8000db2:	f242 721a 	movw	r2, #10010	; 0x271a
 8000db6:	493a      	ldr	r1, [pc, #232]	; (8000ea0 <TransferComplete+0x108>)
 8000db8:	483a      	ldr	r0, [pc, #232]	; (8000ea4 <TransferComplete+0x10c>)
 8000dba:	f007 fb2d 	bl	8008418 <HAL_UART_Transmit>
	*/

	//HAL_UART_Transmit(&huart3, RecievedData, TRANSFER_SIZE, 10);

	// Enable interrupt for DMA (Transfer completed)
	__HAL_DMA_ENABLE_IT(&hdma_tim2_ch4, DMA_IT_TC);
 8000dbe:	4b3a      	ldr	r3, [pc, #232]	; (8000ea8 <TransferComplete+0x110>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a3a      	ldr	r2, [pc, #232]	; (8000eac <TransferComplete+0x114>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d04a      	beq.n	8000e5e <TransferComplete+0xc6>
 8000dc8:	4b37      	ldr	r3, [pc, #220]	; (8000ea8 <TransferComplete+0x110>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a38      	ldr	r2, [pc, #224]	; (8000eb0 <TransferComplete+0x118>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d045      	beq.n	8000e5e <TransferComplete+0xc6>
 8000dd2:	4b35      	ldr	r3, [pc, #212]	; (8000ea8 <TransferComplete+0x110>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a37      	ldr	r2, [pc, #220]	; (8000eb4 <TransferComplete+0x11c>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d040      	beq.n	8000e5e <TransferComplete+0xc6>
 8000ddc:	4b32      	ldr	r3, [pc, #200]	; (8000ea8 <TransferComplete+0x110>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a35      	ldr	r2, [pc, #212]	; (8000eb8 <TransferComplete+0x120>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d03b      	beq.n	8000e5e <TransferComplete+0xc6>
 8000de6:	4b30      	ldr	r3, [pc, #192]	; (8000ea8 <TransferComplete+0x110>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a34      	ldr	r2, [pc, #208]	; (8000ebc <TransferComplete+0x124>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d036      	beq.n	8000e5e <TransferComplete+0xc6>
 8000df0:	4b2d      	ldr	r3, [pc, #180]	; (8000ea8 <TransferComplete+0x110>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a32      	ldr	r2, [pc, #200]	; (8000ec0 <TransferComplete+0x128>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d031      	beq.n	8000e5e <TransferComplete+0xc6>
 8000dfa:	4b2b      	ldr	r3, [pc, #172]	; (8000ea8 <TransferComplete+0x110>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a31      	ldr	r2, [pc, #196]	; (8000ec4 <TransferComplete+0x12c>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d02c      	beq.n	8000e5e <TransferComplete+0xc6>
 8000e04:	4b28      	ldr	r3, [pc, #160]	; (8000ea8 <TransferComplete+0x110>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a2f      	ldr	r2, [pc, #188]	; (8000ec8 <TransferComplete+0x130>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d027      	beq.n	8000e5e <TransferComplete+0xc6>
 8000e0e:	4b26      	ldr	r3, [pc, #152]	; (8000ea8 <TransferComplete+0x110>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a2e      	ldr	r2, [pc, #184]	; (8000ecc <TransferComplete+0x134>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d022      	beq.n	8000e5e <TransferComplete+0xc6>
 8000e18:	4b23      	ldr	r3, [pc, #140]	; (8000ea8 <TransferComplete+0x110>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a2c      	ldr	r2, [pc, #176]	; (8000ed0 <TransferComplete+0x138>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d01d      	beq.n	8000e5e <TransferComplete+0xc6>
 8000e22:	4b21      	ldr	r3, [pc, #132]	; (8000ea8 <TransferComplete+0x110>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a2b      	ldr	r2, [pc, #172]	; (8000ed4 <TransferComplete+0x13c>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d018      	beq.n	8000e5e <TransferComplete+0xc6>
 8000e2c:	4b1e      	ldr	r3, [pc, #120]	; (8000ea8 <TransferComplete+0x110>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a29      	ldr	r2, [pc, #164]	; (8000ed8 <TransferComplete+0x140>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d013      	beq.n	8000e5e <TransferComplete+0xc6>
 8000e36:	4b1c      	ldr	r3, [pc, #112]	; (8000ea8 <TransferComplete+0x110>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a28      	ldr	r2, [pc, #160]	; (8000edc <TransferComplete+0x144>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d00e      	beq.n	8000e5e <TransferComplete+0xc6>
 8000e40:	4b19      	ldr	r3, [pc, #100]	; (8000ea8 <TransferComplete+0x110>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a26      	ldr	r2, [pc, #152]	; (8000ee0 <TransferComplete+0x148>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d009      	beq.n	8000e5e <TransferComplete+0xc6>
 8000e4a:	4b17      	ldr	r3, [pc, #92]	; (8000ea8 <TransferComplete+0x110>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a25      	ldr	r2, [pc, #148]	; (8000ee4 <TransferComplete+0x14c>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d004      	beq.n	8000e5e <TransferComplete+0xc6>
 8000e54:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <TransferComplete+0x110>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a23      	ldr	r2, [pc, #140]	; (8000ee8 <TransferComplete+0x150>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d108      	bne.n	8000e70 <TransferComplete+0xd8>
 8000e5e:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <TransferComplete+0x110>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <TransferComplete+0x110>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f042 0210 	orr.w	r2, r2, #16
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	e007      	b.n	8000e80 <TransferComplete+0xe8>
 8000e70:	4b0d      	ldr	r3, [pc, #52]	; (8000ea8 <TransferComplete+0x110>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <TransferComplete+0x110>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f042 0202 	orr.w	r2, r2, #2
 8000e7e:	601a      	str	r2, [r3, #0]

	// Start DMA transfer from GPIO Port E
	HAL_DMA_Start(&hdma_tim2_ch4, (uint32_t) &GPIOE->IDR, (uint32_t) RecievedData, TRANSFER_SIZE);
 8000e80:	4a07      	ldr	r2, [pc, #28]	; (8000ea0 <TransferComplete+0x108>)
 8000e82:	f242 731a 	movw	r3, #10010	; 0x271a
 8000e86:	4919      	ldr	r1, [pc, #100]	; (8000eec <TransferComplete+0x154>)
 8000e88:	4807      	ldr	r0, [pc, #28]	; (8000ea8 <TransferComplete+0x110>)
 8000e8a:	f001 f94d 	bl	8002128 <HAL_DMA_Start>

	// Start input capture of the TIMER 2 at pin PA3 (Channel 4 of the TIMER)
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_4);
 8000e8e:	210c      	movs	r1, #12
 8000e90:	4817      	ldr	r0, [pc, #92]	; (8000ef0 <TransferComplete+0x158>)
 8000e92:	f006 f8ff 	bl	8007094 <HAL_TIM_IC_Start>

}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	24000880 	.word	0x24000880
 8000ea4:	240002e4 	.word	0x240002e4
 8000ea8:	2400026c 	.word	0x2400026c
 8000eac:	40020010 	.word	0x40020010
 8000eb0:	40020028 	.word	0x40020028
 8000eb4:	40020040 	.word	0x40020040
 8000eb8:	40020058 	.word	0x40020058
 8000ebc:	40020070 	.word	0x40020070
 8000ec0:	40020088 	.word	0x40020088
 8000ec4:	400200a0 	.word	0x400200a0
 8000ec8:	400200b8 	.word	0x400200b8
 8000ecc:	40020410 	.word	0x40020410
 8000ed0:	40020428 	.word	0x40020428
 8000ed4:	40020440 	.word	0x40020440
 8000ed8:	40020458 	.word	0x40020458
 8000edc:	40020470 	.word	0x40020470
 8000ee0:	40020488 	.word	0x40020488
 8000ee4:	400204a0 	.word	0x400204a0
 8000ee8:	400204b8 	.word	0x400204b8
 8000eec:	58021010 	.word	0x58021010
 8000ef0:	240001d4 	.word	0x240001d4

08000ef4 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	80fb      	strh	r3, [r7, #6]
	//check if it is GPIO0
	if (GPIO_Pin == GPIO_PIN_0)
 8000efe:	88fb      	ldrh	r3, [r7, #6]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d107      	bne.n	8000f14 <HAL_GPIO_EXTI_Callback+0x20>
	{
		// Enable DMA interrupt for input capture event, start data reception
		TIM2->DIER |= TIM_DIER_CC4DE;
 8000f04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f0e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f12:	60d3      	str	r3, [r2, #12]
	}
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f24:	b672      	cpsid	i
}
 8000f26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <Error_Handler+0x8>
	...

08000f2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f32:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <HAL_MspInit+0x30>)
 8000f34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f38:	4a08      	ldr	r2, [pc, #32]	; (8000f5c <HAL_MspInit+0x30>)
 8000f3a:	f043 0302 	orr.w	r3, r3, #2
 8000f3e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <HAL_MspInit+0x30>)
 8000f44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f48:	f003 0302 	and.w	r3, r3, #2
 8000f4c:	607b      	str	r3, [r7, #4]
 8000f4e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	58024400 	.word	0x58024400

08000f60 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08e      	sub	sp, #56	; 0x38
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a59      	ldr	r2, [pc, #356]	; (80010e4 <HAL_ETH_MspInit+0x184>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	f040 80ab 	bne.w	80010da <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000f84:	4b58      	ldr	r3, [pc, #352]	; (80010e8 <HAL_ETH_MspInit+0x188>)
 8000f86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f8a:	4a57      	ldr	r2, [pc, #348]	; (80010e8 <HAL_ETH_MspInit+0x188>)
 8000f8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f90:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f94:	4b54      	ldr	r3, [pc, #336]	; (80010e8 <HAL_ETH_MspInit+0x188>)
 8000f96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f9e:	623b      	str	r3, [r7, #32]
 8000fa0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000fa2:	4b51      	ldr	r3, [pc, #324]	; (80010e8 <HAL_ETH_MspInit+0x188>)
 8000fa4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fa8:	4a4f      	ldr	r2, [pc, #316]	; (80010e8 <HAL_ETH_MspInit+0x188>)
 8000faa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fae:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000fb2:	4b4d      	ldr	r3, [pc, #308]	; (80010e8 <HAL_ETH_MspInit+0x188>)
 8000fb4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fbc:	61fb      	str	r3, [r7, #28]
 8000fbe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000fc0:	4b49      	ldr	r3, [pc, #292]	; (80010e8 <HAL_ETH_MspInit+0x188>)
 8000fc2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fc6:	4a48      	ldr	r2, [pc, #288]	; (80010e8 <HAL_ETH_MspInit+0x188>)
 8000fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fcc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000fd0:	4b45      	ldr	r3, [pc, #276]	; (80010e8 <HAL_ETH_MspInit+0x188>)
 8000fd2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fda:	61bb      	str	r3, [r7, #24]
 8000fdc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fde:	4b42      	ldr	r3, [pc, #264]	; (80010e8 <HAL_ETH_MspInit+0x188>)
 8000fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe4:	4a40      	ldr	r2, [pc, #256]	; (80010e8 <HAL_ETH_MspInit+0x188>)
 8000fe6:	f043 0304 	orr.w	r3, r3, #4
 8000fea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fee:	4b3e      	ldr	r3, [pc, #248]	; (80010e8 <HAL_ETH_MspInit+0x188>)
 8000ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff4:	f003 0304 	and.w	r3, r3, #4
 8000ff8:	617b      	str	r3, [r7, #20]
 8000ffa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffc:	4b3a      	ldr	r3, [pc, #232]	; (80010e8 <HAL_ETH_MspInit+0x188>)
 8000ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001002:	4a39      	ldr	r2, [pc, #228]	; (80010e8 <HAL_ETH_MspInit+0x188>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800100c:	4b36      	ldr	r3, [pc, #216]	; (80010e8 <HAL_ETH_MspInit+0x188>)
 800100e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800101a:	4b33      	ldr	r3, [pc, #204]	; (80010e8 <HAL_ETH_MspInit+0x188>)
 800101c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001020:	4a31      	ldr	r2, [pc, #196]	; (80010e8 <HAL_ETH_MspInit+0x188>)
 8001022:	f043 0302 	orr.w	r3, r3, #2
 8001026:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800102a:	4b2f      	ldr	r3, [pc, #188]	; (80010e8 <HAL_ETH_MspInit+0x188>)
 800102c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001030:	f003 0302 	and.w	r3, r3, #2
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001038:	4b2b      	ldr	r3, [pc, #172]	; (80010e8 <HAL_ETH_MspInit+0x188>)
 800103a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800103e:	4a2a      	ldr	r2, [pc, #168]	; (80010e8 <HAL_ETH_MspInit+0x188>)
 8001040:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001044:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001048:	4b27      	ldr	r3, [pc, #156]	; (80010e8 <HAL_ETH_MspInit+0x188>)
 800104a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800104e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001056:	2332      	movs	r3, #50	; 0x32
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	2300      	movs	r3, #0
 8001064:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001066:	230b      	movs	r3, #11
 8001068:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800106a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800106e:	4619      	mov	r1, r3
 8001070:	481e      	ldr	r0, [pc, #120]	; (80010ec <HAL_ETH_MspInit+0x18c>)
 8001072:	f003 f8af 	bl	80041d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001076:	2386      	movs	r3, #134	; 0x86
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107a:	2302      	movs	r3, #2
 800107c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001082:	2300      	movs	r3, #0
 8001084:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001086:	230b      	movs	r3, #11
 8001088:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108e:	4619      	mov	r1, r3
 8001090:	4817      	ldr	r0, [pc, #92]	; (80010f0 <HAL_ETH_MspInit+0x190>)
 8001092:	f003 f89f 	bl	80041d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001096:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109c:	2302      	movs	r3, #2
 800109e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2300      	movs	r3, #0
 80010a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010a8:	230b      	movs	r3, #11
 80010aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b0:	4619      	mov	r1, r3
 80010b2:	4810      	ldr	r0, [pc, #64]	; (80010f4 <HAL_ETH_MspInit+0x194>)
 80010b4:	f003 f88e 	bl	80041d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80010b8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	2302      	movs	r3, #2
 80010c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c6:	2300      	movs	r3, #0
 80010c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010ca:	230b      	movs	r3, #11
 80010cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d2:	4619      	mov	r1, r3
 80010d4:	4808      	ldr	r0, [pc, #32]	; (80010f8 <HAL_ETH_MspInit+0x198>)
 80010d6:	f003 f87d 	bl	80041d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80010da:	bf00      	nop
 80010dc:	3738      	adds	r7, #56	; 0x38
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40028000 	.word	0x40028000
 80010e8:	58024400 	.word	0x58024400
 80010ec:	58020800 	.word	0x58020800
 80010f0:	58020000 	.word	0x58020000
 80010f4:	58020400 	.word	0x58020400
 80010f8:	58021800 	.word	0x58021800

080010fc <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	; 0x28
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800111c:	d162      	bne.n	80011e4 <HAL_TIM_IC_MspInit+0xe8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800111e:	4b33      	ldr	r3, [pc, #204]	; (80011ec <HAL_TIM_IC_MspInit+0xf0>)
 8001120:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001124:	4a31      	ldr	r2, [pc, #196]	; (80011ec <HAL_TIM_IC_MspInit+0xf0>)
 8001126:	f043 0301 	orr.w	r3, r3, #1
 800112a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800112e:	4b2f      	ldr	r3, [pc, #188]	; (80011ec <HAL_TIM_IC_MspInit+0xf0>)
 8001130:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001134:	f003 0301 	and.w	r3, r3, #1
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113c:	4b2b      	ldr	r3, [pc, #172]	; (80011ec <HAL_TIM_IC_MspInit+0xf0>)
 800113e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001142:	4a2a      	ldr	r2, [pc, #168]	; (80011ec <HAL_TIM_IC_MspInit+0xf0>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800114c:	4b27      	ldr	r3, [pc, #156]	; (80011ec <HAL_TIM_IC_MspInit+0xf0>)
 800114e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800115a:	2308      	movs	r3, #8
 800115c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115e:	2302      	movs	r3, #2
 8001160:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2300      	movs	r3, #0
 8001168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800116a:	2301      	movs	r3, #1
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	4619      	mov	r1, r3
 8001174:	481e      	ldr	r0, [pc, #120]	; (80011f0 <HAL_TIM_IC_MspInit+0xf4>)
 8001176:	f003 f82d 	bl	80041d4 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH4 Init */
    hdma_tim2_ch4.Instance = DMA1_Stream1;
 800117a:	4b1e      	ldr	r3, [pc, #120]	; (80011f4 <HAL_TIM_IC_MspInit+0xf8>)
 800117c:	4a1e      	ldr	r2, [pc, #120]	; (80011f8 <HAL_TIM_IC_MspInit+0xfc>)
 800117e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch4.Init.Request = DMA_REQUEST_TIM2_CH4;
 8001180:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <HAL_TIM_IC_MspInit+0xf8>)
 8001182:	2215      	movs	r2, #21
 8001184:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001186:	4b1b      	ldr	r3, [pc, #108]	; (80011f4 <HAL_TIM_IC_MspInit+0xf8>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800118c:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <HAL_TIM_IC_MspInit+0xf8>)
 800118e:	2200      	movs	r2, #0
 8001190:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8001192:	4b18      	ldr	r3, [pc, #96]	; (80011f4 <HAL_TIM_IC_MspInit+0xf8>)
 8001194:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001198:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800119a:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <HAL_TIM_IC_MspInit+0xf8>)
 800119c:	2200      	movs	r2, #0
 800119e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011a0:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <HAL_TIM_IC_MspInit+0xf8>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch4.Init.Mode = DMA_NORMAL;
 80011a6:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <HAL_TIM_IC_MspInit+0xf8>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <HAL_TIM_IC_MspInit+0xf8>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011b2:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <HAL_TIM_IC_MspInit+0xf8>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch4) != HAL_OK)
 80011b8:	480e      	ldr	r0, [pc, #56]	; (80011f4 <HAL_TIM_IC_MspInit+0xf8>)
 80011ba:	f000 fc59 	bl	8001a70 <HAL_DMA_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <HAL_TIM_IC_MspInit+0xcc>
    {
      Error_Handler();
 80011c4:	f7ff feac 	bl	8000f20 <Error_Handler>
    }

    __HAL_LINKDMA(htim_ic,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch4);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a0a      	ldr	r2, [pc, #40]	; (80011f4 <HAL_TIM_IC_MspInit+0xf8>)
 80011cc:	631a      	str	r2, [r3, #48]	; 0x30
 80011ce:	4a09      	ldr	r2, [pc, #36]	; (80011f4 <HAL_TIM_IC_MspInit+0xf8>)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011d4:	2200      	movs	r2, #0
 80011d6:	2100      	movs	r1, #0
 80011d8:	201c      	movs	r0, #28
 80011da:	f000 fc14 	bl	8001a06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011de:	201c      	movs	r0, #28
 80011e0:	f000 fc2b 	bl	8001a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011e4:	bf00      	nop
 80011e6:	3728      	adds	r7, #40	; 0x28
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	58024400 	.word	0x58024400
 80011f0:	58020000 	.word	0x58020000
 80011f4:	2400026c 	.word	0x2400026c
 80011f8:	40020028 	.word	0x40020028

080011fc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a0b      	ldr	r2, [pc, #44]	; (8001238 <HAL_TIM_PWM_MspInit+0x3c>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d10e      	bne.n	800122c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <HAL_TIM_PWM_MspInit+0x40>)
 8001210:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001214:	4a09      	ldr	r2, [pc, #36]	; (800123c <HAL_TIM_PWM_MspInit+0x40>)
 8001216:	f043 0308 	orr.w	r3, r3, #8
 800121a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800121e:	4b07      	ldr	r3, [pc, #28]	; (800123c <HAL_TIM_PWM_MspInit+0x40>)
 8001220:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001224:	f003 0308 	and.w	r3, r3, #8
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800122c:	bf00      	nop
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	40000c00 	.word	0x40000c00
 800123c:	58024400 	.word	0x58024400

08001240 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b088      	sub	sp, #32
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 030c 	add.w	r3, r7, #12
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a12      	ldr	r2, [pc, #72]	; (80012a8 <HAL_TIM_MspPostInit+0x68>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d11e      	bne.n	80012a0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001262:	4b12      	ldr	r3, [pc, #72]	; (80012ac <HAL_TIM_MspPostInit+0x6c>)
 8001264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001268:	4a10      	ldr	r2, [pc, #64]	; (80012ac <HAL_TIM_MspPostInit+0x6c>)
 800126a:	f043 0301 	orr.w	r3, r3, #1
 800126e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <HAL_TIM_MspPostInit+0x6c>)
 8001274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001278:	f003 0301 	and.w	r3, r3, #1
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001280:	2301      	movs	r3, #1
 8001282:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128c:	2300      	movs	r3, #0
 800128e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001290:	2302      	movs	r3, #2
 8001292:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001294:	f107 030c 	add.w	r3, r7, #12
 8001298:	4619      	mov	r1, r3
 800129a:	4805      	ldr	r0, [pc, #20]	; (80012b0 <HAL_TIM_MspPostInit+0x70>)
 800129c:	f002 ff9a 	bl	80041d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80012a0:	bf00      	nop
 80012a2:	3720      	adds	r7, #32
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40000c00 	.word	0x40000c00
 80012ac:	58024400 	.word	0x58024400
 80012b0:	58020000 	.word	0x58020000

080012b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b0b8      	sub	sp, #224	; 0xe0
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012cc:	f107 0310 	add.w	r3, r7, #16
 80012d0:	22bc      	movs	r2, #188	; 0xbc
 80012d2:	2100      	movs	r1, #0
 80012d4:	4618      	mov	r0, r3
 80012d6:	f008 fc83 	bl	8009be0 <memset>
  if(huart->Instance==USART3)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a25      	ldr	r2, [pc, #148]	; (8001374 <HAL_UART_MspInit+0xc0>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d142      	bne.n	800136a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012e4:	2302      	movs	r3, #2
 80012e6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80012e8:	2300      	movs	r3, #0
 80012ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ee:	f107 0310 	add.w	r3, r7, #16
 80012f2:	4618      	mov	r0, r3
 80012f4:	f004 fab8 	bl	8005868 <HAL_RCCEx_PeriphCLKConfig>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80012fe:	f7ff fe0f 	bl	8000f20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001302:	4b1d      	ldr	r3, [pc, #116]	; (8001378 <HAL_UART_MspInit+0xc4>)
 8001304:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001308:	4a1b      	ldr	r2, [pc, #108]	; (8001378 <HAL_UART_MspInit+0xc4>)
 800130a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800130e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001312:	4b19      	ldr	r3, [pc, #100]	; (8001378 <HAL_UART_MspInit+0xc4>)
 8001314:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001318:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001320:	4b15      	ldr	r3, [pc, #84]	; (8001378 <HAL_UART_MspInit+0xc4>)
 8001322:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001326:	4a14      	ldr	r2, [pc, #80]	; (8001378 <HAL_UART_MspInit+0xc4>)
 8001328:	f043 0308 	orr.w	r3, r3, #8
 800132c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001330:	4b11      	ldr	r3, [pc, #68]	; (8001378 <HAL_UART_MspInit+0xc4>)
 8001332:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001336:	f003 0308 	and.w	r3, r3, #8
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800133e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001342:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001346:	2302      	movs	r3, #2
 8001348:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001358:	2307      	movs	r3, #7
 800135a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800135e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001362:	4619      	mov	r1, r3
 8001364:	4805      	ldr	r0, [pc, #20]	; (800137c <HAL_UART_MspInit+0xc8>)
 8001366:	f002 ff35 	bl	80041d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800136a:	bf00      	nop
 800136c:	37e0      	adds	r7, #224	; 0xe0
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40004800 	.word	0x40004800
 8001378:	58024400 	.word	0x58024400
 800137c:	58020c00 	.word	0x58020c00

08001380 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b0b8      	sub	sp, #224	; 0xe0
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001398:	f107 0310 	add.w	r3, r7, #16
 800139c:	22bc      	movs	r2, #188	; 0xbc
 800139e:	2100      	movs	r1, #0
 80013a0:	4618      	mov	r0, r3
 80013a2:	f008 fc1d 	bl	8009be0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a36      	ldr	r2, [pc, #216]	; (8001484 <HAL_PCD_MspInit+0x104>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d165      	bne.n	800147c <HAL_PCD_MspInit+0xfc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80013b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80013b4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 4;
 80013b6:	2304      	movs	r3, #4
 80013b8:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 100;
 80013ba:	2364      	movs	r3, #100	; 0x64
 80013bc:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80013be:	2302      	movs	r3, #2
 80013c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 80013c2:	2304      	movs	r3, #4
 80013c4:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80013c6:	2302      	movs	r3, #2
 80013c8:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 80013ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013ce:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80013d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80013d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013dc:	f107 0310 	add.w	r3, r7, #16
 80013e0:	4618      	mov	r0, r3
 80013e2:	f004 fa41 	bl	8005868 <HAL_RCCEx_PeriphCLKConfig>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80013ec:	f7ff fd98 	bl	8000f20 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80013f0:	f003 fa70 	bl	80048d4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f4:	4b24      	ldr	r3, [pc, #144]	; (8001488 <HAL_PCD_MspInit+0x108>)
 80013f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013fa:	4a23      	ldr	r2, [pc, #140]	; (8001488 <HAL_PCD_MspInit+0x108>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001404:	4b20      	ldr	r3, [pc, #128]	; (8001488 <HAL_PCD_MspInit+0x108>)
 8001406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001412:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001416:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141a:	2302      	movs	r3, #2
 800141c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001426:	2300      	movs	r3, #0
 8001428:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800142c:	230a      	movs	r3, #10
 800142e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001432:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001436:	4619      	mov	r1, r3
 8001438:	4814      	ldr	r0, [pc, #80]	; (800148c <HAL_PCD_MspInit+0x10c>)
 800143a:	f002 fecb 	bl	80041d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800143e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001442:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001446:	2300      	movs	r3, #0
 8001448:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001452:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001456:	4619      	mov	r1, r3
 8001458:	480c      	ldr	r0, [pc, #48]	; (800148c <HAL_PCD_MspInit+0x10c>)
 800145a:	f002 febb 	bl	80041d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800145e:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <HAL_PCD_MspInit+0x108>)
 8001460:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001464:	4a08      	ldr	r2, [pc, #32]	; (8001488 <HAL_PCD_MspInit+0x108>)
 8001466:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800146a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800146e:	4b06      	ldr	r3, [pc, #24]	; (8001488 <HAL_PCD_MspInit+0x108>)
 8001470:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001474:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800147c:	bf00      	nop
 800147e:	37e0      	adds	r7, #224	; 0xe0
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40080000 	.word	0x40080000
 8001488:	58024400 	.word	0x58024400
 800148c:	58020000 	.word	0x58020000

08001490 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001494:	e7fe      	b.n	8001494 <NMI_Handler+0x4>

08001496 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800149a:	e7fe      	b.n	800149a <HardFault_Handler+0x4>

0800149c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <MemManage_Handler+0x4>

080014a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a6:	e7fe      	b.n	80014a6 <BusFault_Handler+0x4>

080014a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014ac:	e7fe      	b.n	80014ac <UsageFault_Handler+0x4>

080014ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014dc:	f000 f954 	bl	8001788 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(nLOCKED_Pin);
 80014e8:	2001      	movs	r0, #1
 80014ea:	f003 f856 	bl	800459a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LOCK_L_Pin);
 80014f6:	2002      	movs	r0, #2
 80014f8:	f003 f84f 	bl	800459a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}

08001500 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch4);
 8001504:	4802      	ldr	r0, [pc, #8]	; (8001510 <DMA1_Stream1_IRQHandler+0x10>)
 8001506:	f000 ff2f 	bl	8002368 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */



  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	2400026c 	.word	0x2400026c

08001514 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_OVCR_Pin);
 8001518:	2080      	movs	r0, #128	; 0x80
 800151a:	f003 f83e 	bl	800459a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(START_TRANSACTION_Pin);
 800151e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001522:	f003 f83a 	bl	800459a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001530:	4802      	ldr	r0, [pc, #8]	; (800153c <TIM2_IRQHandler+0x10>)
 8001532:	f005 feb3 	bl	800729c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	240001d4 	.word	0x240001d4

08001540 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001544:	4b37      	ldr	r3, [pc, #220]	; (8001624 <SystemInit+0xe4>)
 8001546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800154a:	4a36      	ldr	r2, [pc, #216]	; (8001624 <SystemInit+0xe4>)
 800154c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001550:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001554:	4b34      	ldr	r3, [pc, #208]	; (8001628 <SystemInit+0xe8>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 030f 	and.w	r3, r3, #15
 800155c:	2b06      	cmp	r3, #6
 800155e:	d807      	bhi.n	8001570 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001560:	4b31      	ldr	r3, [pc, #196]	; (8001628 <SystemInit+0xe8>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f023 030f 	bic.w	r3, r3, #15
 8001568:	4a2f      	ldr	r2, [pc, #188]	; (8001628 <SystemInit+0xe8>)
 800156a:	f043 0307 	orr.w	r3, r3, #7
 800156e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001570:	4b2e      	ldr	r3, [pc, #184]	; (800162c <SystemInit+0xec>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a2d      	ldr	r2, [pc, #180]	; (800162c <SystemInit+0xec>)
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800157c:	4b2b      	ldr	r3, [pc, #172]	; (800162c <SystemInit+0xec>)
 800157e:	2200      	movs	r2, #0
 8001580:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001582:	4b2a      	ldr	r3, [pc, #168]	; (800162c <SystemInit+0xec>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	4929      	ldr	r1, [pc, #164]	; (800162c <SystemInit+0xec>)
 8001588:	4b29      	ldr	r3, [pc, #164]	; (8001630 <SystemInit+0xf0>)
 800158a:	4013      	ands	r3, r2
 800158c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800158e:	4b26      	ldr	r3, [pc, #152]	; (8001628 <SystemInit+0xe8>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0308 	and.w	r3, r3, #8
 8001596:	2b00      	cmp	r3, #0
 8001598:	d007      	beq.n	80015aa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800159a:	4b23      	ldr	r3, [pc, #140]	; (8001628 <SystemInit+0xe8>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f023 030f 	bic.w	r3, r3, #15
 80015a2:	4a21      	ldr	r2, [pc, #132]	; (8001628 <SystemInit+0xe8>)
 80015a4:	f043 0307 	orr.w	r3, r3, #7
 80015a8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80015aa:	4b20      	ldr	r3, [pc, #128]	; (800162c <SystemInit+0xec>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80015b0:	4b1e      	ldr	r3, [pc, #120]	; (800162c <SystemInit+0xec>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80015b6:	4b1d      	ldr	r3, [pc, #116]	; (800162c <SystemInit+0xec>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80015bc:	4b1b      	ldr	r3, [pc, #108]	; (800162c <SystemInit+0xec>)
 80015be:	4a1d      	ldr	r2, [pc, #116]	; (8001634 <SystemInit+0xf4>)
 80015c0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80015c2:	4b1a      	ldr	r3, [pc, #104]	; (800162c <SystemInit+0xec>)
 80015c4:	4a1c      	ldr	r2, [pc, #112]	; (8001638 <SystemInit+0xf8>)
 80015c6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80015c8:	4b18      	ldr	r3, [pc, #96]	; (800162c <SystemInit+0xec>)
 80015ca:	4a1c      	ldr	r2, [pc, #112]	; (800163c <SystemInit+0xfc>)
 80015cc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80015ce:	4b17      	ldr	r3, [pc, #92]	; (800162c <SystemInit+0xec>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80015d4:	4b15      	ldr	r3, [pc, #84]	; (800162c <SystemInit+0xec>)
 80015d6:	4a19      	ldr	r2, [pc, #100]	; (800163c <SystemInit+0xfc>)
 80015d8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80015da:	4b14      	ldr	r3, [pc, #80]	; (800162c <SystemInit+0xec>)
 80015dc:	2200      	movs	r2, #0
 80015de:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80015e0:	4b12      	ldr	r3, [pc, #72]	; (800162c <SystemInit+0xec>)
 80015e2:	4a16      	ldr	r2, [pc, #88]	; (800163c <SystemInit+0xfc>)
 80015e4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80015e6:	4b11      	ldr	r3, [pc, #68]	; (800162c <SystemInit+0xec>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015ec:	4b0f      	ldr	r3, [pc, #60]	; (800162c <SystemInit+0xec>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a0e      	ldr	r2, [pc, #56]	; (800162c <SystemInit+0xec>)
 80015f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015f6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <SystemInit+0xec>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80015fe:	4b10      	ldr	r3, [pc, #64]	; (8001640 <SystemInit+0x100>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	4b10      	ldr	r3, [pc, #64]	; (8001644 <SystemInit+0x104>)
 8001604:	4013      	ands	r3, r2
 8001606:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800160a:	d202      	bcs.n	8001612 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800160c:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <SystemInit+0x108>)
 800160e:	2201      	movs	r2, #1
 8001610:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001612:	4b0e      	ldr	r3, [pc, #56]	; (800164c <SystemInit+0x10c>)
 8001614:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001618:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	e000ed00 	.word	0xe000ed00
 8001628:	52002000 	.word	0x52002000
 800162c:	58024400 	.word	0x58024400
 8001630:	eaf6ed7f 	.word	0xeaf6ed7f
 8001634:	02020200 	.word	0x02020200
 8001638:	01ff0000 	.word	0x01ff0000
 800163c:	01010280 	.word	0x01010280
 8001640:	5c001000 	.word	0x5c001000
 8001644:	ffff0000 	.word	0xffff0000
 8001648:	51008108 	.word	0x51008108
 800164c:	52004000 	.word	0x52004000

08001650 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001650:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001688 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001654:	f7ff ff74 	bl	8001540 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001658:	480c      	ldr	r0, [pc, #48]	; (800168c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800165a:	490d      	ldr	r1, [pc, #52]	; (8001690 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800165c:	4a0d      	ldr	r2, [pc, #52]	; (8001694 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800165e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001660:	e002      	b.n	8001668 <LoopCopyDataInit>

08001662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001666:	3304      	adds	r3, #4

08001668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800166c:	d3f9      	bcc.n	8001662 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166e:	4a0a      	ldr	r2, [pc, #40]	; (8001698 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001670:	4c0a      	ldr	r4, [pc, #40]	; (800169c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001674:	e001      	b.n	800167a <LoopFillZerobss>

08001676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001678:	3204      	adds	r2, #4

0800167a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800167c:	d3fb      	bcc.n	8001676 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800167e:	f008 fa8b 	bl	8009b98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001682:	f7fe ffab 	bl	80005dc <main>
  bx  lr
 8001686:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001688:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800168c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001690:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001694:	08009c58 	.word	0x08009c58
  ldr r2, =_sbss
 8001698:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 800169c:	24002fa8 	.word	0x24002fa8

080016a0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016a0:	e7fe      	b.n	80016a0 <ADC3_IRQHandler>
	...

080016a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016aa:	2003      	movs	r0, #3
 80016ac:	f000 f9a0 	bl	80019f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016b0:	f003 ff04 	bl	80054bc <HAL_RCC_GetSysClockFreq>
 80016b4:	4602      	mov	r2, r0
 80016b6:	4b15      	ldr	r3, [pc, #84]	; (800170c <HAL_Init+0x68>)
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	0a1b      	lsrs	r3, r3, #8
 80016bc:	f003 030f 	and.w	r3, r3, #15
 80016c0:	4913      	ldr	r1, [pc, #76]	; (8001710 <HAL_Init+0x6c>)
 80016c2:	5ccb      	ldrb	r3, [r1, r3]
 80016c4:	f003 031f 	and.w	r3, r3, #31
 80016c8:	fa22 f303 	lsr.w	r3, r2, r3
 80016cc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016ce:	4b0f      	ldr	r3, [pc, #60]	; (800170c <HAL_Init+0x68>)
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	f003 030f 	and.w	r3, r3, #15
 80016d6:	4a0e      	ldr	r2, [pc, #56]	; (8001710 <HAL_Init+0x6c>)
 80016d8:	5cd3      	ldrb	r3, [r2, r3]
 80016da:	f003 031f 	and.w	r3, r3, #31
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	fa22 f303 	lsr.w	r3, r2, r3
 80016e4:	4a0b      	ldr	r2, [pc, #44]	; (8001714 <HAL_Init+0x70>)
 80016e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016e8:	4a0b      	ldr	r2, [pc, #44]	; (8001718 <HAL_Init+0x74>)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016ee:	2000      	movs	r0, #0
 80016f0:	f000 f814 	bl	800171c <HAL_InitTick>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e002      	b.n	8001704 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016fe:	f7ff fc15 	bl	8000f2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001702:	2300      	movs	r3, #0
}
 8001704:	4618      	mov	r0, r3
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	58024400 	.word	0x58024400
 8001710:	08009c08 	.word	0x08009c08
 8001714:	24000004 	.word	0x24000004
 8001718:	24000000 	.word	0x24000000

0800171c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001724:	4b15      	ldr	r3, [pc, #84]	; (800177c <HAL_InitTick+0x60>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d101      	bne.n	8001730 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e021      	b.n	8001774 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001730:	4b13      	ldr	r3, [pc, #76]	; (8001780 <HAL_InitTick+0x64>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4b11      	ldr	r3, [pc, #68]	; (800177c <HAL_InitTick+0x60>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	4619      	mov	r1, r3
 800173a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800173e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001742:	fbb2 f3f3 	udiv	r3, r2, r3
 8001746:	4618      	mov	r0, r3
 8001748:	f000 f985 	bl	8001a56 <HAL_SYSTICK_Config>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e00e      	b.n	8001774 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b0f      	cmp	r3, #15
 800175a:	d80a      	bhi.n	8001772 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800175c:	2200      	movs	r2, #0
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	f04f 30ff 	mov.w	r0, #4294967295
 8001764:	f000 f94f 	bl	8001a06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001768:	4a06      	ldr	r2, [pc, #24]	; (8001784 <HAL_InitTick+0x68>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800176e:	2300      	movs	r3, #0
 8001770:	e000      	b.n	8001774 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
}
 8001774:	4618      	mov	r0, r3
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	2400000c 	.word	0x2400000c
 8001780:	24000000 	.word	0x24000000
 8001784:	24000008 	.word	0x24000008

08001788 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_IncTick+0x20>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	461a      	mov	r2, r3
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_IncTick+0x24>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4413      	add	r3, r2
 8001798:	4a04      	ldr	r2, [pc, #16]	; (80017ac <HAL_IncTick+0x24>)
 800179a:	6013      	str	r3, [r2, #0]
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	2400000c 	.word	0x2400000c
 80017ac:	24002fa4 	.word	0x24002fa4

080017b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return uwTick;
 80017b4:	4b03      	ldr	r3, [pc, #12]	; (80017c4 <HAL_GetTick+0x14>)
 80017b6:	681b      	ldr	r3, [r3, #0]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	24002fa4 	.word	0x24002fa4

080017c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017d0:	f7ff ffee 	bl	80017b0 <HAL_GetTick>
 80017d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e0:	d005      	beq.n	80017ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017e2:	4b0a      	ldr	r3, [pc, #40]	; (800180c <HAL_Delay+0x44>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	461a      	mov	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4413      	add	r3, r2
 80017ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017ee:	bf00      	nop
 80017f0:	f7ff ffde 	bl	80017b0 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d8f7      	bhi.n	80017f0 <HAL_Delay+0x28>
  {
  }
}
 8001800:	bf00      	nop
 8001802:	bf00      	nop
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	2400000c 	.word	0x2400000c

08001810 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001814:	4b03      	ldr	r3, [pc, #12]	; (8001824 <HAL_GetREVID+0x14>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	0c1b      	lsrs	r3, r3, #16
}
 800181a:	4618      	mov	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	5c001000 	.word	0x5c001000

08001828 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001838:	4904      	ldr	r1, [pc, #16]	; (800184c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4313      	orrs	r3, r2
 800183e:	604b      	str	r3, [r1, #4]
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	58000400 	.word	0x58000400

08001850 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001860:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <__NVIC_SetPriorityGrouping+0x40>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800186c:	4013      	ands	r3, r2
 800186e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <__NVIC_SetPriorityGrouping+0x44>)
 800187a:	4313      	orrs	r3, r2
 800187c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800187e:	4a04      	ldr	r2, [pc, #16]	; (8001890 <__NVIC_SetPriorityGrouping+0x40>)
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	60d3      	str	r3, [r2, #12]
}
 8001884:	bf00      	nop
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000ed00 	.word	0xe000ed00
 8001894:	05fa0000 	.word	0x05fa0000

08001898 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800189c:	4b04      	ldr	r3, [pc, #16]	; (80018b0 <__NVIC_GetPriorityGrouping+0x18>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	0a1b      	lsrs	r3, r3, #8
 80018a2:	f003 0307 	and.w	r3, r3, #7
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	db0b      	blt.n	80018de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018c6:	88fb      	ldrh	r3, [r7, #6]
 80018c8:	f003 021f 	and.w	r2, r3, #31
 80018cc:	4907      	ldr	r1, [pc, #28]	; (80018ec <__NVIC_EnableIRQ+0x38>)
 80018ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018d2:	095b      	lsrs	r3, r3, #5
 80018d4:	2001      	movs	r0, #1
 80018d6:	fa00 f202 	lsl.w	r2, r0, r2
 80018da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	e000e100 	.word	0xe000e100

080018f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	6039      	str	r1, [r7, #0]
 80018fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001900:	2b00      	cmp	r3, #0
 8001902:	db0a      	blt.n	800191a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	b2da      	uxtb	r2, r3
 8001908:	490c      	ldr	r1, [pc, #48]	; (800193c <__NVIC_SetPriority+0x4c>)
 800190a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800190e:	0112      	lsls	r2, r2, #4
 8001910:	b2d2      	uxtb	r2, r2
 8001912:	440b      	add	r3, r1
 8001914:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001918:	e00a      	b.n	8001930 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	b2da      	uxtb	r2, r3
 800191e:	4908      	ldr	r1, [pc, #32]	; (8001940 <__NVIC_SetPriority+0x50>)
 8001920:	88fb      	ldrh	r3, [r7, #6]
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	3b04      	subs	r3, #4
 8001928:	0112      	lsls	r2, r2, #4
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	440b      	add	r3, r1
 800192e:	761a      	strb	r2, [r3, #24]
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000e100 	.word	0xe000e100
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001944:	b480      	push	{r7}
 8001946:	b089      	sub	sp, #36	; 0x24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	f1c3 0307 	rsb	r3, r3, #7
 800195e:	2b04      	cmp	r3, #4
 8001960:	bf28      	it	cs
 8001962:	2304      	movcs	r3, #4
 8001964:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3304      	adds	r3, #4
 800196a:	2b06      	cmp	r3, #6
 800196c:	d902      	bls.n	8001974 <NVIC_EncodePriority+0x30>
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3b03      	subs	r3, #3
 8001972:	e000      	b.n	8001976 <NVIC_EncodePriority+0x32>
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001978:	f04f 32ff 	mov.w	r2, #4294967295
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43da      	mvns	r2, r3
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	401a      	ands	r2, r3
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800198c:	f04f 31ff 	mov.w	r1, #4294967295
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	fa01 f303 	lsl.w	r3, r1, r3
 8001996:	43d9      	mvns	r1, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800199c:	4313      	orrs	r3, r2
         );
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3724      	adds	r7, #36	; 0x24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
	...

080019ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019bc:	d301      	bcc.n	80019c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019be:	2301      	movs	r3, #1
 80019c0:	e00f      	b.n	80019e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019c2:	4a0a      	ldr	r2, [pc, #40]	; (80019ec <SysTick_Config+0x40>)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ca:	210f      	movs	r1, #15
 80019cc:	f04f 30ff 	mov.w	r0, #4294967295
 80019d0:	f7ff ff8e 	bl	80018f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d4:	4b05      	ldr	r3, [pc, #20]	; (80019ec <SysTick_Config+0x40>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019da:	4b04      	ldr	r3, [pc, #16]	; (80019ec <SysTick_Config+0x40>)
 80019dc:	2207      	movs	r2, #7
 80019de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	e000e010 	.word	0xe000e010

080019f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff ff29 	bl	8001850 <__NVIC_SetPriorityGrouping>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b086      	sub	sp, #24
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	60b9      	str	r1, [r7, #8]
 8001a10:	607a      	str	r2, [r7, #4]
 8001a12:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a14:	f7ff ff40 	bl	8001898 <__NVIC_GetPriorityGrouping>
 8001a18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	68b9      	ldr	r1, [r7, #8]
 8001a1e:	6978      	ldr	r0, [r7, #20]
 8001a20:	f7ff ff90 	bl	8001944 <NVIC_EncodePriority>
 8001a24:	4602      	mov	r2, r0
 8001a26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff ff5f 	bl	80018f0 <__NVIC_SetPriority>
}
 8001a32:	bf00      	nop
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	4603      	mov	r3, r0
 8001a42:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff33 	bl	80018b4 <__NVIC_EnableIRQ>
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff ffa4 	bl	80019ac <SysTick_Config>
 8001a64:	4603      	mov	r3, r0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001a78:	f7ff fe9a 	bl	80017b0 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d101      	bne.n	8001a88 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e316      	b.n	80020b6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a66      	ldr	r2, [pc, #408]	; (8001c28 <HAL_DMA_Init+0x1b8>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d04a      	beq.n	8001b28 <HAL_DMA_Init+0xb8>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a65      	ldr	r2, [pc, #404]	; (8001c2c <HAL_DMA_Init+0x1bc>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d045      	beq.n	8001b28 <HAL_DMA_Init+0xb8>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a63      	ldr	r2, [pc, #396]	; (8001c30 <HAL_DMA_Init+0x1c0>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d040      	beq.n	8001b28 <HAL_DMA_Init+0xb8>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a62      	ldr	r2, [pc, #392]	; (8001c34 <HAL_DMA_Init+0x1c4>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d03b      	beq.n	8001b28 <HAL_DMA_Init+0xb8>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a60      	ldr	r2, [pc, #384]	; (8001c38 <HAL_DMA_Init+0x1c8>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d036      	beq.n	8001b28 <HAL_DMA_Init+0xb8>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a5f      	ldr	r2, [pc, #380]	; (8001c3c <HAL_DMA_Init+0x1cc>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d031      	beq.n	8001b28 <HAL_DMA_Init+0xb8>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a5d      	ldr	r2, [pc, #372]	; (8001c40 <HAL_DMA_Init+0x1d0>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d02c      	beq.n	8001b28 <HAL_DMA_Init+0xb8>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a5c      	ldr	r2, [pc, #368]	; (8001c44 <HAL_DMA_Init+0x1d4>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d027      	beq.n	8001b28 <HAL_DMA_Init+0xb8>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a5a      	ldr	r2, [pc, #360]	; (8001c48 <HAL_DMA_Init+0x1d8>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d022      	beq.n	8001b28 <HAL_DMA_Init+0xb8>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a59      	ldr	r2, [pc, #356]	; (8001c4c <HAL_DMA_Init+0x1dc>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d01d      	beq.n	8001b28 <HAL_DMA_Init+0xb8>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a57      	ldr	r2, [pc, #348]	; (8001c50 <HAL_DMA_Init+0x1e0>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d018      	beq.n	8001b28 <HAL_DMA_Init+0xb8>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a56      	ldr	r2, [pc, #344]	; (8001c54 <HAL_DMA_Init+0x1e4>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d013      	beq.n	8001b28 <HAL_DMA_Init+0xb8>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a54      	ldr	r2, [pc, #336]	; (8001c58 <HAL_DMA_Init+0x1e8>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d00e      	beq.n	8001b28 <HAL_DMA_Init+0xb8>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a53      	ldr	r2, [pc, #332]	; (8001c5c <HAL_DMA_Init+0x1ec>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d009      	beq.n	8001b28 <HAL_DMA_Init+0xb8>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a51      	ldr	r2, [pc, #324]	; (8001c60 <HAL_DMA_Init+0x1f0>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d004      	beq.n	8001b28 <HAL_DMA_Init+0xb8>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a50      	ldr	r2, [pc, #320]	; (8001c64 <HAL_DMA_Init+0x1f4>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d101      	bne.n	8001b2c <HAL_DMA_Init+0xbc>
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e000      	b.n	8001b2e <HAL_DMA_Init+0xbe>
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f000 813b 	beq.w	8001daa <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2202      	movs	r2, #2
 8001b38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a37      	ldr	r2, [pc, #220]	; (8001c28 <HAL_DMA_Init+0x1b8>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d04a      	beq.n	8001be4 <HAL_DMA_Init+0x174>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a36      	ldr	r2, [pc, #216]	; (8001c2c <HAL_DMA_Init+0x1bc>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d045      	beq.n	8001be4 <HAL_DMA_Init+0x174>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a34      	ldr	r2, [pc, #208]	; (8001c30 <HAL_DMA_Init+0x1c0>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d040      	beq.n	8001be4 <HAL_DMA_Init+0x174>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a33      	ldr	r2, [pc, #204]	; (8001c34 <HAL_DMA_Init+0x1c4>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d03b      	beq.n	8001be4 <HAL_DMA_Init+0x174>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a31      	ldr	r2, [pc, #196]	; (8001c38 <HAL_DMA_Init+0x1c8>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d036      	beq.n	8001be4 <HAL_DMA_Init+0x174>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a30      	ldr	r2, [pc, #192]	; (8001c3c <HAL_DMA_Init+0x1cc>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d031      	beq.n	8001be4 <HAL_DMA_Init+0x174>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a2e      	ldr	r2, [pc, #184]	; (8001c40 <HAL_DMA_Init+0x1d0>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d02c      	beq.n	8001be4 <HAL_DMA_Init+0x174>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a2d      	ldr	r2, [pc, #180]	; (8001c44 <HAL_DMA_Init+0x1d4>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d027      	beq.n	8001be4 <HAL_DMA_Init+0x174>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a2b      	ldr	r2, [pc, #172]	; (8001c48 <HAL_DMA_Init+0x1d8>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d022      	beq.n	8001be4 <HAL_DMA_Init+0x174>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a2a      	ldr	r2, [pc, #168]	; (8001c4c <HAL_DMA_Init+0x1dc>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d01d      	beq.n	8001be4 <HAL_DMA_Init+0x174>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a28      	ldr	r2, [pc, #160]	; (8001c50 <HAL_DMA_Init+0x1e0>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d018      	beq.n	8001be4 <HAL_DMA_Init+0x174>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a27      	ldr	r2, [pc, #156]	; (8001c54 <HAL_DMA_Init+0x1e4>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d013      	beq.n	8001be4 <HAL_DMA_Init+0x174>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a25      	ldr	r2, [pc, #148]	; (8001c58 <HAL_DMA_Init+0x1e8>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d00e      	beq.n	8001be4 <HAL_DMA_Init+0x174>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a24      	ldr	r2, [pc, #144]	; (8001c5c <HAL_DMA_Init+0x1ec>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d009      	beq.n	8001be4 <HAL_DMA_Init+0x174>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a22      	ldr	r2, [pc, #136]	; (8001c60 <HAL_DMA_Init+0x1f0>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d004      	beq.n	8001be4 <HAL_DMA_Init+0x174>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a21      	ldr	r2, [pc, #132]	; (8001c64 <HAL_DMA_Init+0x1f4>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d108      	bne.n	8001bf6 <HAL_DMA_Init+0x186>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f022 0201 	bic.w	r2, r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	e007      	b.n	8001c06 <HAL_DMA_Init+0x196>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f022 0201 	bic.w	r2, r2, #1
 8001c04:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001c06:	e02f      	b.n	8001c68 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c08:	f7ff fdd2 	bl	80017b0 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b05      	cmp	r3, #5
 8001c14:	d928      	bls.n	8001c68 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2220      	movs	r2, #32
 8001c1a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2203      	movs	r2, #3
 8001c20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e246      	b.n	80020b6 <HAL_DMA_Init+0x646>
 8001c28:	40020010 	.word	0x40020010
 8001c2c:	40020028 	.word	0x40020028
 8001c30:	40020040 	.word	0x40020040
 8001c34:	40020058 	.word	0x40020058
 8001c38:	40020070 	.word	0x40020070
 8001c3c:	40020088 	.word	0x40020088
 8001c40:	400200a0 	.word	0x400200a0
 8001c44:	400200b8 	.word	0x400200b8
 8001c48:	40020410 	.word	0x40020410
 8001c4c:	40020428 	.word	0x40020428
 8001c50:	40020440 	.word	0x40020440
 8001c54:	40020458 	.word	0x40020458
 8001c58:	40020470 	.word	0x40020470
 8001c5c:	40020488 	.word	0x40020488
 8001c60:	400204a0 	.word	0x400204a0
 8001c64:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1c8      	bne.n	8001c08 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	4b83      	ldr	r3, [pc, #524]	; (8001e90 <HAL_DMA_Init+0x420>)
 8001c82:	4013      	ands	r3, r2
 8001c84:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001c8e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c9a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ca6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb8:	2b04      	cmp	r3, #4
 8001cba:	d107      	bne.n	8001ccc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001ccc:	4b71      	ldr	r3, [pc, #452]	; (8001e94 <HAL_DMA_Init+0x424>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	4b71      	ldr	r3, [pc, #452]	; (8001e98 <HAL_DMA_Init+0x428>)
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001cd8:	d328      	bcc.n	8001d2c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b28      	cmp	r3, #40	; 0x28
 8001ce0:	d903      	bls.n	8001cea <HAL_DMA_Init+0x27a>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2b2e      	cmp	r3, #46	; 0x2e
 8001ce8:	d917      	bls.n	8001d1a <HAL_DMA_Init+0x2aa>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b3e      	cmp	r3, #62	; 0x3e
 8001cf0:	d903      	bls.n	8001cfa <HAL_DMA_Init+0x28a>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b42      	cmp	r3, #66	; 0x42
 8001cf8:	d90f      	bls.n	8001d1a <HAL_DMA_Init+0x2aa>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	2b46      	cmp	r3, #70	; 0x46
 8001d00:	d903      	bls.n	8001d0a <HAL_DMA_Init+0x29a>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	2b48      	cmp	r3, #72	; 0x48
 8001d08:	d907      	bls.n	8001d1a <HAL_DMA_Init+0x2aa>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2b4e      	cmp	r3, #78	; 0x4e
 8001d10:	d905      	bls.n	8001d1e <HAL_DMA_Init+0x2ae>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	2b52      	cmp	r3, #82	; 0x52
 8001d18:	d801      	bhi.n	8001d1e <HAL_DMA_Init+0x2ae>
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e000      	b.n	8001d20 <HAL_DMA_Init+0x2b0>
 8001d1e:	2300      	movs	r3, #0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d003      	beq.n	8001d2c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d2a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	697a      	ldr	r2, [r7, #20]
 8001d32:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	f023 0307 	bic.w	r3, r3, #7
 8001d42:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	d117      	bne.n	8001d86 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d00e      	beq.n	8001d86 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f001 fc85 	bl	8003678 <DMA_CheckFifoParam>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d008      	beq.n	8001d86 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2240      	movs	r2, #64	; 0x40
 8001d78:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e197      	b.n	80020b6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	697a      	ldr	r2, [r7, #20]
 8001d8c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f001 fbc0 	bl	8003514 <DMA_CalcBaseAndBitshift>
 8001d94:	4603      	mov	r3, r0
 8001d96:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9c:	f003 031f 	and.w	r3, r3, #31
 8001da0:	223f      	movs	r2, #63	; 0x3f
 8001da2:	409a      	lsls	r2, r3
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	e0cd      	b.n	8001f46 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a3b      	ldr	r2, [pc, #236]	; (8001e9c <HAL_DMA_Init+0x42c>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d022      	beq.n	8001dfa <HAL_DMA_Init+0x38a>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a39      	ldr	r2, [pc, #228]	; (8001ea0 <HAL_DMA_Init+0x430>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d01d      	beq.n	8001dfa <HAL_DMA_Init+0x38a>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a38      	ldr	r2, [pc, #224]	; (8001ea4 <HAL_DMA_Init+0x434>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d018      	beq.n	8001dfa <HAL_DMA_Init+0x38a>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a36      	ldr	r2, [pc, #216]	; (8001ea8 <HAL_DMA_Init+0x438>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d013      	beq.n	8001dfa <HAL_DMA_Init+0x38a>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a35      	ldr	r2, [pc, #212]	; (8001eac <HAL_DMA_Init+0x43c>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d00e      	beq.n	8001dfa <HAL_DMA_Init+0x38a>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a33      	ldr	r2, [pc, #204]	; (8001eb0 <HAL_DMA_Init+0x440>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d009      	beq.n	8001dfa <HAL_DMA_Init+0x38a>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a32      	ldr	r2, [pc, #200]	; (8001eb4 <HAL_DMA_Init+0x444>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d004      	beq.n	8001dfa <HAL_DMA_Init+0x38a>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a30      	ldr	r2, [pc, #192]	; (8001eb8 <HAL_DMA_Init+0x448>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d101      	bne.n	8001dfe <HAL_DMA_Init+0x38e>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e000      	b.n	8001e00 <HAL_DMA_Init+0x390>
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f000 8097 	beq.w	8001f34 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a24      	ldr	r2, [pc, #144]	; (8001e9c <HAL_DMA_Init+0x42c>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d021      	beq.n	8001e54 <HAL_DMA_Init+0x3e4>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a22      	ldr	r2, [pc, #136]	; (8001ea0 <HAL_DMA_Init+0x430>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d01c      	beq.n	8001e54 <HAL_DMA_Init+0x3e4>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a21      	ldr	r2, [pc, #132]	; (8001ea4 <HAL_DMA_Init+0x434>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d017      	beq.n	8001e54 <HAL_DMA_Init+0x3e4>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a1f      	ldr	r2, [pc, #124]	; (8001ea8 <HAL_DMA_Init+0x438>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d012      	beq.n	8001e54 <HAL_DMA_Init+0x3e4>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a1e      	ldr	r2, [pc, #120]	; (8001eac <HAL_DMA_Init+0x43c>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d00d      	beq.n	8001e54 <HAL_DMA_Init+0x3e4>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a1c      	ldr	r2, [pc, #112]	; (8001eb0 <HAL_DMA_Init+0x440>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d008      	beq.n	8001e54 <HAL_DMA_Init+0x3e4>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a1b      	ldr	r2, [pc, #108]	; (8001eb4 <HAL_DMA_Init+0x444>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d003      	beq.n	8001e54 <HAL_DMA_Init+0x3e4>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a19      	ldr	r2, [pc, #100]	; (8001eb8 <HAL_DMA_Init+0x448>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2202      	movs	r2, #2
 8001e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <HAL_DMA_Init+0x44c>)
 8001e72:	4013      	ands	r3, r2
 8001e74:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	2b40      	cmp	r3, #64	; 0x40
 8001e7c:	d020      	beq.n	8001ec0 <HAL_DMA_Init+0x450>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	2b80      	cmp	r3, #128	; 0x80
 8001e84:	d102      	bne.n	8001e8c <HAL_DMA_Init+0x41c>
 8001e86:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e8a:	e01a      	b.n	8001ec2 <HAL_DMA_Init+0x452>
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	e018      	b.n	8001ec2 <HAL_DMA_Init+0x452>
 8001e90:	fe10803f 	.word	0xfe10803f
 8001e94:	5c001000 	.word	0x5c001000
 8001e98:	ffff0000 	.word	0xffff0000
 8001e9c:	58025408 	.word	0x58025408
 8001ea0:	5802541c 	.word	0x5802541c
 8001ea4:	58025430 	.word	0x58025430
 8001ea8:	58025444 	.word	0x58025444
 8001eac:	58025458 	.word	0x58025458
 8001eb0:	5802546c 	.word	0x5802546c
 8001eb4:	58025480 	.word	0x58025480
 8001eb8:	58025494 	.word	0x58025494
 8001ebc:	fffe000f 	.word	0xfffe000f
 8001ec0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	68d2      	ldr	r2, [r2, #12]
 8001ec6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ec8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001ed0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001ed8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001ee0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001ee8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a1b      	ldr	r3, [r3, #32]
 8001eee:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001ef0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	697a      	ldr	r2, [r7, #20]
 8001efe:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	461a      	mov	r2, r3
 8001f06:	4b6e      	ldr	r3, [pc, #440]	; (80020c0 <HAL_DMA_Init+0x650>)
 8001f08:	4413      	add	r3, r2
 8001f0a:	4a6e      	ldr	r2, [pc, #440]	; (80020c4 <HAL_DMA_Init+0x654>)
 8001f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f10:	091b      	lsrs	r3, r3, #4
 8001f12:	009a      	lsls	r2, r3, #2
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f001 fafb 	bl	8003514 <DMA_CalcBaseAndBitshift>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f26:	f003 031f 	and.w	r3, r3, #31
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	409a      	lsls	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	e008      	b.n	8001f46 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2240      	movs	r2, #64	; 0x40
 8001f38:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2203      	movs	r2, #3
 8001f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e0b7      	b.n	80020b6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a5f      	ldr	r2, [pc, #380]	; (80020c8 <HAL_DMA_Init+0x658>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d072      	beq.n	8002036 <HAL_DMA_Init+0x5c6>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a5d      	ldr	r2, [pc, #372]	; (80020cc <HAL_DMA_Init+0x65c>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d06d      	beq.n	8002036 <HAL_DMA_Init+0x5c6>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a5c      	ldr	r2, [pc, #368]	; (80020d0 <HAL_DMA_Init+0x660>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d068      	beq.n	8002036 <HAL_DMA_Init+0x5c6>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a5a      	ldr	r2, [pc, #360]	; (80020d4 <HAL_DMA_Init+0x664>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d063      	beq.n	8002036 <HAL_DMA_Init+0x5c6>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a59      	ldr	r2, [pc, #356]	; (80020d8 <HAL_DMA_Init+0x668>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d05e      	beq.n	8002036 <HAL_DMA_Init+0x5c6>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a57      	ldr	r2, [pc, #348]	; (80020dc <HAL_DMA_Init+0x66c>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d059      	beq.n	8002036 <HAL_DMA_Init+0x5c6>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a56      	ldr	r2, [pc, #344]	; (80020e0 <HAL_DMA_Init+0x670>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d054      	beq.n	8002036 <HAL_DMA_Init+0x5c6>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a54      	ldr	r2, [pc, #336]	; (80020e4 <HAL_DMA_Init+0x674>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d04f      	beq.n	8002036 <HAL_DMA_Init+0x5c6>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a53      	ldr	r2, [pc, #332]	; (80020e8 <HAL_DMA_Init+0x678>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d04a      	beq.n	8002036 <HAL_DMA_Init+0x5c6>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a51      	ldr	r2, [pc, #324]	; (80020ec <HAL_DMA_Init+0x67c>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d045      	beq.n	8002036 <HAL_DMA_Init+0x5c6>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a50      	ldr	r2, [pc, #320]	; (80020f0 <HAL_DMA_Init+0x680>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d040      	beq.n	8002036 <HAL_DMA_Init+0x5c6>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a4e      	ldr	r2, [pc, #312]	; (80020f4 <HAL_DMA_Init+0x684>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d03b      	beq.n	8002036 <HAL_DMA_Init+0x5c6>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a4d      	ldr	r2, [pc, #308]	; (80020f8 <HAL_DMA_Init+0x688>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d036      	beq.n	8002036 <HAL_DMA_Init+0x5c6>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a4b      	ldr	r2, [pc, #300]	; (80020fc <HAL_DMA_Init+0x68c>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d031      	beq.n	8002036 <HAL_DMA_Init+0x5c6>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a4a      	ldr	r2, [pc, #296]	; (8002100 <HAL_DMA_Init+0x690>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d02c      	beq.n	8002036 <HAL_DMA_Init+0x5c6>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a48      	ldr	r2, [pc, #288]	; (8002104 <HAL_DMA_Init+0x694>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d027      	beq.n	8002036 <HAL_DMA_Init+0x5c6>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a47      	ldr	r2, [pc, #284]	; (8002108 <HAL_DMA_Init+0x698>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d022      	beq.n	8002036 <HAL_DMA_Init+0x5c6>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a45      	ldr	r2, [pc, #276]	; (800210c <HAL_DMA_Init+0x69c>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d01d      	beq.n	8002036 <HAL_DMA_Init+0x5c6>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a44      	ldr	r2, [pc, #272]	; (8002110 <HAL_DMA_Init+0x6a0>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d018      	beq.n	8002036 <HAL_DMA_Init+0x5c6>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a42      	ldr	r2, [pc, #264]	; (8002114 <HAL_DMA_Init+0x6a4>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d013      	beq.n	8002036 <HAL_DMA_Init+0x5c6>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a41      	ldr	r2, [pc, #260]	; (8002118 <HAL_DMA_Init+0x6a8>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d00e      	beq.n	8002036 <HAL_DMA_Init+0x5c6>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a3f      	ldr	r2, [pc, #252]	; (800211c <HAL_DMA_Init+0x6ac>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d009      	beq.n	8002036 <HAL_DMA_Init+0x5c6>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a3e      	ldr	r2, [pc, #248]	; (8002120 <HAL_DMA_Init+0x6b0>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d004      	beq.n	8002036 <HAL_DMA_Init+0x5c6>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a3c      	ldr	r2, [pc, #240]	; (8002124 <HAL_DMA_Init+0x6b4>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d101      	bne.n	800203a <HAL_DMA_Init+0x5ca>
 8002036:	2301      	movs	r3, #1
 8002038:	e000      	b.n	800203c <HAL_DMA_Init+0x5cc>
 800203a:	2300      	movs	r3, #0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d032      	beq.n	80020a6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f001 fb95 	bl	8003770 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	2b80      	cmp	r3, #128	; 0x80
 800204c:	d102      	bne.n	8002054 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800205c:	b2d2      	uxtb	r2, r2
 800205e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002068:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d010      	beq.n	8002094 <HAL_DMA_Init+0x624>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b08      	cmp	r3, #8
 8002078:	d80c      	bhi.n	8002094 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f001 fc12 	bl	80038a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002090:	605a      	str	r2, [r3, #4]
 8002092:	e008      	b.n	80020a6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3718      	adds	r7, #24
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	a7fdabf8 	.word	0xa7fdabf8
 80020c4:	cccccccd 	.word	0xcccccccd
 80020c8:	40020010 	.word	0x40020010
 80020cc:	40020028 	.word	0x40020028
 80020d0:	40020040 	.word	0x40020040
 80020d4:	40020058 	.word	0x40020058
 80020d8:	40020070 	.word	0x40020070
 80020dc:	40020088 	.word	0x40020088
 80020e0:	400200a0 	.word	0x400200a0
 80020e4:	400200b8 	.word	0x400200b8
 80020e8:	40020410 	.word	0x40020410
 80020ec:	40020428 	.word	0x40020428
 80020f0:	40020440 	.word	0x40020440
 80020f4:	40020458 	.word	0x40020458
 80020f8:	40020470 	.word	0x40020470
 80020fc:	40020488 	.word	0x40020488
 8002100:	400204a0 	.word	0x400204a0
 8002104:	400204b8 	.word	0x400204b8
 8002108:	58025408 	.word	0x58025408
 800210c:	5802541c 	.word	0x5802541c
 8002110:	58025430 	.word	0x58025430
 8002114:	58025444 	.word	0x58025444
 8002118:	58025458 	.word	0x58025458
 800211c:	5802546c 	.word	0x5802546c
 8002120:	58025480 	.word	0x58025480
 8002124:	58025494 	.word	0x58025494

08002128 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
 8002134:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002136:	2300      	movs	r3, #0
 8002138:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d101      	bne.n	8002144 <HAL_DMA_Start+0x1c>
  {
    return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e0ec      	b.n	800231e <HAL_DMA_Start+0x1f6>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800214a:	2b01      	cmp	r3, #1
 800214c:	d101      	bne.n	8002152 <HAL_DMA_Start+0x2a>
 800214e:	2302      	movs	r3, #2
 8002150:	e0e5      	b.n	800231e <HAL_DMA_Start+0x1f6>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b01      	cmp	r3, #1
 8002164:	f040 80d0 	bne.w	8002308 <HAL_DMA_Start+0x1e0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2202      	movs	r2, #2
 800216c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2200      	movs	r2, #0
 8002174:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a6b      	ldr	r2, [pc, #428]	; (8002328 <HAL_DMA_Start+0x200>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d04a      	beq.n	8002216 <HAL_DMA_Start+0xee>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a69      	ldr	r2, [pc, #420]	; (800232c <HAL_DMA_Start+0x204>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d045      	beq.n	8002216 <HAL_DMA_Start+0xee>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a68      	ldr	r2, [pc, #416]	; (8002330 <HAL_DMA_Start+0x208>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d040      	beq.n	8002216 <HAL_DMA_Start+0xee>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a66      	ldr	r2, [pc, #408]	; (8002334 <HAL_DMA_Start+0x20c>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d03b      	beq.n	8002216 <HAL_DMA_Start+0xee>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a65      	ldr	r2, [pc, #404]	; (8002338 <HAL_DMA_Start+0x210>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d036      	beq.n	8002216 <HAL_DMA_Start+0xee>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a63      	ldr	r2, [pc, #396]	; (800233c <HAL_DMA_Start+0x214>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d031      	beq.n	8002216 <HAL_DMA_Start+0xee>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a62      	ldr	r2, [pc, #392]	; (8002340 <HAL_DMA_Start+0x218>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d02c      	beq.n	8002216 <HAL_DMA_Start+0xee>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a60      	ldr	r2, [pc, #384]	; (8002344 <HAL_DMA_Start+0x21c>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d027      	beq.n	8002216 <HAL_DMA_Start+0xee>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a5f      	ldr	r2, [pc, #380]	; (8002348 <HAL_DMA_Start+0x220>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d022      	beq.n	8002216 <HAL_DMA_Start+0xee>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a5d      	ldr	r2, [pc, #372]	; (800234c <HAL_DMA_Start+0x224>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d01d      	beq.n	8002216 <HAL_DMA_Start+0xee>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a5c      	ldr	r2, [pc, #368]	; (8002350 <HAL_DMA_Start+0x228>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d018      	beq.n	8002216 <HAL_DMA_Start+0xee>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a5a      	ldr	r2, [pc, #360]	; (8002354 <HAL_DMA_Start+0x22c>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d013      	beq.n	8002216 <HAL_DMA_Start+0xee>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a59      	ldr	r2, [pc, #356]	; (8002358 <HAL_DMA_Start+0x230>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d00e      	beq.n	8002216 <HAL_DMA_Start+0xee>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a57      	ldr	r2, [pc, #348]	; (800235c <HAL_DMA_Start+0x234>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d009      	beq.n	8002216 <HAL_DMA_Start+0xee>
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a56      	ldr	r2, [pc, #344]	; (8002360 <HAL_DMA_Start+0x238>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d004      	beq.n	8002216 <HAL_DMA_Start+0xee>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a54      	ldr	r2, [pc, #336]	; (8002364 <HAL_DMA_Start+0x23c>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d108      	bne.n	8002228 <HAL_DMA_Start+0x100>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 0201 	bic.w	r2, r2, #1
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	e007      	b.n	8002238 <HAL_DMA_Start+0x110>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 0201 	bic.w	r2, r2, #1
 8002236:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	68b9      	ldr	r1, [r7, #8]
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f000 ffbc 	bl	80031bc <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a37      	ldr	r2, [pc, #220]	; (8002328 <HAL_DMA_Start+0x200>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d04a      	beq.n	80022e4 <HAL_DMA_Start+0x1bc>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a36      	ldr	r2, [pc, #216]	; (800232c <HAL_DMA_Start+0x204>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d045      	beq.n	80022e4 <HAL_DMA_Start+0x1bc>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a34      	ldr	r2, [pc, #208]	; (8002330 <HAL_DMA_Start+0x208>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d040      	beq.n	80022e4 <HAL_DMA_Start+0x1bc>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a33      	ldr	r2, [pc, #204]	; (8002334 <HAL_DMA_Start+0x20c>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d03b      	beq.n	80022e4 <HAL_DMA_Start+0x1bc>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a31      	ldr	r2, [pc, #196]	; (8002338 <HAL_DMA_Start+0x210>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d036      	beq.n	80022e4 <HAL_DMA_Start+0x1bc>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a30      	ldr	r2, [pc, #192]	; (800233c <HAL_DMA_Start+0x214>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d031      	beq.n	80022e4 <HAL_DMA_Start+0x1bc>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a2e      	ldr	r2, [pc, #184]	; (8002340 <HAL_DMA_Start+0x218>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d02c      	beq.n	80022e4 <HAL_DMA_Start+0x1bc>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a2d      	ldr	r2, [pc, #180]	; (8002344 <HAL_DMA_Start+0x21c>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d027      	beq.n	80022e4 <HAL_DMA_Start+0x1bc>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a2b      	ldr	r2, [pc, #172]	; (8002348 <HAL_DMA_Start+0x220>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d022      	beq.n	80022e4 <HAL_DMA_Start+0x1bc>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a2a      	ldr	r2, [pc, #168]	; (800234c <HAL_DMA_Start+0x224>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d01d      	beq.n	80022e4 <HAL_DMA_Start+0x1bc>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a28      	ldr	r2, [pc, #160]	; (8002350 <HAL_DMA_Start+0x228>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d018      	beq.n	80022e4 <HAL_DMA_Start+0x1bc>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a27      	ldr	r2, [pc, #156]	; (8002354 <HAL_DMA_Start+0x22c>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d013      	beq.n	80022e4 <HAL_DMA_Start+0x1bc>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a25      	ldr	r2, [pc, #148]	; (8002358 <HAL_DMA_Start+0x230>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d00e      	beq.n	80022e4 <HAL_DMA_Start+0x1bc>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a24      	ldr	r2, [pc, #144]	; (800235c <HAL_DMA_Start+0x234>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d009      	beq.n	80022e4 <HAL_DMA_Start+0x1bc>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a22      	ldr	r2, [pc, #136]	; (8002360 <HAL_DMA_Start+0x238>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d004      	beq.n	80022e4 <HAL_DMA_Start+0x1bc>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a21      	ldr	r2, [pc, #132]	; (8002364 <HAL_DMA_Start+0x23c>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d108      	bne.n	80022f6 <HAL_DMA_Start+0x1ce>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f042 0201 	orr.w	r2, r2, #1
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	e012      	b.n	800231c <HAL_DMA_Start+0x1f4>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f042 0201 	orr.w	r2, r2, #1
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	e009      	b.n	800231c <HAL_DMA_Start+0x1f4>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800230e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800231c:	7dfb      	ldrb	r3, [r7, #23]
}
 800231e:	4618      	mov	r0, r3
 8002320:	3718      	adds	r7, #24
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40020010 	.word	0x40020010
 800232c:	40020028 	.word	0x40020028
 8002330:	40020040 	.word	0x40020040
 8002334:	40020058 	.word	0x40020058
 8002338:	40020070 	.word	0x40020070
 800233c:	40020088 	.word	0x40020088
 8002340:	400200a0 	.word	0x400200a0
 8002344:	400200b8 	.word	0x400200b8
 8002348:	40020410 	.word	0x40020410
 800234c:	40020428 	.word	0x40020428
 8002350:	40020440 	.word	0x40020440
 8002354:	40020458 	.word	0x40020458
 8002358:	40020470 	.word	0x40020470
 800235c:	40020488 	.word	0x40020488
 8002360:	400204a0 	.word	0x400204a0
 8002364:	400204b8 	.word	0x400204b8

08002368 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b08a      	sub	sp, #40	; 0x28
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002370:	2300      	movs	r3, #0
 8002372:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002374:	4b67      	ldr	r3, [pc, #412]	; (8002514 <HAL_DMA_IRQHandler+0x1ac>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a67      	ldr	r2, [pc, #412]	; (8002518 <HAL_DMA_IRQHandler+0x1b0>)
 800237a:	fba2 2303 	umull	r2, r3, r2, r3
 800237e:	0a9b      	lsrs	r3, r3, #10
 8002380:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002386:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800238e:	6a3b      	ldr	r3, [r7, #32]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a5f      	ldr	r2, [pc, #380]	; (800251c <HAL_DMA_IRQHandler+0x1b4>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d04a      	beq.n	800243a <HAL_DMA_IRQHandler+0xd2>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a5d      	ldr	r2, [pc, #372]	; (8002520 <HAL_DMA_IRQHandler+0x1b8>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d045      	beq.n	800243a <HAL_DMA_IRQHandler+0xd2>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a5c      	ldr	r2, [pc, #368]	; (8002524 <HAL_DMA_IRQHandler+0x1bc>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d040      	beq.n	800243a <HAL_DMA_IRQHandler+0xd2>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a5a      	ldr	r2, [pc, #360]	; (8002528 <HAL_DMA_IRQHandler+0x1c0>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d03b      	beq.n	800243a <HAL_DMA_IRQHandler+0xd2>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a59      	ldr	r2, [pc, #356]	; (800252c <HAL_DMA_IRQHandler+0x1c4>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d036      	beq.n	800243a <HAL_DMA_IRQHandler+0xd2>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a57      	ldr	r2, [pc, #348]	; (8002530 <HAL_DMA_IRQHandler+0x1c8>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d031      	beq.n	800243a <HAL_DMA_IRQHandler+0xd2>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a56      	ldr	r2, [pc, #344]	; (8002534 <HAL_DMA_IRQHandler+0x1cc>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d02c      	beq.n	800243a <HAL_DMA_IRQHandler+0xd2>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a54      	ldr	r2, [pc, #336]	; (8002538 <HAL_DMA_IRQHandler+0x1d0>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d027      	beq.n	800243a <HAL_DMA_IRQHandler+0xd2>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a53      	ldr	r2, [pc, #332]	; (800253c <HAL_DMA_IRQHandler+0x1d4>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d022      	beq.n	800243a <HAL_DMA_IRQHandler+0xd2>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a51      	ldr	r2, [pc, #324]	; (8002540 <HAL_DMA_IRQHandler+0x1d8>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d01d      	beq.n	800243a <HAL_DMA_IRQHandler+0xd2>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a50      	ldr	r2, [pc, #320]	; (8002544 <HAL_DMA_IRQHandler+0x1dc>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d018      	beq.n	800243a <HAL_DMA_IRQHandler+0xd2>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a4e      	ldr	r2, [pc, #312]	; (8002548 <HAL_DMA_IRQHandler+0x1e0>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d013      	beq.n	800243a <HAL_DMA_IRQHandler+0xd2>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a4d      	ldr	r2, [pc, #308]	; (800254c <HAL_DMA_IRQHandler+0x1e4>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d00e      	beq.n	800243a <HAL_DMA_IRQHandler+0xd2>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a4b      	ldr	r2, [pc, #300]	; (8002550 <HAL_DMA_IRQHandler+0x1e8>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d009      	beq.n	800243a <HAL_DMA_IRQHandler+0xd2>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a4a      	ldr	r2, [pc, #296]	; (8002554 <HAL_DMA_IRQHandler+0x1ec>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d004      	beq.n	800243a <HAL_DMA_IRQHandler+0xd2>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a48      	ldr	r2, [pc, #288]	; (8002558 <HAL_DMA_IRQHandler+0x1f0>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d101      	bne.n	800243e <HAL_DMA_IRQHandler+0xd6>
 800243a:	2301      	movs	r3, #1
 800243c:	e000      	b.n	8002440 <HAL_DMA_IRQHandler+0xd8>
 800243e:	2300      	movs	r3, #0
 8002440:	2b00      	cmp	r3, #0
 8002442:	f000 842b 	beq.w	8002c9c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800244a:	f003 031f 	and.w	r3, r3, #31
 800244e:	2208      	movs	r2, #8
 8002450:	409a      	lsls	r2, r3
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	4013      	ands	r3, r2
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 80a2 	beq.w	80025a0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a2e      	ldr	r2, [pc, #184]	; (800251c <HAL_DMA_IRQHandler+0x1b4>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d04a      	beq.n	80024fc <HAL_DMA_IRQHandler+0x194>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a2d      	ldr	r2, [pc, #180]	; (8002520 <HAL_DMA_IRQHandler+0x1b8>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d045      	beq.n	80024fc <HAL_DMA_IRQHandler+0x194>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a2b      	ldr	r2, [pc, #172]	; (8002524 <HAL_DMA_IRQHandler+0x1bc>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d040      	beq.n	80024fc <HAL_DMA_IRQHandler+0x194>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a2a      	ldr	r2, [pc, #168]	; (8002528 <HAL_DMA_IRQHandler+0x1c0>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d03b      	beq.n	80024fc <HAL_DMA_IRQHandler+0x194>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a28      	ldr	r2, [pc, #160]	; (800252c <HAL_DMA_IRQHandler+0x1c4>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d036      	beq.n	80024fc <HAL_DMA_IRQHandler+0x194>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a27      	ldr	r2, [pc, #156]	; (8002530 <HAL_DMA_IRQHandler+0x1c8>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d031      	beq.n	80024fc <HAL_DMA_IRQHandler+0x194>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a25      	ldr	r2, [pc, #148]	; (8002534 <HAL_DMA_IRQHandler+0x1cc>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d02c      	beq.n	80024fc <HAL_DMA_IRQHandler+0x194>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a24      	ldr	r2, [pc, #144]	; (8002538 <HAL_DMA_IRQHandler+0x1d0>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d027      	beq.n	80024fc <HAL_DMA_IRQHandler+0x194>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a22      	ldr	r2, [pc, #136]	; (800253c <HAL_DMA_IRQHandler+0x1d4>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d022      	beq.n	80024fc <HAL_DMA_IRQHandler+0x194>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a21      	ldr	r2, [pc, #132]	; (8002540 <HAL_DMA_IRQHandler+0x1d8>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d01d      	beq.n	80024fc <HAL_DMA_IRQHandler+0x194>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a1f      	ldr	r2, [pc, #124]	; (8002544 <HAL_DMA_IRQHandler+0x1dc>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d018      	beq.n	80024fc <HAL_DMA_IRQHandler+0x194>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a1e      	ldr	r2, [pc, #120]	; (8002548 <HAL_DMA_IRQHandler+0x1e0>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d013      	beq.n	80024fc <HAL_DMA_IRQHandler+0x194>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a1c      	ldr	r2, [pc, #112]	; (800254c <HAL_DMA_IRQHandler+0x1e4>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d00e      	beq.n	80024fc <HAL_DMA_IRQHandler+0x194>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a1b      	ldr	r2, [pc, #108]	; (8002550 <HAL_DMA_IRQHandler+0x1e8>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d009      	beq.n	80024fc <HAL_DMA_IRQHandler+0x194>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a19      	ldr	r2, [pc, #100]	; (8002554 <HAL_DMA_IRQHandler+0x1ec>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d004      	beq.n	80024fc <HAL_DMA_IRQHandler+0x194>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a18      	ldr	r2, [pc, #96]	; (8002558 <HAL_DMA_IRQHandler+0x1f0>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d12f      	bne.n	800255c <HAL_DMA_IRQHandler+0x1f4>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0304 	and.w	r3, r3, #4
 8002506:	2b00      	cmp	r3, #0
 8002508:	bf14      	ite	ne
 800250a:	2301      	movne	r3, #1
 800250c:	2300      	moveq	r3, #0
 800250e:	b2db      	uxtb	r3, r3
 8002510:	e02e      	b.n	8002570 <HAL_DMA_IRQHandler+0x208>
 8002512:	bf00      	nop
 8002514:	24000000 	.word	0x24000000
 8002518:	1b4e81b5 	.word	0x1b4e81b5
 800251c:	40020010 	.word	0x40020010
 8002520:	40020028 	.word	0x40020028
 8002524:	40020040 	.word	0x40020040
 8002528:	40020058 	.word	0x40020058
 800252c:	40020070 	.word	0x40020070
 8002530:	40020088 	.word	0x40020088
 8002534:	400200a0 	.word	0x400200a0
 8002538:	400200b8 	.word	0x400200b8
 800253c:	40020410 	.word	0x40020410
 8002540:	40020428 	.word	0x40020428
 8002544:	40020440 	.word	0x40020440
 8002548:	40020458 	.word	0x40020458
 800254c:	40020470 	.word	0x40020470
 8002550:	40020488 	.word	0x40020488
 8002554:	400204a0 	.word	0x400204a0
 8002558:	400204b8 	.word	0x400204b8
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	2b00      	cmp	r3, #0
 8002568:	bf14      	ite	ne
 800256a:	2301      	movne	r3, #1
 800256c:	2300      	moveq	r3, #0
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b00      	cmp	r3, #0
 8002572:	d015      	beq.n	80025a0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 0204 	bic.w	r2, r2, #4
 8002582:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002588:	f003 031f 	and.w	r3, r3, #31
 800258c:	2208      	movs	r2, #8
 800258e:	409a      	lsls	r2, r3
 8002590:	6a3b      	ldr	r3, [r7, #32]
 8002592:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002598:	f043 0201 	orr.w	r2, r3, #1
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a4:	f003 031f 	and.w	r3, r3, #31
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	fa22 f303 	lsr.w	r3, r2, r3
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d06e      	beq.n	8002694 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a69      	ldr	r2, [pc, #420]	; (8002760 <HAL_DMA_IRQHandler+0x3f8>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d04a      	beq.n	8002656 <HAL_DMA_IRQHandler+0x2ee>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a67      	ldr	r2, [pc, #412]	; (8002764 <HAL_DMA_IRQHandler+0x3fc>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d045      	beq.n	8002656 <HAL_DMA_IRQHandler+0x2ee>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a66      	ldr	r2, [pc, #408]	; (8002768 <HAL_DMA_IRQHandler+0x400>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d040      	beq.n	8002656 <HAL_DMA_IRQHandler+0x2ee>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a64      	ldr	r2, [pc, #400]	; (800276c <HAL_DMA_IRQHandler+0x404>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d03b      	beq.n	8002656 <HAL_DMA_IRQHandler+0x2ee>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a63      	ldr	r2, [pc, #396]	; (8002770 <HAL_DMA_IRQHandler+0x408>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d036      	beq.n	8002656 <HAL_DMA_IRQHandler+0x2ee>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a61      	ldr	r2, [pc, #388]	; (8002774 <HAL_DMA_IRQHandler+0x40c>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d031      	beq.n	8002656 <HAL_DMA_IRQHandler+0x2ee>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a60      	ldr	r2, [pc, #384]	; (8002778 <HAL_DMA_IRQHandler+0x410>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d02c      	beq.n	8002656 <HAL_DMA_IRQHandler+0x2ee>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a5e      	ldr	r2, [pc, #376]	; (800277c <HAL_DMA_IRQHandler+0x414>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d027      	beq.n	8002656 <HAL_DMA_IRQHandler+0x2ee>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a5d      	ldr	r2, [pc, #372]	; (8002780 <HAL_DMA_IRQHandler+0x418>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d022      	beq.n	8002656 <HAL_DMA_IRQHandler+0x2ee>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a5b      	ldr	r2, [pc, #364]	; (8002784 <HAL_DMA_IRQHandler+0x41c>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d01d      	beq.n	8002656 <HAL_DMA_IRQHandler+0x2ee>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a5a      	ldr	r2, [pc, #360]	; (8002788 <HAL_DMA_IRQHandler+0x420>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d018      	beq.n	8002656 <HAL_DMA_IRQHandler+0x2ee>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a58      	ldr	r2, [pc, #352]	; (800278c <HAL_DMA_IRQHandler+0x424>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d013      	beq.n	8002656 <HAL_DMA_IRQHandler+0x2ee>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a57      	ldr	r2, [pc, #348]	; (8002790 <HAL_DMA_IRQHandler+0x428>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d00e      	beq.n	8002656 <HAL_DMA_IRQHandler+0x2ee>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a55      	ldr	r2, [pc, #340]	; (8002794 <HAL_DMA_IRQHandler+0x42c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d009      	beq.n	8002656 <HAL_DMA_IRQHandler+0x2ee>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a54      	ldr	r2, [pc, #336]	; (8002798 <HAL_DMA_IRQHandler+0x430>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d004      	beq.n	8002656 <HAL_DMA_IRQHandler+0x2ee>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a52      	ldr	r2, [pc, #328]	; (800279c <HAL_DMA_IRQHandler+0x434>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d10a      	bne.n	800266c <HAL_DMA_IRQHandler+0x304>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002660:	2b00      	cmp	r3, #0
 8002662:	bf14      	ite	ne
 8002664:	2301      	movne	r3, #1
 8002666:	2300      	moveq	r3, #0
 8002668:	b2db      	uxtb	r3, r3
 800266a:	e003      	b.n	8002674 <HAL_DMA_IRQHandler+0x30c>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2300      	movs	r3, #0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00d      	beq.n	8002694 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267c:	f003 031f 	and.w	r3, r3, #31
 8002680:	2201      	movs	r2, #1
 8002682:	409a      	lsls	r2, r3
 8002684:	6a3b      	ldr	r3, [r7, #32]
 8002686:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800268c:	f043 0202 	orr.w	r2, r3, #2
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002698:	f003 031f 	and.w	r3, r3, #31
 800269c:	2204      	movs	r2, #4
 800269e:	409a      	lsls	r2, r3
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	4013      	ands	r3, r2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f000 808f 	beq.w	80027c8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a2c      	ldr	r2, [pc, #176]	; (8002760 <HAL_DMA_IRQHandler+0x3f8>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d04a      	beq.n	800274a <HAL_DMA_IRQHandler+0x3e2>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a2a      	ldr	r2, [pc, #168]	; (8002764 <HAL_DMA_IRQHandler+0x3fc>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d045      	beq.n	800274a <HAL_DMA_IRQHandler+0x3e2>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a29      	ldr	r2, [pc, #164]	; (8002768 <HAL_DMA_IRQHandler+0x400>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d040      	beq.n	800274a <HAL_DMA_IRQHandler+0x3e2>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a27      	ldr	r2, [pc, #156]	; (800276c <HAL_DMA_IRQHandler+0x404>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d03b      	beq.n	800274a <HAL_DMA_IRQHandler+0x3e2>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a26      	ldr	r2, [pc, #152]	; (8002770 <HAL_DMA_IRQHandler+0x408>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d036      	beq.n	800274a <HAL_DMA_IRQHandler+0x3e2>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a24      	ldr	r2, [pc, #144]	; (8002774 <HAL_DMA_IRQHandler+0x40c>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d031      	beq.n	800274a <HAL_DMA_IRQHandler+0x3e2>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a23      	ldr	r2, [pc, #140]	; (8002778 <HAL_DMA_IRQHandler+0x410>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d02c      	beq.n	800274a <HAL_DMA_IRQHandler+0x3e2>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a21      	ldr	r2, [pc, #132]	; (800277c <HAL_DMA_IRQHandler+0x414>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d027      	beq.n	800274a <HAL_DMA_IRQHandler+0x3e2>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a20      	ldr	r2, [pc, #128]	; (8002780 <HAL_DMA_IRQHandler+0x418>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d022      	beq.n	800274a <HAL_DMA_IRQHandler+0x3e2>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a1e      	ldr	r2, [pc, #120]	; (8002784 <HAL_DMA_IRQHandler+0x41c>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d01d      	beq.n	800274a <HAL_DMA_IRQHandler+0x3e2>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a1d      	ldr	r2, [pc, #116]	; (8002788 <HAL_DMA_IRQHandler+0x420>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d018      	beq.n	800274a <HAL_DMA_IRQHandler+0x3e2>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a1b      	ldr	r2, [pc, #108]	; (800278c <HAL_DMA_IRQHandler+0x424>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d013      	beq.n	800274a <HAL_DMA_IRQHandler+0x3e2>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a1a      	ldr	r2, [pc, #104]	; (8002790 <HAL_DMA_IRQHandler+0x428>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d00e      	beq.n	800274a <HAL_DMA_IRQHandler+0x3e2>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a18      	ldr	r2, [pc, #96]	; (8002794 <HAL_DMA_IRQHandler+0x42c>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d009      	beq.n	800274a <HAL_DMA_IRQHandler+0x3e2>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a17      	ldr	r2, [pc, #92]	; (8002798 <HAL_DMA_IRQHandler+0x430>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d004      	beq.n	800274a <HAL_DMA_IRQHandler+0x3e2>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a15      	ldr	r2, [pc, #84]	; (800279c <HAL_DMA_IRQHandler+0x434>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d12a      	bne.n	80027a0 <HAL_DMA_IRQHandler+0x438>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	bf14      	ite	ne
 8002758:	2301      	movne	r3, #1
 800275a:	2300      	moveq	r3, #0
 800275c:	b2db      	uxtb	r3, r3
 800275e:	e023      	b.n	80027a8 <HAL_DMA_IRQHandler+0x440>
 8002760:	40020010 	.word	0x40020010
 8002764:	40020028 	.word	0x40020028
 8002768:	40020040 	.word	0x40020040
 800276c:	40020058 	.word	0x40020058
 8002770:	40020070 	.word	0x40020070
 8002774:	40020088 	.word	0x40020088
 8002778:	400200a0 	.word	0x400200a0
 800277c:	400200b8 	.word	0x400200b8
 8002780:	40020410 	.word	0x40020410
 8002784:	40020428 	.word	0x40020428
 8002788:	40020440 	.word	0x40020440
 800278c:	40020458 	.word	0x40020458
 8002790:	40020470 	.word	0x40020470
 8002794:	40020488 	.word	0x40020488
 8002798:	400204a0 	.word	0x400204a0
 800279c:	400204b8 	.word	0x400204b8
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2300      	movs	r3, #0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00d      	beq.n	80027c8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b0:	f003 031f 	and.w	r3, r3, #31
 80027b4:	2204      	movs	r2, #4
 80027b6:	409a      	lsls	r2, r3
 80027b8:	6a3b      	ldr	r3, [r7, #32]
 80027ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c0:	f043 0204 	orr.w	r2, r3, #4
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027cc:	f003 031f 	and.w	r3, r3, #31
 80027d0:	2210      	movs	r2, #16
 80027d2:	409a      	lsls	r2, r3
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	4013      	ands	r3, r2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 80a6 	beq.w	800292a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a85      	ldr	r2, [pc, #532]	; (80029f8 <HAL_DMA_IRQHandler+0x690>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d04a      	beq.n	800287e <HAL_DMA_IRQHandler+0x516>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a83      	ldr	r2, [pc, #524]	; (80029fc <HAL_DMA_IRQHandler+0x694>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d045      	beq.n	800287e <HAL_DMA_IRQHandler+0x516>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a82      	ldr	r2, [pc, #520]	; (8002a00 <HAL_DMA_IRQHandler+0x698>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d040      	beq.n	800287e <HAL_DMA_IRQHandler+0x516>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a80      	ldr	r2, [pc, #512]	; (8002a04 <HAL_DMA_IRQHandler+0x69c>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d03b      	beq.n	800287e <HAL_DMA_IRQHandler+0x516>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a7f      	ldr	r2, [pc, #508]	; (8002a08 <HAL_DMA_IRQHandler+0x6a0>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d036      	beq.n	800287e <HAL_DMA_IRQHandler+0x516>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a7d      	ldr	r2, [pc, #500]	; (8002a0c <HAL_DMA_IRQHandler+0x6a4>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d031      	beq.n	800287e <HAL_DMA_IRQHandler+0x516>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a7c      	ldr	r2, [pc, #496]	; (8002a10 <HAL_DMA_IRQHandler+0x6a8>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d02c      	beq.n	800287e <HAL_DMA_IRQHandler+0x516>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a7a      	ldr	r2, [pc, #488]	; (8002a14 <HAL_DMA_IRQHandler+0x6ac>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d027      	beq.n	800287e <HAL_DMA_IRQHandler+0x516>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a79      	ldr	r2, [pc, #484]	; (8002a18 <HAL_DMA_IRQHandler+0x6b0>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d022      	beq.n	800287e <HAL_DMA_IRQHandler+0x516>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a77      	ldr	r2, [pc, #476]	; (8002a1c <HAL_DMA_IRQHandler+0x6b4>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d01d      	beq.n	800287e <HAL_DMA_IRQHandler+0x516>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a76      	ldr	r2, [pc, #472]	; (8002a20 <HAL_DMA_IRQHandler+0x6b8>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d018      	beq.n	800287e <HAL_DMA_IRQHandler+0x516>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a74      	ldr	r2, [pc, #464]	; (8002a24 <HAL_DMA_IRQHandler+0x6bc>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d013      	beq.n	800287e <HAL_DMA_IRQHandler+0x516>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a73      	ldr	r2, [pc, #460]	; (8002a28 <HAL_DMA_IRQHandler+0x6c0>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d00e      	beq.n	800287e <HAL_DMA_IRQHandler+0x516>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a71      	ldr	r2, [pc, #452]	; (8002a2c <HAL_DMA_IRQHandler+0x6c4>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d009      	beq.n	800287e <HAL_DMA_IRQHandler+0x516>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a70      	ldr	r2, [pc, #448]	; (8002a30 <HAL_DMA_IRQHandler+0x6c8>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d004      	beq.n	800287e <HAL_DMA_IRQHandler+0x516>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a6e      	ldr	r2, [pc, #440]	; (8002a34 <HAL_DMA_IRQHandler+0x6cc>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d10a      	bne.n	8002894 <HAL_DMA_IRQHandler+0x52c>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0308 	and.w	r3, r3, #8
 8002888:	2b00      	cmp	r3, #0
 800288a:	bf14      	ite	ne
 800288c:	2301      	movne	r3, #1
 800288e:	2300      	moveq	r3, #0
 8002890:	b2db      	uxtb	r3, r3
 8002892:	e009      	b.n	80028a8 <HAL_DMA_IRQHandler+0x540>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0304 	and.w	r3, r3, #4
 800289e:	2b00      	cmp	r3, #0
 80028a0:	bf14      	ite	ne
 80028a2:	2301      	movne	r3, #1
 80028a4:	2300      	moveq	r3, #0
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d03e      	beq.n	800292a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b0:	f003 031f 	and.w	r3, r3, #31
 80028b4:	2210      	movs	r2, #16
 80028b6:	409a      	lsls	r2, r3
 80028b8:	6a3b      	ldr	r3, [r7, #32]
 80028ba:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d018      	beq.n	80028fc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d108      	bne.n	80028ea <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d024      	beq.n	800292a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	4798      	blx	r3
 80028e8:	e01f      	b.n	800292a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d01b      	beq.n	800292a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	4798      	blx	r3
 80028fa:	e016      	b.n	800292a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002906:	2b00      	cmp	r3, #0
 8002908:	d107      	bne.n	800291a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f022 0208 	bic.w	r2, r2, #8
 8002918:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800292e:	f003 031f 	and.w	r3, r3, #31
 8002932:	2220      	movs	r2, #32
 8002934:	409a      	lsls	r2, r3
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	4013      	ands	r3, r2
 800293a:	2b00      	cmp	r3, #0
 800293c:	f000 8110 	beq.w	8002b60 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a2c      	ldr	r2, [pc, #176]	; (80029f8 <HAL_DMA_IRQHandler+0x690>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d04a      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x678>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a2b      	ldr	r2, [pc, #172]	; (80029fc <HAL_DMA_IRQHandler+0x694>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d045      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x678>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a29      	ldr	r2, [pc, #164]	; (8002a00 <HAL_DMA_IRQHandler+0x698>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d040      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x678>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a28      	ldr	r2, [pc, #160]	; (8002a04 <HAL_DMA_IRQHandler+0x69c>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d03b      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x678>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a26      	ldr	r2, [pc, #152]	; (8002a08 <HAL_DMA_IRQHandler+0x6a0>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d036      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x678>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a25      	ldr	r2, [pc, #148]	; (8002a0c <HAL_DMA_IRQHandler+0x6a4>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d031      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x678>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a23      	ldr	r2, [pc, #140]	; (8002a10 <HAL_DMA_IRQHandler+0x6a8>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d02c      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x678>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a22      	ldr	r2, [pc, #136]	; (8002a14 <HAL_DMA_IRQHandler+0x6ac>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d027      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x678>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a20      	ldr	r2, [pc, #128]	; (8002a18 <HAL_DMA_IRQHandler+0x6b0>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d022      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x678>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a1f      	ldr	r2, [pc, #124]	; (8002a1c <HAL_DMA_IRQHandler+0x6b4>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d01d      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x678>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a1d      	ldr	r2, [pc, #116]	; (8002a20 <HAL_DMA_IRQHandler+0x6b8>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d018      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x678>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a1c      	ldr	r2, [pc, #112]	; (8002a24 <HAL_DMA_IRQHandler+0x6bc>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d013      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x678>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a1a      	ldr	r2, [pc, #104]	; (8002a28 <HAL_DMA_IRQHandler+0x6c0>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d00e      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x678>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a19      	ldr	r2, [pc, #100]	; (8002a2c <HAL_DMA_IRQHandler+0x6c4>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d009      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x678>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a17      	ldr	r2, [pc, #92]	; (8002a30 <HAL_DMA_IRQHandler+0x6c8>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d004      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x678>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a16      	ldr	r2, [pc, #88]	; (8002a34 <HAL_DMA_IRQHandler+0x6cc>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d12b      	bne.n	8002a38 <HAL_DMA_IRQHandler+0x6d0>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0310 	and.w	r3, r3, #16
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	bf14      	ite	ne
 80029ee:	2301      	movne	r3, #1
 80029f0:	2300      	moveq	r3, #0
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	e02a      	b.n	8002a4c <HAL_DMA_IRQHandler+0x6e4>
 80029f6:	bf00      	nop
 80029f8:	40020010 	.word	0x40020010
 80029fc:	40020028 	.word	0x40020028
 8002a00:	40020040 	.word	0x40020040
 8002a04:	40020058 	.word	0x40020058
 8002a08:	40020070 	.word	0x40020070
 8002a0c:	40020088 	.word	0x40020088
 8002a10:	400200a0 	.word	0x400200a0
 8002a14:	400200b8 	.word	0x400200b8
 8002a18:	40020410 	.word	0x40020410
 8002a1c:	40020428 	.word	0x40020428
 8002a20:	40020440 	.word	0x40020440
 8002a24:	40020458 	.word	0x40020458
 8002a28:	40020470 	.word	0x40020470
 8002a2c:	40020488 	.word	0x40020488
 8002a30:	400204a0 	.word	0x400204a0
 8002a34:	400204b8 	.word	0x400204b8
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	bf14      	ite	ne
 8002a46:	2301      	movne	r3, #1
 8002a48:	2300      	moveq	r3, #0
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 8087 	beq.w	8002b60 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a56:	f003 031f 	and.w	r3, r3, #31
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	409a      	lsls	r2, r3
 8002a5e:	6a3b      	ldr	r3, [r7, #32]
 8002a60:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d139      	bne.n	8002ae2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 0216 	bic.w	r2, r2, #22
 8002a7c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	695a      	ldr	r2, [r3, #20]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a8c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d103      	bne.n	8002a9e <HAL_DMA_IRQHandler+0x736>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d007      	beq.n	8002aae <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 0208 	bic.w	r2, r2, #8
 8002aac:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab2:	f003 031f 	and.w	r3, r3, #31
 8002ab6:	223f      	movs	r2, #63	; 0x3f
 8002ab8:	409a      	lsls	r2, r3
 8002aba:	6a3b      	ldr	r3, [r7, #32]
 8002abc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f000 834a 	beq.w	800316c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	4798      	blx	r3
          }
          return;
 8002ae0:	e344      	b.n	800316c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d018      	beq.n	8002b22 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d108      	bne.n	8002b10 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d02c      	beq.n	8002b60 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	4798      	blx	r3
 8002b0e:	e027      	b.n	8002b60 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d023      	beq.n	8002b60 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	4798      	blx	r3
 8002b20:	e01e      	b.n	8002b60 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d10f      	bne.n	8002b50 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0210 	bic.w	r2, r2, #16
 8002b3e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d003      	beq.n	8002b60 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f000 8306 	beq.w	8003176 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f000 8088 	beq.w	8002c88 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2204      	movs	r2, #4
 8002b7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a7a      	ldr	r2, [pc, #488]	; (8002d70 <HAL_DMA_IRQHandler+0xa08>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d04a      	beq.n	8002c20 <HAL_DMA_IRQHandler+0x8b8>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a79      	ldr	r2, [pc, #484]	; (8002d74 <HAL_DMA_IRQHandler+0xa0c>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d045      	beq.n	8002c20 <HAL_DMA_IRQHandler+0x8b8>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a77      	ldr	r2, [pc, #476]	; (8002d78 <HAL_DMA_IRQHandler+0xa10>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d040      	beq.n	8002c20 <HAL_DMA_IRQHandler+0x8b8>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a76      	ldr	r2, [pc, #472]	; (8002d7c <HAL_DMA_IRQHandler+0xa14>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d03b      	beq.n	8002c20 <HAL_DMA_IRQHandler+0x8b8>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a74      	ldr	r2, [pc, #464]	; (8002d80 <HAL_DMA_IRQHandler+0xa18>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d036      	beq.n	8002c20 <HAL_DMA_IRQHandler+0x8b8>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a73      	ldr	r2, [pc, #460]	; (8002d84 <HAL_DMA_IRQHandler+0xa1c>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d031      	beq.n	8002c20 <HAL_DMA_IRQHandler+0x8b8>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a71      	ldr	r2, [pc, #452]	; (8002d88 <HAL_DMA_IRQHandler+0xa20>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d02c      	beq.n	8002c20 <HAL_DMA_IRQHandler+0x8b8>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a70      	ldr	r2, [pc, #448]	; (8002d8c <HAL_DMA_IRQHandler+0xa24>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d027      	beq.n	8002c20 <HAL_DMA_IRQHandler+0x8b8>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a6e      	ldr	r2, [pc, #440]	; (8002d90 <HAL_DMA_IRQHandler+0xa28>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d022      	beq.n	8002c20 <HAL_DMA_IRQHandler+0x8b8>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a6d      	ldr	r2, [pc, #436]	; (8002d94 <HAL_DMA_IRQHandler+0xa2c>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d01d      	beq.n	8002c20 <HAL_DMA_IRQHandler+0x8b8>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a6b      	ldr	r2, [pc, #428]	; (8002d98 <HAL_DMA_IRQHandler+0xa30>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d018      	beq.n	8002c20 <HAL_DMA_IRQHandler+0x8b8>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a6a      	ldr	r2, [pc, #424]	; (8002d9c <HAL_DMA_IRQHandler+0xa34>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d013      	beq.n	8002c20 <HAL_DMA_IRQHandler+0x8b8>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a68      	ldr	r2, [pc, #416]	; (8002da0 <HAL_DMA_IRQHandler+0xa38>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d00e      	beq.n	8002c20 <HAL_DMA_IRQHandler+0x8b8>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a67      	ldr	r2, [pc, #412]	; (8002da4 <HAL_DMA_IRQHandler+0xa3c>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d009      	beq.n	8002c20 <HAL_DMA_IRQHandler+0x8b8>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a65      	ldr	r2, [pc, #404]	; (8002da8 <HAL_DMA_IRQHandler+0xa40>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d004      	beq.n	8002c20 <HAL_DMA_IRQHandler+0x8b8>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a64      	ldr	r2, [pc, #400]	; (8002dac <HAL_DMA_IRQHandler+0xa44>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d108      	bne.n	8002c32 <HAL_DMA_IRQHandler+0x8ca>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 0201 	bic.w	r2, r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	e007      	b.n	8002c42 <HAL_DMA_IRQHandler+0x8da>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 0201 	bic.w	r2, r2, #1
 8002c40:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	3301      	adds	r3, #1
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d307      	bcc.n	8002c5e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1f2      	bne.n	8002c42 <HAL_DMA_IRQHandler+0x8da>
 8002c5c:	e000      	b.n	8002c60 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002c5e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d004      	beq.n	8002c78 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2203      	movs	r2, #3
 8002c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002c76:	e003      	b.n	8002c80 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 8272 	beq.w	8003176 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	4798      	blx	r3
 8002c9a:	e26c      	b.n	8003176 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a43      	ldr	r2, [pc, #268]	; (8002db0 <HAL_DMA_IRQHandler+0xa48>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d022      	beq.n	8002cec <HAL_DMA_IRQHandler+0x984>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a42      	ldr	r2, [pc, #264]	; (8002db4 <HAL_DMA_IRQHandler+0xa4c>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d01d      	beq.n	8002cec <HAL_DMA_IRQHandler+0x984>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a40      	ldr	r2, [pc, #256]	; (8002db8 <HAL_DMA_IRQHandler+0xa50>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d018      	beq.n	8002cec <HAL_DMA_IRQHandler+0x984>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a3f      	ldr	r2, [pc, #252]	; (8002dbc <HAL_DMA_IRQHandler+0xa54>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d013      	beq.n	8002cec <HAL_DMA_IRQHandler+0x984>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a3d      	ldr	r2, [pc, #244]	; (8002dc0 <HAL_DMA_IRQHandler+0xa58>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d00e      	beq.n	8002cec <HAL_DMA_IRQHandler+0x984>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a3c      	ldr	r2, [pc, #240]	; (8002dc4 <HAL_DMA_IRQHandler+0xa5c>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d009      	beq.n	8002cec <HAL_DMA_IRQHandler+0x984>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a3a      	ldr	r2, [pc, #232]	; (8002dc8 <HAL_DMA_IRQHandler+0xa60>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d004      	beq.n	8002cec <HAL_DMA_IRQHandler+0x984>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a39      	ldr	r2, [pc, #228]	; (8002dcc <HAL_DMA_IRQHandler+0xa64>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d101      	bne.n	8002cf0 <HAL_DMA_IRQHandler+0x988>
 8002cec:	2301      	movs	r3, #1
 8002cee:	e000      	b.n	8002cf2 <HAL_DMA_IRQHandler+0x98a>
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f000 823f 	beq.w	8003176 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d04:	f003 031f 	and.w	r3, r3, #31
 8002d08:	2204      	movs	r2, #4
 8002d0a:	409a      	lsls	r2, r3
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 80cd 	beq.w	8002eb0 <HAL_DMA_IRQHandler+0xb48>
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f000 80c7 	beq.w	8002eb0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d26:	f003 031f 	and.w	r3, r3, #31
 8002d2a:	2204      	movs	r2, #4
 8002d2c:	409a      	lsls	r2, r3
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d049      	beq.n	8002dd0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d109      	bne.n	8002d5a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 8210 	beq.w	8003170 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d58:	e20a      	b.n	8003170 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 8206 	beq.w	8003170 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d6c:	e200      	b.n	8003170 <HAL_DMA_IRQHandler+0xe08>
 8002d6e:	bf00      	nop
 8002d70:	40020010 	.word	0x40020010
 8002d74:	40020028 	.word	0x40020028
 8002d78:	40020040 	.word	0x40020040
 8002d7c:	40020058 	.word	0x40020058
 8002d80:	40020070 	.word	0x40020070
 8002d84:	40020088 	.word	0x40020088
 8002d88:	400200a0 	.word	0x400200a0
 8002d8c:	400200b8 	.word	0x400200b8
 8002d90:	40020410 	.word	0x40020410
 8002d94:	40020428 	.word	0x40020428
 8002d98:	40020440 	.word	0x40020440
 8002d9c:	40020458 	.word	0x40020458
 8002da0:	40020470 	.word	0x40020470
 8002da4:	40020488 	.word	0x40020488
 8002da8:	400204a0 	.word	0x400204a0
 8002dac:	400204b8 	.word	0x400204b8
 8002db0:	58025408 	.word	0x58025408
 8002db4:	5802541c 	.word	0x5802541c
 8002db8:	58025430 	.word	0x58025430
 8002dbc:	58025444 	.word	0x58025444
 8002dc0:	58025458 	.word	0x58025458
 8002dc4:	5802546c 	.word	0x5802546c
 8002dc8:	58025480 	.word	0x58025480
 8002dcc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	f003 0320 	and.w	r3, r3, #32
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d160      	bne.n	8002e9c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a7f      	ldr	r2, [pc, #508]	; (8002fdc <HAL_DMA_IRQHandler+0xc74>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d04a      	beq.n	8002e7a <HAL_DMA_IRQHandler+0xb12>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a7d      	ldr	r2, [pc, #500]	; (8002fe0 <HAL_DMA_IRQHandler+0xc78>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d045      	beq.n	8002e7a <HAL_DMA_IRQHandler+0xb12>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a7c      	ldr	r2, [pc, #496]	; (8002fe4 <HAL_DMA_IRQHandler+0xc7c>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d040      	beq.n	8002e7a <HAL_DMA_IRQHandler+0xb12>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a7a      	ldr	r2, [pc, #488]	; (8002fe8 <HAL_DMA_IRQHandler+0xc80>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d03b      	beq.n	8002e7a <HAL_DMA_IRQHandler+0xb12>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a79      	ldr	r2, [pc, #484]	; (8002fec <HAL_DMA_IRQHandler+0xc84>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d036      	beq.n	8002e7a <HAL_DMA_IRQHandler+0xb12>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a77      	ldr	r2, [pc, #476]	; (8002ff0 <HAL_DMA_IRQHandler+0xc88>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d031      	beq.n	8002e7a <HAL_DMA_IRQHandler+0xb12>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a76      	ldr	r2, [pc, #472]	; (8002ff4 <HAL_DMA_IRQHandler+0xc8c>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d02c      	beq.n	8002e7a <HAL_DMA_IRQHandler+0xb12>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a74      	ldr	r2, [pc, #464]	; (8002ff8 <HAL_DMA_IRQHandler+0xc90>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d027      	beq.n	8002e7a <HAL_DMA_IRQHandler+0xb12>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a73      	ldr	r2, [pc, #460]	; (8002ffc <HAL_DMA_IRQHandler+0xc94>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d022      	beq.n	8002e7a <HAL_DMA_IRQHandler+0xb12>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a71      	ldr	r2, [pc, #452]	; (8003000 <HAL_DMA_IRQHandler+0xc98>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d01d      	beq.n	8002e7a <HAL_DMA_IRQHandler+0xb12>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a70      	ldr	r2, [pc, #448]	; (8003004 <HAL_DMA_IRQHandler+0xc9c>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d018      	beq.n	8002e7a <HAL_DMA_IRQHandler+0xb12>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a6e      	ldr	r2, [pc, #440]	; (8003008 <HAL_DMA_IRQHandler+0xca0>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d013      	beq.n	8002e7a <HAL_DMA_IRQHandler+0xb12>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a6d      	ldr	r2, [pc, #436]	; (800300c <HAL_DMA_IRQHandler+0xca4>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d00e      	beq.n	8002e7a <HAL_DMA_IRQHandler+0xb12>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a6b      	ldr	r2, [pc, #428]	; (8003010 <HAL_DMA_IRQHandler+0xca8>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d009      	beq.n	8002e7a <HAL_DMA_IRQHandler+0xb12>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a6a      	ldr	r2, [pc, #424]	; (8003014 <HAL_DMA_IRQHandler+0xcac>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d004      	beq.n	8002e7a <HAL_DMA_IRQHandler+0xb12>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a68      	ldr	r2, [pc, #416]	; (8003018 <HAL_DMA_IRQHandler+0xcb0>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d108      	bne.n	8002e8c <HAL_DMA_IRQHandler+0xb24>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 0208 	bic.w	r2, r2, #8
 8002e88:	601a      	str	r2, [r3, #0]
 8002e8a:	e007      	b.n	8002e9c <HAL_DMA_IRQHandler+0xb34>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0204 	bic.w	r2, r2, #4
 8002e9a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f000 8165 	beq.w	8003170 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002eae:	e15f      	b.n	8003170 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb4:	f003 031f 	and.w	r3, r3, #31
 8002eb8:	2202      	movs	r2, #2
 8002eba:	409a      	lsls	r2, r3
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f000 80c5 	beq.w	8003050 <HAL_DMA_IRQHandler+0xce8>
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f000 80bf 	beq.w	8003050 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed6:	f003 031f 	and.w	r3, r3, #31
 8002eda:	2202      	movs	r2, #2
 8002edc:	409a      	lsls	r2, r3
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d018      	beq.n	8002f1e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d109      	bne.n	8002f0a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 813a 	beq.w	8003174 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f08:	e134      	b.n	8003174 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f000 8130 	beq.w	8003174 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f1c:	e12a      	b.n	8003174 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	f003 0320 	and.w	r3, r3, #32
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f040 8089 	bne.w	800303c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a2b      	ldr	r2, [pc, #172]	; (8002fdc <HAL_DMA_IRQHandler+0xc74>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d04a      	beq.n	8002fca <HAL_DMA_IRQHandler+0xc62>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a29      	ldr	r2, [pc, #164]	; (8002fe0 <HAL_DMA_IRQHandler+0xc78>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d045      	beq.n	8002fca <HAL_DMA_IRQHandler+0xc62>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a28      	ldr	r2, [pc, #160]	; (8002fe4 <HAL_DMA_IRQHandler+0xc7c>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d040      	beq.n	8002fca <HAL_DMA_IRQHandler+0xc62>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a26      	ldr	r2, [pc, #152]	; (8002fe8 <HAL_DMA_IRQHandler+0xc80>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d03b      	beq.n	8002fca <HAL_DMA_IRQHandler+0xc62>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a25      	ldr	r2, [pc, #148]	; (8002fec <HAL_DMA_IRQHandler+0xc84>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d036      	beq.n	8002fca <HAL_DMA_IRQHandler+0xc62>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a23      	ldr	r2, [pc, #140]	; (8002ff0 <HAL_DMA_IRQHandler+0xc88>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d031      	beq.n	8002fca <HAL_DMA_IRQHandler+0xc62>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a22      	ldr	r2, [pc, #136]	; (8002ff4 <HAL_DMA_IRQHandler+0xc8c>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d02c      	beq.n	8002fca <HAL_DMA_IRQHandler+0xc62>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a20      	ldr	r2, [pc, #128]	; (8002ff8 <HAL_DMA_IRQHandler+0xc90>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d027      	beq.n	8002fca <HAL_DMA_IRQHandler+0xc62>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a1f      	ldr	r2, [pc, #124]	; (8002ffc <HAL_DMA_IRQHandler+0xc94>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d022      	beq.n	8002fca <HAL_DMA_IRQHandler+0xc62>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a1d      	ldr	r2, [pc, #116]	; (8003000 <HAL_DMA_IRQHandler+0xc98>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d01d      	beq.n	8002fca <HAL_DMA_IRQHandler+0xc62>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a1c      	ldr	r2, [pc, #112]	; (8003004 <HAL_DMA_IRQHandler+0xc9c>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d018      	beq.n	8002fca <HAL_DMA_IRQHandler+0xc62>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a1a      	ldr	r2, [pc, #104]	; (8003008 <HAL_DMA_IRQHandler+0xca0>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d013      	beq.n	8002fca <HAL_DMA_IRQHandler+0xc62>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a19      	ldr	r2, [pc, #100]	; (800300c <HAL_DMA_IRQHandler+0xca4>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d00e      	beq.n	8002fca <HAL_DMA_IRQHandler+0xc62>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a17      	ldr	r2, [pc, #92]	; (8003010 <HAL_DMA_IRQHandler+0xca8>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d009      	beq.n	8002fca <HAL_DMA_IRQHandler+0xc62>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a16      	ldr	r2, [pc, #88]	; (8003014 <HAL_DMA_IRQHandler+0xcac>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d004      	beq.n	8002fca <HAL_DMA_IRQHandler+0xc62>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a14      	ldr	r2, [pc, #80]	; (8003018 <HAL_DMA_IRQHandler+0xcb0>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d128      	bne.n	800301c <HAL_DMA_IRQHandler+0xcb4>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 0214 	bic.w	r2, r2, #20
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	e027      	b.n	800302c <HAL_DMA_IRQHandler+0xcc4>
 8002fdc:	40020010 	.word	0x40020010
 8002fe0:	40020028 	.word	0x40020028
 8002fe4:	40020040 	.word	0x40020040
 8002fe8:	40020058 	.word	0x40020058
 8002fec:	40020070 	.word	0x40020070
 8002ff0:	40020088 	.word	0x40020088
 8002ff4:	400200a0 	.word	0x400200a0
 8002ff8:	400200b8 	.word	0x400200b8
 8002ffc:	40020410 	.word	0x40020410
 8003000:	40020428 	.word	0x40020428
 8003004:	40020440 	.word	0x40020440
 8003008:	40020458 	.word	0x40020458
 800300c:	40020470 	.word	0x40020470
 8003010:	40020488 	.word	0x40020488
 8003014:	400204a0 	.word	0x400204a0
 8003018:	400204b8 	.word	0x400204b8
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 020a 	bic.w	r2, r2, #10
 800302a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003040:	2b00      	cmp	r3, #0
 8003042:	f000 8097 	beq.w	8003174 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800304e:	e091      	b.n	8003174 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003054:	f003 031f 	and.w	r3, r3, #31
 8003058:	2208      	movs	r2, #8
 800305a:	409a      	lsls	r2, r3
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	4013      	ands	r3, r2
 8003060:	2b00      	cmp	r3, #0
 8003062:	f000 8088 	beq.w	8003176 <HAL_DMA_IRQHandler+0xe0e>
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	f003 0308 	and.w	r3, r3, #8
 800306c:	2b00      	cmp	r3, #0
 800306e:	f000 8082 	beq.w	8003176 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a41      	ldr	r2, [pc, #260]	; (800317c <HAL_DMA_IRQHandler+0xe14>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d04a      	beq.n	8003112 <HAL_DMA_IRQHandler+0xdaa>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a3f      	ldr	r2, [pc, #252]	; (8003180 <HAL_DMA_IRQHandler+0xe18>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d045      	beq.n	8003112 <HAL_DMA_IRQHandler+0xdaa>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a3e      	ldr	r2, [pc, #248]	; (8003184 <HAL_DMA_IRQHandler+0xe1c>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d040      	beq.n	8003112 <HAL_DMA_IRQHandler+0xdaa>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a3c      	ldr	r2, [pc, #240]	; (8003188 <HAL_DMA_IRQHandler+0xe20>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d03b      	beq.n	8003112 <HAL_DMA_IRQHandler+0xdaa>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a3b      	ldr	r2, [pc, #236]	; (800318c <HAL_DMA_IRQHandler+0xe24>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d036      	beq.n	8003112 <HAL_DMA_IRQHandler+0xdaa>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a39      	ldr	r2, [pc, #228]	; (8003190 <HAL_DMA_IRQHandler+0xe28>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d031      	beq.n	8003112 <HAL_DMA_IRQHandler+0xdaa>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a38      	ldr	r2, [pc, #224]	; (8003194 <HAL_DMA_IRQHandler+0xe2c>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d02c      	beq.n	8003112 <HAL_DMA_IRQHandler+0xdaa>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a36      	ldr	r2, [pc, #216]	; (8003198 <HAL_DMA_IRQHandler+0xe30>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d027      	beq.n	8003112 <HAL_DMA_IRQHandler+0xdaa>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a35      	ldr	r2, [pc, #212]	; (800319c <HAL_DMA_IRQHandler+0xe34>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d022      	beq.n	8003112 <HAL_DMA_IRQHandler+0xdaa>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a33      	ldr	r2, [pc, #204]	; (80031a0 <HAL_DMA_IRQHandler+0xe38>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d01d      	beq.n	8003112 <HAL_DMA_IRQHandler+0xdaa>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a32      	ldr	r2, [pc, #200]	; (80031a4 <HAL_DMA_IRQHandler+0xe3c>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d018      	beq.n	8003112 <HAL_DMA_IRQHandler+0xdaa>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a30      	ldr	r2, [pc, #192]	; (80031a8 <HAL_DMA_IRQHandler+0xe40>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d013      	beq.n	8003112 <HAL_DMA_IRQHandler+0xdaa>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a2f      	ldr	r2, [pc, #188]	; (80031ac <HAL_DMA_IRQHandler+0xe44>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d00e      	beq.n	8003112 <HAL_DMA_IRQHandler+0xdaa>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a2d      	ldr	r2, [pc, #180]	; (80031b0 <HAL_DMA_IRQHandler+0xe48>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d009      	beq.n	8003112 <HAL_DMA_IRQHandler+0xdaa>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a2c      	ldr	r2, [pc, #176]	; (80031b4 <HAL_DMA_IRQHandler+0xe4c>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d004      	beq.n	8003112 <HAL_DMA_IRQHandler+0xdaa>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a2a      	ldr	r2, [pc, #168]	; (80031b8 <HAL_DMA_IRQHandler+0xe50>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d108      	bne.n	8003124 <HAL_DMA_IRQHandler+0xdbc>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f022 021c 	bic.w	r2, r2, #28
 8003120:	601a      	str	r2, [r3, #0]
 8003122:	e007      	b.n	8003134 <HAL_DMA_IRQHandler+0xdcc>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 020e 	bic.w	r2, r2, #14
 8003132:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003138:	f003 031f 	and.w	r3, r3, #31
 800313c:	2201      	movs	r2, #1
 800313e:	409a      	lsls	r2, r3
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800315e:	2b00      	cmp	r3, #0
 8003160:	d009      	beq.n	8003176 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	4798      	blx	r3
 800316a:	e004      	b.n	8003176 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800316c:	bf00      	nop
 800316e:	e002      	b.n	8003176 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003170:	bf00      	nop
 8003172:	e000      	b.n	8003176 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003174:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003176:	3728      	adds	r7, #40	; 0x28
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40020010 	.word	0x40020010
 8003180:	40020028 	.word	0x40020028
 8003184:	40020040 	.word	0x40020040
 8003188:	40020058 	.word	0x40020058
 800318c:	40020070 	.word	0x40020070
 8003190:	40020088 	.word	0x40020088
 8003194:	400200a0 	.word	0x400200a0
 8003198:	400200b8 	.word	0x400200b8
 800319c:	40020410 	.word	0x40020410
 80031a0:	40020428 	.word	0x40020428
 80031a4:	40020440 	.word	0x40020440
 80031a8:	40020458 	.word	0x40020458
 80031ac:	40020470 	.word	0x40020470
 80031b0:	40020488 	.word	0x40020488
 80031b4:	400204a0 	.word	0x400204a0
 80031b8:	400204b8 	.word	0x400204b8

080031bc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031bc:	b480      	push	{r7}
 80031be:	b087      	sub	sp, #28
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
 80031c8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ce:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a7f      	ldr	r2, [pc, #508]	; (80033d8 <DMA_SetConfig+0x21c>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d072      	beq.n	80032c6 <DMA_SetConfig+0x10a>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a7d      	ldr	r2, [pc, #500]	; (80033dc <DMA_SetConfig+0x220>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d06d      	beq.n	80032c6 <DMA_SetConfig+0x10a>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a7c      	ldr	r2, [pc, #496]	; (80033e0 <DMA_SetConfig+0x224>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d068      	beq.n	80032c6 <DMA_SetConfig+0x10a>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a7a      	ldr	r2, [pc, #488]	; (80033e4 <DMA_SetConfig+0x228>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d063      	beq.n	80032c6 <DMA_SetConfig+0x10a>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a79      	ldr	r2, [pc, #484]	; (80033e8 <DMA_SetConfig+0x22c>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d05e      	beq.n	80032c6 <DMA_SetConfig+0x10a>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a77      	ldr	r2, [pc, #476]	; (80033ec <DMA_SetConfig+0x230>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d059      	beq.n	80032c6 <DMA_SetConfig+0x10a>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a76      	ldr	r2, [pc, #472]	; (80033f0 <DMA_SetConfig+0x234>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d054      	beq.n	80032c6 <DMA_SetConfig+0x10a>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a74      	ldr	r2, [pc, #464]	; (80033f4 <DMA_SetConfig+0x238>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d04f      	beq.n	80032c6 <DMA_SetConfig+0x10a>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a73      	ldr	r2, [pc, #460]	; (80033f8 <DMA_SetConfig+0x23c>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d04a      	beq.n	80032c6 <DMA_SetConfig+0x10a>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a71      	ldr	r2, [pc, #452]	; (80033fc <DMA_SetConfig+0x240>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d045      	beq.n	80032c6 <DMA_SetConfig+0x10a>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a70      	ldr	r2, [pc, #448]	; (8003400 <DMA_SetConfig+0x244>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d040      	beq.n	80032c6 <DMA_SetConfig+0x10a>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a6e      	ldr	r2, [pc, #440]	; (8003404 <DMA_SetConfig+0x248>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d03b      	beq.n	80032c6 <DMA_SetConfig+0x10a>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a6d      	ldr	r2, [pc, #436]	; (8003408 <DMA_SetConfig+0x24c>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d036      	beq.n	80032c6 <DMA_SetConfig+0x10a>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a6b      	ldr	r2, [pc, #428]	; (800340c <DMA_SetConfig+0x250>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d031      	beq.n	80032c6 <DMA_SetConfig+0x10a>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a6a      	ldr	r2, [pc, #424]	; (8003410 <DMA_SetConfig+0x254>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d02c      	beq.n	80032c6 <DMA_SetConfig+0x10a>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a68      	ldr	r2, [pc, #416]	; (8003414 <DMA_SetConfig+0x258>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d027      	beq.n	80032c6 <DMA_SetConfig+0x10a>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a67      	ldr	r2, [pc, #412]	; (8003418 <DMA_SetConfig+0x25c>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d022      	beq.n	80032c6 <DMA_SetConfig+0x10a>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a65      	ldr	r2, [pc, #404]	; (800341c <DMA_SetConfig+0x260>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d01d      	beq.n	80032c6 <DMA_SetConfig+0x10a>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a64      	ldr	r2, [pc, #400]	; (8003420 <DMA_SetConfig+0x264>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d018      	beq.n	80032c6 <DMA_SetConfig+0x10a>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a62      	ldr	r2, [pc, #392]	; (8003424 <DMA_SetConfig+0x268>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d013      	beq.n	80032c6 <DMA_SetConfig+0x10a>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a61      	ldr	r2, [pc, #388]	; (8003428 <DMA_SetConfig+0x26c>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d00e      	beq.n	80032c6 <DMA_SetConfig+0x10a>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a5f      	ldr	r2, [pc, #380]	; (800342c <DMA_SetConfig+0x270>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d009      	beq.n	80032c6 <DMA_SetConfig+0x10a>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a5e      	ldr	r2, [pc, #376]	; (8003430 <DMA_SetConfig+0x274>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d004      	beq.n	80032c6 <DMA_SetConfig+0x10a>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a5c      	ldr	r2, [pc, #368]	; (8003434 <DMA_SetConfig+0x278>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d101      	bne.n	80032ca <DMA_SetConfig+0x10e>
 80032c6:	2301      	movs	r3, #1
 80032c8:	e000      	b.n	80032cc <DMA_SetConfig+0x110>
 80032ca:	2300      	movs	r3, #0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00d      	beq.n	80032ec <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80032d8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d004      	beq.n	80032ec <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80032ea:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a39      	ldr	r2, [pc, #228]	; (80033d8 <DMA_SetConfig+0x21c>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d04a      	beq.n	800338c <DMA_SetConfig+0x1d0>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a38      	ldr	r2, [pc, #224]	; (80033dc <DMA_SetConfig+0x220>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d045      	beq.n	800338c <DMA_SetConfig+0x1d0>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a36      	ldr	r2, [pc, #216]	; (80033e0 <DMA_SetConfig+0x224>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d040      	beq.n	800338c <DMA_SetConfig+0x1d0>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a35      	ldr	r2, [pc, #212]	; (80033e4 <DMA_SetConfig+0x228>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d03b      	beq.n	800338c <DMA_SetConfig+0x1d0>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a33      	ldr	r2, [pc, #204]	; (80033e8 <DMA_SetConfig+0x22c>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d036      	beq.n	800338c <DMA_SetConfig+0x1d0>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a32      	ldr	r2, [pc, #200]	; (80033ec <DMA_SetConfig+0x230>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d031      	beq.n	800338c <DMA_SetConfig+0x1d0>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a30      	ldr	r2, [pc, #192]	; (80033f0 <DMA_SetConfig+0x234>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d02c      	beq.n	800338c <DMA_SetConfig+0x1d0>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a2f      	ldr	r2, [pc, #188]	; (80033f4 <DMA_SetConfig+0x238>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d027      	beq.n	800338c <DMA_SetConfig+0x1d0>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a2d      	ldr	r2, [pc, #180]	; (80033f8 <DMA_SetConfig+0x23c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d022      	beq.n	800338c <DMA_SetConfig+0x1d0>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a2c      	ldr	r2, [pc, #176]	; (80033fc <DMA_SetConfig+0x240>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d01d      	beq.n	800338c <DMA_SetConfig+0x1d0>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a2a      	ldr	r2, [pc, #168]	; (8003400 <DMA_SetConfig+0x244>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d018      	beq.n	800338c <DMA_SetConfig+0x1d0>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a29      	ldr	r2, [pc, #164]	; (8003404 <DMA_SetConfig+0x248>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d013      	beq.n	800338c <DMA_SetConfig+0x1d0>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a27      	ldr	r2, [pc, #156]	; (8003408 <DMA_SetConfig+0x24c>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d00e      	beq.n	800338c <DMA_SetConfig+0x1d0>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a26      	ldr	r2, [pc, #152]	; (800340c <DMA_SetConfig+0x250>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d009      	beq.n	800338c <DMA_SetConfig+0x1d0>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a24      	ldr	r2, [pc, #144]	; (8003410 <DMA_SetConfig+0x254>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d004      	beq.n	800338c <DMA_SetConfig+0x1d0>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a23      	ldr	r2, [pc, #140]	; (8003414 <DMA_SetConfig+0x258>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d101      	bne.n	8003390 <DMA_SetConfig+0x1d4>
 800338c:	2301      	movs	r3, #1
 800338e:	e000      	b.n	8003392 <DMA_SetConfig+0x1d6>
 8003390:	2300      	movs	r3, #0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d059      	beq.n	800344a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800339a:	f003 031f 	and.w	r3, r3, #31
 800339e:	223f      	movs	r2, #63	; 0x3f
 80033a0:	409a      	lsls	r2, r3
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80033b4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	2b40      	cmp	r3, #64	; 0x40
 80033c4:	d138      	bne.n	8003438 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80033d6:	e086      	b.n	80034e6 <DMA_SetConfig+0x32a>
 80033d8:	40020010 	.word	0x40020010
 80033dc:	40020028 	.word	0x40020028
 80033e0:	40020040 	.word	0x40020040
 80033e4:	40020058 	.word	0x40020058
 80033e8:	40020070 	.word	0x40020070
 80033ec:	40020088 	.word	0x40020088
 80033f0:	400200a0 	.word	0x400200a0
 80033f4:	400200b8 	.word	0x400200b8
 80033f8:	40020410 	.word	0x40020410
 80033fc:	40020428 	.word	0x40020428
 8003400:	40020440 	.word	0x40020440
 8003404:	40020458 	.word	0x40020458
 8003408:	40020470 	.word	0x40020470
 800340c:	40020488 	.word	0x40020488
 8003410:	400204a0 	.word	0x400204a0
 8003414:	400204b8 	.word	0x400204b8
 8003418:	58025408 	.word	0x58025408
 800341c:	5802541c 	.word	0x5802541c
 8003420:	58025430 	.word	0x58025430
 8003424:	58025444 	.word	0x58025444
 8003428:	58025458 	.word	0x58025458
 800342c:	5802546c 	.word	0x5802546c
 8003430:	58025480 	.word	0x58025480
 8003434:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68ba      	ldr	r2, [r7, #8]
 800343e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	60da      	str	r2, [r3, #12]
}
 8003448:	e04d      	b.n	80034e6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a29      	ldr	r2, [pc, #164]	; (80034f4 <DMA_SetConfig+0x338>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d022      	beq.n	800349a <DMA_SetConfig+0x2de>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a27      	ldr	r2, [pc, #156]	; (80034f8 <DMA_SetConfig+0x33c>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d01d      	beq.n	800349a <DMA_SetConfig+0x2de>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a26      	ldr	r2, [pc, #152]	; (80034fc <DMA_SetConfig+0x340>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d018      	beq.n	800349a <DMA_SetConfig+0x2de>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a24      	ldr	r2, [pc, #144]	; (8003500 <DMA_SetConfig+0x344>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d013      	beq.n	800349a <DMA_SetConfig+0x2de>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a23      	ldr	r2, [pc, #140]	; (8003504 <DMA_SetConfig+0x348>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d00e      	beq.n	800349a <DMA_SetConfig+0x2de>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a21      	ldr	r2, [pc, #132]	; (8003508 <DMA_SetConfig+0x34c>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d009      	beq.n	800349a <DMA_SetConfig+0x2de>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a20      	ldr	r2, [pc, #128]	; (800350c <DMA_SetConfig+0x350>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d004      	beq.n	800349a <DMA_SetConfig+0x2de>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a1e      	ldr	r2, [pc, #120]	; (8003510 <DMA_SetConfig+0x354>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d101      	bne.n	800349e <DMA_SetConfig+0x2e2>
 800349a:	2301      	movs	r3, #1
 800349c:	e000      	b.n	80034a0 <DMA_SetConfig+0x2e4>
 800349e:	2300      	movs	r3, #0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d020      	beq.n	80034e6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a8:	f003 031f 	and.w	r3, r3, #31
 80034ac:	2201      	movs	r2, #1
 80034ae:	409a      	lsls	r2, r3
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	2b40      	cmp	r3, #64	; 0x40
 80034c2:	d108      	bne.n	80034d6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68ba      	ldr	r2, [r7, #8]
 80034d2:	60da      	str	r2, [r3, #12]
}
 80034d4:	e007      	b.n	80034e6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68ba      	ldr	r2, [r7, #8]
 80034dc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	60da      	str	r2, [r3, #12]
}
 80034e6:	bf00      	nop
 80034e8:	371c      	adds	r7, #28
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	58025408 	.word	0x58025408
 80034f8:	5802541c 	.word	0x5802541c
 80034fc:	58025430 	.word	0x58025430
 8003500:	58025444 	.word	0x58025444
 8003504:	58025458 	.word	0x58025458
 8003508:	5802546c 	.word	0x5802546c
 800350c:	58025480 	.word	0x58025480
 8003510:	58025494 	.word	0x58025494

08003514 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a42      	ldr	r2, [pc, #264]	; (800362c <DMA_CalcBaseAndBitshift+0x118>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d04a      	beq.n	80035bc <DMA_CalcBaseAndBitshift+0xa8>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a41      	ldr	r2, [pc, #260]	; (8003630 <DMA_CalcBaseAndBitshift+0x11c>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d045      	beq.n	80035bc <DMA_CalcBaseAndBitshift+0xa8>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a3f      	ldr	r2, [pc, #252]	; (8003634 <DMA_CalcBaseAndBitshift+0x120>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d040      	beq.n	80035bc <DMA_CalcBaseAndBitshift+0xa8>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a3e      	ldr	r2, [pc, #248]	; (8003638 <DMA_CalcBaseAndBitshift+0x124>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d03b      	beq.n	80035bc <DMA_CalcBaseAndBitshift+0xa8>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a3c      	ldr	r2, [pc, #240]	; (800363c <DMA_CalcBaseAndBitshift+0x128>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d036      	beq.n	80035bc <DMA_CalcBaseAndBitshift+0xa8>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a3b      	ldr	r2, [pc, #236]	; (8003640 <DMA_CalcBaseAndBitshift+0x12c>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d031      	beq.n	80035bc <DMA_CalcBaseAndBitshift+0xa8>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a39      	ldr	r2, [pc, #228]	; (8003644 <DMA_CalcBaseAndBitshift+0x130>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d02c      	beq.n	80035bc <DMA_CalcBaseAndBitshift+0xa8>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a38      	ldr	r2, [pc, #224]	; (8003648 <DMA_CalcBaseAndBitshift+0x134>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d027      	beq.n	80035bc <DMA_CalcBaseAndBitshift+0xa8>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a36      	ldr	r2, [pc, #216]	; (800364c <DMA_CalcBaseAndBitshift+0x138>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d022      	beq.n	80035bc <DMA_CalcBaseAndBitshift+0xa8>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a35      	ldr	r2, [pc, #212]	; (8003650 <DMA_CalcBaseAndBitshift+0x13c>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d01d      	beq.n	80035bc <DMA_CalcBaseAndBitshift+0xa8>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a33      	ldr	r2, [pc, #204]	; (8003654 <DMA_CalcBaseAndBitshift+0x140>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d018      	beq.n	80035bc <DMA_CalcBaseAndBitshift+0xa8>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a32      	ldr	r2, [pc, #200]	; (8003658 <DMA_CalcBaseAndBitshift+0x144>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d013      	beq.n	80035bc <DMA_CalcBaseAndBitshift+0xa8>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a30      	ldr	r2, [pc, #192]	; (800365c <DMA_CalcBaseAndBitshift+0x148>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d00e      	beq.n	80035bc <DMA_CalcBaseAndBitshift+0xa8>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a2f      	ldr	r2, [pc, #188]	; (8003660 <DMA_CalcBaseAndBitshift+0x14c>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d009      	beq.n	80035bc <DMA_CalcBaseAndBitshift+0xa8>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a2d      	ldr	r2, [pc, #180]	; (8003664 <DMA_CalcBaseAndBitshift+0x150>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d004      	beq.n	80035bc <DMA_CalcBaseAndBitshift+0xa8>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a2c      	ldr	r2, [pc, #176]	; (8003668 <DMA_CalcBaseAndBitshift+0x154>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d101      	bne.n	80035c0 <DMA_CalcBaseAndBitshift+0xac>
 80035bc:	2301      	movs	r3, #1
 80035be:	e000      	b.n	80035c2 <DMA_CalcBaseAndBitshift+0xae>
 80035c0:	2300      	movs	r3, #0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d024      	beq.n	8003610 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	3b10      	subs	r3, #16
 80035ce:	4a27      	ldr	r2, [pc, #156]	; (800366c <DMA_CalcBaseAndBitshift+0x158>)
 80035d0:	fba2 2303 	umull	r2, r3, r2, r3
 80035d4:	091b      	lsrs	r3, r3, #4
 80035d6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f003 0307 	and.w	r3, r3, #7
 80035de:	4a24      	ldr	r2, [pc, #144]	; (8003670 <DMA_CalcBaseAndBitshift+0x15c>)
 80035e0:	5cd3      	ldrb	r3, [r2, r3]
 80035e2:	461a      	mov	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2b03      	cmp	r3, #3
 80035ec:	d908      	bls.n	8003600 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	461a      	mov	r2, r3
 80035f4:	4b1f      	ldr	r3, [pc, #124]	; (8003674 <DMA_CalcBaseAndBitshift+0x160>)
 80035f6:	4013      	ands	r3, r2
 80035f8:	1d1a      	adds	r2, r3, #4
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	659a      	str	r2, [r3, #88]	; 0x58
 80035fe:	e00d      	b.n	800361c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	461a      	mov	r2, r3
 8003606:	4b1b      	ldr	r3, [pc, #108]	; (8003674 <DMA_CalcBaseAndBitshift+0x160>)
 8003608:	4013      	ands	r3, r2
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	6593      	str	r3, [r2, #88]	; 0x58
 800360e:	e005      	b.n	800361c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003620:	4618      	mov	r0, r3
 8003622:	3714      	adds	r7, #20
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	40020010 	.word	0x40020010
 8003630:	40020028 	.word	0x40020028
 8003634:	40020040 	.word	0x40020040
 8003638:	40020058 	.word	0x40020058
 800363c:	40020070 	.word	0x40020070
 8003640:	40020088 	.word	0x40020088
 8003644:	400200a0 	.word	0x400200a0
 8003648:	400200b8 	.word	0x400200b8
 800364c:	40020410 	.word	0x40020410
 8003650:	40020428 	.word	0x40020428
 8003654:	40020440 	.word	0x40020440
 8003658:	40020458 	.word	0x40020458
 800365c:	40020470 	.word	0x40020470
 8003660:	40020488 	.word	0x40020488
 8003664:	400204a0 	.word	0x400204a0
 8003668:	400204b8 	.word	0x400204b8
 800366c:	aaaaaaab 	.word	0xaaaaaaab
 8003670:	08009c18 	.word	0x08009c18
 8003674:	fffffc00 	.word	0xfffffc00

08003678 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003680:	2300      	movs	r3, #0
 8003682:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d120      	bne.n	80036ce <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003690:	2b03      	cmp	r3, #3
 8003692:	d858      	bhi.n	8003746 <DMA_CheckFifoParam+0xce>
 8003694:	a201      	add	r2, pc, #4	; (adr r2, 800369c <DMA_CheckFifoParam+0x24>)
 8003696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800369a:	bf00      	nop
 800369c:	080036ad 	.word	0x080036ad
 80036a0:	080036bf 	.word	0x080036bf
 80036a4:	080036ad 	.word	0x080036ad
 80036a8:	08003747 	.word	0x08003747
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d048      	beq.n	800374a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80036bc:	e045      	b.n	800374a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036c6:	d142      	bne.n	800374e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80036cc:	e03f      	b.n	800374e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036d6:	d123      	bne.n	8003720 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036dc:	2b03      	cmp	r3, #3
 80036de:	d838      	bhi.n	8003752 <DMA_CheckFifoParam+0xda>
 80036e0:	a201      	add	r2, pc, #4	; (adr r2, 80036e8 <DMA_CheckFifoParam+0x70>)
 80036e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e6:	bf00      	nop
 80036e8:	080036f9 	.word	0x080036f9
 80036ec:	080036ff 	.word	0x080036ff
 80036f0:	080036f9 	.word	0x080036f9
 80036f4:	08003711 	.word	0x08003711
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	73fb      	strb	r3, [r7, #15]
        break;
 80036fc:	e030      	b.n	8003760 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003702:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d025      	beq.n	8003756 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800370e:	e022      	b.n	8003756 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003714:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003718:	d11f      	bne.n	800375a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800371e:	e01c      	b.n	800375a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003724:	2b02      	cmp	r3, #2
 8003726:	d902      	bls.n	800372e <DMA_CheckFifoParam+0xb6>
 8003728:	2b03      	cmp	r3, #3
 800372a:	d003      	beq.n	8003734 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800372c:	e018      	b.n	8003760 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	73fb      	strb	r3, [r7, #15]
        break;
 8003732:	e015      	b.n	8003760 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003738:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00e      	beq.n	800375e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	73fb      	strb	r3, [r7, #15]
    break;
 8003744:	e00b      	b.n	800375e <DMA_CheckFifoParam+0xe6>
        break;
 8003746:	bf00      	nop
 8003748:	e00a      	b.n	8003760 <DMA_CheckFifoParam+0xe8>
        break;
 800374a:	bf00      	nop
 800374c:	e008      	b.n	8003760 <DMA_CheckFifoParam+0xe8>
        break;
 800374e:	bf00      	nop
 8003750:	e006      	b.n	8003760 <DMA_CheckFifoParam+0xe8>
        break;
 8003752:	bf00      	nop
 8003754:	e004      	b.n	8003760 <DMA_CheckFifoParam+0xe8>
        break;
 8003756:	bf00      	nop
 8003758:	e002      	b.n	8003760 <DMA_CheckFifoParam+0xe8>
        break;
 800375a:	bf00      	nop
 800375c:	e000      	b.n	8003760 <DMA_CheckFifoParam+0xe8>
    break;
 800375e:	bf00      	nop
    }
  }

  return status;
 8003760:	7bfb      	ldrb	r3, [r7, #15]
}
 8003762:	4618      	mov	r0, r3
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop

08003770 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a38      	ldr	r2, [pc, #224]	; (8003864 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d022      	beq.n	80037ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a36      	ldr	r2, [pc, #216]	; (8003868 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d01d      	beq.n	80037ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a35      	ldr	r2, [pc, #212]	; (800386c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d018      	beq.n	80037ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a33      	ldr	r2, [pc, #204]	; (8003870 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d013      	beq.n	80037ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a32      	ldr	r2, [pc, #200]	; (8003874 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d00e      	beq.n	80037ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a30      	ldr	r2, [pc, #192]	; (8003878 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d009      	beq.n	80037ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a2f      	ldr	r2, [pc, #188]	; (800387c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d004      	beq.n	80037ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a2d      	ldr	r2, [pc, #180]	; (8003880 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d101      	bne.n	80037d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80037ce:	2301      	movs	r3, #1
 80037d0:	e000      	b.n	80037d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80037d2:	2300      	movs	r3, #0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d01a      	beq.n	800380e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	3b08      	subs	r3, #8
 80037e0:	4a28      	ldr	r2, [pc, #160]	; (8003884 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80037e2:	fba2 2303 	umull	r2, r3, r2, r3
 80037e6:	091b      	lsrs	r3, r3, #4
 80037e8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	4b26      	ldr	r3, [pc, #152]	; (8003888 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80037ee:	4413      	add	r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	461a      	mov	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a24      	ldr	r2, [pc, #144]	; (800388c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80037fc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f003 031f 	and.w	r3, r3, #31
 8003804:	2201      	movs	r2, #1
 8003806:	409a      	lsls	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800380c:	e024      	b.n	8003858 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	b2db      	uxtb	r3, r3
 8003814:	3b10      	subs	r3, #16
 8003816:	4a1e      	ldr	r2, [pc, #120]	; (8003890 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003818:	fba2 2303 	umull	r2, r3, r2, r3
 800381c:	091b      	lsrs	r3, r3, #4
 800381e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	4a1c      	ldr	r2, [pc, #112]	; (8003894 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d806      	bhi.n	8003836 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	4a1b      	ldr	r2, [pc, #108]	; (8003898 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d902      	bls.n	8003836 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	3308      	adds	r3, #8
 8003834:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	4b18      	ldr	r3, [pc, #96]	; (800389c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800383a:	4413      	add	r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	461a      	mov	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a16      	ldr	r2, [pc, #88]	; (80038a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003848:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f003 031f 	and.w	r3, r3, #31
 8003850:	2201      	movs	r2, #1
 8003852:	409a      	lsls	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003858:	bf00      	nop
 800385a:	3714      	adds	r7, #20
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	58025408 	.word	0x58025408
 8003868:	5802541c 	.word	0x5802541c
 800386c:	58025430 	.word	0x58025430
 8003870:	58025444 	.word	0x58025444
 8003874:	58025458 	.word	0x58025458
 8003878:	5802546c 	.word	0x5802546c
 800387c:	58025480 	.word	0x58025480
 8003880:	58025494 	.word	0x58025494
 8003884:	cccccccd 	.word	0xcccccccd
 8003888:	16009600 	.word	0x16009600
 800388c:	58025880 	.word	0x58025880
 8003890:	aaaaaaab 	.word	0xaaaaaaab
 8003894:	400204b8 	.word	0x400204b8
 8003898:	4002040f 	.word	0x4002040f
 800389c:	10008200 	.word	0x10008200
 80038a0:	40020880 	.word	0x40020880

080038a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d04a      	beq.n	8003950 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2b08      	cmp	r3, #8
 80038be:	d847      	bhi.n	8003950 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a25      	ldr	r2, [pc, #148]	; (800395c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d022      	beq.n	8003910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a24      	ldr	r2, [pc, #144]	; (8003960 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d01d      	beq.n	8003910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a22      	ldr	r2, [pc, #136]	; (8003964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d018      	beq.n	8003910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a21      	ldr	r2, [pc, #132]	; (8003968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d013      	beq.n	8003910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a1f      	ldr	r2, [pc, #124]	; (800396c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d00e      	beq.n	8003910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a1e      	ldr	r2, [pc, #120]	; (8003970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d009      	beq.n	8003910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a1c      	ldr	r2, [pc, #112]	; (8003974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d004      	beq.n	8003910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a1b      	ldr	r2, [pc, #108]	; (8003978 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d101      	bne.n	8003914 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003910:	2301      	movs	r3, #1
 8003912:	e000      	b.n	8003916 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003914:	2300      	movs	r3, #0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00a      	beq.n	8003930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	4b17      	ldr	r3, [pc, #92]	; (800397c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800391e:	4413      	add	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	461a      	mov	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a15      	ldr	r2, [pc, #84]	; (8003980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800392c:	671a      	str	r2, [r3, #112]	; 0x70
 800392e:	e009      	b.n	8003944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	4b14      	ldr	r3, [pc, #80]	; (8003984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003934:	4413      	add	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	461a      	mov	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a11      	ldr	r2, [pc, #68]	; (8003988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003942:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	3b01      	subs	r3, #1
 8003948:	2201      	movs	r2, #1
 800394a:	409a      	lsls	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003950:	bf00      	nop
 8003952:	3714      	adds	r7, #20
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	58025408 	.word	0x58025408
 8003960:	5802541c 	.word	0x5802541c
 8003964:	58025430 	.word	0x58025430
 8003968:	58025444 	.word	0x58025444
 800396c:	58025458 	.word	0x58025458
 8003970:	5802546c 	.word	0x5802546c
 8003974:	58025480 	.word	0x58025480
 8003978:	58025494 	.word	0x58025494
 800397c:	1600963f 	.word	0x1600963f
 8003980:	58025940 	.word	0x58025940
 8003984:	1000823f 	.word	0x1000823f
 8003988:	40020940 	.word	0x40020940

0800398c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e0cf      	b.n	8003b3e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d106      	bne.n	80039b6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2223      	movs	r2, #35	; 0x23
 80039ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f7fd fad5 	bl	8000f60 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039b6:	4b64      	ldr	r3, [pc, #400]	; (8003b48 <HAL_ETH_Init+0x1bc>)
 80039b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80039bc:	4a62      	ldr	r2, [pc, #392]	; (8003b48 <HAL_ETH_Init+0x1bc>)
 80039be:	f043 0302 	orr.w	r3, r3, #2
 80039c2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80039c6:	4b60      	ldr	r3, [pc, #384]	; (8003b48 <HAL_ETH_Init+0x1bc>)
 80039c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	60bb      	str	r3, [r7, #8]
 80039d2:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	7a1b      	ldrb	r3, [r3, #8]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d103      	bne.n	80039e4 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80039dc:	2000      	movs	r0, #0
 80039de:	f7fd ff23 	bl	8001828 <HAL_SYSCFG_ETHInterfaceSelect>
 80039e2:	e003      	b.n	80039ec <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80039e4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80039e8:	f7fd ff1e 	bl	8001828 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80039ec:	4b57      	ldr	r3, [pc, #348]	; (8003b4c <HAL_ETH_Init+0x1c0>)
 80039ee:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	6812      	ldr	r2, [r2, #0]
 80039fe:	f043 0301 	orr.w	r3, r3, #1
 8003a02:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a06:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a08:	f7fd fed2 	bl	80017b0 <HAL_GetTick>
 8003a0c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003a0e:	e011      	b.n	8003a34 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003a10:	f7fd fece 	bl	80017b0 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003a1e:	d909      	bls.n	8003a34 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2204      	movs	r2, #4
 8003a24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	22e0      	movs	r2, #224	; 0xe0
 8003a2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e084      	b.n	8003b3e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1e4      	bne.n	8003a10 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 f886 	bl	8003b58 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003a4c:	f001 feb0 	bl	80057b0 <HAL_RCC_GetHCLKFreq>
 8003a50:	4603      	mov	r3, r0
 8003a52:	4a3f      	ldr	r2, [pc, #252]	; (8003b50 <HAL_ETH_Init+0x1c4>)
 8003a54:	fba2 2303 	umull	r2, r3, r2, r3
 8003a58:	0c9a      	lsrs	r2, r3, #18
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	3a01      	subs	r2, #1
 8003a60:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 fa71 	bl	8003f4c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a72:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003a76:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6812      	ldr	r2, [r2, #0]
 8003a7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a82:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a86:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	f003 0303 	and.w	r3, r3, #3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d009      	beq.n	8003aaa <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	22e0      	movs	r2, #224	; 0xe0
 8003aa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e049      	b.n	8003b3e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ab2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003ab6:	4b27      	ldr	r3, [pc, #156]	; (8003b54 <HAL_ETH_Init+0x1c8>)
 8003ab8:	4013      	ands	r3, r2
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6952      	ldr	r2, [r2, #20]
 8003abe:	0051      	lsls	r1, r2, #1
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6812      	ldr	r2, [r2, #0]
 8003ac4:	430b      	orrs	r3, r1
 8003ac6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003aca:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 fad9 	bl	8004086 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 fb1f 	bl	8004118 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	3305      	adds	r3, #5
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	021a      	lsls	r2, r3, #8
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	3304      	adds	r3, #4
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	4619      	mov	r1, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	3303      	adds	r3, #3
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	061a      	lsls	r2, r3, #24
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	3302      	adds	r3, #2
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	041b      	lsls	r3, r3, #16
 8003b0c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	3301      	adds	r3, #1
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003b18:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003b26:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003b28:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2210      	movs	r2, #16
 8003b38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	58024400 	.word	0x58024400
 8003b4c:	58000400 	.word	0x58000400
 8003b50:	431bde83 	.word	0x431bde83
 8003b54:	ffff8001 	.word	0xffff8001

08003b58 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003b68:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b70:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003b72:	f001 fe1d 	bl	80057b0 <HAL_RCC_GetHCLKFreq>
 8003b76:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	4a1e      	ldr	r2, [pc, #120]	; (8003bf4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d908      	bls.n	8003b92 <HAL_ETH_SetMDIOClockRange+0x3a>
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	4a1d      	ldr	r2, [pc, #116]	; (8003bf8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d804      	bhi.n	8003b92 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	e027      	b.n	8003be2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	4a18      	ldr	r2, [pc, #96]	; (8003bf8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d908      	bls.n	8003bac <HAL_ETH_SetMDIOClockRange+0x54>
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	4a17      	ldr	r2, [pc, #92]	; (8003bfc <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d204      	bcs.n	8003bac <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003ba8:	60fb      	str	r3, [r7, #12]
 8003baa:	e01a      	b.n	8003be2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	4a13      	ldr	r2, [pc, #76]	; (8003bfc <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d303      	bcc.n	8003bbc <HAL_ETH_SetMDIOClockRange+0x64>
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	4a12      	ldr	r2, [pc, #72]	; (8003c00 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d911      	bls.n	8003be0 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	4a10      	ldr	r2, [pc, #64]	; (8003c00 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d908      	bls.n	8003bd6 <HAL_ETH_SetMDIOClockRange+0x7e>
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	4a0f      	ldr	r2, [pc, #60]	; (8003c04 <HAL_ETH_SetMDIOClockRange+0xac>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d804      	bhi.n	8003bd6 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bd2:	60fb      	str	r3, [r7, #12]
 8003bd4:	e005      	b.n	8003be2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bdc:	60fb      	str	r3, [r7, #12]
 8003bde:	e000      	b.n	8003be2 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003be0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003bec:	bf00      	nop
 8003bee:	3710      	adds	r7, #16
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	01312cff 	.word	0x01312cff
 8003bf8:	02160ebf 	.word	0x02160ebf
 8003bfc:	03938700 	.word	0x03938700
 8003c00:	05f5e0ff 	.word	0x05f5e0ff
 8003c04:	08f0d17f 	.word	0x08f0d17f

08003c08 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8003c1a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	791b      	ldrb	r3, [r3, #4]
 8003c20:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8003c22:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	7b1b      	ldrb	r3, [r3, #12]
 8003c28:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003c2a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	7b5b      	ldrb	r3, [r3, #13]
 8003c30:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003c32:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	7b9b      	ldrb	r3, [r3, #14]
 8003c38:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003c3a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	7bdb      	ldrb	r3, [r3, #15]
 8003c40:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003c42:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	7c12      	ldrb	r2, [r2, #16]
 8003c48:	2a00      	cmp	r2, #0
 8003c4a:	d102      	bne.n	8003c52 <ETH_SetMACConfig+0x4a>
 8003c4c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003c50:	e000      	b.n	8003c54 <ETH_SetMACConfig+0x4c>
 8003c52:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003c54:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	7c52      	ldrb	r2, [r2, #17]
 8003c5a:	2a00      	cmp	r2, #0
 8003c5c:	d102      	bne.n	8003c64 <ETH_SetMACConfig+0x5c>
 8003c5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c62:	e000      	b.n	8003c66 <ETH_SetMACConfig+0x5e>
 8003c64:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003c66:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	7c9b      	ldrb	r3, [r3, #18]
 8003c6c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003c6e:	431a      	orrs	r2, r3
               macconf->Speed |
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8003c74:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8003c7a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	7f1b      	ldrb	r3, [r3, #28]
 8003c80:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8003c82:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	7f5b      	ldrb	r3, [r3, #29]
 8003c88:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003c8a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	7f92      	ldrb	r2, [r2, #30]
 8003c90:	2a00      	cmp	r2, #0
 8003c92:	d102      	bne.n	8003c9a <ETH_SetMACConfig+0x92>
 8003c94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c98:	e000      	b.n	8003c9c <ETH_SetMACConfig+0x94>
 8003c9a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003c9c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	7fdb      	ldrb	r3, [r3, #31]
 8003ca2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003ca4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003cac:	2a00      	cmp	r2, #0
 8003cae:	d102      	bne.n	8003cb6 <ETH_SetMACConfig+0xae>
 8003cb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cb4:	e000      	b.n	8003cb8 <ETH_SetMACConfig+0xb0>
 8003cb6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003cb8:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003cbe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cc6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8003cc8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	4b56      	ldr	r3, [pc, #344]	; (8003e34 <ETH_SetMACConfig+0x22c>)
 8003cda:	4013      	ands	r3, r2
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	6812      	ldr	r2, [r2, #0]
 8003ce0:	68f9      	ldr	r1, [r7, #12]
 8003ce2:	430b      	orrs	r3, r1
 8003ce4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cea:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003cf2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003cf4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003cfc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003cfe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003d06:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003d08:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8003d10:	2a00      	cmp	r2, #0
 8003d12:	d102      	bne.n	8003d1a <ETH_SetMACConfig+0x112>
 8003d14:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003d18:	e000      	b.n	8003d1c <ETH_SetMACConfig+0x114>
 8003d1a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003d1c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003d22:	4313      	orrs	r3, r2
 8003d24:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	685a      	ldr	r2, [r3, #4]
 8003d2c:	4b42      	ldr	r3, [pc, #264]	; (8003e38 <ETH_SetMACConfig+0x230>)
 8003d2e:	4013      	ands	r3, r2
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	6812      	ldr	r2, [r2, #0]
 8003d34:	68f9      	ldr	r1, [r7, #12]
 8003d36:	430b      	orrs	r3, r1
 8003d38:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d40:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003d46:	4313      	orrs	r3, r2
 8003d48:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68da      	ldr	r2, [r3, #12]
 8003d50:	4b3a      	ldr	r3, [pc, #232]	; (8003e3c <ETH_SetMACConfig+0x234>)
 8003d52:	4013      	ands	r3, r2
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	6812      	ldr	r2, [r2, #0]
 8003d58:	68f9      	ldr	r1, [r7, #12]
 8003d5a:	430b      	orrs	r3, r1
 8003d5c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003d64:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003d6a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003d72:	2a00      	cmp	r2, #0
 8003d74:	d101      	bne.n	8003d7a <ETH_SetMACConfig+0x172>
 8003d76:	2280      	movs	r2, #128	; 0x80
 8003d78:	e000      	b.n	8003d7c <ETH_SetMACConfig+0x174>
 8003d7a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003d7c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d82:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003d84:	4313      	orrs	r3, r2
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d8e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8003d92:	4013      	ands	r3, r2
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	6812      	ldr	r2, [r2, #0]
 8003d98:	68f9      	ldr	r1, [r7, #12]
 8003d9a:	430b      	orrs	r3, r1
 8003d9c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003da4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003dac:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003dae:	4313      	orrs	r3, r2
 8003db0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dba:	f023 0103 	bic.w	r1, r3, #3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8003dd2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003de8:	683a      	ldr	r2, [r7, #0]
 8003dea:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8003dee:	2a00      	cmp	r2, #0
 8003df0:	d101      	bne.n	8003df6 <ETH_SetMACConfig+0x1ee>
 8003df2:	2240      	movs	r2, #64	; 0x40
 8003df4:	e000      	b.n	8003df8 <ETH_SetMACConfig+0x1f0>
 8003df6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003df8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003e00:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003e02:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8003e0a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003e18:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8003e28:	bf00      	nop
 8003e2a:	3714      	adds	r7, #20
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr
 8003e34:	00048083 	.word	0x00048083
 8003e38:	c0f88000 	.word	0xc0f88000
 8003e3c:	fffffef0 	.word	0xfffffef0

08003e40 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	4b38      	ldr	r3, [pc, #224]	; (8003f38 <ETH_SetDMAConfig+0xf8>)
 8003e56:	4013      	ands	r3, r2
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	6811      	ldr	r1, [r2, #0]
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	6812      	ldr	r2, [r2, #0]
 8003e60:	430b      	orrs	r3, r1
 8003e62:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e66:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	791b      	ldrb	r3, [r3, #4]
 8003e6c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003e72:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	7b1b      	ldrb	r3, [r3, #12]
 8003e78:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	4b2c      	ldr	r3, [pc, #176]	; (8003f3c <ETH_SetDMAConfig+0xfc>)
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6812      	ldr	r2, [r2, #0]
 8003e90:	68f9      	ldr	r1, [r7, #12]
 8003e92:	430b      	orrs	r3, r1
 8003e94:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e98:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	7b5b      	ldrb	r3, [r3, #13]
 8003e9e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003eb0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8003eb4:	4b22      	ldr	r3, [pc, #136]	; (8003f40 <ETH_SetDMAConfig+0x100>)
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	6812      	ldr	r2, [r2, #0]
 8003ebc:	68f9      	ldr	r1, [r7, #12]
 8003ebe:	430b      	orrs	r3, r1
 8003ec0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ec4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	7d1b      	ldrb	r3, [r3, #20]
 8003ed0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003ed2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	7f5b      	ldrb	r3, [r3, #29]
 8003ed8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003eda:	4313      	orrs	r3, r2
 8003edc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ee6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8003eea:	4b16      	ldr	r3, [pc, #88]	; (8003f44 <ETH_SetDMAConfig+0x104>)
 8003eec:	4013      	ands	r3, r2
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	6812      	ldr	r2, [r2, #0]
 8003ef2:	68f9      	ldr	r1, [r7, #12]
 8003ef4:	430b      	orrs	r3, r1
 8003ef6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003efa:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	7f1b      	ldrb	r3, [r3, #28]
 8003f02:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f14:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003f18:	4b0b      	ldr	r3, [pc, #44]	; (8003f48 <ETH_SetDMAConfig+0x108>)
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	6812      	ldr	r2, [r2, #0]
 8003f20:	68f9      	ldr	r1, [r7, #12]
 8003f22:	430b      	orrs	r3, r1
 8003f24:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f28:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8003f2c:	bf00      	nop
 8003f2e:	3714      	adds	r7, #20
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr
 8003f38:	ffff87fd 	.word	0xffff87fd
 8003f3c:	ffff2ffe 	.word	0xffff2ffe
 8003f40:	fffec000 	.word	0xfffec000
 8003f44:	ffc0efef 	.word	0xffc0efef
 8003f48:	7fc0ffff 	.word	0x7fc0ffff

08003f4c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b0a4      	sub	sp, #144	; 0x90
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003f54:	2301      	movs	r3, #1
 8003f56:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003f64:	2300      	movs	r3, #0
 8003f66:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003f70:	2301      	movs	r3, #1
 8003f72:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003f76:	2301      	movs	r3, #1
 8003f78:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003f82:	2301      	movs	r3, #1
 8003f84:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003f88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f8c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8003f94:	2300      	movs	r3, #0
 8003f96:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8003fa4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8003fa8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003faa:	2300      	movs	r3, #0
 8003fac:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003fe4:	2320      	movs	r3, #32
 8003fe6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003fea:	2301      	movs	r3, #1
 8003fec:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003ff6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8003ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003ffc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004000:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8004002:	2300      	movs	r3, #0
 8004004:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004008:	2302      	movs	r3, #2
 800400a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800400e:	2300      	movs	r3, #0
 8004010:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004014:	2300      	movs	r3, #0
 8004016:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800401a:	2300      	movs	r3, #0
 800401c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004020:	2301      	movs	r3, #1
 8004022:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004026:	2300      	movs	r3, #0
 8004028:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800402a:	2301      	movs	r3, #1
 800402c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004030:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004034:	4619      	mov	r1, r3
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7ff fde6 	bl	8003c08 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800403c:	2301      	movs	r3, #1
 800403e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004040:	2301      	movs	r3, #1
 8004042:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004044:	2300      	movs	r3, #0
 8004046:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004048:	2300      	movs	r3, #0
 800404a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800404e:	2300      	movs	r3, #0
 8004050:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004052:	2300      	movs	r3, #0
 8004054:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004056:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800405a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800405c:	2300      	movs	r3, #0
 800405e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004060:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004064:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004066:	2300      	movs	r3, #0
 8004068:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800406c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004070:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004072:	f107 0308 	add.w	r3, r7, #8
 8004076:	4619      	mov	r1, r3
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f7ff fee1 	bl	8003e40 <ETH_SetDMAConfig>
}
 800407e:	bf00      	nop
 8004080:	3790      	adds	r7, #144	; 0x90
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004086:	b480      	push	{r7}
 8004088:	b085      	sub	sp, #20
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800408e:	2300      	movs	r3, #0
 8004090:	60fb      	str	r3, [r7, #12]
 8004092:	e01d      	b.n	80040d0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68d9      	ldr	r1, [r3, #12]
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	4613      	mov	r3, r2
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	4413      	add	r3, r2
 80040a0:	00db      	lsls	r3, r3, #3
 80040a2:	440b      	add	r3, r1
 80040a4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	2200      	movs	r2, #0
 80040aa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	2200      	movs	r2, #0
 80040b0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	2200      	movs	r2, #0
 80040b6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	2200      	movs	r2, #0
 80040bc:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80040be:	68b9      	ldr	r1, [r7, #8]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	3206      	adds	r2, #6
 80040c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	3301      	adds	r3, #1
 80040ce:	60fb      	str	r3, [r7, #12]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2b03      	cmp	r3, #3
 80040d4:	d9de      	bls.n	8004094 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040e4:	461a      	mov	r2, r3
 80040e6:	2303      	movs	r3, #3
 80040e8:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68da      	ldr	r2, [r3, #12]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040f8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	68da      	ldr	r2, [r3, #12]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004108:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800410c:	bf00      	nop
 800410e:	3714      	adds	r7, #20
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004120:	2300      	movs	r3, #0
 8004122:	60fb      	str	r3, [r7, #12]
 8004124:	e023      	b.n	800416e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6919      	ldr	r1, [r3, #16]
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	4613      	mov	r3, r2
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	4413      	add	r3, r2
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	440b      	add	r3, r1
 8004136:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	2200      	movs	r2, #0
 800413c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	2200      	movs	r2, #0
 8004142:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	2200      	movs	r2, #0
 8004148:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	2200      	movs	r2, #0
 800414e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	2200      	movs	r2, #0
 8004154:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	2200      	movs	r2, #0
 800415a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800415c:	68b9      	ldr	r1, [r7, #8]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	3212      	adds	r2, #18
 8004164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	3301      	adds	r3, #1
 800416c:	60fb      	str	r3, [r7, #12]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2b03      	cmp	r3, #3
 8004172:	d9d8      	bls.n	8004126 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800419a:	461a      	mov	r2, r3
 800419c:	2303      	movs	r3, #3
 800419e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	691a      	ldr	r2, [r3, #16]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041ae:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041c2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80041c6:	bf00      	nop
 80041c8:	3714      	adds	r7, #20
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
	...

080041d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b089      	sub	sp, #36	; 0x24
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80041de:	2300      	movs	r3, #0
 80041e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80041e2:	4b89      	ldr	r3, [pc, #548]	; (8004408 <HAL_GPIO_Init+0x234>)
 80041e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80041e6:	e194      	b.n	8004512 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	2101      	movs	r1, #1
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	fa01 f303 	lsl.w	r3, r1, r3
 80041f4:	4013      	ands	r3, r2
 80041f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f000 8186 	beq.w	800450c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f003 0303 	and.w	r3, r3, #3
 8004208:	2b01      	cmp	r3, #1
 800420a:	d005      	beq.n	8004218 <HAL_GPIO_Init+0x44>
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f003 0303 	and.w	r3, r3, #3
 8004214:	2b02      	cmp	r3, #2
 8004216:	d130      	bne.n	800427a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	005b      	lsls	r3, r3, #1
 8004222:	2203      	movs	r2, #3
 8004224:	fa02 f303 	lsl.w	r3, r2, r3
 8004228:	43db      	mvns	r3, r3
 800422a:	69ba      	ldr	r2, [r7, #24]
 800422c:	4013      	ands	r3, r2
 800422e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	68da      	ldr	r2, [r3, #12]
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	fa02 f303 	lsl.w	r3, r2, r3
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	4313      	orrs	r3, r2
 8004240:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800424e:	2201      	movs	r2, #1
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	fa02 f303 	lsl.w	r3, r2, r3
 8004256:	43db      	mvns	r3, r3
 8004258:	69ba      	ldr	r2, [r7, #24]
 800425a:	4013      	ands	r3, r2
 800425c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	091b      	lsrs	r3, r3, #4
 8004264:	f003 0201 	and.w	r2, r3, #1
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	fa02 f303 	lsl.w	r3, r2, r3
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	4313      	orrs	r3, r2
 8004272:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f003 0303 	and.w	r3, r3, #3
 8004282:	2b03      	cmp	r3, #3
 8004284:	d017      	beq.n	80042b6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	005b      	lsls	r3, r3, #1
 8004290:	2203      	movs	r2, #3
 8004292:	fa02 f303 	lsl.w	r3, r2, r3
 8004296:	43db      	mvns	r3, r3
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	4013      	ands	r3, r2
 800429c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	689a      	ldr	r2, [r3, #8]
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	fa02 f303 	lsl.w	r3, r2, r3
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f003 0303 	and.w	r3, r3, #3
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d123      	bne.n	800430a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	08da      	lsrs	r2, r3, #3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	3208      	adds	r2, #8
 80042ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	f003 0307 	and.w	r3, r3, #7
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	220f      	movs	r2, #15
 80042da:	fa02 f303 	lsl.w	r3, r2, r3
 80042de:	43db      	mvns	r3, r3
 80042e0:	69ba      	ldr	r2, [r7, #24]
 80042e2:	4013      	ands	r3, r2
 80042e4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	691a      	ldr	r2, [r3, #16]
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	f003 0307 	and.w	r3, r3, #7
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	fa02 f303 	lsl.w	r3, r2, r3
 80042f6:	69ba      	ldr	r2, [r7, #24]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	08da      	lsrs	r2, r3, #3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	3208      	adds	r2, #8
 8004304:	69b9      	ldr	r1, [r7, #24]
 8004306:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	005b      	lsls	r3, r3, #1
 8004314:	2203      	movs	r2, #3
 8004316:	fa02 f303 	lsl.w	r3, r2, r3
 800431a:	43db      	mvns	r3, r3
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	4013      	ands	r3, r2
 8004320:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f003 0203 	and.w	r2, r3, #3
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	fa02 f303 	lsl.w	r3, r2, r3
 8004332:	69ba      	ldr	r2, [r7, #24]
 8004334:	4313      	orrs	r3, r2
 8004336:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	69ba      	ldr	r2, [r7, #24]
 800433c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004346:	2b00      	cmp	r3, #0
 8004348:	f000 80e0 	beq.w	800450c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800434c:	4b2f      	ldr	r3, [pc, #188]	; (800440c <HAL_GPIO_Init+0x238>)
 800434e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004352:	4a2e      	ldr	r2, [pc, #184]	; (800440c <HAL_GPIO_Init+0x238>)
 8004354:	f043 0302 	orr.w	r3, r3, #2
 8004358:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800435c:	4b2b      	ldr	r3, [pc, #172]	; (800440c <HAL_GPIO_Init+0x238>)
 800435e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	60fb      	str	r3, [r7, #12]
 8004368:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800436a:	4a29      	ldr	r2, [pc, #164]	; (8004410 <HAL_GPIO_Init+0x23c>)
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	089b      	lsrs	r3, r3, #2
 8004370:	3302      	adds	r3, #2
 8004372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004376:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	f003 0303 	and.w	r3, r3, #3
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	220f      	movs	r2, #15
 8004382:	fa02 f303 	lsl.w	r3, r2, r3
 8004386:	43db      	mvns	r3, r3
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	4013      	ands	r3, r2
 800438c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a20      	ldr	r2, [pc, #128]	; (8004414 <HAL_GPIO_Init+0x240>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d052      	beq.n	800443c <HAL_GPIO_Init+0x268>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a1f      	ldr	r2, [pc, #124]	; (8004418 <HAL_GPIO_Init+0x244>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d031      	beq.n	8004402 <HAL_GPIO_Init+0x22e>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a1e      	ldr	r2, [pc, #120]	; (800441c <HAL_GPIO_Init+0x248>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d02b      	beq.n	80043fe <HAL_GPIO_Init+0x22a>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a1d      	ldr	r2, [pc, #116]	; (8004420 <HAL_GPIO_Init+0x24c>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d025      	beq.n	80043fa <HAL_GPIO_Init+0x226>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a1c      	ldr	r2, [pc, #112]	; (8004424 <HAL_GPIO_Init+0x250>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d01f      	beq.n	80043f6 <HAL_GPIO_Init+0x222>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a1b      	ldr	r2, [pc, #108]	; (8004428 <HAL_GPIO_Init+0x254>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d019      	beq.n	80043f2 <HAL_GPIO_Init+0x21e>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a1a      	ldr	r2, [pc, #104]	; (800442c <HAL_GPIO_Init+0x258>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d013      	beq.n	80043ee <HAL_GPIO_Init+0x21a>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a19      	ldr	r2, [pc, #100]	; (8004430 <HAL_GPIO_Init+0x25c>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d00d      	beq.n	80043ea <HAL_GPIO_Init+0x216>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a18      	ldr	r2, [pc, #96]	; (8004434 <HAL_GPIO_Init+0x260>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d007      	beq.n	80043e6 <HAL_GPIO_Init+0x212>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a17      	ldr	r2, [pc, #92]	; (8004438 <HAL_GPIO_Init+0x264>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d101      	bne.n	80043e2 <HAL_GPIO_Init+0x20e>
 80043de:	2309      	movs	r3, #9
 80043e0:	e02d      	b.n	800443e <HAL_GPIO_Init+0x26a>
 80043e2:	230a      	movs	r3, #10
 80043e4:	e02b      	b.n	800443e <HAL_GPIO_Init+0x26a>
 80043e6:	2308      	movs	r3, #8
 80043e8:	e029      	b.n	800443e <HAL_GPIO_Init+0x26a>
 80043ea:	2307      	movs	r3, #7
 80043ec:	e027      	b.n	800443e <HAL_GPIO_Init+0x26a>
 80043ee:	2306      	movs	r3, #6
 80043f0:	e025      	b.n	800443e <HAL_GPIO_Init+0x26a>
 80043f2:	2305      	movs	r3, #5
 80043f4:	e023      	b.n	800443e <HAL_GPIO_Init+0x26a>
 80043f6:	2304      	movs	r3, #4
 80043f8:	e021      	b.n	800443e <HAL_GPIO_Init+0x26a>
 80043fa:	2303      	movs	r3, #3
 80043fc:	e01f      	b.n	800443e <HAL_GPIO_Init+0x26a>
 80043fe:	2302      	movs	r3, #2
 8004400:	e01d      	b.n	800443e <HAL_GPIO_Init+0x26a>
 8004402:	2301      	movs	r3, #1
 8004404:	e01b      	b.n	800443e <HAL_GPIO_Init+0x26a>
 8004406:	bf00      	nop
 8004408:	58000080 	.word	0x58000080
 800440c:	58024400 	.word	0x58024400
 8004410:	58000400 	.word	0x58000400
 8004414:	58020000 	.word	0x58020000
 8004418:	58020400 	.word	0x58020400
 800441c:	58020800 	.word	0x58020800
 8004420:	58020c00 	.word	0x58020c00
 8004424:	58021000 	.word	0x58021000
 8004428:	58021400 	.word	0x58021400
 800442c:	58021800 	.word	0x58021800
 8004430:	58021c00 	.word	0x58021c00
 8004434:	58022000 	.word	0x58022000
 8004438:	58022400 	.word	0x58022400
 800443c:	2300      	movs	r3, #0
 800443e:	69fa      	ldr	r2, [r7, #28]
 8004440:	f002 0203 	and.w	r2, r2, #3
 8004444:	0092      	lsls	r2, r2, #2
 8004446:	4093      	lsls	r3, r2
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	4313      	orrs	r3, r2
 800444c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800444e:	4938      	ldr	r1, [pc, #224]	; (8004530 <HAL_GPIO_Init+0x35c>)
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	089b      	lsrs	r3, r3, #2
 8004454:	3302      	adds	r3, #2
 8004456:	69ba      	ldr	r2, [r7, #24]
 8004458:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800445c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	43db      	mvns	r3, r3
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	4013      	ands	r3, r2
 800446c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d003      	beq.n	8004482 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800447a:	69ba      	ldr	r2, [r7, #24]
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	4313      	orrs	r3, r2
 8004480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004482:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800448a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	43db      	mvns	r3, r3
 8004496:	69ba      	ldr	r2, [r7, #24]
 8004498:	4013      	ands	r3, r2
 800449a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d003      	beq.n	80044b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80044b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	43db      	mvns	r3, r3
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	4013      	ands	r3, r2
 80044c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d003      	beq.n	80044dc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	4313      	orrs	r3, r2
 80044da:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	43db      	mvns	r3, r3
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	4013      	ands	r3, r2
 80044f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	4313      	orrs	r3, r2
 8004504:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	3301      	adds	r3, #1
 8004510:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	fa22 f303 	lsr.w	r3, r2, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	f47f ae63 	bne.w	80041e8 <HAL_GPIO_Init+0x14>
  }
}
 8004522:	bf00      	nop
 8004524:	bf00      	nop
 8004526:	3724      	adds	r7, #36	; 0x24
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr
 8004530:	58000400 	.word	0x58000400

08004534 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	460b      	mov	r3, r1
 800453e:	807b      	strh	r3, [r7, #2]
 8004540:	4613      	mov	r3, r2
 8004542:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004544:	787b      	ldrb	r3, [r7, #1]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d003      	beq.n	8004552 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800454a:	887a      	ldrh	r2, [r7, #2]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004550:	e003      	b.n	800455a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004552:	887b      	ldrh	r3, [r7, #2]
 8004554:	041a      	lsls	r2, r3, #16
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	619a      	str	r2, [r3, #24]
}
 800455a:	bf00      	nop
 800455c:	370c      	adds	r7, #12
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr

08004566 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004566:	b480      	push	{r7}
 8004568:	b085      	sub	sp, #20
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
 800456e:	460b      	mov	r3, r1
 8004570:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004578:	887a      	ldrh	r2, [r7, #2]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	4013      	ands	r3, r2
 800457e:	041a      	lsls	r2, r3, #16
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	43d9      	mvns	r1, r3
 8004584:	887b      	ldrh	r3, [r7, #2]
 8004586:	400b      	ands	r3, r1
 8004588:	431a      	orrs	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	619a      	str	r2, [r3, #24]
}
 800458e:	bf00      	nop
 8004590:	3714      	adds	r7, #20
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr

0800459a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800459a:	b580      	push	{r7, lr}
 800459c:	b082      	sub	sp, #8
 800459e:	af00      	add	r7, sp, #0
 80045a0:	4603      	mov	r3, r0
 80045a2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80045a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045a8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80045ac:	88fb      	ldrh	r3, [r7, #6]
 80045ae:	4013      	ands	r3, r2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d008      	beq.n	80045c6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80045b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045b8:	88fb      	ldrh	r3, [r7, #6]
 80045ba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80045be:	88fb      	ldrh	r3, [r7, #6]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7fc fc97 	bl	8000ef4 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80045c6:	bf00      	nop
 80045c8:	3708      	adds	r7, #8
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80045ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045d0:	b08f      	sub	sp, #60	; 0x3c
 80045d2:	af0a      	add	r7, sp, #40	; 0x28
 80045d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d101      	bne.n	80045e0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e116      	b.n	800480e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d106      	bne.n	8004600 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7fc fec0 	bl	8001380 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2203      	movs	r2, #3
 8004604:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800460c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004610:	2b00      	cmp	r3, #0
 8004612:	d102      	bne.n	800461a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4618      	mov	r0, r3
 8004620:	f005 f81e 	bl	8009660 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	603b      	str	r3, [r7, #0]
 800462a:	687e      	ldr	r6, [r7, #4]
 800462c:	466d      	mov	r5, sp
 800462e:	f106 0410 	add.w	r4, r6, #16
 8004632:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004634:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004636:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004638:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800463a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800463e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004642:	1d33      	adds	r3, r6, #4
 8004644:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004646:	6838      	ldr	r0, [r7, #0]
 8004648:	f004 ff9c 	bl	8009584 <USB_CoreInit>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d005      	beq.n	800465e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2202      	movs	r2, #2
 8004656:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e0d7      	b.n	800480e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2100      	movs	r1, #0
 8004664:	4618      	mov	r0, r3
 8004666:	f005 f80c 	bl	8009682 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800466a:	2300      	movs	r3, #0
 800466c:	73fb      	strb	r3, [r7, #15]
 800466e:	e04a      	b.n	8004706 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004670:	7bfa      	ldrb	r2, [r7, #15]
 8004672:	6879      	ldr	r1, [r7, #4]
 8004674:	4613      	mov	r3, r2
 8004676:	00db      	lsls	r3, r3, #3
 8004678:	4413      	add	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	440b      	add	r3, r1
 800467e:	333d      	adds	r3, #61	; 0x3d
 8004680:	2201      	movs	r2, #1
 8004682:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004684:	7bfa      	ldrb	r2, [r7, #15]
 8004686:	6879      	ldr	r1, [r7, #4]
 8004688:	4613      	mov	r3, r2
 800468a:	00db      	lsls	r3, r3, #3
 800468c:	4413      	add	r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	440b      	add	r3, r1
 8004692:	333c      	adds	r3, #60	; 0x3c
 8004694:	7bfa      	ldrb	r2, [r7, #15]
 8004696:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004698:	7bfa      	ldrb	r2, [r7, #15]
 800469a:	7bfb      	ldrb	r3, [r7, #15]
 800469c:	b298      	uxth	r0, r3
 800469e:	6879      	ldr	r1, [r7, #4]
 80046a0:	4613      	mov	r3, r2
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	4413      	add	r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	440b      	add	r3, r1
 80046aa:	3344      	adds	r3, #68	; 0x44
 80046ac:	4602      	mov	r2, r0
 80046ae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80046b0:	7bfa      	ldrb	r2, [r7, #15]
 80046b2:	6879      	ldr	r1, [r7, #4]
 80046b4:	4613      	mov	r3, r2
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	4413      	add	r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	440b      	add	r3, r1
 80046be:	3340      	adds	r3, #64	; 0x40
 80046c0:	2200      	movs	r2, #0
 80046c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80046c4:	7bfa      	ldrb	r2, [r7, #15]
 80046c6:	6879      	ldr	r1, [r7, #4]
 80046c8:	4613      	mov	r3, r2
 80046ca:	00db      	lsls	r3, r3, #3
 80046cc:	4413      	add	r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	440b      	add	r3, r1
 80046d2:	3348      	adds	r3, #72	; 0x48
 80046d4:	2200      	movs	r2, #0
 80046d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80046d8:	7bfa      	ldrb	r2, [r7, #15]
 80046da:	6879      	ldr	r1, [r7, #4]
 80046dc:	4613      	mov	r3, r2
 80046de:	00db      	lsls	r3, r3, #3
 80046e0:	4413      	add	r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	440b      	add	r3, r1
 80046e6:	334c      	adds	r3, #76	; 0x4c
 80046e8:	2200      	movs	r2, #0
 80046ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80046ec:	7bfa      	ldrb	r2, [r7, #15]
 80046ee:	6879      	ldr	r1, [r7, #4]
 80046f0:	4613      	mov	r3, r2
 80046f2:	00db      	lsls	r3, r3, #3
 80046f4:	4413      	add	r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	440b      	add	r3, r1
 80046fa:	3354      	adds	r3, #84	; 0x54
 80046fc:	2200      	movs	r2, #0
 80046fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004700:	7bfb      	ldrb	r3, [r7, #15]
 8004702:	3301      	adds	r3, #1
 8004704:	73fb      	strb	r3, [r7, #15]
 8004706:	7bfa      	ldrb	r2, [r7, #15]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	429a      	cmp	r2, r3
 800470e:	d3af      	bcc.n	8004670 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004710:	2300      	movs	r3, #0
 8004712:	73fb      	strb	r3, [r7, #15]
 8004714:	e044      	b.n	80047a0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004716:	7bfa      	ldrb	r2, [r7, #15]
 8004718:	6879      	ldr	r1, [r7, #4]
 800471a:	4613      	mov	r3, r2
 800471c:	00db      	lsls	r3, r3, #3
 800471e:	4413      	add	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	440b      	add	r3, r1
 8004724:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004728:	2200      	movs	r2, #0
 800472a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800472c:	7bfa      	ldrb	r2, [r7, #15]
 800472e:	6879      	ldr	r1, [r7, #4]
 8004730:	4613      	mov	r3, r2
 8004732:	00db      	lsls	r3, r3, #3
 8004734:	4413      	add	r3, r2
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	440b      	add	r3, r1
 800473a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800473e:	7bfa      	ldrb	r2, [r7, #15]
 8004740:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004742:	7bfa      	ldrb	r2, [r7, #15]
 8004744:	6879      	ldr	r1, [r7, #4]
 8004746:	4613      	mov	r3, r2
 8004748:	00db      	lsls	r3, r3, #3
 800474a:	4413      	add	r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	440b      	add	r3, r1
 8004750:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004754:	2200      	movs	r2, #0
 8004756:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004758:	7bfa      	ldrb	r2, [r7, #15]
 800475a:	6879      	ldr	r1, [r7, #4]
 800475c:	4613      	mov	r3, r2
 800475e:	00db      	lsls	r3, r3, #3
 8004760:	4413      	add	r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	440b      	add	r3, r1
 8004766:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800476a:	2200      	movs	r2, #0
 800476c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800476e:	7bfa      	ldrb	r2, [r7, #15]
 8004770:	6879      	ldr	r1, [r7, #4]
 8004772:	4613      	mov	r3, r2
 8004774:	00db      	lsls	r3, r3, #3
 8004776:	4413      	add	r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	440b      	add	r3, r1
 800477c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004780:	2200      	movs	r2, #0
 8004782:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004784:	7bfa      	ldrb	r2, [r7, #15]
 8004786:	6879      	ldr	r1, [r7, #4]
 8004788:	4613      	mov	r3, r2
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	4413      	add	r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	440b      	add	r3, r1
 8004792:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004796:	2200      	movs	r2, #0
 8004798:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800479a:	7bfb      	ldrb	r3, [r7, #15]
 800479c:	3301      	adds	r3, #1
 800479e:	73fb      	strb	r3, [r7, #15]
 80047a0:	7bfa      	ldrb	r2, [r7, #15]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d3b5      	bcc.n	8004716 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	603b      	str	r3, [r7, #0]
 80047b0:	687e      	ldr	r6, [r7, #4]
 80047b2:	466d      	mov	r5, sp
 80047b4:	f106 0410 	add.w	r4, r6, #16
 80047b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80047c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80047c8:	1d33      	adds	r3, r6, #4
 80047ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047cc:	6838      	ldr	r0, [r7, #0]
 80047ce:	f004 ffa5 	bl	800971c <USB_DevInit>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d005      	beq.n	80047e4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2202      	movs	r2, #2
 80047dc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e014      	b.n	800480e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d102      	bne.n	8004802 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 f80b 	bl	8004818 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4618      	mov	r0, r3
 8004808:	f005 f963 	bl	8009ad2 <USB_DevDisconnect>

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3714      	adds	r7, #20
 8004812:	46bd      	mov	sp, r7
 8004814:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004818 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2201      	movs	r2, #1
 800482a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004846:	4b05      	ldr	r3, [pc, #20]	; (800485c <HAL_PCDEx_ActivateLPM+0x44>)
 8004848:	4313      	orrs	r3, r2
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3714      	adds	r7, #20
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr
 800485c:	10000003 	.word	0x10000003

08004860 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004868:	4b19      	ldr	r3, [pc, #100]	; (80048d0 <HAL_PWREx_ConfigSupply+0x70>)
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	f003 0304 	and.w	r3, r3, #4
 8004870:	2b04      	cmp	r3, #4
 8004872:	d00a      	beq.n	800488a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004874:	4b16      	ldr	r3, [pc, #88]	; (80048d0 <HAL_PWREx_ConfigSupply+0x70>)
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	f003 0307 	and.w	r3, r3, #7
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	429a      	cmp	r2, r3
 8004880:	d001      	beq.n	8004886 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e01f      	b.n	80048c6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004886:	2300      	movs	r3, #0
 8004888:	e01d      	b.n	80048c6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800488a:	4b11      	ldr	r3, [pc, #68]	; (80048d0 <HAL_PWREx_ConfigSupply+0x70>)
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	f023 0207 	bic.w	r2, r3, #7
 8004892:	490f      	ldr	r1, [pc, #60]	; (80048d0 <HAL_PWREx_ConfigSupply+0x70>)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4313      	orrs	r3, r2
 8004898:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800489a:	f7fc ff89 	bl	80017b0 <HAL_GetTick>
 800489e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80048a0:	e009      	b.n	80048b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80048a2:	f7fc ff85 	bl	80017b0 <HAL_GetTick>
 80048a6:	4602      	mov	r2, r0
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048b0:	d901      	bls.n	80048b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e007      	b.n	80048c6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80048b6:	4b06      	ldr	r3, [pc, #24]	; (80048d0 <HAL_PWREx_ConfigSupply+0x70>)
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048c2:	d1ee      	bne.n	80048a2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	58024800 	.word	0x58024800

080048d4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80048d4:	b480      	push	{r7}
 80048d6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80048d8:	4b05      	ldr	r3, [pc, #20]	; (80048f0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	4a04      	ldr	r2, [pc, #16]	; (80048f0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80048de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048e2:	60d3      	str	r3, [r2, #12]
}
 80048e4:	bf00      	nop
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	58024800 	.word	0x58024800

080048f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b08c      	sub	sp, #48	; 0x30
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d102      	bne.n	8004908 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	f000 bc1d 	b.w	8005142 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	2b00      	cmp	r3, #0
 8004912:	f000 8087 	beq.w	8004a24 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004916:	4b99      	ldr	r3, [pc, #612]	; (8004b7c <HAL_RCC_OscConfig+0x288>)
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800491e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004920:	4b96      	ldr	r3, [pc, #600]	; (8004b7c <HAL_RCC_OscConfig+0x288>)
 8004922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004924:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004928:	2b10      	cmp	r3, #16
 800492a:	d007      	beq.n	800493c <HAL_RCC_OscConfig+0x48>
 800492c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800492e:	2b18      	cmp	r3, #24
 8004930:	d110      	bne.n	8004954 <HAL_RCC_OscConfig+0x60>
 8004932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004934:	f003 0303 	and.w	r3, r3, #3
 8004938:	2b02      	cmp	r3, #2
 800493a:	d10b      	bne.n	8004954 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800493c:	4b8f      	ldr	r3, [pc, #572]	; (8004b7c <HAL_RCC_OscConfig+0x288>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d06c      	beq.n	8004a22 <HAL_RCC_OscConfig+0x12e>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d168      	bne.n	8004a22 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e3f6      	b.n	8005142 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800495c:	d106      	bne.n	800496c <HAL_RCC_OscConfig+0x78>
 800495e:	4b87      	ldr	r3, [pc, #540]	; (8004b7c <HAL_RCC_OscConfig+0x288>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a86      	ldr	r2, [pc, #536]	; (8004b7c <HAL_RCC_OscConfig+0x288>)
 8004964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004968:	6013      	str	r3, [r2, #0]
 800496a:	e02e      	b.n	80049ca <HAL_RCC_OscConfig+0xd6>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10c      	bne.n	800498e <HAL_RCC_OscConfig+0x9a>
 8004974:	4b81      	ldr	r3, [pc, #516]	; (8004b7c <HAL_RCC_OscConfig+0x288>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a80      	ldr	r2, [pc, #512]	; (8004b7c <HAL_RCC_OscConfig+0x288>)
 800497a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800497e:	6013      	str	r3, [r2, #0]
 8004980:	4b7e      	ldr	r3, [pc, #504]	; (8004b7c <HAL_RCC_OscConfig+0x288>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a7d      	ldr	r2, [pc, #500]	; (8004b7c <HAL_RCC_OscConfig+0x288>)
 8004986:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800498a:	6013      	str	r3, [r2, #0]
 800498c:	e01d      	b.n	80049ca <HAL_RCC_OscConfig+0xd6>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004996:	d10c      	bne.n	80049b2 <HAL_RCC_OscConfig+0xbe>
 8004998:	4b78      	ldr	r3, [pc, #480]	; (8004b7c <HAL_RCC_OscConfig+0x288>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a77      	ldr	r2, [pc, #476]	; (8004b7c <HAL_RCC_OscConfig+0x288>)
 800499e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049a2:	6013      	str	r3, [r2, #0]
 80049a4:	4b75      	ldr	r3, [pc, #468]	; (8004b7c <HAL_RCC_OscConfig+0x288>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a74      	ldr	r2, [pc, #464]	; (8004b7c <HAL_RCC_OscConfig+0x288>)
 80049aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049ae:	6013      	str	r3, [r2, #0]
 80049b0:	e00b      	b.n	80049ca <HAL_RCC_OscConfig+0xd6>
 80049b2:	4b72      	ldr	r3, [pc, #456]	; (8004b7c <HAL_RCC_OscConfig+0x288>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a71      	ldr	r2, [pc, #452]	; (8004b7c <HAL_RCC_OscConfig+0x288>)
 80049b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049bc:	6013      	str	r3, [r2, #0]
 80049be:	4b6f      	ldr	r3, [pc, #444]	; (8004b7c <HAL_RCC_OscConfig+0x288>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a6e      	ldr	r2, [pc, #440]	; (8004b7c <HAL_RCC_OscConfig+0x288>)
 80049c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049c8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d013      	beq.n	80049fa <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d2:	f7fc feed 	bl	80017b0 <HAL_GetTick>
 80049d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049d8:	e008      	b.n	80049ec <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049da:	f7fc fee9 	bl	80017b0 <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	2b64      	cmp	r3, #100	; 0x64
 80049e6:	d901      	bls.n	80049ec <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e3aa      	b.n	8005142 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049ec:	4b63      	ldr	r3, [pc, #396]	; (8004b7c <HAL_RCC_OscConfig+0x288>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d0f0      	beq.n	80049da <HAL_RCC_OscConfig+0xe6>
 80049f8:	e014      	b.n	8004a24 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049fa:	f7fc fed9 	bl	80017b0 <HAL_GetTick>
 80049fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a00:	e008      	b.n	8004a14 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a02:	f7fc fed5 	bl	80017b0 <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	2b64      	cmp	r3, #100	; 0x64
 8004a0e:	d901      	bls.n	8004a14 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e396      	b.n	8005142 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a14:	4b59      	ldr	r3, [pc, #356]	; (8004b7c <HAL_RCC_OscConfig+0x288>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1f0      	bne.n	8004a02 <HAL_RCC_OscConfig+0x10e>
 8004a20:	e000      	b.n	8004a24 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a22:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0302 	and.w	r3, r3, #2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f000 80cb 	beq.w	8004bc8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a32:	4b52      	ldr	r3, [pc, #328]	; (8004b7c <HAL_RCC_OscConfig+0x288>)
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a3a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a3c:	4b4f      	ldr	r3, [pc, #316]	; (8004b7c <HAL_RCC_OscConfig+0x288>)
 8004a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a40:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004a42:	6a3b      	ldr	r3, [r7, #32]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d007      	beq.n	8004a58 <HAL_RCC_OscConfig+0x164>
 8004a48:	6a3b      	ldr	r3, [r7, #32]
 8004a4a:	2b18      	cmp	r3, #24
 8004a4c:	d156      	bne.n	8004afc <HAL_RCC_OscConfig+0x208>
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	f003 0303 	and.w	r3, r3, #3
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d151      	bne.n	8004afc <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a58:	4b48      	ldr	r3, [pc, #288]	; (8004b7c <HAL_RCC_OscConfig+0x288>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0304 	and.w	r3, r3, #4
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d005      	beq.n	8004a70 <HAL_RCC_OscConfig+0x17c>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d101      	bne.n	8004a70 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e368      	b.n	8005142 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004a70:	4b42      	ldr	r3, [pc, #264]	; (8004b7c <HAL_RCC_OscConfig+0x288>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f023 0219 	bic.w	r2, r3, #25
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	493f      	ldr	r1, [pc, #252]	; (8004b7c <HAL_RCC_OscConfig+0x288>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a82:	f7fc fe95 	bl	80017b0 <HAL_GetTick>
 8004a86:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a88:	e008      	b.n	8004a9c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a8a:	f7fc fe91 	bl	80017b0 <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d901      	bls.n	8004a9c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e352      	b.n	8005142 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a9c:	4b37      	ldr	r3, [pc, #220]	; (8004b7c <HAL_RCC_OscConfig+0x288>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0304 	and.w	r3, r3, #4
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d0f0      	beq.n	8004a8a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aa8:	f7fc feb2 	bl	8001810 <HAL_GetREVID>
 8004aac:	4603      	mov	r3, r0
 8004aae:	f241 0203 	movw	r2, #4099	; 0x1003
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d817      	bhi.n	8004ae6 <HAL_RCC_OscConfig+0x1f2>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	2b40      	cmp	r3, #64	; 0x40
 8004abc:	d108      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x1dc>
 8004abe:	4b2f      	ldr	r3, [pc, #188]	; (8004b7c <HAL_RCC_OscConfig+0x288>)
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004ac6:	4a2d      	ldr	r2, [pc, #180]	; (8004b7c <HAL_RCC_OscConfig+0x288>)
 8004ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004acc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ace:	e07b      	b.n	8004bc8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ad0:	4b2a      	ldr	r3, [pc, #168]	; (8004b7c <HAL_RCC_OscConfig+0x288>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	031b      	lsls	r3, r3, #12
 8004ade:	4927      	ldr	r1, [pc, #156]	; (8004b7c <HAL_RCC_OscConfig+0x288>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ae4:	e070      	b.n	8004bc8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ae6:	4b25      	ldr	r3, [pc, #148]	; (8004b7c <HAL_RCC_OscConfig+0x288>)
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	061b      	lsls	r3, r3, #24
 8004af4:	4921      	ldr	r1, [pc, #132]	; (8004b7c <HAL_RCC_OscConfig+0x288>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004afa:	e065      	b.n	8004bc8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d048      	beq.n	8004b96 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004b04:	4b1d      	ldr	r3, [pc, #116]	; (8004b7c <HAL_RCC_OscConfig+0x288>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f023 0219 	bic.w	r2, r3, #25
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	491a      	ldr	r1, [pc, #104]	; (8004b7c <HAL_RCC_OscConfig+0x288>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b16:	f7fc fe4b 	bl	80017b0 <HAL_GetTick>
 8004b1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b1c:	e008      	b.n	8004b30 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b1e:	f7fc fe47 	bl	80017b0 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d901      	bls.n	8004b30 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e308      	b.n	8005142 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b30:	4b12      	ldr	r3, [pc, #72]	; (8004b7c <HAL_RCC_OscConfig+0x288>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0304 	and.w	r3, r3, #4
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d0f0      	beq.n	8004b1e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b3c:	f7fc fe68 	bl	8001810 <HAL_GetREVID>
 8004b40:	4603      	mov	r3, r0
 8004b42:	f241 0203 	movw	r2, #4099	; 0x1003
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d81a      	bhi.n	8004b80 <HAL_RCC_OscConfig+0x28c>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	2b40      	cmp	r3, #64	; 0x40
 8004b50:	d108      	bne.n	8004b64 <HAL_RCC_OscConfig+0x270>
 8004b52:	4b0a      	ldr	r3, [pc, #40]	; (8004b7c <HAL_RCC_OscConfig+0x288>)
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004b5a:	4a08      	ldr	r2, [pc, #32]	; (8004b7c <HAL_RCC_OscConfig+0x288>)
 8004b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b60:	6053      	str	r3, [r2, #4]
 8004b62:	e031      	b.n	8004bc8 <HAL_RCC_OscConfig+0x2d4>
 8004b64:	4b05      	ldr	r3, [pc, #20]	; (8004b7c <HAL_RCC_OscConfig+0x288>)
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	031b      	lsls	r3, r3, #12
 8004b72:	4902      	ldr	r1, [pc, #8]	; (8004b7c <HAL_RCC_OscConfig+0x288>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	604b      	str	r3, [r1, #4]
 8004b78:	e026      	b.n	8004bc8 <HAL_RCC_OscConfig+0x2d4>
 8004b7a:	bf00      	nop
 8004b7c:	58024400 	.word	0x58024400
 8004b80:	4b9a      	ldr	r3, [pc, #616]	; (8004dec <HAL_RCC_OscConfig+0x4f8>)
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	061b      	lsls	r3, r3, #24
 8004b8e:	4997      	ldr	r1, [pc, #604]	; (8004dec <HAL_RCC_OscConfig+0x4f8>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	604b      	str	r3, [r1, #4]
 8004b94:	e018      	b.n	8004bc8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b96:	4b95      	ldr	r3, [pc, #596]	; (8004dec <HAL_RCC_OscConfig+0x4f8>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a94      	ldr	r2, [pc, #592]	; (8004dec <HAL_RCC_OscConfig+0x4f8>)
 8004b9c:	f023 0301 	bic.w	r3, r3, #1
 8004ba0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba2:	f7fc fe05 	bl	80017b0 <HAL_GetTick>
 8004ba6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ba8:	e008      	b.n	8004bbc <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004baa:	f7fc fe01 	bl	80017b0 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d901      	bls.n	8004bbc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e2c2      	b.n	8005142 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004bbc:	4b8b      	ldr	r3, [pc, #556]	; (8004dec <HAL_RCC_OscConfig+0x4f8>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0304 	and.w	r3, r3, #4
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1f0      	bne.n	8004baa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0310 	and.w	r3, r3, #16
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f000 80a9 	beq.w	8004d28 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bd6:	4b85      	ldr	r3, [pc, #532]	; (8004dec <HAL_RCC_OscConfig+0x4f8>)
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bde:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004be0:	4b82      	ldr	r3, [pc, #520]	; (8004dec <HAL_RCC_OscConfig+0x4f8>)
 8004be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	2b08      	cmp	r3, #8
 8004bea:	d007      	beq.n	8004bfc <HAL_RCC_OscConfig+0x308>
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	2b18      	cmp	r3, #24
 8004bf0:	d13a      	bne.n	8004c68 <HAL_RCC_OscConfig+0x374>
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	f003 0303 	and.w	r3, r3, #3
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d135      	bne.n	8004c68 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004bfc:	4b7b      	ldr	r3, [pc, #492]	; (8004dec <HAL_RCC_OscConfig+0x4f8>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d005      	beq.n	8004c14 <HAL_RCC_OscConfig+0x320>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	69db      	ldr	r3, [r3, #28]
 8004c0c:	2b80      	cmp	r3, #128	; 0x80
 8004c0e:	d001      	beq.n	8004c14 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e296      	b.n	8005142 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c14:	f7fc fdfc 	bl	8001810 <HAL_GetREVID>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	f241 0203 	movw	r2, #4099	; 0x1003
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d817      	bhi.n	8004c52 <HAL_RCC_OscConfig+0x35e>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	2b20      	cmp	r3, #32
 8004c28:	d108      	bne.n	8004c3c <HAL_RCC_OscConfig+0x348>
 8004c2a:	4b70      	ldr	r3, [pc, #448]	; (8004dec <HAL_RCC_OscConfig+0x4f8>)
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004c32:	4a6e      	ldr	r2, [pc, #440]	; (8004dec <HAL_RCC_OscConfig+0x4f8>)
 8004c34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c38:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c3a:	e075      	b.n	8004d28 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c3c:	4b6b      	ldr	r3, [pc, #428]	; (8004dec <HAL_RCC_OscConfig+0x4f8>)
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a1b      	ldr	r3, [r3, #32]
 8004c48:	069b      	lsls	r3, r3, #26
 8004c4a:	4968      	ldr	r1, [pc, #416]	; (8004dec <HAL_RCC_OscConfig+0x4f8>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c50:	e06a      	b.n	8004d28 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c52:	4b66      	ldr	r3, [pc, #408]	; (8004dec <HAL_RCC_OscConfig+0x4f8>)
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a1b      	ldr	r3, [r3, #32]
 8004c5e:	061b      	lsls	r3, r3, #24
 8004c60:	4962      	ldr	r1, [pc, #392]	; (8004dec <HAL_RCC_OscConfig+0x4f8>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c66:	e05f      	b.n	8004d28 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	69db      	ldr	r3, [r3, #28]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d042      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004c70:	4b5e      	ldr	r3, [pc, #376]	; (8004dec <HAL_RCC_OscConfig+0x4f8>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a5d      	ldr	r2, [pc, #372]	; (8004dec <HAL_RCC_OscConfig+0x4f8>)
 8004c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c7c:	f7fc fd98 	bl	80017b0 <HAL_GetTick>
 8004c80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c82:	e008      	b.n	8004c96 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004c84:	f7fc fd94 	bl	80017b0 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d901      	bls.n	8004c96 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e255      	b.n	8005142 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c96:	4b55      	ldr	r3, [pc, #340]	; (8004dec <HAL_RCC_OscConfig+0x4f8>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d0f0      	beq.n	8004c84 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ca2:	f7fc fdb5 	bl	8001810 <HAL_GetREVID>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	f241 0203 	movw	r2, #4099	; 0x1003
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d817      	bhi.n	8004ce0 <HAL_RCC_OscConfig+0x3ec>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a1b      	ldr	r3, [r3, #32]
 8004cb4:	2b20      	cmp	r3, #32
 8004cb6:	d108      	bne.n	8004cca <HAL_RCC_OscConfig+0x3d6>
 8004cb8:	4b4c      	ldr	r3, [pc, #304]	; (8004dec <HAL_RCC_OscConfig+0x4f8>)
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004cc0:	4a4a      	ldr	r2, [pc, #296]	; (8004dec <HAL_RCC_OscConfig+0x4f8>)
 8004cc2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004cc6:	6053      	str	r3, [r2, #4]
 8004cc8:	e02e      	b.n	8004d28 <HAL_RCC_OscConfig+0x434>
 8004cca:	4b48      	ldr	r3, [pc, #288]	; (8004dec <HAL_RCC_OscConfig+0x4f8>)
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	069b      	lsls	r3, r3, #26
 8004cd8:	4944      	ldr	r1, [pc, #272]	; (8004dec <HAL_RCC_OscConfig+0x4f8>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	604b      	str	r3, [r1, #4]
 8004cde:	e023      	b.n	8004d28 <HAL_RCC_OscConfig+0x434>
 8004ce0:	4b42      	ldr	r3, [pc, #264]	; (8004dec <HAL_RCC_OscConfig+0x4f8>)
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a1b      	ldr	r3, [r3, #32]
 8004cec:	061b      	lsls	r3, r3, #24
 8004cee:	493f      	ldr	r1, [pc, #252]	; (8004dec <HAL_RCC_OscConfig+0x4f8>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	60cb      	str	r3, [r1, #12]
 8004cf4:	e018      	b.n	8004d28 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004cf6:	4b3d      	ldr	r3, [pc, #244]	; (8004dec <HAL_RCC_OscConfig+0x4f8>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a3c      	ldr	r2, [pc, #240]	; (8004dec <HAL_RCC_OscConfig+0x4f8>)
 8004cfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d02:	f7fc fd55 	bl	80017b0 <HAL_GetTick>
 8004d06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004d08:	e008      	b.n	8004d1c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004d0a:	f7fc fd51 	bl	80017b0 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d901      	bls.n	8004d1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e212      	b.n	8005142 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004d1c:	4b33      	ldr	r3, [pc, #204]	; (8004dec <HAL_RCC_OscConfig+0x4f8>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1f0      	bne.n	8004d0a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0308 	and.w	r3, r3, #8
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d036      	beq.n	8004da2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	695b      	ldr	r3, [r3, #20]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d019      	beq.n	8004d70 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d3c:	4b2b      	ldr	r3, [pc, #172]	; (8004dec <HAL_RCC_OscConfig+0x4f8>)
 8004d3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d40:	4a2a      	ldr	r2, [pc, #168]	; (8004dec <HAL_RCC_OscConfig+0x4f8>)
 8004d42:	f043 0301 	orr.w	r3, r3, #1
 8004d46:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d48:	f7fc fd32 	bl	80017b0 <HAL_GetTick>
 8004d4c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d4e:	e008      	b.n	8004d62 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d50:	f7fc fd2e 	bl	80017b0 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e1ef      	b.n	8005142 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d62:	4b22      	ldr	r3, [pc, #136]	; (8004dec <HAL_RCC_OscConfig+0x4f8>)
 8004d64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d0f0      	beq.n	8004d50 <HAL_RCC_OscConfig+0x45c>
 8004d6e:	e018      	b.n	8004da2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d70:	4b1e      	ldr	r3, [pc, #120]	; (8004dec <HAL_RCC_OscConfig+0x4f8>)
 8004d72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d74:	4a1d      	ldr	r2, [pc, #116]	; (8004dec <HAL_RCC_OscConfig+0x4f8>)
 8004d76:	f023 0301 	bic.w	r3, r3, #1
 8004d7a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d7c:	f7fc fd18 	bl	80017b0 <HAL_GetTick>
 8004d80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d82:	e008      	b.n	8004d96 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d84:	f7fc fd14 	bl	80017b0 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e1d5      	b.n	8005142 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d96:	4b15      	ldr	r3, [pc, #84]	; (8004dec <HAL_RCC_OscConfig+0x4f8>)
 8004d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1f0      	bne.n	8004d84 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0320 	and.w	r3, r3, #32
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d039      	beq.n	8004e22 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d01c      	beq.n	8004df0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004db6:	4b0d      	ldr	r3, [pc, #52]	; (8004dec <HAL_RCC_OscConfig+0x4f8>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a0c      	ldr	r2, [pc, #48]	; (8004dec <HAL_RCC_OscConfig+0x4f8>)
 8004dbc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004dc0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004dc2:	f7fc fcf5 	bl	80017b0 <HAL_GetTick>
 8004dc6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004dc8:	e008      	b.n	8004ddc <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004dca:	f7fc fcf1 	bl	80017b0 <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d901      	bls.n	8004ddc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e1b2      	b.n	8005142 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004ddc:	4b03      	ldr	r3, [pc, #12]	; (8004dec <HAL_RCC_OscConfig+0x4f8>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d0f0      	beq.n	8004dca <HAL_RCC_OscConfig+0x4d6>
 8004de8:	e01b      	b.n	8004e22 <HAL_RCC_OscConfig+0x52e>
 8004dea:	bf00      	nop
 8004dec:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004df0:	4b9b      	ldr	r3, [pc, #620]	; (8005060 <HAL_RCC_OscConfig+0x76c>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a9a      	ldr	r2, [pc, #616]	; (8005060 <HAL_RCC_OscConfig+0x76c>)
 8004df6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dfa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004dfc:	f7fc fcd8 	bl	80017b0 <HAL_GetTick>
 8004e00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004e02:	e008      	b.n	8004e16 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004e04:	f7fc fcd4 	bl	80017b0 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e195      	b.n	8005142 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004e16:	4b92      	ldr	r3, [pc, #584]	; (8005060 <HAL_RCC_OscConfig+0x76c>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1f0      	bne.n	8004e04 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0304 	and.w	r3, r3, #4
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f000 8081 	beq.w	8004f32 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004e30:	4b8c      	ldr	r3, [pc, #560]	; (8005064 <HAL_RCC_OscConfig+0x770>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a8b      	ldr	r2, [pc, #556]	; (8005064 <HAL_RCC_OscConfig+0x770>)
 8004e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e3a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e3c:	f7fc fcb8 	bl	80017b0 <HAL_GetTick>
 8004e40:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e42:	e008      	b.n	8004e56 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004e44:	f7fc fcb4 	bl	80017b0 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	2b64      	cmp	r3, #100	; 0x64
 8004e50:	d901      	bls.n	8004e56 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e175      	b.n	8005142 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e56:	4b83      	ldr	r3, [pc, #524]	; (8005064 <HAL_RCC_OscConfig+0x770>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d0f0      	beq.n	8004e44 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d106      	bne.n	8004e78 <HAL_RCC_OscConfig+0x584>
 8004e6a:	4b7d      	ldr	r3, [pc, #500]	; (8005060 <HAL_RCC_OscConfig+0x76c>)
 8004e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e6e:	4a7c      	ldr	r2, [pc, #496]	; (8005060 <HAL_RCC_OscConfig+0x76c>)
 8004e70:	f043 0301 	orr.w	r3, r3, #1
 8004e74:	6713      	str	r3, [r2, #112]	; 0x70
 8004e76:	e02d      	b.n	8004ed4 <HAL_RCC_OscConfig+0x5e0>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10c      	bne.n	8004e9a <HAL_RCC_OscConfig+0x5a6>
 8004e80:	4b77      	ldr	r3, [pc, #476]	; (8005060 <HAL_RCC_OscConfig+0x76c>)
 8004e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e84:	4a76      	ldr	r2, [pc, #472]	; (8005060 <HAL_RCC_OscConfig+0x76c>)
 8004e86:	f023 0301 	bic.w	r3, r3, #1
 8004e8a:	6713      	str	r3, [r2, #112]	; 0x70
 8004e8c:	4b74      	ldr	r3, [pc, #464]	; (8005060 <HAL_RCC_OscConfig+0x76c>)
 8004e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e90:	4a73      	ldr	r2, [pc, #460]	; (8005060 <HAL_RCC_OscConfig+0x76c>)
 8004e92:	f023 0304 	bic.w	r3, r3, #4
 8004e96:	6713      	str	r3, [r2, #112]	; 0x70
 8004e98:	e01c      	b.n	8004ed4 <HAL_RCC_OscConfig+0x5e0>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	2b05      	cmp	r3, #5
 8004ea0:	d10c      	bne.n	8004ebc <HAL_RCC_OscConfig+0x5c8>
 8004ea2:	4b6f      	ldr	r3, [pc, #444]	; (8005060 <HAL_RCC_OscConfig+0x76c>)
 8004ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea6:	4a6e      	ldr	r2, [pc, #440]	; (8005060 <HAL_RCC_OscConfig+0x76c>)
 8004ea8:	f043 0304 	orr.w	r3, r3, #4
 8004eac:	6713      	str	r3, [r2, #112]	; 0x70
 8004eae:	4b6c      	ldr	r3, [pc, #432]	; (8005060 <HAL_RCC_OscConfig+0x76c>)
 8004eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb2:	4a6b      	ldr	r2, [pc, #428]	; (8005060 <HAL_RCC_OscConfig+0x76c>)
 8004eb4:	f043 0301 	orr.w	r3, r3, #1
 8004eb8:	6713      	str	r3, [r2, #112]	; 0x70
 8004eba:	e00b      	b.n	8004ed4 <HAL_RCC_OscConfig+0x5e0>
 8004ebc:	4b68      	ldr	r3, [pc, #416]	; (8005060 <HAL_RCC_OscConfig+0x76c>)
 8004ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec0:	4a67      	ldr	r2, [pc, #412]	; (8005060 <HAL_RCC_OscConfig+0x76c>)
 8004ec2:	f023 0301 	bic.w	r3, r3, #1
 8004ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ec8:	4b65      	ldr	r3, [pc, #404]	; (8005060 <HAL_RCC_OscConfig+0x76c>)
 8004eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ecc:	4a64      	ldr	r2, [pc, #400]	; (8005060 <HAL_RCC_OscConfig+0x76c>)
 8004ece:	f023 0304 	bic.w	r3, r3, #4
 8004ed2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d015      	beq.n	8004f08 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004edc:	f7fc fc68 	bl	80017b0 <HAL_GetTick>
 8004ee0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ee2:	e00a      	b.n	8004efa <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ee4:	f7fc fc64 	bl	80017b0 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d901      	bls.n	8004efa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e123      	b.n	8005142 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004efa:	4b59      	ldr	r3, [pc, #356]	; (8005060 <HAL_RCC_OscConfig+0x76c>)
 8004efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d0ee      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x5f0>
 8004f06:	e014      	b.n	8004f32 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f08:	f7fc fc52 	bl	80017b0 <HAL_GetTick>
 8004f0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f0e:	e00a      	b.n	8004f26 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f10:	f7fc fc4e 	bl	80017b0 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d901      	bls.n	8004f26 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e10d      	b.n	8005142 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f26:	4b4e      	ldr	r3, [pc, #312]	; (8005060 <HAL_RCC_OscConfig+0x76c>)
 8004f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1ee      	bne.n	8004f10 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f000 8102 	beq.w	8005140 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004f3c:	4b48      	ldr	r3, [pc, #288]	; (8005060 <HAL_RCC_OscConfig+0x76c>)
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f44:	2b18      	cmp	r3, #24
 8004f46:	f000 80bd 	beq.w	80050c4 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	f040 809e 	bne.w	8005090 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f54:	4b42      	ldr	r3, [pc, #264]	; (8005060 <HAL_RCC_OscConfig+0x76c>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a41      	ldr	r2, [pc, #260]	; (8005060 <HAL_RCC_OscConfig+0x76c>)
 8004f5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f60:	f7fc fc26 	bl	80017b0 <HAL_GetTick>
 8004f64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f66:	e008      	b.n	8004f7a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f68:	f7fc fc22 	bl	80017b0 <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d901      	bls.n	8004f7a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e0e3      	b.n	8005142 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f7a:	4b39      	ldr	r3, [pc, #228]	; (8005060 <HAL_RCC_OscConfig+0x76c>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1f0      	bne.n	8004f68 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f86:	4b36      	ldr	r3, [pc, #216]	; (8005060 <HAL_RCC_OscConfig+0x76c>)
 8004f88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f8a:	4b37      	ldr	r3, [pc, #220]	; (8005068 <HAL_RCC_OscConfig+0x774>)
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004f96:	0112      	lsls	r2, r2, #4
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	4931      	ldr	r1, [pc, #196]	; (8005060 <HAL_RCC_OscConfig+0x76c>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	628b      	str	r3, [r1, #40]	; 0x28
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	025b      	lsls	r3, r3, #9
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	431a      	orrs	r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	041b      	lsls	r3, r3, #16
 8004fbe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	061b      	lsls	r3, r3, #24
 8004fcc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004fd0:	4923      	ldr	r1, [pc, #140]	; (8005060 <HAL_RCC_OscConfig+0x76c>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004fd6:	4b22      	ldr	r3, [pc, #136]	; (8005060 <HAL_RCC_OscConfig+0x76c>)
 8004fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fda:	4a21      	ldr	r2, [pc, #132]	; (8005060 <HAL_RCC_OscConfig+0x76c>)
 8004fdc:	f023 0301 	bic.w	r3, r3, #1
 8004fe0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004fe2:	4b1f      	ldr	r3, [pc, #124]	; (8005060 <HAL_RCC_OscConfig+0x76c>)
 8004fe4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fe6:	4b21      	ldr	r3, [pc, #132]	; (800506c <HAL_RCC_OscConfig+0x778>)
 8004fe8:	4013      	ands	r3, r2
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004fee:	00d2      	lsls	r2, r2, #3
 8004ff0:	491b      	ldr	r1, [pc, #108]	; (8005060 <HAL_RCC_OscConfig+0x76c>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004ff6:	4b1a      	ldr	r3, [pc, #104]	; (8005060 <HAL_RCC_OscConfig+0x76c>)
 8004ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffa:	f023 020c 	bic.w	r2, r3, #12
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005002:	4917      	ldr	r1, [pc, #92]	; (8005060 <HAL_RCC_OscConfig+0x76c>)
 8005004:	4313      	orrs	r3, r2
 8005006:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005008:	4b15      	ldr	r3, [pc, #84]	; (8005060 <HAL_RCC_OscConfig+0x76c>)
 800500a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500c:	f023 0202 	bic.w	r2, r3, #2
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005014:	4912      	ldr	r1, [pc, #72]	; (8005060 <HAL_RCC_OscConfig+0x76c>)
 8005016:	4313      	orrs	r3, r2
 8005018:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800501a:	4b11      	ldr	r3, [pc, #68]	; (8005060 <HAL_RCC_OscConfig+0x76c>)
 800501c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501e:	4a10      	ldr	r2, [pc, #64]	; (8005060 <HAL_RCC_OscConfig+0x76c>)
 8005020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005024:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005026:	4b0e      	ldr	r3, [pc, #56]	; (8005060 <HAL_RCC_OscConfig+0x76c>)
 8005028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502a:	4a0d      	ldr	r2, [pc, #52]	; (8005060 <HAL_RCC_OscConfig+0x76c>)
 800502c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005030:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005032:	4b0b      	ldr	r3, [pc, #44]	; (8005060 <HAL_RCC_OscConfig+0x76c>)
 8005034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005036:	4a0a      	ldr	r2, [pc, #40]	; (8005060 <HAL_RCC_OscConfig+0x76c>)
 8005038:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800503c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800503e:	4b08      	ldr	r3, [pc, #32]	; (8005060 <HAL_RCC_OscConfig+0x76c>)
 8005040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005042:	4a07      	ldr	r2, [pc, #28]	; (8005060 <HAL_RCC_OscConfig+0x76c>)
 8005044:	f043 0301 	orr.w	r3, r3, #1
 8005048:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800504a:	4b05      	ldr	r3, [pc, #20]	; (8005060 <HAL_RCC_OscConfig+0x76c>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a04      	ldr	r2, [pc, #16]	; (8005060 <HAL_RCC_OscConfig+0x76c>)
 8005050:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005054:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005056:	f7fc fbab 	bl	80017b0 <HAL_GetTick>
 800505a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800505c:	e011      	b.n	8005082 <HAL_RCC_OscConfig+0x78e>
 800505e:	bf00      	nop
 8005060:	58024400 	.word	0x58024400
 8005064:	58024800 	.word	0x58024800
 8005068:	fffffc0c 	.word	0xfffffc0c
 800506c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005070:	f7fc fb9e 	bl	80017b0 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b02      	cmp	r3, #2
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e05f      	b.n	8005142 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005082:	4b32      	ldr	r3, [pc, #200]	; (800514c <HAL_RCC_OscConfig+0x858>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d0f0      	beq.n	8005070 <HAL_RCC_OscConfig+0x77c>
 800508e:	e057      	b.n	8005140 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005090:	4b2e      	ldr	r3, [pc, #184]	; (800514c <HAL_RCC_OscConfig+0x858>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a2d      	ldr	r2, [pc, #180]	; (800514c <HAL_RCC_OscConfig+0x858>)
 8005096:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800509a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800509c:	f7fc fb88 	bl	80017b0 <HAL_GetTick>
 80050a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050a2:	e008      	b.n	80050b6 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050a4:	f7fc fb84 	bl	80017b0 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d901      	bls.n	80050b6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e045      	b.n	8005142 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050b6:	4b25      	ldr	r3, [pc, #148]	; (800514c <HAL_RCC_OscConfig+0x858>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1f0      	bne.n	80050a4 <HAL_RCC_OscConfig+0x7b0>
 80050c2:	e03d      	b.n	8005140 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80050c4:	4b21      	ldr	r3, [pc, #132]	; (800514c <HAL_RCC_OscConfig+0x858>)
 80050c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80050ca:	4b20      	ldr	r3, [pc, #128]	; (800514c <HAL_RCC_OscConfig+0x858>)
 80050cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ce:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d031      	beq.n	800513c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	f003 0203 	and.w	r2, r3, #3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d12a      	bne.n	800513c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	091b      	lsrs	r3, r3, #4
 80050ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d122      	bne.n	800513c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005100:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005102:	429a      	cmp	r2, r3
 8005104:	d11a      	bne.n	800513c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	0a5b      	lsrs	r3, r3, #9
 800510a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005112:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005114:	429a      	cmp	r2, r3
 8005116:	d111      	bne.n	800513c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	0c1b      	lsrs	r3, r3, #16
 800511c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005124:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005126:	429a      	cmp	r2, r3
 8005128:	d108      	bne.n	800513c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	0e1b      	lsrs	r3, r3, #24
 800512e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005136:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005138:	429a      	cmp	r2, r3
 800513a:	d001      	beq.n	8005140 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e000      	b.n	8005142 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3730      	adds	r7, #48	; 0x30
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	58024400 	.word	0x58024400

08005150 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d101      	bne.n	8005164 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e19c      	b.n	800549e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005164:	4b8a      	ldr	r3, [pc, #552]	; (8005390 <HAL_RCC_ClockConfig+0x240>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 030f 	and.w	r3, r3, #15
 800516c:	683a      	ldr	r2, [r7, #0]
 800516e:	429a      	cmp	r2, r3
 8005170:	d910      	bls.n	8005194 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005172:	4b87      	ldr	r3, [pc, #540]	; (8005390 <HAL_RCC_ClockConfig+0x240>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f023 020f 	bic.w	r2, r3, #15
 800517a:	4985      	ldr	r1, [pc, #532]	; (8005390 <HAL_RCC_ClockConfig+0x240>)
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	4313      	orrs	r3, r2
 8005180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005182:	4b83      	ldr	r3, [pc, #524]	; (8005390 <HAL_RCC_ClockConfig+0x240>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 030f 	and.w	r3, r3, #15
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	429a      	cmp	r2, r3
 800518e:	d001      	beq.n	8005194 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e184      	b.n	800549e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0304 	and.w	r3, r3, #4
 800519c:	2b00      	cmp	r3, #0
 800519e:	d010      	beq.n	80051c2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	691a      	ldr	r2, [r3, #16]
 80051a4:	4b7b      	ldr	r3, [pc, #492]	; (8005394 <HAL_RCC_ClockConfig+0x244>)
 80051a6:	699b      	ldr	r3, [r3, #24]
 80051a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d908      	bls.n	80051c2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80051b0:	4b78      	ldr	r3, [pc, #480]	; (8005394 <HAL_RCC_ClockConfig+0x244>)
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	4975      	ldr	r1, [pc, #468]	; (8005394 <HAL_RCC_ClockConfig+0x244>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0308 	and.w	r3, r3, #8
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d010      	beq.n	80051f0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	695a      	ldr	r2, [r3, #20]
 80051d2:	4b70      	ldr	r3, [pc, #448]	; (8005394 <HAL_RCC_ClockConfig+0x244>)
 80051d4:	69db      	ldr	r3, [r3, #28]
 80051d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80051da:	429a      	cmp	r2, r3
 80051dc:	d908      	bls.n	80051f0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80051de:	4b6d      	ldr	r3, [pc, #436]	; (8005394 <HAL_RCC_ClockConfig+0x244>)
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	496a      	ldr	r1, [pc, #424]	; (8005394 <HAL_RCC_ClockConfig+0x244>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0310 	and.w	r3, r3, #16
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d010      	beq.n	800521e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	699a      	ldr	r2, [r3, #24]
 8005200:	4b64      	ldr	r3, [pc, #400]	; (8005394 <HAL_RCC_ClockConfig+0x244>)
 8005202:	69db      	ldr	r3, [r3, #28]
 8005204:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005208:	429a      	cmp	r2, r3
 800520a:	d908      	bls.n	800521e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800520c:	4b61      	ldr	r3, [pc, #388]	; (8005394 <HAL_RCC_ClockConfig+0x244>)
 800520e:	69db      	ldr	r3, [r3, #28]
 8005210:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	495e      	ldr	r1, [pc, #376]	; (8005394 <HAL_RCC_ClockConfig+0x244>)
 800521a:	4313      	orrs	r3, r2
 800521c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0320 	and.w	r3, r3, #32
 8005226:	2b00      	cmp	r3, #0
 8005228:	d010      	beq.n	800524c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	69da      	ldr	r2, [r3, #28]
 800522e:	4b59      	ldr	r3, [pc, #356]	; (8005394 <HAL_RCC_ClockConfig+0x244>)
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005236:	429a      	cmp	r2, r3
 8005238:	d908      	bls.n	800524c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800523a:	4b56      	ldr	r3, [pc, #344]	; (8005394 <HAL_RCC_ClockConfig+0x244>)
 800523c:	6a1b      	ldr	r3, [r3, #32]
 800523e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	69db      	ldr	r3, [r3, #28]
 8005246:	4953      	ldr	r1, [pc, #332]	; (8005394 <HAL_RCC_ClockConfig+0x244>)
 8005248:	4313      	orrs	r3, r2
 800524a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0302 	and.w	r3, r3, #2
 8005254:	2b00      	cmp	r3, #0
 8005256:	d010      	beq.n	800527a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	68da      	ldr	r2, [r3, #12]
 800525c:	4b4d      	ldr	r3, [pc, #308]	; (8005394 <HAL_RCC_ClockConfig+0x244>)
 800525e:	699b      	ldr	r3, [r3, #24]
 8005260:	f003 030f 	and.w	r3, r3, #15
 8005264:	429a      	cmp	r2, r3
 8005266:	d908      	bls.n	800527a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005268:	4b4a      	ldr	r3, [pc, #296]	; (8005394 <HAL_RCC_ClockConfig+0x244>)
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	f023 020f 	bic.w	r2, r3, #15
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	4947      	ldr	r1, [pc, #284]	; (8005394 <HAL_RCC_ClockConfig+0x244>)
 8005276:	4313      	orrs	r3, r2
 8005278:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0301 	and.w	r3, r3, #1
 8005282:	2b00      	cmp	r3, #0
 8005284:	d055      	beq.n	8005332 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005286:	4b43      	ldr	r3, [pc, #268]	; (8005394 <HAL_RCC_ClockConfig+0x244>)
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	4940      	ldr	r1, [pc, #256]	; (8005394 <HAL_RCC_ClockConfig+0x244>)
 8005294:	4313      	orrs	r3, r2
 8005296:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	2b02      	cmp	r3, #2
 800529e:	d107      	bne.n	80052b0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80052a0:	4b3c      	ldr	r3, [pc, #240]	; (8005394 <HAL_RCC_ClockConfig+0x244>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d121      	bne.n	80052f0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e0f6      	b.n	800549e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	2b03      	cmp	r3, #3
 80052b6:	d107      	bne.n	80052c8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052b8:	4b36      	ldr	r3, [pc, #216]	; (8005394 <HAL_RCC_ClockConfig+0x244>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d115      	bne.n	80052f0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e0ea      	b.n	800549e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d107      	bne.n	80052e0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80052d0:	4b30      	ldr	r3, [pc, #192]	; (8005394 <HAL_RCC_ClockConfig+0x244>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d109      	bne.n	80052f0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e0de      	b.n	800549e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052e0:	4b2c      	ldr	r3, [pc, #176]	; (8005394 <HAL_RCC_ClockConfig+0x244>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0304 	and.w	r3, r3, #4
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d101      	bne.n	80052f0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e0d6      	b.n	800549e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80052f0:	4b28      	ldr	r3, [pc, #160]	; (8005394 <HAL_RCC_ClockConfig+0x244>)
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	f023 0207 	bic.w	r2, r3, #7
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	4925      	ldr	r1, [pc, #148]	; (8005394 <HAL_RCC_ClockConfig+0x244>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005302:	f7fc fa55 	bl	80017b0 <HAL_GetTick>
 8005306:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005308:	e00a      	b.n	8005320 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800530a:	f7fc fa51 	bl	80017b0 <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	f241 3288 	movw	r2, #5000	; 0x1388
 8005318:	4293      	cmp	r3, r2
 800531a:	d901      	bls.n	8005320 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e0be      	b.n	800549e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005320:	4b1c      	ldr	r3, [pc, #112]	; (8005394 <HAL_RCC_ClockConfig+0x244>)
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	00db      	lsls	r3, r3, #3
 800532e:	429a      	cmp	r2, r3
 8005330:	d1eb      	bne.n	800530a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	2b00      	cmp	r3, #0
 800533c:	d010      	beq.n	8005360 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68da      	ldr	r2, [r3, #12]
 8005342:	4b14      	ldr	r3, [pc, #80]	; (8005394 <HAL_RCC_ClockConfig+0x244>)
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	f003 030f 	and.w	r3, r3, #15
 800534a:	429a      	cmp	r2, r3
 800534c:	d208      	bcs.n	8005360 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800534e:	4b11      	ldr	r3, [pc, #68]	; (8005394 <HAL_RCC_ClockConfig+0x244>)
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	f023 020f 	bic.w	r2, r3, #15
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	490e      	ldr	r1, [pc, #56]	; (8005394 <HAL_RCC_ClockConfig+0x244>)
 800535c:	4313      	orrs	r3, r2
 800535e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005360:	4b0b      	ldr	r3, [pc, #44]	; (8005390 <HAL_RCC_ClockConfig+0x240>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 030f 	and.w	r3, r3, #15
 8005368:	683a      	ldr	r2, [r7, #0]
 800536a:	429a      	cmp	r2, r3
 800536c:	d214      	bcs.n	8005398 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800536e:	4b08      	ldr	r3, [pc, #32]	; (8005390 <HAL_RCC_ClockConfig+0x240>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f023 020f 	bic.w	r2, r3, #15
 8005376:	4906      	ldr	r1, [pc, #24]	; (8005390 <HAL_RCC_ClockConfig+0x240>)
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	4313      	orrs	r3, r2
 800537c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800537e:	4b04      	ldr	r3, [pc, #16]	; (8005390 <HAL_RCC_ClockConfig+0x240>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 030f 	and.w	r3, r3, #15
 8005386:	683a      	ldr	r2, [r7, #0]
 8005388:	429a      	cmp	r2, r3
 800538a:	d005      	beq.n	8005398 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e086      	b.n	800549e <HAL_RCC_ClockConfig+0x34e>
 8005390:	52002000 	.word	0x52002000
 8005394:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0304 	and.w	r3, r3, #4
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d010      	beq.n	80053c6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	691a      	ldr	r2, [r3, #16]
 80053a8:	4b3f      	ldr	r3, [pc, #252]	; (80054a8 <HAL_RCC_ClockConfig+0x358>)
 80053aa:	699b      	ldr	r3, [r3, #24]
 80053ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d208      	bcs.n	80053c6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80053b4:	4b3c      	ldr	r3, [pc, #240]	; (80054a8 <HAL_RCC_ClockConfig+0x358>)
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	4939      	ldr	r1, [pc, #228]	; (80054a8 <HAL_RCC_ClockConfig+0x358>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0308 	and.w	r3, r3, #8
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d010      	beq.n	80053f4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	695a      	ldr	r2, [r3, #20]
 80053d6:	4b34      	ldr	r3, [pc, #208]	; (80054a8 <HAL_RCC_ClockConfig+0x358>)
 80053d8:	69db      	ldr	r3, [r3, #28]
 80053da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053de:	429a      	cmp	r2, r3
 80053e0:	d208      	bcs.n	80053f4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80053e2:	4b31      	ldr	r3, [pc, #196]	; (80054a8 <HAL_RCC_ClockConfig+0x358>)
 80053e4:	69db      	ldr	r3, [r3, #28]
 80053e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	492e      	ldr	r1, [pc, #184]	; (80054a8 <HAL_RCC_ClockConfig+0x358>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0310 	and.w	r3, r3, #16
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d010      	beq.n	8005422 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	699a      	ldr	r2, [r3, #24]
 8005404:	4b28      	ldr	r3, [pc, #160]	; (80054a8 <HAL_RCC_ClockConfig+0x358>)
 8005406:	69db      	ldr	r3, [r3, #28]
 8005408:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800540c:	429a      	cmp	r2, r3
 800540e:	d208      	bcs.n	8005422 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005410:	4b25      	ldr	r3, [pc, #148]	; (80054a8 <HAL_RCC_ClockConfig+0x358>)
 8005412:	69db      	ldr	r3, [r3, #28]
 8005414:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	4922      	ldr	r1, [pc, #136]	; (80054a8 <HAL_RCC_ClockConfig+0x358>)
 800541e:	4313      	orrs	r3, r2
 8005420:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0320 	and.w	r3, r3, #32
 800542a:	2b00      	cmp	r3, #0
 800542c:	d010      	beq.n	8005450 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	69da      	ldr	r2, [r3, #28]
 8005432:	4b1d      	ldr	r3, [pc, #116]	; (80054a8 <HAL_RCC_ClockConfig+0x358>)
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800543a:	429a      	cmp	r2, r3
 800543c:	d208      	bcs.n	8005450 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800543e:	4b1a      	ldr	r3, [pc, #104]	; (80054a8 <HAL_RCC_ClockConfig+0x358>)
 8005440:	6a1b      	ldr	r3, [r3, #32]
 8005442:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	69db      	ldr	r3, [r3, #28]
 800544a:	4917      	ldr	r1, [pc, #92]	; (80054a8 <HAL_RCC_ClockConfig+0x358>)
 800544c:	4313      	orrs	r3, r2
 800544e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005450:	f000 f834 	bl	80054bc <HAL_RCC_GetSysClockFreq>
 8005454:	4602      	mov	r2, r0
 8005456:	4b14      	ldr	r3, [pc, #80]	; (80054a8 <HAL_RCC_ClockConfig+0x358>)
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	0a1b      	lsrs	r3, r3, #8
 800545c:	f003 030f 	and.w	r3, r3, #15
 8005460:	4912      	ldr	r1, [pc, #72]	; (80054ac <HAL_RCC_ClockConfig+0x35c>)
 8005462:	5ccb      	ldrb	r3, [r1, r3]
 8005464:	f003 031f 	and.w	r3, r3, #31
 8005468:	fa22 f303 	lsr.w	r3, r2, r3
 800546c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800546e:	4b0e      	ldr	r3, [pc, #56]	; (80054a8 <HAL_RCC_ClockConfig+0x358>)
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	f003 030f 	and.w	r3, r3, #15
 8005476:	4a0d      	ldr	r2, [pc, #52]	; (80054ac <HAL_RCC_ClockConfig+0x35c>)
 8005478:	5cd3      	ldrb	r3, [r2, r3]
 800547a:	f003 031f 	and.w	r3, r3, #31
 800547e:	693a      	ldr	r2, [r7, #16]
 8005480:	fa22 f303 	lsr.w	r3, r2, r3
 8005484:	4a0a      	ldr	r2, [pc, #40]	; (80054b0 <HAL_RCC_ClockConfig+0x360>)
 8005486:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005488:	4a0a      	ldr	r2, [pc, #40]	; (80054b4 <HAL_RCC_ClockConfig+0x364>)
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800548e:	4b0a      	ldr	r3, [pc, #40]	; (80054b8 <HAL_RCC_ClockConfig+0x368>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4618      	mov	r0, r3
 8005494:	f7fc f942 	bl	800171c <HAL_InitTick>
 8005498:	4603      	mov	r3, r0
 800549a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800549c:	7bfb      	ldrb	r3, [r7, #15]
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3718      	adds	r7, #24
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	58024400 	.word	0x58024400
 80054ac:	08009c08 	.word	0x08009c08
 80054b0:	24000004 	.word	0x24000004
 80054b4:	24000000 	.word	0x24000000
 80054b8:	24000008 	.word	0x24000008

080054bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054bc:	b480      	push	{r7}
 80054be:	b089      	sub	sp, #36	; 0x24
 80054c0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054c2:	4bb3      	ldr	r3, [pc, #716]	; (8005790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054ca:	2b18      	cmp	r3, #24
 80054cc:	f200 8155 	bhi.w	800577a <HAL_RCC_GetSysClockFreq+0x2be>
 80054d0:	a201      	add	r2, pc, #4	; (adr r2, 80054d8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80054d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d6:	bf00      	nop
 80054d8:	0800553d 	.word	0x0800553d
 80054dc:	0800577b 	.word	0x0800577b
 80054e0:	0800577b 	.word	0x0800577b
 80054e4:	0800577b 	.word	0x0800577b
 80054e8:	0800577b 	.word	0x0800577b
 80054ec:	0800577b 	.word	0x0800577b
 80054f0:	0800577b 	.word	0x0800577b
 80054f4:	0800577b 	.word	0x0800577b
 80054f8:	08005563 	.word	0x08005563
 80054fc:	0800577b 	.word	0x0800577b
 8005500:	0800577b 	.word	0x0800577b
 8005504:	0800577b 	.word	0x0800577b
 8005508:	0800577b 	.word	0x0800577b
 800550c:	0800577b 	.word	0x0800577b
 8005510:	0800577b 	.word	0x0800577b
 8005514:	0800577b 	.word	0x0800577b
 8005518:	08005569 	.word	0x08005569
 800551c:	0800577b 	.word	0x0800577b
 8005520:	0800577b 	.word	0x0800577b
 8005524:	0800577b 	.word	0x0800577b
 8005528:	0800577b 	.word	0x0800577b
 800552c:	0800577b 	.word	0x0800577b
 8005530:	0800577b 	.word	0x0800577b
 8005534:	0800577b 	.word	0x0800577b
 8005538:	0800556f 	.word	0x0800556f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800553c:	4b94      	ldr	r3, [pc, #592]	; (8005790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0320 	and.w	r3, r3, #32
 8005544:	2b00      	cmp	r3, #0
 8005546:	d009      	beq.n	800555c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005548:	4b91      	ldr	r3, [pc, #580]	; (8005790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	08db      	lsrs	r3, r3, #3
 800554e:	f003 0303 	and.w	r3, r3, #3
 8005552:	4a90      	ldr	r2, [pc, #576]	; (8005794 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005554:	fa22 f303 	lsr.w	r3, r2, r3
 8005558:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800555a:	e111      	b.n	8005780 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800555c:	4b8d      	ldr	r3, [pc, #564]	; (8005794 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800555e:	61bb      	str	r3, [r7, #24]
    break;
 8005560:	e10e      	b.n	8005780 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005562:	4b8d      	ldr	r3, [pc, #564]	; (8005798 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005564:	61bb      	str	r3, [r7, #24]
    break;
 8005566:	e10b      	b.n	8005780 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005568:	4b8c      	ldr	r3, [pc, #560]	; (800579c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800556a:	61bb      	str	r3, [r7, #24]
    break;
 800556c:	e108      	b.n	8005780 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800556e:	4b88      	ldr	r3, [pc, #544]	; (8005790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005572:	f003 0303 	and.w	r3, r3, #3
 8005576:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005578:	4b85      	ldr	r3, [pc, #532]	; (8005790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800557a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557c:	091b      	lsrs	r3, r3, #4
 800557e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005582:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005584:	4b82      	ldr	r3, [pc, #520]	; (8005790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005588:	f003 0301 	and.w	r3, r3, #1
 800558c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800558e:	4b80      	ldr	r3, [pc, #512]	; (8005790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005592:	08db      	lsrs	r3, r3, #3
 8005594:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	fb02 f303 	mul.w	r3, r2, r3
 800559e:	ee07 3a90 	vmov	s15, r3
 80055a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055a6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f000 80e1 	beq.w	8005774 <HAL_RCC_GetSysClockFreq+0x2b8>
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	f000 8083 	beq.w	80056c0 <HAL_RCC_GetSysClockFreq+0x204>
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	2b02      	cmp	r3, #2
 80055be:	f200 80a1 	bhi.w	8005704 <HAL_RCC_GetSysClockFreq+0x248>
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d003      	beq.n	80055d0 <HAL_RCC_GetSysClockFreq+0x114>
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d056      	beq.n	800567c <HAL_RCC_GetSysClockFreq+0x1c0>
 80055ce:	e099      	b.n	8005704 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055d0:	4b6f      	ldr	r3, [pc, #444]	; (8005790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0320 	and.w	r3, r3, #32
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d02d      	beq.n	8005638 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80055dc:	4b6c      	ldr	r3, [pc, #432]	; (8005790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	08db      	lsrs	r3, r3, #3
 80055e2:	f003 0303 	and.w	r3, r3, #3
 80055e6:	4a6b      	ldr	r2, [pc, #428]	; (8005794 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80055e8:	fa22 f303 	lsr.w	r3, r2, r3
 80055ec:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	ee07 3a90 	vmov	s15, r3
 80055f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	ee07 3a90 	vmov	s15, r3
 80055fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005602:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005606:	4b62      	ldr	r3, [pc, #392]	; (8005790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800560e:	ee07 3a90 	vmov	s15, r3
 8005612:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005616:	ed97 6a02 	vldr	s12, [r7, #8]
 800561a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80057a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800561e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005622:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005626:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800562a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800562e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005632:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005636:	e087      	b.n	8005748 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	ee07 3a90 	vmov	s15, r3
 800563e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005642:	eddf 6a58 	vldr	s13, [pc, #352]	; 80057a4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005646:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800564a:	4b51      	ldr	r3, [pc, #324]	; (8005790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800564c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005652:	ee07 3a90 	vmov	s15, r3
 8005656:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800565a:	ed97 6a02 	vldr	s12, [r7, #8]
 800565e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80057a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005662:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005666:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800566a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800566e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005676:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800567a:	e065      	b.n	8005748 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	ee07 3a90 	vmov	s15, r3
 8005682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005686:	eddf 6a48 	vldr	s13, [pc, #288]	; 80057a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800568a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800568e:	4b40      	ldr	r3, [pc, #256]	; (8005790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005696:	ee07 3a90 	vmov	s15, r3
 800569a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800569e:	ed97 6a02 	vldr	s12, [r7, #8]
 80056a2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80057a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80056a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056be:	e043      	b.n	8005748 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	ee07 3a90 	vmov	s15, r3
 80056c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ca:	eddf 6a38 	vldr	s13, [pc, #224]	; 80057ac <HAL_RCC_GetSysClockFreq+0x2f0>
 80056ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056d2:	4b2f      	ldr	r3, [pc, #188]	; (8005790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056da:	ee07 3a90 	vmov	s15, r3
 80056de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80056e6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80057a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80056ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005702:	e021      	b.n	8005748 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	ee07 3a90 	vmov	s15, r3
 800570a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800570e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80057a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005716:	4b1e      	ldr	r3, [pc, #120]	; (8005790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800571a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800571e:	ee07 3a90 	vmov	s15, r3
 8005722:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005726:	ed97 6a02 	vldr	s12, [r7, #8]
 800572a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80057a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800572e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005732:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005736:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800573a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800573e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005742:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005746:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005748:	4b11      	ldr	r3, [pc, #68]	; (8005790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800574a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574c:	0a5b      	lsrs	r3, r3, #9
 800574e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005752:	3301      	adds	r3, #1
 8005754:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	ee07 3a90 	vmov	s15, r3
 800575c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005760:	edd7 6a07 	vldr	s13, [r7, #28]
 8005764:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005768:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800576c:	ee17 3a90 	vmov	r3, s15
 8005770:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005772:	e005      	b.n	8005780 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005774:	2300      	movs	r3, #0
 8005776:	61bb      	str	r3, [r7, #24]
    break;
 8005778:	e002      	b.n	8005780 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800577a:	4b07      	ldr	r3, [pc, #28]	; (8005798 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800577c:	61bb      	str	r3, [r7, #24]
    break;
 800577e:	bf00      	nop
  }

  return sysclockfreq;
 8005780:	69bb      	ldr	r3, [r7, #24]
}
 8005782:	4618      	mov	r0, r3
 8005784:	3724      	adds	r7, #36	; 0x24
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	58024400 	.word	0x58024400
 8005794:	03d09000 	.word	0x03d09000
 8005798:	003d0900 	.word	0x003d0900
 800579c:	007a1200 	.word	0x007a1200
 80057a0:	46000000 	.word	0x46000000
 80057a4:	4c742400 	.word	0x4c742400
 80057a8:	4a742400 	.word	0x4a742400
 80057ac:	4af42400 	.word	0x4af42400

080057b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80057b6:	f7ff fe81 	bl	80054bc <HAL_RCC_GetSysClockFreq>
 80057ba:	4602      	mov	r2, r0
 80057bc:	4b10      	ldr	r3, [pc, #64]	; (8005800 <HAL_RCC_GetHCLKFreq+0x50>)
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	0a1b      	lsrs	r3, r3, #8
 80057c2:	f003 030f 	and.w	r3, r3, #15
 80057c6:	490f      	ldr	r1, [pc, #60]	; (8005804 <HAL_RCC_GetHCLKFreq+0x54>)
 80057c8:	5ccb      	ldrb	r3, [r1, r3]
 80057ca:	f003 031f 	and.w	r3, r3, #31
 80057ce:	fa22 f303 	lsr.w	r3, r2, r3
 80057d2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80057d4:	4b0a      	ldr	r3, [pc, #40]	; (8005800 <HAL_RCC_GetHCLKFreq+0x50>)
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	f003 030f 	and.w	r3, r3, #15
 80057dc:	4a09      	ldr	r2, [pc, #36]	; (8005804 <HAL_RCC_GetHCLKFreq+0x54>)
 80057de:	5cd3      	ldrb	r3, [r2, r3]
 80057e0:	f003 031f 	and.w	r3, r3, #31
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	fa22 f303 	lsr.w	r3, r2, r3
 80057ea:	4a07      	ldr	r2, [pc, #28]	; (8005808 <HAL_RCC_GetHCLKFreq+0x58>)
 80057ec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80057ee:	4a07      	ldr	r2, [pc, #28]	; (800580c <HAL_RCC_GetHCLKFreq+0x5c>)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80057f4:	4b04      	ldr	r3, [pc, #16]	; (8005808 <HAL_RCC_GetHCLKFreq+0x58>)
 80057f6:	681b      	ldr	r3, [r3, #0]
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3708      	adds	r7, #8
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	58024400 	.word	0x58024400
 8005804:	08009c08 	.word	0x08009c08
 8005808:	24000004 	.word	0x24000004
 800580c:	24000000 	.word	0x24000000

08005810 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005814:	f7ff ffcc 	bl	80057b0 <HAL_RCC_GetHCLKFreq>
 8005818:	4602      	mov	r2, r0
 800581a:	4b06      	ldr	r3, [pc, #24]	; (8005834 <HAL_RCC_GetPCLK1Freq+0x24>)
 800581c:	69db      	ldr	r3, [r3, #28]
 800581e:	091b      	lsrs	r3, r3, #4
 8005820:	f003 0307 	and.w	r3, r3, #7
 8005824:	4904      	ldr	r1, [pc, #16]	; (8005838 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005826:	5ccb      	ldrb	r3, [r1, r3]
 8005828:	f003 031f 	and.w	r3, r3, #31
 800582c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005830:	4618      	mov	r0, r3
 8005832:	bd80      	pop	{r7, pc}
 8005834:	58024400 	.word	0x58024400
 8005838:	08009c08 	.word	0x08009c08

0800583c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005840:	f7ff ffb6 	bl	80057b0 <HAL_RCC_GetHCLKFreq>
 8005844:	4602      	mov	r2, r0
 8005846:	4b06      	ldr	r3, [pc, #24]	; (8005860 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005848:	69db      	ldr	r3, [r3, #28]
 800584a:	0a1b      	lsrs	r3, r3, #8
 800584c:	f003 0307 	and.w	r3, r3, #7
 8005850:	4904      	ldr	r1, [pc, #16]	; (8005864 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005852:	5ccb      	ldrb	r3, [r1, r3]
 8005854:	f003 031f 	and.w	r3, r3, #31
 8005858:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800585c:	4618      	mov	r0, r3
 800585e:	bd80      	pop	{r7, pc}
 8005860:	58024400 	.word	0x58024400
 8005864:	08009c08 	.word	0x08009c08

08005868 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b086      	sub	sp, #24
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005870:	2300      	movs	r3, #0
 8005872:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005874:	2300      	movs	r3, #0
 8005876:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d03f      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005888:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800588c:	d02a      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800588e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005892:	d824      	bhi.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005894:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005898:	d018      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800589a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800589e:	d81e      	bhi.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x76>
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d003      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 80058a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058a8:	d007      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x52>
 80058aa:	e018      	b.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058ac:	4ba3      	ldr	r3, [pc, #652]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80058ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b0:	4aa2      	ldr	r2, [pc, #648]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80058b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80058b8:	e015      	b.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	3304      	adds	r3, #4
 80058be:	2102      	movs	r1, #2
 80058c0:	4618      	mov	r0, r3
 80058c2:	f001 f9d5 	bl	8006c70 <RCCEx_PLL2_Config>
 80058c6:	4603      	mov	r3, r0
 80058c8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80058ca:	e00c      	b.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	3324      	adds	r3, #36	; 0x24
 80058d0:	2102      	movs	r1, #2
 80058d2:	4618      	mov	r0, r3
 80058d4:	f001 fa7e 	bl	8006dd4 <RCCEx_PLL3_Config>
 80058d8:	4603      	mov	r3, r0
 80058da:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80058dc:	e003      	b.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	75fb      	strb	r3, [r7, #23]
      break;
 80058e2:	e000      	b.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80058e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058e6:	7dfb      	ldrb	r3, [r7, #23]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d109      	bne.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80058ec:	4b93      	ldr	r3, [pc, #588]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80058ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058f8:	4990      	ldr	r1, [pc, #576]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80058fa:	4313      	orrs	r3, r2
 80058fc:	650b      	str	r3, [r1, #80]	; 0x50
 80058fe:	e001      	b.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005900:	7dfb      	ldrb	r3, [r7, #23]
 8005902:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800590c:	2b00      	cmp	r3, #0
 800590e:	d03d      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005914:	2b04      	cmp	r3, #4
 8005916:	d826      	bhi.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005918:	a201      	add	r2, pc, #4	; (adr r2, 8005920 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800591a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800591e:	bf00      	nop
 8005920:	08005935 	.word	0x08005935
 8005924:	08005943 	.word	0x08005943
 8005928:	08005955 	.word	0x08005955
 800592c:	0800596d 	.word	0x0800596d
 8005930:	0800596d 	.word	0x0800596d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005934:	4b81      	ldr	r3, [pc, #516]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005938:	4a80      	ldr	r2, [pc, #512]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800593a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800593e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005940:	e015      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	3304      	adds	r3, #4
 8005946:	2100      	movs	r1, #0
 8005948:	4618      	mov	r0, r3
 800594a:	f001 f991 	bl	8006c70 <RCCEx_PLL2_Config>
 800594e:	4603      	mov	r3, r0
 8005950:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005952:	e00c      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	3324      	adds	r3, #36	; 0x24
 8005958:	2100      	movs	r1, #0
 800595a:	4618      	mov	r0, r3
 800595c:	f001 fa3a 	bl	8006dd4 <RCCEx_PLL3_Config>
 8005960:	4603      	mov	r3, r0
 8005962:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005964:	e003      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	75fb      	strb	r3, [r7, #23]
      break;
 800596a:	e000      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800596c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800596e:	7dfb      	ldrb	r3, [r7, #23]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d109      	bne.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005974:	4b71      	ldr	r3, [pc, #452]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005978:	f023 0207 	bic.w	r2, r3, #7
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005980:	496e      	ldr	r1, [pc, #440]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005982:	4313      	orrs	r3, r2
 8005984:	650b      	str	r3, [r1, #80]	; 0x50
 8005986:	e001      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005988:	7dfb      	ldrb	r3, [r7, #23]
 800598a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005994:	2b00      	cmp	r3, #0
 8005996:	d042      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800599c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059a0:	d02b      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x192>
 80059a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059a6:	d825      	bhi.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80059a8:	2bc0      	cmp	r3, #192	; 0xc0
 80059aa:	d028      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x196>
 80059ac:	2bc0      	cmp	r3, #192	; 0xc0
 80059ae:	d821      	bhi.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80059b0:	2b80      	cmp	r3, #128	; 0x80
 80059b2:	d016      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80059b4:	2b80      	cmp	r3, #128	; 0x80
 80059b6:	d81d      	bhi.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d002      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80059bc:	2b40      	cmp	r3, #64	; 0x40
 80059be:	d007      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80059c0:	e018      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059c2:	4b5e      	ldr	r3, [pc, #376]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80059c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c6:	4a5d      	ldr	r2, [pc, #372]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80059c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80059ce:	e017      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	3304      	adds	r3, #4
 80059d4:	2100      	movs	r1, #0
 80059d6:	4618      	mov	r0, r3
 80059d8:	f001 f94a 	bl	8006c70 <RCCEx_PLL2_Config>
 80059dc:	4603      	mov	r3, r0
 80059de:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80059e0:	e00e      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	3324      	adds	r3, #36	; 0x24
 80059e6:	2100      	movs	r1, #0
 80059e8:	4618      	mov	r0, r3
 80059ea:	f001 f9f3 	bl	8006dd4 <RCCEx_PLL3_Config>
 80059ee:	4603      	mov	r3, r0
 80059f0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80059f2:	e005      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	75fb      	strb	r3, [r7, #23]
      break;
 80059f8:	e002      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80059fa:	bf00      	nop
 80059fc:	e000      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80059fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a00:	7dfb      	ldrb	r3, [r7, #23]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d109      	bne.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005a06:	4b4d      	ldr	r3, [pc, #308]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a0a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a12:	494a      	ldr	r1, [pc, #296]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005a14:	4313      	orrs	r3, r2
 8005a16:	650b      	str	r3, [r1, #80]	; 0x50
 8005a18:	e001      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a1a:	7dfb      	ldrb	r3, [r7, #23]
 8005a1c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d049      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005a30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a34:	d030      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005a36:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a3a:	d82a      	bhi.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005a3c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005a40:	d02c      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005a42:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005a46:	d824      	bhi.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005a48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a4c:	d018      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005a4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a52:	d81e      	bhi.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d003      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005a58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a5c:	d007      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005a5e:	e018      	b.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a60:	4b36      	ldr	r3, [pc, #216]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a64:	4a35      	ldr	r2, [pc, #212]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005a66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a6c:	e017      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	3304      	adds	r3, #4
 8005a72:	2100      	movs	r1, #0
 8005a74:	4618      	mov	r0, r3
 8005a76:	f001 f8fb 	bl	8006c70 <RCCEx_PLL2_Config>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005a7e:	e00e      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	3324      	adds	r3, #36	; 0x24
 8005a84:	2100      	movs	r1, #0
 8005a86:	4618      	mov	r0, r3
 8005a88:	f001 f9a4 	bl	8006dd4 <RCCEx_PLL3_Config>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a90:	e005      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	75fb      	strb	r3, [r7, #23]
      break;
 8005a96:	e002      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005a98:	bf00      	nop
 8005a9a:	e000      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005a9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a9e:	7dfb      	ldrb	r3, [r7, #23]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d10a      	bne.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005aa4:	4b25      	ldr	r3, [pc, #148]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aa8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005ab2:	4922      	ldr	r1, [pc, #136]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	658b      	str	r3, [r1, #88]	; 0x58
 8005ab8:	e001      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aba:	7dfb      	ldrb	r3, [r7, #23]
 8005abc:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d04b      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005ad0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ad4:	d030      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005ad6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ada:	d82a      	bhi.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005adc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005ae0:	d02e      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8005ae2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005ae6:	d824      	bhi.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005ae8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005aec:	d018      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005aee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005af2:	d81e      	bhi.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d003      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005af8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005afc:	d007      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005afe:	e018      	b.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b00:	4b0e      	ldr	r3, [pc, #56]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b04:	4a0d      	ldr	r2, [pc, #52]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b0c:	e019      	b.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	3304      	adds	r3, #4
 8005b12:	2100      	movs	r1, #0
 8005b14:	4618      	mov	r0, r3
 8005b16:	f001 f8ab 	bl	8006c70 <RCCEx_PLL2_Config>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005b1e:	e010      	b.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	3324      	adds	r3, #36	; 0x24
 8005b24:	2100      	movs	r1, #0
 8005b26:	4618      	mov	r0, r3
 8005b28:	f001 f954 	bl	8006dd4 <RCCEx_PLL3_Config>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b30:	e007      	b.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	75fb      	strb	r3, [r7, #23]
      break;
 8005b36:	e004      	b.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8005b38:	bf00      	nop
 8005b3a:	e002      	b.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005b3c:	58024400 	.word	0x58024400
      break;
 8005b40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b42:	7dfb      	ldrb	r3, [r7, #23]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d10a      	bne.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005b48:	4b99      	ldr	r3, [pc, #612]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b4c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005b56:	4996      	ldr	r1, [pc, #600]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	658b      	str	r3, [r1, #88]	; 0x58
 8005b5c:	e001      	b.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b5e:	7dfb      	ldrb	r3, [r7, #23]
 8005b60:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d032      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b72:	2b30      	cmp	r3, #48	; 0x30
 8005b74:	d01c      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8005b76:	2b30      	cmp	r3, #48	; 0x30
 8005b78:	d817      	bhi.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005b7a:	2b20      	cmp	r3, #32
 8005b7c:	d00c      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8005b7e:	2b20      	cmp	r3, #32
 8005b80:	d813      	bhi.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d016      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8005b86:	2b10      	cmp	r3, #16
 8005b88:	d10f      	bne.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b8a:	4b89      	ldr	r3, [pc, #548]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8e:	4a88      	ldr	r2, [pc, #544]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b94:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005b96:	e00e      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	3304      	adds	r3, #4
 8005b9c:	2102      	movs	r1, #2
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f001 f866 	bl	8006c70 <RCCEx_PLL2_Config>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005ba8:	e005      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	75fb      	strb	r3, [r7, #23]
      break;
 8005bae:	e002      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005bb0:	bf00      	nop
 8005bb2:	e000      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005bb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bb6:	7dfb      	ldrb	r3, [r7, #23]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d109      	bne.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005bbc:	4b7c      	ldr	r3, [pc, #496]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bc0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bc8:	4979      	ldr	r1, [pc, #484]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005bce:	e001      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd0:	7dfb      	ldrb	r3, [r7, #23]
 8005bd2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d047      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005be4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005be8:	d030      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005bea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bee:	d82a      	bhi.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005bf0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005bf4:	d02c      	beq.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005bf6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005bfa:	d824      	bhi.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005bfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c00:	d018      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8005c02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c06:	d81e      	bhi.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d003      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8005c0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c10:	d007      	beq.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8005c12:	e018      	b.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c14:	4b66      	ldr	r3, [pc, #408]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c18:	4a65      	ldr	r2, [pc, #404]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005c1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005c20:	e017      	b.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	3304      	adds	r3, #4
 8005c26:	2100      	movs	r1, #0
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f001 f821 	bl	8006c70 <RCCEx_PLL2_Config>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005c32:	e00e      	b.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	3324      	adds	r3, #36	; 0x24
 8005c38:	2100      	movs	r1, #0
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f001 f8ca 	bl	8006dd4 <RCCEx_PLL3_Config>
 8005c40:	4603      	mov	r3, r0
 8005c42:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005c44:	e005      	b.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	75fb      	strb	r3, [r7, #23]
      break;
 8005c4a:	e002      	b.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005c4c:	bf00      	nop
 8005c4e:	e000      	b.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005c50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c52:	7dfb      	ldrb	r3, [r7, #23]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d109      	bne.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005c58:	4b55      	ldr	r3, [pc, #340]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c5c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c64:	4952      	ldr	r1, [pc, #328]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005c66:	4313      	orrs	r3, r2
 8005c68:	650b      	str	r3, [r1, #80]	; 0x50
 8005c6a:	e001      	b.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c6c:	7dfb      	ldrb	r3, [r7, #23]
 8005c6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d049      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c84:	d02e      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005c86:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c8a:	d828      	bhi.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005c8c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c90:	d02a      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8005c92:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c96:	d822      	bhi.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005c98:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c9c:	d026      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x484>
 8005c9e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ca2:	d81c      	bhi.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005ca4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ca8:	d010      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x464>
 8005caa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cae:	d816      	bhi.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d01d      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cb8:	d111      	bne.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	3304      	adds	r3, #4
 8005cbe:	2101      	movs	r1, #1
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f000 ffd5 	bl	8006c70 <RCCEx_PLL2_Config>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005cca:	e012      	b.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	3324      	adds	r3, #36	; 0x24
 8005cd0:	2101      	movs	r1, #1
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f001 f87e 	bl	8006dd4 <RCCEx_PLL3_Config>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005cdc:	e009      	b.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	75fb      	strb	r3, [r7, #23]
      break;
 8005ce2:	e006      	b.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005ce4:	bf00      	nop
 8005ce6:	e004      	b.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005ce8:	bf00      	nop
 8005cea:	e002      	b.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005cec:	bf00      	nop
 8005cee:	e000      	b.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005cf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cf2:	7dfb      	ldrb	r3, [r7, #23]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d109      	bne.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005cf8:	4b2d      	ldr	r3, [pc, #180]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cfc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d04:	492a      	ldr	r1, [pc, #168]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005d06:	4313      	orrs	r3, r2
 8005d08:	650b      	str	r3, [r1, #80]	; 0x50
 8005d0a:	e001      	b.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d0c:	7dfb      	ldrb	r3, [r7, #23]
 8005d0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d04d      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005d22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d26:	d02e      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8005d28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d2c:	d828      	bhi.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d32:	d02a      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8005d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d38:	d822      	bhi.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005d3a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d3e:	d026      	beq.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8005d40:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d44:	d81c      	bhi.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005d46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d4a:	d010      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005d4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d50:	d816      	bhi.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d01d      	beq.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8005d56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d5a:	d111      	bne.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	3304      	adds	r3, #4
 8005d60:	2101      	movs	r1, #1
 8005d62:	4618      	mov	r0, r3
 8005d64:	f000 ff84 	bl	8006c70 <RCCEx_PLL2_Config>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005d6c:	e012      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	3324      	adds	r3, #36	; 0x24
 8005d72:	2101      	movs	r1, #1
 8005d74:	4618      	mov	r0, r3
 8005d76:	f001 f82d 	bl	8006dd4 <RCCEx_PLL3_Config>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005d7e:	e009      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	75fb      	strb	r3, [r7, #23]
      break;
 8005d84:	e006      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005d86:	bf00      	nop
 8005d88:	e004      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005d8a:	bf00      	nop
 8005d8c:	e002      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005d8e:	bf00      	nop
 8005d90:	e000      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005d92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d94:	7dfb      	ldrb	r3, [r7, #23]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d10c      	bne.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005d9a:	4b05      	ldr	r3, [pc, #20]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d9e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005da8:	4901      	ldr	r1, [pc, #4]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	658b      	str	r3, [r1, #88]	; 0x58
 8005dae:	e003      	b.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005db0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005db4:	7dfb      	ldrb	r3, [r7, #23]
 8005db6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d02f      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dcc:	d00e      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x584>
 8005dce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dd2:	d814      	bhi.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x596>
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d015      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8005dd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ddc:	d10f      	bne.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dde:	4baf      	ldr	r3, [pc, #700]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de2:	4aae      	ldr	r2, [pc, #696]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005de8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005dea:	e00c      	b.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	3304      	adds	r3, #4
 8005df0:	2101      	movs	r1, #1
 8005df2:	4618      	mov	r0, r3
 8005df4:	f000 ff3c 	bl	8006c70 <RCCEx_PLL2_Config>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005dfc:	e003      	b.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	75fb      	strb	r3, [r7, #23]
      break;
 8005e02:	e000      	b.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8005e04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e06:	7dfb      	ldrb	r3, [r7, #23]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d109      	bne.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005e0c:	4ba3      	ldr	r3, [pc, #652]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e10:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e18:	49a0      	ldr	r1, [pc, #640]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	650b      	str	r3, [r1, #80]	; 0x50
 8005e1e:	e001      	b.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e20:	7dfb      	ldrb	r3, [r7, #23]
 8005e22:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d032      	beq.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e34:	2b03      	cmp	r3, #3
 8005e36:	d81b      	bhi.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005e38:	a201      	add	r2, pc, #4	; (adr r2, 8005e40 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8005e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e3e:	bf00      	nop
 8005e40:	08005e77 	.word	0x08005e77
 8005e44:	08005e51 	.word	0x08005e51
 8005e48:	08005e5f 	.word	0x08005e5f
 8005e4c:	08005e77 	.word	0x08005e77
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e50:	4b92      	ldr	r3, [pc, #584]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e54:	4a91      	ldr	r2, [pc, #580]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005e56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005e5c:	e00c      	b.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	3304      	adds	r3, #4
 8005e62:	2102      	movs	r1, #2
 8005e64:	4618      	mov	r0, r3
 8005e66:	f000 ff03 	bl	8006c70 <RCCEx_PLL2_Config>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005e6e:	e003      	b.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	75fb      	strb	r3, [r7, #23]
      break;
 8005e74:	e000      	b.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005e76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e78:	7dfb      	ldrb	r3, [r7, #23]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d109      	bne.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005e7e:	4b87      	ldr	r3, [pc, #540]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e82:	f023 0203 	bic.w	r2, r3, #3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e8a:	4984      	ldr	r1, [pc, #528]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005e90:	e001      	b.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e92:	7dfb      	ldrb	r3, [r7, #23]
 8005e94:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	f000 8086 	beq.w	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ea4:	4b7e      	ldr	r3, [pc, #504]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a7d      	ldr	r2, [pc, #500]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005eaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005eb0:	f7fb fc7e 	bl	80017b0 <HAL_GetTick>
 8005eb4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005eb6:	e009      	b.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005eb8:	f7fb fc7a 	bl	80017b0 <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	2b64      	cmp	r3, #100	; 0x64
 8005ec4:	d902      	bls.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	75fb      	strb	r3, [r7, #23]
        break;
 8005eca:	e005      	b.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ecc:	4b74      	ldr	r3, [pc, #464]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d0ef      	beq.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005ed8:	7dfb      	ldrb	r3, [r7, #23]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d166      	bne.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005ede:	4b6f      	ldr	r3, [pc, #444]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005ee0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ee8:	4053      	eors	r3, r2
 8005eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d013      	beq.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ef2:	4b6a      	ldr	r3, [pc, #424]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005efa:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005efc:	4b67      	ldr	r3, [pc, #412]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f00:	4a66      	ldr	r2, [pc, #408]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f06:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f08:	4b64      	ldr	r3, [pc, #400]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f0c:	4a63      	ldr	r2, [pc, #396]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f12:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005f14:	4a61      	ldr	r2, [pc, #388]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005f20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f24:	d115      	bne.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f26:	f7fb fc43 	bl	80017b0 <HAL_GetTick>
 8005f2a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f2c:	e00b      	b.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f2e:	f7fb fc3f 	bl	80017b0 <HAL_GetTick>
 8005f32:	4602      	mov	r2, r0
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d902      	bls.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	75fb      	strb	r3, [r7, #23]
            break;
 8005f44:	e005      	b.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f46:	4b55      	ldr	r3, [pc, #340]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f4a:	f003 0302 	and.w	r3, r3, #2
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d0ed      	beq.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8005f52:	7dfb      	ldrb	r3, [r7, #23]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d126      	bne.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f66:	d10d      	bne.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005f68:	4b4c      	ldr	r3, [pc, #304]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005f76:	0919      	lsrs	r1, r3, #4
 8005f78:	4b4a      	ldr	r3, [pc, #296]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8005f7a:	400b      	ands	r3, r1
 8005f7c:	4947      	ldr	r1, [pc, #284]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	610b      	str	r3, [r1, #16]
 8005f82:	e005      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005f84:	4b45      	ldr	r3, [pc, #276]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	4a44      	ldr	r2, [pc, #272]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f8a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005f8e:	6113      	str	r3, [r2, #16]
 8005f90:	4b42      	ldr	r3, [pc, #264]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005f9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f9e:	493f      	ldr	r1, [pc, #252]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	670b      	str	r3, [r1, #112]	; 0x70
 8005fa4:	e004      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005fa6:	7dfb      	ldrb	r3, [r7, #23]
 8005fa8:	75bb      	strb	r3, [r7, #22]
 8005faa:	e001      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fac:	7dfb      	ldrb	r3, [r7, #23]
 8005fae:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0301 	and.w	r3, r3, #1
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f000 8085 	beq.w	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fc2:	2b28      	cmp	r3, #40	; 0x28
 8005fc4:	d866      	bhi.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005fc6:	a201      	add	r2, pc, #4	; (adr r2, 8005fcc <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fcc:	080060a9 	.word	0x080060a9
 8005fd0:	08006095 	.word	0x08006095
 8005fd4:	08006095 	.word	0x08006095
 8005fd8:	08006095 	.word	0x08006095
 8005fdc:	08006095 	.word	0x08006095
 8005fe0:	08006095 	.word	0x08006095
 8005fe4:	08006095 	.word	0x08006095
 8005fe8:	08006095 	.word	0x08006095
 8005fec:	08006071 	.word	0x08006071
 8005ff0:	08006095 	.word	0x08006095
 8005ff4:	08006095 	.word	0x08006095
 8005ff8:	08006095 	.word	0x08006095
 8005ffc:	08006095 	.word	0x08006095
 8006000:	08006095 	.word	0x08006095
 8006004:	08006095 	.word	0x08006095
 8006008:	08006095 	.word	0x08006095
 800600c:	08006083 	.word	0x08006083
 8006010:	08006095 	.word	0x08006095
 8006014:	08006095 	.word	0x08006095
 8006018:	08006095 	.word	0x08006095
 800601c:	08006095 	.word	0x08006095
 8006020:	08006095 	.word	0x08006095
 8006024:	08006095 	.word	0x08006095
 8006028:	08006095 	.word	0x08006095
 800602c:	080060a9 	.word	0x080060a9
 8006030:	08006095 	.word	0x08006095
 8006034:	08006095 	.word	0x08006095
 8006038:	08006095 	.word	0x08006095
 800603c:	08006095 	.word	0x08006095
 8006040:	08006095 	.word	0x08006095
 8006044:	08006095 	.word	0x08006095
 8006048:	08006095 	.word	0x08006095
 800604c:	080060a9 	.word	0x080060a9
 8006050:	08006095 	.word	0x08006095
 8006054:	08006095 	.word	0x08006095
 8006058:	08006095 	.word	0x08006095
 800605c:	08006095 	.word	0x08006095
 8006060:	08006095 	.word	0x08006095
 8006064:	08006095 	.word	0x08006095
 8006068:	08006095 	.word	0x08006095
 800606c:	080060a9 	.word	0x080060a9
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	3304      	adds	r3, #4
 8006074:	2101      	movs	r1, #1
 8006076:	4618      	mov	r0, r3
 8006078:	f000 fdfa 	bl	8006c70 <RCCEx_PLL2_Config>
 800607c:	4603      	mov	r3, r0
 800607e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006080:	e013      	b.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	3324      	adds	r3, #36	; 0x24
 8006086:	2101      	movs	r1, #1
 8006088:	4618      	mov	r0, r3
 800608a:	f000 fea3 	bl	8006dd4 <RCCEx_PLL3_Config>
 800608e:	4603      	mov	r3, r0
 8006090:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006092:	e00a      	b.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	75fb      	strb	r3, [r7, #23]
      break;
 8006098:	e007      	b.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x842>
 800609a:	bf00      	nop
 800609c:	58024400 	.word	0x58024400
 80060a0:	58024800 	.word	0x58024800
 80060a4:	00ffffcf 	.word	0x00ffffcf
      break;
 80060a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060aa:	7dfb      	ldrb	r3, [r7, #23]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d109      	bne.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80060b0:	4b96      	ldr	r3, [pc, #600]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80060b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060b4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060bc:	4993      	ldr	r1, [pc, #588]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80060be:	4313      	orrs	r3, r2
 80060c0:	654b      	str	r3, [r1, #84]	; 0x54
 80060c2:	e001      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060c4:	7dfb      	ldrb	r3, [r7, #23]
 80060c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 0302 	and.w	r3, r3, #2
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d038      	beq.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060d8:	2b05      	cmp	r3, #5
 80060da:	d821      	bhi.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80060dc:	a201      	add	r2, pc, #4	; (adr r2, 80060e4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80060de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e2:	bf00      	nop
 80060e4:	08006127 	.word	0x08006127
 80060e8:	080060fd 	.word	0x080060fd
 80060ec:	0800610f 	.word	0x0800610f
 80060f0:	08006127 	.word	0x08006127
 80060f4:	08006127 	.word	0x08006127
 80060f8:	08006127 	.word	0x08006127
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	3304      	adds	r3, #4
 8006100:	2101      	movs	r1, #1
 8006102:	4618      	mov	r0, r3
 8006104:	f000 fdb4 	bl	8006c70 <RCCEx_PLL2_Config>
 8006108:	4603      	mov	r3, r0
 800610a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800610c:	e00c      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	3324      	adds	r3, #36	; 0x24
 8006112:	2101      	movs	r1, #1
 8006114:	4618      	mov	r0, r3
 8006116:	f000 fe5d 	bl	8006dd4 <RCCEx_PLL3_Config>
 800611a:	4603      	mov	r3, r0
 800611c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800611e:	e003      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	75fb      	strb	r3, [r7, #23]
      break;
 8006124:	e000      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8006126:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006128:	7dfb      	ldrb	r3, [r7, #23]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d109      	bne.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800612e:	4b77      	ldr	r3, [pc, #476]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006132:	f023 0207 	bic.w	r2, r3, #7
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800613a:	4974      	ldr	r1, [pc, #464]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800613c:	4313      	orrs	r3, r2
 800613e:	654b      	str	r3, [r1, #84]	; 0x54
 8006140:	e001      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006142:	7dfb      	ldrb	r3, [r7, #23]
 8006144:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0304 	and.w	r3, r3, #4
 800614e:	2b00      	cmp	r3, #0
 8006150:	d03a      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006158:	2b05      	cmp	r3, #5
 800615a:	d821      	bhi.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800615c:	a201      	add	r2, pc, #4	; (adr r2, 8006164 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800615e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006162:	bf00      	nop
 8006164:	080061a7 	.word	0x080061a7
 8006168:	0800617d 	.word	0x0800617d
 800616c:	0800618f 	.word	0x0800618f
 8006170:	080061a7 	.word	0x080061a7
 8006174:	080061a7 	.word	0x080061a7
 8006178:	080061a7 	.word	0x080061a7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	3304      	adds	r3, #4
 8006180:	2101      	movs	r1, #1
 8006182:	4618      	mov	r0, r3
 8006184:	f000 fd74 	bl	8006c70 <RCCEx_PLL2_Config>
 8006188:	4603      	mov	r3, r0
 800618a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800618c:	e00c      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	3324      	adds	r3, #36	; 0x24
 8006192:	2101      	movs	r1, #1
 8006194:	4618      	mov	r0, r3
 8006196:	f000 fe1d 	bl	8006dd4 <RCCEx_PLL3_Config>
 800619a:	4603      	mov	r3, r0
 800619c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800619e:	e003      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	75fb      	strb	r3, [r7, #23]
      break;
 80061a4:	e000      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80061a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061a8:	7dfb      	ldrb	r3, [r7, #23]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d10a      	bne.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80061ae:	4b57      	ldr	r3, [pc, #348]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80061b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061b2:	f023 0207 	bic.w	r2, r3, #7
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061bc:	4953      	ldr	r1, [pc, #332]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80061be:	4313      	orrs	r3, r2
 80061c0:	658b      	str	r3, [r1, #88]	; 0x58
 80061c2:	e001      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061c4:	7dfb      	ldrb	r3, [r7, #23]
 80061c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0320 	and.w	r3, r3, #32
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d04b      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80061de:	d02e      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80061e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80061e4:	d828      	bhi.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80061e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061ea:	d02a      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80061ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061f0:	d822      	bhi.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80061f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80061f6:	d026      	beq.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80061f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80061fc:	d81c      	bhi.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80061fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006202:	d010      	beq.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8006204:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006208:	d816      	bhi.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800620a:	2b00      	cmp	r3, #0
 800620c:	d01d      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800620e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006212:	d111      	bne.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	3304      	adds	r3, #4
 8006218:	2100      	movs	r1, #0
 800621a:	4618      	mov	r0, r3
 800621c:	f000 fd28 	bl	8006c70 <RCCEx_PLL2_Config>
 8006220:	4603      	mov	r3, r0
 8006222:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006224:	e012      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	3324      	adds	r3, #36	; 0x24
 800622a:	2102      	movs	r1, #2
 800622c:	4618      	mov	r0, r3
 800622e:	f000 fdd1 	bl	8006dd4 <RCCEx_PLL3_Config>
 8006232:	4603      	mov	r3, r0
 8006234:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006236:	e009      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	75fb      	strb	r3, [r7, #23]
      break;
 800623c:	e006      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800623e:	bf00      	nop
 8006240:	e004      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006242:	bf00      	nop
 8006244:	e002      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006246:	bf00      	nop
 8006248:	e000      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800624a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800624c:	7dfb      	ldrb	r3, [r7, #23]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10a      	bne.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006252:	4b2e      	ldr	r3, [pc, #184]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006256:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006260:	492a      	ldr	r1, [pc, #168]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006262:	4313      	orrs	r3, r2
 8006264:	654b      	str	r3, [r1, #84]	; 0x54
 8006266:	e001      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006268:	7dfb      	ldrb	r3, [r7, #23]
 800626a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006274:	2b00      	cmp	r3, #0
 8006276:	d04d      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800627e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006282:	d02e      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006284:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006288:	d828      	bhi.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800628a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800628e:	d02a      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006290:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006294:	d822      	bhi.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006296:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800629a:	d026      	beq.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800629c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062a0:	d81c      	bhi.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80062a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062a6:	d010      	beq.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80062a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062ac:	d816      	bhi.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d01d      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80062b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062b6:	d111      	bne.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	3304      	adds	r3, #4
 80062bc:	2100      	movs	r1, #0
 80062be:	4618      	mov	r0, r3
 80062c0:	f000 fcd6 	bl	8006c70 <RCCEx_PLL2_Config>
 80062c4:	4603      	mov	r3, r0
 80062c6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80062c8:	e012      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	3324      	adds	r3, #36	; 0x24
 80062ce:	2102      	movs	r1, #2
 80062d0:	4618      	mov	r0, r3
 80062d2:	f000 fd7f 	bl	8006dd4 <RCCEx_PLL3_Config>
 80062d6:	4603      	mov	r3, r0
 80062d8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80062da:	e009      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	75fb      	strb	r3, [r7, #23]
      break;
 80062e0:	e006      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80062e2:	bf00      	nop
 80062e4:	e004      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80062e6:	bf00      	nop
 80062e8:	e002      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80062ea:	bf00      	nop
 80062ec:	e000      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80062ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062f0:	7dfb      	ldrb	r3, [r7, #23]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d10c      	bne.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80062f6:	4b05      	ldr	r3, [pc, #20]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80062f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062fa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006304:	4901      	ldr	r1, [pc, #4]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006306:	4313      	orrs	r3, r2
 8006308:	658b      	str	r3, [r1, #88]	; 0x58
 800630a:	e003      	b.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800630c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006310:	7dfb      	ldrb	r3, [r7, #23]
 8006312:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800631c:	2b00      	cmp	r3, #0
 800631e:	d04b      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006326:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800632a:	d02e      	beq.n	800638a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800632c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006330:	d828      	bhi.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006332:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006336:	d02a      	beq.n	800638e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006338:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800633c:	d822      	bhi.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800633e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006342:	d026      	beq.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8006344:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006348:	d81c      	bhi.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800634a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800634e:	d010      	beq.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006350:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006354:	d816      	bhi.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006356:	2b00      	cmp	r3, #0
 8006358:	d01d      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800635a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800635e:	d111      	bne.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	3304      	adds	r3, #4
 8006364:	2100      	movs	r1, #0
 8006366:	4618      	mov	r0, r3
 8006368:	f000 fc82 	bl	8006c70 <RCCEx_PLL2_Config>
 800636c:	4603      	mov	r3, r0
 800636e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006370:	e012      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	3324      	adds	r3, #36	; 0x24
 8006376:	2102      	movs	r1, #2
 8006378:	4618      	mov	r0, r3
 800637a:	f000 fd2b 	bl	8006dd4 <RCCEx_PLL3_Config>
 800637e:	4603      	mov	r3, r0
 8006380:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006382:	e009      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	75fb      	strb	r3, [r7, #23]
      break;
 8006388:	e006      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800638a:	bf00      	nop
 800638c:	e004      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800638e:	bf00      	nop
 8006390:	e002      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006392:	bf00      	nop
 8006394:	e000      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006396:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006398:	7dfb      	ldrb	r3, [r7, #23]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d10a      	bne.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800639e:	4b9d      	ldr	r3, [pc, #628]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80063a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80063ac:	4999      	ldr	r1, [pc, #612]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80063ae:	4313      	orrs	r3, r2
 80063b0:	658b      	str	r3, [r1, #88]	; 0x58
 80063b2:	e001      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b4:	7dfb      	ldrb	r3, [r7, #23]
 80063b6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 0308 	and.w	r3, r3, #8
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d01a      	beq.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ce:	d10a      	bne.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	3324      	adds	r3, #36	; 0x24
 80063d4:	2102      	movs	r1, #2
 80063d6:	4618      	mov	r0, r3
 80063d8:	f000 fcfc 	bl	8006dd4 <RCCEx_PLL3_Config>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d001      	beq.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80063e6:	4b8b      	ldr	r3, [pc, #556]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80063e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063f4:	4987      	ldr	r1, [pc, #540]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80063f6:	4313      	orrs	r3, r2
 80063f8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 0310 	and.w	r3, r3, #16
 8006402:	2b00      	cmp	r3, #0
 8006404:	d01a      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800640c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006410:	d10a      	bne.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	3324      	adds	r3, #36	; 0x24
 8006416:	2102      	movs	r1, #2
 8006418:	4618      	mov	r0, r3
 800641a:	f000 fcdb 	bl	8006dd4 <RCCEx_PLL3_Config>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d001      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006428:	4b7a      	ldr	r3, [pc, #488]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800642a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800642c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006436:	4977      	ldr	r1, [pc, #476]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006438:	4313      	orrs	r3, r2
 800643a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d034      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800644e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006452:	d01d      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8006454:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006458:	d817      	bhi.n	800648a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800645a:	2b00      	cmp	r3, #0
 800645c:	d003      	beq.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800645e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006462:	d009      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8006464:	e011      	b.n	800648a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	3304      	adds	r3, #4
 800646a:	2100      	movs	r1, #0
 800646c:	4618      	mov	r0, r3
 800646e:	f000 fbff 	bl	8006c70 <RCCEx_PLL2_Config>
 8006472:	4603      	mov	r3, r0
 8006474:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006476:	e00c      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	3324      	adds	r3, #36	; 0x24
 800647c:	2102      	movs	r1, #2
 800647e:	4618      	mov	r0, r3
 8006480:	f000 fca8 	bl	8006dd4 <RCCEx_PLL3_Config>
 8006484:	4603      	mov	r3, r0
 8006486:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006488:	e003      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	75fb      	strb	r3, [r7, #23]
      break;
 800648e:	e000      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8006490:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006492:	7dfb      	ldrb	r3, [r7, #23]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d10a      	bne.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006498:	4b5e      	ldr	r3, [pc, #376]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800649a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800649c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80064a6:	495b      	ldr	r1, [pc, #364]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80064a8:	4313      	orrs	r3, r2
 80064aa:	658b      	str	r3, [r1, #88]	; 0x58
 80064ac:	e001      	b.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ae:	7dfb      	ldrb	r3, [r7, #23]
 80064b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d033      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80064c8:	d01c      	beq.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80064ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80064ce:	d816      	bhi.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80064d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064d4:	d003      	beq.n	80064de <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80064d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064da:	d007      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80064dc:	e00f      	b.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064de:	4b4d      	ldr	r3, [pc, #308]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80064e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e2:	4a4c      	ldr	r2, [pc, #304]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80064e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80064ea:	e00c      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	3324      	adds	r3, #36	; 0x24
 80064f0:	2101      	movs	r1, #1
 80064f2:	4618      	mov	r0, r3
 80064f4:	f000 fc6e 	bl	8006dd4 <RCCEx_PLL3_Config>
 80064f8:	4603      	mov	r3, r0
 80064fa:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80064fc:	e003      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	75fb      	strb	r3, [r7, #23]
      break;
 8006502:	e000      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8006504:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006506:	7dfb      	ldrb	r3, [r7, #23]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d10a      	bne.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800650c:	4b41      	ldr	r3, [pc, #260]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800650e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006510:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800651a:	493e      	ldr	r1, [pc, #248]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800651c:	4313      	orrs	r3, r2
 800651e:	654b      	str	r3, [r1, #84]	; 0x54
 8006520:	e001      	b.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006522:	7dfb      	ldrb	r3, [r7, #23]
 8006524:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800652e:	2b00      	cmp	r3, #0
 8006530:	d029      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006536:	2b00      	cmp	r3, #0
 8006538:	d003      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800653a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800653e:	d007      	beq.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8006540:	e00f      	b.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006542:	4b34      	ldr	r3, [pc, #208]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006546:	4a33      	ldr	r2, [pc, #204]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800654c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800654e:	e00b      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	3304      	adds	r3, #4
 8006554:	2102      	movs	r1, #2
 8006556:	4618      	mov	r0, r3
 8006558:	f000 fb8a 	bl	8006c70 <RCCEx_PLL2_Config>
 800655c:	4603      	mov	r3, r0
 800655e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006560:	e002      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	75fb      	strb	r3, [r7, #23]
      break;
 8006566:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006568:	7dfb      	ldrb	r3, [r7, #23]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d109      	bne.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800656e:	4b29      	ldr	r3, [pc, #164]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006572:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800657a:	4926      	ldr	r1, [pc, #152]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800657c:	4313      	orrs	r3, r2
 800657e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006580:	e001      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006582:	7dfb      	ldrb	r3, [r7, #23]
 8006584:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00a      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	3324      	adds	r3, #36	; 0x24
 8006596:	2102      	movs	r1, #2
 8006598:	4618      	mov	r0, r3
 800659a:	f000 fc1b 	bl	8006dd4 <RCCEx_PLL3_Config>
 800659e:	4603      	mov	r3, r0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d001      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d033      	beq.n	800661c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065bc:	d017      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80065be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065c2:	d811      	bhi.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80065c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065c8:	d013      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80065ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065ce:	d80b      	bhi.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d010      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80065d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065d8:	d106      	bne.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065da:	4b0e      	ldr	r3, [pc, #56]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80065dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065de:	4a0d      	ldr	r2, [pc, #52]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80065e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80065e6:	e007      	b.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	75fb      	strb	r3, [r7, #23]
      break;
 80065ec:	e004      	b.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80065ee:	bf00      	nop
 80065f0:	e002      	b.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80065f2:	bf00      	nop
 80065f4:	e000      	b.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80065f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065f8:	7dfb      	ldrb	r3, [r7, #23]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d10c      	bne.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80065fe:	4b05      	ldr	r3, [pc, #20]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006602:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800660a:	4902      	ldr	r1, [pc, #8]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800660c:	4313      	orrs	r3, r2
 800660e:	654b      	str	r3, [r1, #84]	; 0x54
 8006610:	e004      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8006612:	bf00      	nop
 8006614:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006618:	7dfb      	ldrb	r3, [r7, #23]
 800661a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006624:	2b00      	cmp	r3, #0
 8006626:	d008      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006628:	4b31      	ldr	r3, [pc, #196]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800662a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800662c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006634:	492e      	ldr	r1, [pc, #184]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006636:	4313      	orrs	r3, r2
 8006638:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d009      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006646:	4b2a      	ldr	r3, [pc, #168]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006654:	4926      	ldr	r1, [pc, #152]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006656:	4313      	orrs	r3, r2
 8006658:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006662:	2b00      	cmp	r3, #0
 8006664:	d008      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006666:	4b22      	ldr	r3, [pc, #136]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800666a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006672:	491f      	ldr	r1, [pc, #124]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006674:	4313      	orrs	r3, r2
 8006676:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00d      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006684:	4b1a      	ldr	r3, [pc, #104]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	4a19      	ldr	r2, [pc, #100]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800668a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800668e:	6113      	str	r3, [r2, #16]
 8006690:	4b17      	ldr	r3, [pc, #92]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006692:	691a      	ldr	r2, [r3, #16]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800669a:	4915      	ldr	r1, [pc, #84]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800669c:	4313      	orrs	r3, r2
 800669e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	da08      	bge.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80066a8:	4b11      	ldr	r3, [pc, #68]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80066aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ac:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066b4:	490e      	ldr	r1, [pc, #56]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80066b6:	4313      	orrs	r3, r2
 80066b8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d009      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80066c6:	4b0a      	ldr	r3, [pc, #40]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80066c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066d4:	4906      	ldr	r1, [pc, #24]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80066d6:	4313      	orrs	r3, r2
 80066d8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80066da:	7dbb      	ldrb	r3, [r7, #22]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d101      	bne.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80066e0:	2300      	movs	r3, #0
 80066e2:	e000      	b.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3718      	adds	r7, #24
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	58024400 	.word	0x58024400

080066f4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80066f8:	f7ff f85a 	bl	80057b0 <HAL_RCC_GetHCLKFreq>
 80066fc:	4602      	mov	r2, r0
 80066fe:	4b06      	ldr	r3, [pc, #24]	; (8006718 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006700:	6a1b      	ldr	r3, [r3, #32]
 8006702:	091b      	lsrs	r3, r3, #4
 8006704:	f003 0307 	and.w	r3, r3, #7
 8006708:	4904      	ldr	r1, [pc, #16]	; (800671c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800670a:	5ccb      	ldrb	r3, [r1, r3]
 800670c:	f003 031f 	and.w	r3, r3, #31
 8006710:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006714:	4618      	mov	r0, r3
 8006716:	bd80      	pop	{r7, pc}
 8006718:	58024400 	.word	0x58024400
 800671c:	08009c08 	.word	0x08009c08

08006720 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006720:	b480      	push	{r7}
 8006722:	b089      	sub	sp, #36	; 0x24
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006728:	4ba1      	ldr	r3, [pc, #644]	; (80069b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800672a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800672c:	f003 0303 	and.w	r3, r3, #3
 8006730:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006732:	4b9f      	ldr	r3, [pc, #636]	; (80069b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006736:	0b1b      	lsrs	r3, r3, #12
 8006738:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800673c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800673e:	4b9c      	ldr	r3, [pc, #624]	; (80069b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006742:	091b      	lsrs	r3, r3, #4
 8006744:	f003 0301 	and.w	r3, r3, #1
 8006748:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800674a:	4b99      	ldr	r3, [pc, #612]	; (80069b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800674c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800674e:	08db      	lsrs	r3, r3, #3
 8006750:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006754:	693a      	ldr	r2, [r7, #16]
 8006756:	fb02 f303 	mul.w	r3, r2, r3
 800675a:	ee07 3a90 	vmov	s15, r3
 800675e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006762:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	2b00      	cmp	r3, #0
 800676a:	f000 8111 	beq.w	8006990 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	2b02      	cmp	r3, #2
 8006772:	f000 8083 	beq.w	800687c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	2b02      	cmp	r3, #2
 800677a:	f200 80a1 	bhi.w	80068c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d003      	beq.n	800678c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	2b01      	cmp	r3, #1
 8006788:	d056      	beq.n	8006838 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800678a:	e099      	b.n	80068c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800678c:	4b88      	ldr	r3, [pc, #544]	; (80069b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 0320 	and.w	r3, r3, #32
 8006794:	2b00      	cmp	r3, #0
 8006796:	d02d      	beq.n	80067f4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006798:	4b85      	ldr	r3, [pc, #532]	; (80069b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	08db      	lsrs	r3, r3, #3
 800679e:	f003 0303 	and.w	r3, r3, #3
 80067a2:	4a84      	ldr	r2, [pc, #528]	; (80069b4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80067a4:	fa22 f303 	lsr.w	r3, r2, r3
 80067a8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	ee07 3a90 	vmov	s15, r3
 80067b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	ee07 3a90 	vmov	s15, r3
 80067ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067c2:	4b7b      	ldr	r3, [pc, #492]	; (80069b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067ca:	ee07 3a90 	vmov	s15, r3
 80067ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80067d6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80069b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80067da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067ee:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80067f2:	e087      	b.n	8006904 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	ee07 3a90 	vmov	s15, r3
 80067fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067fe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80069bc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006802:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006806:	4b6a      	ldr	r3, [pc, #424]	; (80069b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800680a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800680e:	ee07 3a90 	vmov	s15, r3
 8006812:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006816:	ed97 6a03 	vldr	s12, [r7, #12]
 800681a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80069b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800681e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006822:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006826:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800682a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800682e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006832:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006836:	e065      	b.n	8006904 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	ee07 3a90 	vmov	s15, r3
 800683e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006842:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80069c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800684a:	4b59      	ldr	r3, [pc, #356]	; (80069b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800684c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006852:	ee07 3a90 	vmov	s15, r3
 8006856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800685a:	ed97 6a03 	vldr	s12, [r7, #12]
 800685e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80069b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800686a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800686e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006876:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800687a:	e043      	b.n	8006904 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	ee07 3a90 	vmov	s15, r3
 8006882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006886:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80069c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800688a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800688e:	4b48      	ldr	r3, [pc, #288]	; (80069b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006896:	ee07 3a90 	vmov	s15, r3
 800689a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800689e:	ed97 6a03 	vldr	s12, [r7, #12]
 80068a2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80069b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80068be:	e021      	b.n	8006904 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	ee07 3a90 	vmov	s15, r3
 80068c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80069c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80068ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068d2:	4b37      	ldr	r3, [pc, #220]	; (80069b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068da:	ee07 3a90 	vmov	s15, r3
 80068de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80068e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80069b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006902:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006904:	4b2a      	ldr	r3, [pc, #168]	; (80069b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006908:	0a5b      	lsrs	r3, r3, #9
 800690a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800690e:	ee07 3a90 	vmov	s15, r3
 8006912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006916:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800691a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800691e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006922:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006926:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800692a:	ee17 2a90 	vmov	r2, s15
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006932:	4b1f      	ldr	r3, [pc, #124]	; (80069b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006936:	0c1b      	lsrs	r3, r3, #16
 8006938:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800693c:	ee07 3a90 	vmov	s15, r3
 8006940:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006944:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006948:	ee37 7a87 	vadd.f32	s14, s15, s14
 800694c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006950:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006954:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006958:	ee17 2a90 	vmov	r2, s15
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006960:	4b13      	ldr	r3, [pc, #76]	; (80069b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006964:	0e1b      	lsrs	r3, r3, #24
 8006966:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800696a:	ee07 3a90 	vmov	s15, r3
 800696e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006972:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006976:	ee37 7a87 	vadd.f32	s14, s15, s14
 800697a:	edd7 6a07 	vldr	s13, [r7, #28]
 800697e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006982:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006986:	ee17 2a90 	vmov	r2, s15
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800698e:	e008      	b.n	80069a2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	609a      	str	r2, [r3, #8]
}
 80069a2:	bf00      	nop
 80069a4:	3724      	adds	r7, #36	; 0x24
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	58024400 	.word	0x58024400
 80069b4:	03d09000 	.word	0x03d09000
 80069b8:	46000000 	.word	0x46000000
 80069bc:	4c742400 	.word	0x4c742400
 80069c0:	4a742400 	.word	0x4a742400
 80069c4:	4af42400 	.word	0x4af42400

080069c8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b089      	sub	sp, #36	; 0x24
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80069d0:	4ba1      	ldr	r3, [pc, #644]	; (8006c58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d4:	f003 0303 	and.w	r3, r3, #3
 80069d8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80069da:	4b9f      	ldr	r3, [pc, #636]	; (8006c58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069de:	0d1b      	lsrs	r3, r3, #20
 80069e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069e4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80069e6:	4b9c      	ldr	r3, [pc, #624]	; (8006c58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ea:	0a1b      	lsrs	r3, r3, #8
 80069ec:	f003 0301 	and.w	r3, r3, #1
 80069f0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80069f2:	4b99      	ldr	r3, [pc, #612]	; (8006c58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069f6:	08db      	lsrs	r3, r3, #3
 80069f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80069fc:	693a      	ldr	r2, [r7, #16]
 80069fe:	fb02 f303 	mul.w	r3, r2, r3
 8006a02:	ee07 3a90 	vmov	s15, r3
 8006a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a0a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	f000 8111 	beq.w	8006c38 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	f000 8083 	beq.w	8006b24 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	f200 80a1 	bhi.w	8006b68 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d003      	beq.n	8006a34 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d056      	beq.n	8006ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006a32:	e099      	b.n	8006b68 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a34:	4b88      	ldr	r3, [pc, #544]	; (8006c58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 0320 	and.w	r3, r3, #32
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d02d      	beq.n	8006a9c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a40:	4b85      	ldr	r3, [pc, #532]	; (8006c58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	08db      	lsrs	r3, r3, #3
 8006a46:	f003 0303 	and.w	r3, r3, #3
 8006a4a:	4a84      	ldr	r2, [pc, #528]	; (8006c5c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a50:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	ee07 3a90 	vmov	s15, r3
 8006a58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	ee07 3a90 	vmov	s15, r3
 8006a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a6a:	4b7b      	ldr	r3, [pc, #492]	; (8006c58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a72:	ee07 3a90 	vmov	s15, r3
 8006a76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a7e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006c60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a96:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006a9a:	e087      	b.n	8006bac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	ee07 3a90 	vmov	s15, r3
 8006aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aa6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006c64 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006aaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aae:	4b6a      	ldr	r3, [pc, #424]	; (8006c58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ab6:	ee07 3a90 	vmov	s15, r3
 8006aba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006abe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ac2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006c60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ace:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ada:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ade:	e065      	b.n	8006bac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	ee07 3a90 	vmov	s15, r3
 8006ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006c68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006af2:	4b59      	ldr	r3, [pc, #356]	; (8006c58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006afa:	ee07 3a90 	vmov	s15, r3
 8006afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b02:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b06:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006c60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b22:	e043      	b.n	8006bac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	ee07 3a90 	vmov	s15, r3
 8006b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b2e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006c6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b36:	4b48      	ldr	r3, [pc, #288]	; (8006c58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b3e:	ee07 3a90 	vmov	s15, r3
 8006b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b46:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b4a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006c60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b66:	e021      	b.n	8006bac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	ee07 3a90 	vmov	s15, r3
 8006b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b72:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006c68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b7a:	4b37      	ldr	r3, [pc, #220]	; (8006c58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b82:	ee07 3a90 	vmov	s15, r3
 8006b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b8e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006c60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ba6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006baa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006bac:	4b2a      	ldr	r3, [pc, #168]	; (8006c58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb0:	0a5b      	lsrs	r3, r3, #9
 8006bb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bb6:	ee07 3a90 	vmov	s15, r3
 8006bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006bc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006bc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bd2:	ee17 2a90 	vmov	r2, s15
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006bda:	4b1f      	ldr	r3, [pc, #124]	; (8006c58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bde:	0c1b      	lsrs	r3, r3, #16
 8006be0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006be4:	ee07 3a90 	vmov	s15, r3
 8006be8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006bf0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006bf4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c00:	ee17 2a90 	vmov	r2, s15
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006c08:	4b13      	ldr	r3, [pc, #76]	; (8006c58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0c:	0e1b      	lsrs	r3, r3, #24
 8006c0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c12:	ee07 3a90 	vmov	s15, r3
 8006c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c22:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c2e:	ee17 2a90 	vmov	r2, s15
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006c36:	e008      	b.n	8006c4a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	609a      	str	r2, [r3, #8]
}
 8006c4a:	bf00      	nop
 8006c4c:	3724      	adds	r7, #36	; 0x24
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr
 8006c56:	bf00      	nop
 8006c58:	58024400 	.word	0x58024400
 8006c5c:	03d09000 	.word	0x03d09000
 8006c60:	46000000 	.word	0x46000000
 8006c64:	4c742400 	.word	0x4c742400
 8006c68:	4a742400 	.word	0x4a742400
 8006c6c:	4af42400 	.word	0x4af42400

08006c70 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006c7e:	4b53      	ldr	r3, [pc, #332]	; (8006dcc <RCCEx_PLL2_Config+0x15c>)
 8006c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c82:	f003 0303 	and.w	r3, r3, #3
 8006c86:	2b03      	cmp	r3, #3
 8006c88:	d101      	bne.n	8006c8e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e099      	b.n	8006dc2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006c8e:	4b4f      	ldr	r3, [pc, #316]	; (8006dcc <RCCEx_PLL2_Config+0x15c>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a4e      	ldr	r2, [pc, #312]	; (8006dcc <RCCEx_PLL2_Config+0x15c>)
 8006c94:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006c98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c9a:	f7fa fd89 	bl	80017b0 <HAL_GetTick>
 8006c9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006ca0:	e008      	b.n	8006cb4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006ca2:	f7fa fd85 	bl	80017b0 <HAL_GetTick>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	1ad3      	subs	r3, r2, r3
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	d901      	bls.n	8006cb4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	e086      	b.n	8006dc2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006cb4:	4b45      	ldr	r3, [pc, #276]	; (8006dcc <RCCEx_PLL2_Config+0x15c>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d1f0      	bne.n	8006ca2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006cc0:	4b42      	ldr	r3, [pc, #264]	; (8006dcc <RCCEx_PLL2_Config+0x15c>)
 8006cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	031b      	lsls	r3, r3, #12
 8006cce:	493f      	ldr	r1, [pc, #252]	; (8006dcc <RCCEx_PLL2_Config+0x15c>)
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	628b      	str	r3, [r1, #40]	; 0x28
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	3b01      	subs	r3, #1
 8006cda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	3b01      	subs	r3, #1
 8006ce4:	025b      	lsls	r3, r3, #9
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	431a      	orrs	r2, r3
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	041b      	lsls	r3, r3, #16
 8006cf2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006cf6:	431a      	orrs	r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	061b      	lsls	r3, r3, #24
 8006d00:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006d04:	4931      	ldr	r1, [pc, #196]	; (8006dcc <RCCEx_PLL2_Config+0x15c>)
 8006d06:	4313      	orrs	r3, r2
 8006d08:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006d0a:	4b30      	ldr	r3, [pc, #192]	; (8006dcc <RCCEx_PLL2_Config+0x15c>)
 8006d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d0e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	695b      	ldr	r3, [r3, #20]
 8006d16:	492d      	ldr	r1, [pc, #180]	; (8006dcc <RCCEx_PLL2_Config+0x15c>)
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006d1c:	4b2b      	ldr	r3, [pc, #172]	; (8006dcc <RCCEx_PLL2_Config+0x15c>)
 8006d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d20:	f023 0220 	bic.w	r2, r3, #32
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	699b      	ldr	r3, [r3, #24]
 8006d28:	4928      	ldr	r1, [pc, #160]	; (8006dcc <RCCEx_PLL2_Config+0x15c>)
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006d2e:	4b27      	ldr	r3, [pc, #156]	; (8006dcc <RCCEx_PLL2_Config+0x15c>)
 8006d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d32:	4a26      	ldr	r2, [pc, #152]	; (8006dcc <RCCEx_PLL2_Config+0x15c>)
 8006d34:	f023 0310 	bic.w	r3, r3, #16
 8006d38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006d3a:	4b24      	ldr	r3, [pc, #144]	; (8006dcc <RCCEx_PLL2_Config+0x15c>)
 8006d3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d3e:	4b24      	ldr	r3, [pc, #144]	; (8006dd0 <RCCEx_PLL2_Config+0x160>)
 8006d40:	4013      	ands	r3, r2
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	69d2      	ldr	r2, [r2, #28]
 8006d46:	00d2      	lsls	r2, r2, #3
 8006d48:	4920      	ldr	r1, [pc, #128]	; (8006dcc <RCCEx_PLL2_Config+0x15c>)
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006d4e:	4b1f      	ldr	r3, [pc, #124]	; (8006dcc <RCCEx_PLL2_Config+0x15c>)
 8006d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d52:	4a1e      	ldr	r2, [pc, #120]	; (8006dcc <RCCEx_PLL2_Config+0x15c>)
 8006d54:	f043 0310 	orr.w	r3, r3, #16
 8006d58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d106      	bne.n	8006d6e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006d60:	4b1a      	ldr	r3, [pc, #104]	; (8006dcc <RCCEx_PLL2_Config+0x15c>)
 8006d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d64:	4a19      	ldr	r2, [pc, #100]	; (8006dcc <RCCEx_PLL2_Config+0x15c>)
 8006d66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006d6c:	e00f      	b.n	8006d8e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d106      	bne.n	8006d82 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006d74:	4b15      	ldr	r3, [pc, #84]	; (8006dcc <RCCEx_PLL2_Config+0x15c>)
 8006d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d78:	4a14      	ldr	r2, [pc, #80]	; (8006dcc <RCCEx_PLL2_Config+0x15c>)
 8006d7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006d80:	e005      	b.n	8006d8e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006d82:	4b12      	ldr	r3, [pc, #72]	; (8006dcc <RCCEx_PLL2_Config+0x15c>)
 8006d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d86:	4a11      	ldr	r2, [pc, #68]	; (8006dcc <RCCEx_PLL2_Config+0x15c>)
 8006d88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006d8c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006d8e:	4b0f      	ldr	r3, [pc, #60]	; (8006dcc <RCCEx_PLL2_Config+0x15c>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a0e      	ldr	r2, [pc, #56]	; (8006dcc <RCCEx_PLL2_Config+0x15c>)
 8006d94:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006d98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d9a:	f7fa fd09 	bl	80017b0 <HAL_GetTick>
 8006d9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006da0:	e008      	b.n	8006db4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006da2:	f7fa fd05 	bl	80017b0 <HAL_GetTick>
 8006da6:	4602      	mov	r2, r0
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	1ad3      	subs	r3, r2, r3
 8006dac:	2b02      	cmp	r3, #2
 8006dae:	d901      	bls.n	8006db4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006db0:	2303      	movs	r3, #3
 8006db2:	e006      	b.n	8006dc2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006db4:	4b05      	ldr	r3, [pc, #20]	; (8006dcc <RCCEx_PLL2_Config+0x15c>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d0f0      	beq.n	8006da2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3710      	adds	r7, #16
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	58024400 	.word	0x58024400
 8006dd0:	ffff0007 	.word	0xffff0007

08006dd4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006dde:	2300      	movs	r3, #0
 8006de0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006de2:	4b53      	ldr	r3, [pc, #332]	; (8006f30 <RCCEx_PLL3_Config+0x15c>)
 8006de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de6:	f003 0303 	and.w	r3, r3, #3
 8006dea:	2b03      	cmp	r3, #3
 8006dec:	d101      	bne.n	8006df2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e099      	b.n	8006f26 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006df2:	4b4f      	ldr	r3, [pc, #316]	; (8006f30 <RCCEx_PLL3_Config+0x15c>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a4e      	ldr	r2, [pc, #312]	; (8006f30 <RCCEx_PLL3_Config+0x15c>)
 8006df8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006dfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dfe:	f7fa fcd7 	bl	80017b0 <HAL_GetTick>
 8006e02:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e04:	e008      	b.n	8006e18 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006e06:	f7fa fcd3 	bl	80017b0 <HAL_GetTick>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	d901      	bls.n	8006e18 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006e14:	2303      	movs	r3, #3
 8006e16:	e086      	b.n	8006f26 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e18:	4b45      	ldr	r3, [pc, #276]	; (8006f30 <RCCEx_PLL3_Config+0x15c>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d1f0      	bne.n	8006e06 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006e24:	4b42      	ldr	r3, [pc, #264]	; (8006f30 <RCCEx_PLL3_Config+0x15c>)
 8006e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e28:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	051b      	lsls	r3, r3, #20
 8006e32:	493f      	ldr	r1, [pc, #252]	; (8006f30 <RCCEx_PLL3_Config+0x15c>)
 8006e34:	4313      	orrs	r3, r2
 8006e36:	628b      	str	r3, [r1, #40]	; 0x28
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	3b01      	subs	r3, #1
 8006e48:	025b      	lsls	r3, r3, #9
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	431a      	orrs	r2, r3
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	3b01      	subs	r3, #1
 8006e54:	041b      	lsls	r3, r3, #16
 8006e56:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006e5a:	431a      	orrs	r2, r3
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	3b01      	subs	r3, #1
 8006e62:	061b      	lsls	r3, r3, #24
 8006e64:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006e68:	4931      	ldr	r1, [pc, #196]	; (8006f30 <RCCEx_PLL3_Config+0x15c>)
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006e6e:	4b30      	ldr	r3, [pc, #192]	; (8006f30 <RCCEx_PLL3_Config+0x15c>)
 8006e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	695b      	ldr	r3, [r3, #20]
 8006e7a:	492d      	ldr	r1, [pc, #180]	; (8006f30 <RCCEx_PLL3_Config+0x15c>)
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006e80:	4b2b      	ldr	r3, [pc, #172]	; (8006f30 <RCCEx_PLL3_Config+0x15c>)
 8006e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e84:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	699b      	ldr	r3, [r3, #24]
 8006e8c:	4928      	ldr	r1, [pc, #160]	; (8006f30 <RCCEx_PLL3_Config+0x15c>)
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006e92:	4b27      	ldr	r3, [pc, #156]	; (8006f30 <RCCEx_PLL3_Config+0x15c>)
 8006e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e96:	4a26      	ldr	r2, [pc, #152]	; (8006f30 <RCCEx_PLL3_Config+0x15c>)
 8006e98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e9c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006e9e:	4b24      	ldr	r3, [pc, #144]	; (8006f30 <RCCEx_PLL3_Config+0x15c>)
 8006ea0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ea2:	4b24      	ldr	r3, [pc, #144]	; (8006f34 <RCCEx_PLL3_Config+0x160>)
 8006ea4:	4013      	ands	r3, r2
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	69d2      	ldr	r2, [r2, #28]
 8006eaa:	00d2      	lsls	r2, r2, #3
 8006eac:	4920      	ldr	r1, [pc, #128]	; (8006f30 <RCCEx_PLL3_Config+0x15c>)
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006eb2:	4b1f      	ldr	r3, [pc, #124]	; (8006f30 <RCCEx_PLL3_Config+0x15c>)
 8006eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb6:	4a1e      	ldr	r2, [pc, #120]	; (8006f30 <RCCEx_PLL3_Config+0x15c>)
 8006eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ebc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d106      	bne.n	8006ed2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006ec4:	4b1a      	ldr	r3, [pc, #104]	; (8006f30 <RCCEx_PLL3_Config+0x15c>)
 8006ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec8:	4a19      	ldr	r2, [pc, #100]	; (8006f30 <RCCEx_PLL3_Config+0x15c>)
 8006eca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006ece:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006ed0:	e00f      	b.n	8006ef2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d106      	bne.n	8006ee6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006ed8:	4b15      	ldr	r3, [pc, #84]	; (8006f30 <RCCEx_PLL3_Config+0x15c>)
 8006eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006edc:	4a14      	ldr	r2, [pc, #80]	; (8006f30 <RCCEx_PLL3_Config+0x15c>)
 8006ede:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006ee2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006ee4:	e005      	b.n	8006ef2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006ee6:	4b12      	ldr	r3, [pc, #72]	; (8006f30 <RCCEx_PLL3_Config+0x15c>)
 8006ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eea:	4a11      	ldr	r2, [pc, #68]	; (8006f30 <RCCEx_PLL3_Config+0x15c>)
 8006eec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ef0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006ef2:	4b0f      	ldr	r3, [pc, #60]	; (8006f30 <RCCEx_PLL3_Config+0x15c>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a0e      	ldr	r2, [pc, #56]	; (8006f30 <RCCEx_PLL3_Config+0x15c>)
 8006ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006efc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006efe:	f7fa fc57 	bl	80017b0 <HAL_GetTick>
 8006f02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f04:	e008      	b.n	8006f18 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006f06:	f7fa fc53 	bl	80017b0 <HAL_GetTick>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	1ad3      	subs	r3, r2, r3
 8006f10:	2b02      	cmp	r3, #2
 8006f12:	d901      	bls.n	8006f18 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006f14:	2303      	movs	r3, #3
 8006f16:	e006      	b.n	8006f26 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f18:	4b05      	ldr	r3, [pc, #20]	; (8006f30 <RCCEx_PLL3_Config+0x15c>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d0f0      	beq.n	8006f06 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	58024400 	.word	0x58024400
 8006f34:	ffff0007 	.word	0xffff0007

08006f38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b082      	sub	sp, #8
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d101      	bne.n	8006f4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e049      	b.n	8006fde <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d106      	bne.n	8006f64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f7fa f94c 	bl	80011fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2202      	movs	r2, #2
 8006f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	3304      	adds	r3, #4
 8006f74:	4619      	mov	r1, r3
 8006f76:	4610      	mov	r0, r2
 8006f78:	f000 fc92 	bl	80078a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3708      	adds	r7, #8
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b082      	sub	sp, #8
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d101      	bne.n	8006ff8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e049      	b.n	800708c <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	2b00      	cmp	r3, #0
 8007002:	d106      	bne.n	8007012 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f7fa f875 	bl	80010fc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2202      	movs	r2, #2
 8007016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	3304      	adds	r3, #4
 8007022:	4619      	mov	r1, r3
 8007024:	4610      	mov	r0, r2
 8007026:	f000 fc3b 	bl	80078a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2201      	movs	r2, #1
 800702e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2201      	movs	r2, #1
 8007036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2201      	movs	r2, #1
 800703e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2201      	movs	r2, #1
 8007046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2201      	movs	r2, #1
 800704e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2201      	movs	r2, #1
 8007056:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2201      	movs	r2, #1
 800705e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2201      	movs	r2, #1
 8007066:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2201      	movs	r2, #1
 800706e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2201      	movs	r2, #1
 8007076:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2201      	movs	r2, #1
 800707e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2201      	movs	r2, #1
 8007086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	3708      	adds	r7, #8
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d104      	bne.n	80070ae <HAL_TIM_IC_Start+0x1a>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	e023      	b.n	80070f6 <HAL_TIM_IC_Start+0x62>
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	2b04      	cmp	r3, #4
 80070b2:	d104      	bne.n	80070be <HAL_TIM_IC_Start+0x2a>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	e01b      	b.n	80070f6 <HAL_TIM_IC_Start+0x62>
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	2b08      	cmp	r3, #8
 80070c2:	d104      	bne.n	80070ce <HAL_TIM_IC_Start+0x3a>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	e013      	b.n	80070f6 <HAL_TIM_IC_Start+0x62>
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	2b0c      	cmp	r3, #12
 80070d2:	d104      	bne.n	80070de <HAL_TIM_IC_Start+0x4a>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	e00b      	b.n	80070f6 <HAL_TIM_IC_Start+0x62>
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	2b10      	cmp	r3, #16
 80070e2:	d104      	bne.n	80070ee <HAL_TIM_IC_Start+0x5a>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	e003      	b.n	80070f6 <HAL_TIM_IC_Start+0x62>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d104      	bne.n	8007108 <HAL_TIM_IC_Start+0x74>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007104:	b2db      	uxtb	r3, r3
 8007106:	e013      	b.n	8007130 <HAL_TIM_IC_Start+0x9c>
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	2b04      	cmp	r3, #4
 800710c:	d104      	bne.n	8007118 <HAL_TIM_IC_Start+0x84>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007114:	b2db      	uxtb	r3, r3
 8007116:	e00b      	b.n	8007130 <HAL_TIM_IC_Start+0x9c>
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	2b08      	cmp	r3, #8
 800711c:	d104      	bne.n	8007128 <HAL_TIM_IC_Start+0x94>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007124:	b2db      	uxtb	r3, r3
 8007126:	e003      	b.n	8007130 <HAL_TIM_IC_Start+0x9c>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800712e:	b2db      	uxtb	r3, r3
 8007130:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007132:	7bfb      	ldrb	r3, [r7, #15]
 8007134:	2b01      	cmp	r3, #1
 8007136:	d102      	bne.n	800713e <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007138:	7bbb      	ldrb	r3, [r7, #14]
 800713a:	2b01      	cmp	r3, #1
 800713c:	d001      	beq.n	8007142 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e097      	b.n	8007272 <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d104      	bne.n	8007152 <HAL_TIM_IC_Start+0xbe>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2202      	movs	r2, #2
 800714c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007150:	e023      	b.n	800719a <HAL_TIM_IC_Start+0x106>
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	2b04      	cmp	r3, #4
 8007156:	d104      	bne.n	8007162 <HAL_TIM_IC_Start+0xce>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2202      	movs	r2, #2
 800715c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007160:	e01b      	b.n	800719a <HAL_TIM_IC_Start+0x106>
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	2b08      	cmp	r3, #8
 8007166:	d104      	bne.n	8007172 <HAL_TIM_IC_Start+0xde>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2202      	movs	r2, #2
 800716c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007170:	e013      	b.n	800719a <HAL_TIM_IC_Start+0x106>
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	2b0c      	cmp	r3, #12
 8007176:	d104      	bne.n	8007182 <HAL_TIM_IC_Start+0xee>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2202      	movs	r2, #2
 800717c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007180:	e00b      	b.n	800719a <HAL_TIM_IC_Start+0x106>
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	2b10      	cmp	r3, #16
 8007186:	d104      	bne.n	8007192 <HAL_TIM_IC_Start+0xfe>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2202      	movs	r2, #2
 800718c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007190:	e003      	b.n	800719a <HAL_TIM_IC_Start+0x106>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2202      	movs	r2, #2
 8007196:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d104      	bne.n	80071aa <HAL_TIM_IC_Start+0x116>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2202      	movs	r2, #2
 80071a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071a8:	e013      	b.n	80071d2 <HAL_TIM_IC_Start+0x13e>
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	2b04      	cmp	r3, #4
 80071ae:	d104      	bne.n	80071ba <HAL_TIM_IC_Start+0x126>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2202      	movs	r2, #2
 80071b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071b8:	e00b      	b.n	80071d2 <HAL_TIM_IC_Start+0x13e>
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	2b08      	cmp	r3, #8
 80071be:	d104      	bne.n	80071ca <HAL_TIM_IC_Start+0x136>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2202      	movs	r2, #2
 80071c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80071c8:	e003      	b.n	80071d2 <HAL_TIM_IC_Start+0x13e>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2202      	movs	r2, #2
 80071ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	2201      	movs	r2, #1
 80071d8:	6839      	ldr	r1, [r7, #0]
 80071da:	4618      	mov	r0, r3
 80071dc:	f000 fffa 	bl	80081d4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a25      	ldr	r2, [pc, #148]	; (800727c <HAL_TIM_IC_Start+0x1e8>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d022      	beq.n	8007230 <HAL_TIM_IC_Start+0x19c>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071f2:	d01d      	beq.n	8007230 <HAL_TIM_IC_Start+0x19c>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a21      	ldr	r2, [pc, #132]	; (8007280 <HAL_TIM_IC_Start+0x1ec>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d018      	beq.n	8007230 <HAL_TIM_IC_Start+0x19c>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a20      	ldr	r2, [pc, #128]	; (8007284 <HAL_TIM_IC_Start+0x1f0>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d013      	beq.n	8007230 <HAL_TIM_IC_Start+0x19c>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a1e      	ldr	r2, [pc, #120]	; (8007288 <HAL_TIM_IC_Start+0x1f4>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d00e      	beq.n	8007230 <HAL_TIM_IC_Start+0x19c>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a1d      	ldr	r2, [pc, #116]	; (800728c <HAL_TIM_IC_Start+0x1f8>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d009      	beq.n	8007230 <HAL_TIM_IC_Start+0x19c>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a1b      	ldr	r2, [pc, #108]	; (8007290 <HAL_TIM_IC_Start+0x1fc>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d004      	beq.n	8007230 <HAL_TIM_IC_Start+0x19c>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a1a      	ldr	r2, [pc, #104]	; (8007294 <HAL_TIM_IC_Start+0x200>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d115      	bne.n	800725c <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	689a      	ldr	r2, [r3, #8]
 8007236:	4b18      	ldr	r3, [pc, #96]	; (8007298 <HAL_TIM_IC_Start+0x204>)
 8007238:	4013      	ands	r3, r2
 800723a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	2b06      	cmp	r3, #6
 8007240:	d015      	beq.n	800726e <HAL_TIM_IC_Start+0x1da>
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007248:	d011      	beq.n	800726e <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f042 0201 	orr.w	r2, r2, #1
 8007258:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800725a:	e008      	b.n	800726e <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f042 0201 	orr.w	r2, r2, #1
 800726a:	601a      	str	r2, [r3, #0]
 800726c:	e000      	b.n	8007270 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800726e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	3710      	adds	r7, #16
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop
 800727c:	40010000 	.word	0x40010000
 8007280:	40000400 	.word	0x40000400
 8007284:	40000800 	.word	0x40000800
 8007288:	40000c00 	.word	0x40000c00
 800728c:	40010400 	.word	0x40010400
 8007290:	40001800 	.word	0x40001800
 8007294:	40014000 	.word	0x40014000
 8007298:	00010007 	.word	0x00010007

0800729c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	f003 0302 	and.w	r3, r3, #2
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	d122      	bne.n	80072f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	f003 0302 	and.w	r3, r3, #2
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d11b      	bne.n	80072f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f06f 0202 	mvn.w	r2, #2
 80072c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2201      	movs	r2, #1
 80072ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	f003 0303 	and.w	r3, r3, #3
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d003      	beq.n	80072e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 fac0 	bl	8007864 <HAL_TIM_IC_CaptureCallback>
 80072e4:	e005      	b.n	80072f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 fab2 	bl	8007850 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 fac3 	bl	8007878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	f003 0304 	and.w	r3, r3, #4
 8007302:	2b04      	cmp	r3, #4
 8007304:	d122      	bne.n	800734c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	f003 0304 	and.w	r3, r3, #4
 8007310:	2b04      	cmp	r3, #4
 8007312:	d11b      	bne.n	800734c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f06f 0204 	mvn.w	r2, #4
 800731c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2202      	movs	r2, #2
 8007322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	699b      	ldr	r3, [r3, #24]
 800732a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800732e:	2b00      	cmp	r3, #0
 8007330:	d003      	beq.n	800733a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 fa96 	bl	8007864 <HAL_TIM_IC_CaptureCallback>
 8007338:	e005      	b.n	8007346 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 fa88 	bl	8007850 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 fa99 	bl	8007878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	f003 0308 	and.w	r3, r3, #8
 8007356:	2b08      	cmp	r3, #8
 8007358:	d122      	bne.n	80073a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	f003 0308 	and.w	r3, r3, #8
 8007364:	2b08      	cmp	r3, #8
 8007366:	d11b      	bne.n	80073a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f06f 0208 	mvn.w	r2, #8
 8007370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2204      	movs	r2, #4
 8007376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	69db      	ldr	r3, [r3, #28]
 800737e:	f003 0303 	and.w	r3, r3, #3
 8007382:	2b00      	cmp	r3, #0
 8007384:	d003      	beq.n	800738e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 fa6c 	bl	8007864 <HAL_TIM_IC_CaptureCallback>
 800738c:	e005      	b.n	800739a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 fa5e 	bl	8007850 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 fa6f 	bl	8007878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	f003 0310 	and.w	r3, r3, #16
 80073aa:	2b10      	cmp	r3, #16
 80073ac:	d122      	bne.n	80073f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	f003 0310 	and.w	r3, r3, #16
 80073b8:	2b10      	cmp	r3, #16
 80073ba:	d11b      	bne.n	80073f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f06f 0210 	mvn.w	r2, #16
 80073c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2208      	movs	r2, #8
 80073ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	69db      	ldr	r3, [r3, #28]
 80073d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d003      	beq.n	80073e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 fa42 	bl	8007864 <HAL_TIM_IC_CaptureCallback>
 80073e0:	e005      	b.n	80073ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 fa34 	bl	8007850 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 fa45 	bl	8007878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	691b      	ldr	r3, [r3, #16]
 80073fa:	f003 0301 	and.w	r3, r3, #1
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d10e      	bne.n	8007420 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	f003 0301 	and.w	r3, r3, #1
 800740c:	2b01      	cmp	r3, #1
 800740e:	d107      	bne.n	8007420 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f06f 0201 	mvn.w	r2, #1
 8007418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 fa0e 	bl	800783c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800742a:	2b80      	cmp	r3, #128	; 0x80
 800742c:	d10e      	bne.n	800744c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007438:	2b80      	cmp	r3, #128	; 0x80
 800743a:	d107      	bne.n	800744c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 ff82 	bl	8008350 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	691b      	ldr	r3, [r3, #16]
 8007452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800745a:	d10e      	bne.n	800747a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	68db      	ldr	r3, [r3, #12]
 8007462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007466:	2b80      	cmp	r3, #128	; 0x80
 8007468:	d107      	bne.n	800747a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 ff75 	bl	8008364 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	691b      	ldr	r3, [r3, #16]
 8007480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007484:	2b40      	cmp	r3, #64	; 0x40
 8007486:	d10e      	bne.n	80074a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	68db      	ldr	r3, [r3, #12]
 800748e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007492:	2b40      	cmp	r3, #64	; 0x40
 8007494:	d107      	bne.n	80074a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800749e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 f9f3 	bl	800788c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	691b      	ldr	r3, [r3, #16]
 80074ac:	f003 0320 	and.w	r3, r3, #32
 80074b0:	2b20      	cmp	r3, #32
 80074b2:	d10e      	bne.n	80074d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	f003 0320 	and.w	r3, r3, #32
 80074be:	2b20      	cmp	r3, #32
 80074c0:	d107      	bne.n	80074d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f06f 0220 	mvn.w	r2, #32
 80074ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 ff35 	bl	800833c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074d2:	bf00      	nop
 80074d4:	3708      	adds	r7, #8
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80074da:	b580      	push	{r7, lr}
 80074dc:	b086      	sub	sp, #24
 80074de:	af00      	add	r7, sp, #0
 80074e0:	60f8      	str	r0, [r7, #12]
 80074e2:	60b9      	str	r1, [r7, #8]
 80074e4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074e6:	2300      	movs	r3, #0
 80074e8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d101      	bne.n	80074f8 <HAL_TIM_IC_ConfigChannel+0x1e>
 80074f4:	2302      	movs	r3, #2
 80074f6:	e088      	b.n	800760a <HAL_TIM_IC_ConfigChannel+0x130>
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d11b      	bne.n	800753e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	6818      	ldr	r0, [r3, #0]
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	6819      	ldr	r1, [r3, #0]
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	685a      	ldr	r2, [r3, #4]
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	f000 fd33 	bl	8007f80 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	699a      	ldr	r2, [r3, #24]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f022 020c 	bic.w	r2, r2, #12
 8007528:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	6999      	ldr	r1, [r3, #24]
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	689a      	ldr	r2, [r3, #8]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	430a      	orrs	r2, r1
 800753a:	619a      	str	r2, [r3, #24]
 800753c:	e060      	b.n	8007600 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2b04      	cmp	r3, #4
 8007542:	d11c      	bne.n	800757e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6818      	ldr	r0, [r3, #0]
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	6819      	ldr	r1, [r3, #0]
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	685a      	ldr	r2, [r3, #4]
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	f000 fd88 	bl	8008068 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	699a      	ldr	r2, [r3, #24]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007566:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	6999      	ldr	r1, [r3, #24]
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	021a      	lsls	r2, r3, #8
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	430a      	orrs	r2, r1
 800757a:	619a      	str	r2, [r3, #24]
 800757c:	e040      	b.n	8007600 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2b08      	cmp	r3, #8
 8007582:	d11b      	bne.n	80075bc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	6818      	ldr	r0, [r3, #0]
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	6819      	ldr	r1, [r3, #0]
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	685a      	ldr	r2, [r3, #4]
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	f000 fda5 	bl	80080e2 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	69da      	ldr	r2, [r3, #28]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f022 020c 	bic.w	r2, r2, #12
 80075a6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	69d9      	ldr	r1, [r3, #28]
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	689a      	ldr	r2, [r3, #8]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	430a      	orrs	r2, r1
 80075b8:	61da      	str	r2, [r3, #28]
 80075ba:	e021      	b.n	8007600 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2b0c      	cmp	r3, #12
 80075c0:	d11c      	bne.n	80075fc <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6818      	ldr	r0, [r3, #0]
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	6819      	ldr	r1, [r3, #0]
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	685a      	ldr	r2, [r3, #4]
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	f000 fdc2 	bl	800815a <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	69da      	ldr	r2, [r3, #28]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80075e4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	69d9      	ldr	r1, [r3, #28]
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	021a      	lsls	r2, r3, #8
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	430a      	orrs	r2, r1
 80075f8:	61da      	str	r2, [r3, #28]
 80075fa:	e001      	b.n	8007600 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2200      	movs	r2, #0
 8007604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007608:	7dfb      	ldrb	r3, [r7, #23]
}
 800760a:	4618      	mov	r0, r3
 800760c:	3718      	adds	r7, #24
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
	...

08007614 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b086      	sub	sp, #24
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007620:	2300      	movs	r3, #0
 8007622:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800762a:	2b01      	cmp	r3, #1
 800762c:	d101      	bne.n	8007632 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800762e:	2302      	movs	r3, #2
 8007630:	e0ff      	b.n	8007832 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2201      	movs	r2, #1
 8007636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2b14      	cmp	r3, #20
 800763e:	f200 80f0 	bhi.w	8007822 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007642:	a201      	add	r2, pc, #4	; (adr r2, 8007648 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007648:	0800769d 	.word	0x0800769d
 800764c:	08007823 	.word	0x08007823
 8007650:	08007823 	.word	0x08007823
 8007654:	08007823 	.word	0x08007823
 8007658:	080076dd 	.word	0x080076dd
 800765c:	08007823 	.word	0x08007823
 8007660:	08007823 	.word	0x08007823
 8007664:	08007823 	.word	0x08007823
 8007668:	0800771f 	.word	0x0800771f
 800766c:	08007823 	.word	0x08007823
 8007670:	08007823 	.word	0x08007823
 8007674:	08007823 	.word	0x08007823
 8007678:	0800775f 	.word	0x0800775f
 800767c:	08007823 	.word	0x08007823
 8007680:	08007823 	.word	0x08007823
 8007684:	08007823 	.word	0x08007823
 8007688:	080077a1 	.word	0x080077a1
 800768c:	08007823 	.word	0x08007823
 8007690:	08007823 	.word	0x08007823
 8007694:	08007823 	.word	0x08007823
 8007698:	080077e1 	.word	0x080077e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	68b9      	ldr	r1, [r7, #8]
 80076a2:	4618      	mov	r0, r3
 80076a4:	f000 f996 	bl	80079d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	699a      	ldr	r2, [r3, #24]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f042 0208 	orr.w	r2, r2, #8
 80076b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	699a      	ldr	r2, [r3, #24]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f022 0204 	bic.w	r2, r2, #4
 80076c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	6999      	ldr	r1, [r3, #24]
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	691a      	ldr	r2, [r3, #16]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	430a      	orrs	r2, r1
 80076d8:	619a      	str	r2, [r3, #24]
      break;
 80076da:	e0a5      	b.n	8007828 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	68b9      	ldr	r1, [r7, #8]
 80076e2:	4618      	mov	r0, r3
 80076e4:	f000 fa06 	bl	8007af4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	699a      	ldr	r2, [r3, #24]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	699a      	ldr	r2, [r3, #24]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007706:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	6999      	ldr	r1, [r3, #24]
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	021a      	lsls	r2, r3, #8
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	430a      	orrs	r2, r1
 800771a:	619a      	str	r2, [r3, #24]
      break;
 800771c:	e084      	b.n	8007828 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	68b9      	ldr	r1, [r7, #8]
 8007724:	4618      	mov	r0, r3
 8007726:	f000 fa6f 	bl	8007c08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	69da      	ldr	r2, [r3, #28]
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f042 0208 	orr.w	r2, r2, #8
 8007738:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	69da      	ldr	r2, [r3, #28]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f022 0204 	bic.w	r2, r2, #4
 8007748:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	69d9      	ldr	r1, [r3, #28]
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	691a      	ldr	r2, [r3, #16]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	430a      	orrs	r2, r1
 800775a:	61da      	str	r2, [r3, #28]
      break;
 800775c:	e064      	b.n	8007828 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	68b9      	ldr	r1, [r7, #8]
 8007764:	4618      	mov	r0, r3
 8007766:	f000 fad7 	bl	8007d18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	69da      	ldr	r2, [r3, #28]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007778:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	69da      	ldr	r2, [r3, #28]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007788:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	69d9      	ldr	r1, [r3, #28]
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	691b      	ldr	r3, [r3, #16]
 8007794:	021a      	lsls	r2, r3, #8
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	430a      	orrs	r2, r1
 800779c:	61da      	str	r2, [r3, #28]
      break;
 800779e:	e043      	b.n	8007828 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	68b9      	ldr	r1, [r7, #8]
 80077a6:	4618      	mov	r0, r3
 80077a8:	f000 fb20 	bl	8007dec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f042 0208 	orr.w	r2, r2, #8
 80077ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f022 0204 	bic.w	r2, r2, #4
 80077ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	691a      	ldr	r2, [r3, #16]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	430a      	orrs	r2, r1
 80077dc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80077de:	e023      	b.n	8007828 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	68b9      	ldr	r1, [r7, #8]
 80077e6:	4618      	mov	r0, r3
 80077e8:	f000 fb64 	bl	8007eb4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800780a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	691b      	ldr	r3, [r3, #16]
 8007816:	021a      	lsls	r2, r3, #8
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	430a      	orrs	r2, r1
 800781e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007820:	e002      	b.n	8007828 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007822:	2301      	movs	r3, #1
 8007824:	75fb      	strb	r3, [r7, #23]
      break;
 8007826:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2200      	movs	r2, #0
 800782c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007830:	7dfb      	ldrb	r3, [r7, #23]
}
 8007832:	4618      	mov	r0, r3
 8007834:	3718      	adds	r7, #24
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop

0800783c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007844:	bf00      	nop
 8007846:	370c      	adds	r7, #12
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007850:	b480      	push	{r7}
 8007852:	b083      	sub	sp, #12
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007858:	bf00      	nop
 800785a:	370c      	adds	r7, #12
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800786c:	bf00      	nop
 800786e:	370c      	adds	r7, #12
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007880:	bf00      	nop
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007894:	bf00      	nop
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b085      	sub	sp, #20
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4a40      	ldr	r2, [pc, #256]	; (80079b4 <TIM_Base_SetConfig+0x114>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d013      	beq.n	80078e0 <TIM_Base_SetConfig+0x40>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078be:	d00f      	beq.n	80078e0 <TIM_Base_SetConfig+0x40>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	4a3d      	ldr	r2, [pc, #244]	; (80079b8 <TIM_Base_SetConfig+0x118>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d00b      	beq.n	80078e0 <TIM_Base_SetConfig+0x40>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4a3c      	ldr	r2, [pc, #240]	; (80079bc <TIM_Base_SetConfig+0x11c>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d007      	beq.n	80078e0 <TIM_Base_SetConfig+0x40>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	4a3b      	ldr	r2, [pc, #236]	; (80079c0 <TIM_Base_SetConfig+0x120>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d003      	beq.n	80078e0 <TIM_Base_SetConfig+0x40>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4a3a      	ldr	r2, [pc, #232]	; (80079c4 <TIM_Base_SetConfig+0x124>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d108      	bne.n	80078f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	68fa      	ldr	r2, [r7, #12]
 80078ee:	4313      	orrs	r3, r2
 80078f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a2f      	ldr	r2, [pc, #188]	; (80079b4 <TIM_Base_SetConfig+0x114>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d01f      	beq.n	800793a <TIM_Base_SetConfig+0x9a>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007900:	d01b      	beq.n	800793a <TIM_Base_SetConfig+0x9a>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4a2c      	ldr	r2, [pc, #176]	; (80079b8 <TIM_Base_SetConfig+0x118>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d017      	beq.n	800793a <TIM_Base_SetConfig+0x9a>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4a2b      	ldr	r2, [pc, #172]	; (80079bc <TIM_Base_SetConfig+0x11c>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d013      	beq.n	800793a <TIM_Base_SetConfig+0x9a>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4a2a      	ldr	r2, [pc, #168]	; (80079c0 <TIM_Base_SetConfig+0x120>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d00f      	beq.n	800793a <TIM_Base_SetConfig+0x9a>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4a29      	ldr	r2, [pc, #164]	; (80079c4 <TIM_Base_SetConfig+0x124>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d00b      	beq.n	800793a <TIM_Base_SetConfig+0x9a>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4a28      	ldr	r2, [pc, #160]	; (80079c8 <TIM_Base_SetConfig+0x128>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d007      	beq.n	800793a <TIM_Base_SetConfig+0x9a>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a27      	ldr	r2, [pc, #156]	; (80079cc <TIM_Base_SetConfig+0x12c>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d003      	beq.n	800793a <TIM_Base_SetConfig+0x9a>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4a26      	ldr	r2, [pc, #152]	; (80079d0 <TIM_Base_SetConfig+0x130>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d108      	bne.n	800794c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007940:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	68db      	ldr	r3, [r3, #12]
 8007946:	68fa      	ldr	r2, [r7, #12]
 8007948:	4313      	orrs	r3, r2
 800794a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	695b      	ldr	r3, [r3, #20]
 8007956:	4313      	orrs	r3, r2
 8007958:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	689a      	ldr	r2, [r3, #8]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	4a10      	ldr	r2, [pc, #64]	; (80079b4 <TIM_Base_SetConfig+0x114>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d00f      	beq.n	8007998 <TIM_Base_SetConfig+0xf8>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4a12      	ldr	r2, [pc, #72]	; (80079c4 <TIM_Base_SetConfig+0x124>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d00b      	beq.n	8007998 <TIM_Base_SetConfig+0xf8>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4a11      	ldr	r2, [pc, #68]	; (80079c8 <TIM_Base_SetConfig+0x128>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d007      	beq.n	8007998 <TIM_Base_SetConfig+0xf8>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	4a10      	ldr	r2, [pc, #64]	; (80079cc <TIM_Base_SetConfig+0x12c>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d003      	beq.n	8007998 <TIM_Base_SetConfig+0xf8>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4a0f      	ldr	r2, [pc, #60]	; (80079d0 <TIM_Base_SetConfig+0x130>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d103      	bne.n	80079a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	691a      	ldr	r2, [r3, #16]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	615a      	str	r2, [r3, #20]
}
 80079a6:	bf00      	nop
 80079a8:	3714      	adds	r7, #20
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr
 80079b2:	bf00      	nop
 80079b4:	40010000 	.word	0x40010000
 80079b8:	40000400 	.word	0x40000400
 80079bc:	40000800 	.word	0x40000800
 80079c0:	40000c00 	.word	0x40000c00
 80079c4:	40010400 	.word	0x40010400
 80079c8:	40014000 	.word	0x40014000
 80079cc:	40014400 	.word	0x40014400
 80079d0:	40014800 	.word	0x40014800

080079d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b087      	sub	sp, #28
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6a1b      	ldr	r3, [r3, #32]
 80079e2:	f023 0201 	bic.w	r2, r3, #1
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a1b      	ldr	r3, [r3, #32]
 80079ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	699b      	ldr	r3, [r3, #24]
 80079fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80079fc:	68fa      	ldr	r2, [r7, #12]
 80079fe:	4b37      	ldr	r3, [pc, #220]	; (8007adc <TIM_OC1_SetConfig+0x108>)
 8007a00:	4013      	ands	r3, r2
 8007a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f023 0303 	bic.w	r3, r3, #3
 8007a0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	68fa      	ldr	r2, [r7, #12]
 8007a12:	4313      	orrs	r3, r2
 8007a14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	f023 0302 	bic.w	r3, r3, #2
 8007a1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	697a      	ldr	r2, [r7, #20]
 8007a24:	4313      	orrs	r3, r2
 8007a26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	4a2d      	ldr	r2, [pc, #180]	; (8007ae0 <TIM_OC1_SetConfig+0x10c>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d00f      	beq.n	8007a50 <TIM_OC1_SetConfig+0x7c>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	4a2c      	ldr	r2, [pc, #176]	; (8007ae4 <TIM_OC1_SetConfig+0x110>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d00b      	beq.n	8007a50 <TIM_OC1_SetConfig+0x7c>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	4a2b      	ldr	r2, [pc, #172]	; (8007ae8 <TIM_OC1_SetConfig+0x114>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d007      	beq.n	8007a50 <TIM_OC1_SetConfig+0x7c>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	4a2a      	ldr	r2, [pc, #168]	; (8007aec <TIM_OC1_SetConfig+0x118>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d003      	beq.n	8007a50 <TIM_OC1_SetConfig+0x7c>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	4a29      	ldr	r2, [pc, #164]	; (8007af0 <TIM_OC1_SetConfig+0x11c>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d10c      	bne.n	8007a6a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	f023 0308 	bic.w	r3, r3, #8
 8007a56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	68db      	ldr	r3, [r3, #12]
 8007a5c:	697a      	ldr	r2, [r7, #20]
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	f023 0304 	bic.w	r3, r3, #4
 8007a68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4a1c      	ldr	r2, [pc, #112]	; (8007ae0 <TIM_OC1_SetConfig+0x10c>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d00f      	beq.n	8007a92 <TIM_OC1_SetConfig+0xbe>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	4a1b      	ldr	r2, [pc, #108]	; (8007ae4 <TIM_OC1_SetConfig+0x110>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d00b      	beq.n	8007a92 <TIM_OC1_SetConfig+0xbe>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	4a1a      	ldr	r2, [pc, #104]	; (8007ae8 <TIM_OC1_SetConfig+0x114>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d007      	beq.n	8007a92 <TIM_OC1_SetConfig+0xbe>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4a19      	ldr	r2, [pc, #100]	; (8007aec <TIM_OC1_SetConfig+0x118>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d003      	beq.n	8007a92 <TIM_OC1_SetConfig+0xbe>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4a18      	ldr	r2, [pc, #96]	; (8007af0 <TIM_OC1_SetConfig+0x11c>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d111      	bne.n	8007ab6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	695b      	ldr	r3, [r3, #20]
 8007aa6:	693a      	ldr	r2, [r7, #16]
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	699b      	ldr	r3, [r3, #24]
 8007ab0:	693a      	ldr	r2, [r7, #16]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	693a      	ldr	r2, [r7, #16]
 8007aba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	68fa      	ldr	r2, [r7, #12]
 8007ac0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	685a      	ldr	r2, [r3, #4]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	697a      	ldr	r2, [r7, #20]
 8007ace:	621a      	str	r2, [r3, #32]
}
 8007ad0:	bf00      	nop
 8007ad2:	371c      	adds	r7, #28
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr
 8007adc:	fffeff8f 	.word	0xfffeff8f
 8007ae0:	40010000 	.word	0x40010000
 8007ae4:	40010400 	.word	0x40010400
 8007ae8:	40014000 	.word	0x40014000
 8007aec:	40014400 	.word	0x40014400
 8007af0:	40014800 	.word	0x40014800

08007af4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b087      	sub	sp, #28
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6a1b      	ldr	r3, [r3, #32]
 8007b02:	f023 0210 	bic.w	r2, r3, #16
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6a1b      	ldr	r3, [r3, #32]
 8007b0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	699b      	ldr	r3, [r3, #24]
 8007b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b1c:	68fa      	ldr	r2, [r7, #12]
 8007b1e:	4b34      	ldr	r3, [pc, #208]	; (8007bf0 <TIM_OC2_SetConfig+0xfc>)
 8007b20:	4013      	ands	r3, r2
 8007b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	021b      	lsls	r3, r3, #8
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	f023 0320 	bic.w	r3, r3, #32
 8007b3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	011b      	lsls	r3, r3, #4
 8007b46:	697a      	ldr	r2, [r7, #20]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	4a29      	ldr	r2, [pc, #164]	; (8007bf4 <TIM_OC2_SetConfig+0x100>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d003      	beq.n	8007b5c <TIM_OC2_SetConfig+0x68>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	4a28      	ldr	r2, [pc, #160]	; (8007bf8 <TIM_OC2_SetConfig+0x104>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d10d      	bne.n	8007b78 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	011b      	lsls	r3, r3, #4
 8007b6a:	697a      	ldr	r2, [r7, #20]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	4a1e      	ldr	r2, [pc, #120]	; (8007bf4 <TIM_OC2_SetConfig+0x100>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d00f      	beq.n	8007ba0 <TIM_OC2_SetConfig+0xac>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	4a1d      	ldr	r2, [pc, #116]	; (8007bf8 <TIM_OC2_SetConfig+0x104>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d00b      	beq.n	8007ba0 <TIM_OC2_SetConfig+0xac>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	4a1c      	ldr	r2, [pc, #112]	; (8007bfc <TIM_OC2_SetConfig+0x108>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d007      	beq.n	8007ba0 <TIM_OC2_SetConfig+0xac>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	4a1b      	ldr	r2, [pc, #108]	; (8007c00 <TIM_OC2_SetConfig+0x10c>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d003      	beq.n	8007ba0 <TIM_OC2_SetConfig+0xac>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	4a1a      	ldr	r2, [pc, #104]	; (8007c04 <TIM_OC2_SetConfig+0x110>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d113      	bne.n	8007bc8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ba6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007bae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	695b      	ldr	r3, [r3, #20]
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	693a      	ldr	r2, [r7, #16]
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	699b      	ldr	r3, [r3, #24]
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	693a      	ldr	r2, [r7, #16]
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	693a      	ldr	r2, [r7, #16]
 8007bcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	685a      	ldr	r2, [r3, #4]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	697a      	ldr	r2, [r7, #20]
 8007be0:	621a      	str	r2, [r3, #32]
}
 8007be2:	bf00      	nop
 8007be4:	371c      	adds	r7, #28
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr
 8007bee:	bf00      	nop
 8007bf0:	feff8fff 	.word	0xfeff8fff
 8007bf4:	40010000 	.word	0x40010000
 8007bf8:	40010400 	.word	0x40010400
 8007bfc:	40014000 	.word	0x40014000
 8007c00:	40014400 	.word	0x40014400
 8007c04:	40014800 	.word	0x40014800

08007c08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b087      	sub	sp, #28
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6a1b      	ldr	r3, [r3, #32]
 8007c16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6a1b      	ldr	r3, [r3, #32]
 8007c22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	69db      	ldr	r3, [r3, #28]
 8007c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c30:	68fa      	ldr	r2, [r7, #12]
 8007c32:	4b33      	ldr	r3, [pc, #204]	; (8007d00 <TIM_OC3_SetConfig+0xf8>)
 8007c34:	4013      	ands	r3, r2
 8007c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f023 0303 	bic.w	r3, r3, #3
 8007c3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	68fa      	ldr	r2, [r7, #12]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	021b      	lsls	r3, r3, #8
 8007c58:	697a      	ldr	r2, [r7, #20]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a28      	ldr	r2, [pc, #160]	; (8007d04 <TIM_OC3_SetConfig+0xfc>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d003      	beq.n	8007c6e <TIM_OC3_SetConfig+0x66>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	4a27      	ldr	r2, [pc, #156]	; (8007d08 <TIM_OC3_SetConfig+0x100>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d10d      	bne.n	8007c8a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	021b      	lsls	r3, r3, #8
 8007c7c:	697a      	ldr	r2, [r7, #20]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	4a1d      	ldr	r2, [pc, #116]	; (8007d04 <TIM_OC3_SetConfig+0xfc>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d00f      	beq.n	8007cb2 <TIM_OC3_SetConfig+0xaa>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	4a1c      	ldr	r2, [pc, #112]	; (8007d08 <TIM_OC3_SetConfig+0x100>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d00b      	beq.n	8007cb2 <TIM_OC3_SetConfig+0xaa>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	4a1b      	ldr	r2, [pc, #108]	; (8007d0c <TIM_OC3_SetConfig+0x104>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d007      	beq.n	8007cb2 <TIM_OC3_SetConfig+0xaa>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	4a1a      	ldr	r2, [pc, #104]	; (8007d10 <TIM_OC3_SetConfig+0x108>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d003      	beq.n	8007cb2 <TIM_OC3_SetConfig+0xaa>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	4a19      	ldr	r2, [pc, #100]	; (8007d14 <TIM_OC3_SetConfig+0x10c>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d113      	bne.n	8007cda <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007cb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	695b      	ldr	r3, [r3, #20]
 8007cc6:	011b      	lsls	r3, r3, #4
 8007cc8:	693a      	ldr	r2, [r7, #16]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	699b      	ldr	r3, [r3, #24]
 8007cd2:	011b      	lsls	r3, r3, #4
 8007cd4:	693a      	ldr	r2, [r7, #16]
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	693a      	ldr	r2, [r7, #16]
 8007cde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	68fa      	ldr	r2, [r7, #12]
 8007ce4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	685a      	ldr	r2, [r3, #4]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	697a      	ldr	r2, [r7, #20]
 8007cf2:	621a      	str	r2, [r3, #32]
}
 8007cf4:	bf00      	nop
 8007cf6:	371c      	adds	r7, #28
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr
 8007d00:	fffeff8f 	.word	0xfffeff8f
 8007d04:	40010000 	.word	0x40010000
 8007d08:	40010400 	.word	0x40010400
 8007d0c:	40014000 	.word	0x40014000
 8007d10:	40014400 	.word	0x40014400
 8007d14:	40014800 	.word	0x40014800

08007d18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b087      	sub	sp, #28
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6a1b      	ldr	r3, [r3, #32]
 8007d26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6a1b      	ldr	r3, [r3, #32]
 8007d32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	69db      	ldr	r3, [r3, #28]
 8007d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	4b24      	ldr	r3, [pc, #144]	; (8007dd4 <TIM_OC4_SetConfig+0xbc>)
 8007d44:	4013      	ands	r3, r2
 8007d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	021b      	lsls	r3, r3, #8
 8007d56:	68fa      	ldr	r2, [r7, #12]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	031b      	lsls	r3, r3, #12
 8007d6a:	693a      	ldr	r2, [r7, #16]
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4a19      	ldr	r2, [pc, #100]	; (8007dd8 <TIM_OC4_SetConfig+0xc0>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d00f      	beq.n	8007d98 <TIM_OC4_SetConfig+0x80>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	4a18      	ldr	r2, [pc, #96]	; (8007ddc <TIM_OC4_SetConfig+0xc4>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d00b      	beq.n	8007d98 <TIM_OC4_SetConfig+0x80>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	4a17      	ldr	r2, [pc, #92]	; (8007de0 <TIM_OC4_SetConfig+0xc8>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d007      	beq.n	8007d98 <TIM_OC4_SetConfig+0x80>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	4a16      	ldr	r2, [pc, #88]	; (8007de4 <TIM_OC4_SetConfig+0xcc>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d003      	beq.n	8007d98 <TIM_OC4_SetConfig+0x80>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	4a15      	ldr	r2, [pc, #84]	; (8007de8 <TIM_OC4_SetConfig+0xd0>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d109      	bne.n	8007dac <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	695b      	ldr	r3, [r3, #20]
 8007da4:	019b      	lsls	r3, r3, #6
 8007da6:	697a      	ldr	r2, [r7, #20]
 8007da8:	4313      	orrs	r3, r2
 8007daa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	697a      	ldr	r2, [r7, #20]
 8007db0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	68fa      	ldr	r2, [r7, #12]
 8007db6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	685a      	ldr	r2, [r3, #4]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	693a      	ldr	r2, [r7, #16]
 8007dc4:	621a      	str	r2, [r3, #32]
}
 8007dc6:	bf00      	nop
 8007dc8:	371c      	adds	r7, #28
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr
 8007dd2:	bf00      	nop
 8007dd4:	feff8fff 	.word	0xfeff8fff
 8007dd8:	40010000 	.word	0x40010000
 8007ddc:	40010400 	.word	0x40010400
 8007de0:	40014000 	.word	0x40014000
 8007de4:	40014400 	.word	0x40014400
 8007de8:	40014800 	.word	0x40014800

08007dec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b087      	sub	sp, #28
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a1b      	ldr	r3, [r3, #32]
 8007dfa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a1b      	ldr	r3, [r3, #32]
 8007e06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007e14:	68fa      	ldr	r2, [r7, #12]
 8007e16:	4b21      	ldr	r3, [pc, #132]	; (8007e9c <TIM_OC5_SetConfig+0xb0>)
 8007e18:	4013      	ands	r3, r2
 8007e1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	68fa      	ldr	r2, [r7, #12]
 8007e22:	4313      	orrs	r3, r2
 8007e24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007e2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	041b      	lsls	r3, r3, #16
 8007e34:	693a      	ldr	r2, [r7, #16]
 8007e36:	4313      	orrs	r3, r2
 8007e38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	4a18      	ldr	r2, [pc, #96]	; (8007ea0 <TIM_OC5_SetConfig+0xb4>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d00f      	beq.n	8007e62 <TIM_OC5_SetConfig+0x76>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4a17      	ldr	r2, [pc, #92]	; (8007ea4 <TIM_OC5_SetConfig+0xb8>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d00b      	beq.n	8007e62 <TIM_OC5_SetConfig+0x76>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4a16      	ldr	r2, [pc, #88]	; (8007ea8 <TIM_OC5_SetConfig+0xbc>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d007      	beq.n	8007e62 <TIM_OC5_SetConfig+0x76>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4a15      	ldr	r2, [pc, #84]	; (8007eac <TIM_OC5_SetConfig+0xc0>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d003      	beq.n	8007e62 <TIM_OC5_SetConfig+0x76>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a14      	ldr	r2, [pc, #80]	; (8007eb0 <TIM_OC5_SetConfig+0xc4>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d109      	bne.n	8007e76 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	695b      	ldr	r3, [r3, #20]
 8007e6e:	021b      	lsls	r3, r3, #8
 8007e70:	697a      	ldr	r2, [r7, #20]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	697a      	ldr	r2, [r7, #20]
 8007e7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	68fa      	ldr	r2, [r7, #12]
 8007e80:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	685a      	ldr	r2, [r3, #4]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	693a      	ldr	r2, [r7, #16]
 8007e8e:	621a      	str	r2, [r3, #32]
}
 8007e90:	bf00      	nop
 8007e92:	371c      	adds	r7, #28
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr
 8007e9c:	fffeff8f 	.word	0xfffeff8f
 8007ea0:	40010000 	.word	0x40010000
 8007ea4:	40010400 	.word	0x40010400
 8007ea8:	40014000 	.word	0x40014000
 8007eac:	40014400 	.word	0x40014400
 8007eb0:	40014800 	.word	0x40014800

08007eb4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b087      	sub	sp, #28
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a1b      	ldr	r3, [r3, #32]
 8007ec2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6a1b      	ldr	r3, [r3, #32]
 8007ece:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007edc:	68fa      	ldr	r2, [r7, #12]
 8007ede:	4b22      	ldr	r3, [pc, #136]	; (8007f68 <TIM_OC6_SetConfig+0xb4>)
 8007ee0:	4013      	ands	r3, r2
 8007ee2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	021b      	lsls	r3, r3, #8
 8007eea:	68fa      	ldr	r2, [r7, #12]
 8007eec:	4313      	orrs	r3, r2
 8007eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007ef6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	051b      	lsls	r3, r3, #20
 8007efe:	693a      	ldr	r2, [r7, #16]
 8007f00:	4313      	orrs	r3, r2
 8007f02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	4a19      	ldr	r2, [pc, #100]	; (8007f6c <TIM_OC6_SetConfig+0xb8>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d00f      	beq.n	8007f2c <TIM_OC6_SetConfig+0x78>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4a18      	ldr	r2, [pc, #96]	; (8007f70 <TIM_OC6_SetConfig+0xbc>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d00b      	beq.n	8007f2c <TIM_OC6_SetConfig+0x78>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4a17      	ldr	r2, [pc, #92]	; (8007f74 <TIM_OC6_SetConfig+0xc0>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d007      	beq.n	8007f2c <TIM_OC6_SetConfig+0x78>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a16      	ldr	r2, [pc, #88]	; (8007f78 <TIM_OC6_SetConfig+0xc4>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d003      	beq.n	8007f2c <TIM_OC6_SetConfig+0x78>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a15      	ldr	r2, [pc, #84]	; (8007f7c <TIM_OC6_SetConfig+0xc8>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d109      	bne.n	8007f40 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f32:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	695b      	ldr	r3, [r3, #20]
 8007f38:	029b      	lsls	r3, r3, #10
 8007f3a:	697a      	ldr	r2, [r7, #20]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	697a      	ldr	r2, [r7, #20]
 8007f44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	685a      	ldr	r2, [r3, #4]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	693a      	ldr	r2, [r7, #16]
 8007f58:	621a      	str	r2, [r3, #32]
}
 8007f5a:	bf00      	nop
 8007f5c:	371c      	adds	r7, #28
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr
 8007f66:	bf00      	nop
 8007f68:	feff8fff 	.word	0xfeff8fff
 8007f6c:	40010000 	.word	0x40010000
 8007f70:	40010400 	.word	0x40010400
 8007f74:	40014000 	.word	0x40014000
 8007f78:	40014400 	.word	0x40014400
 8007f7c:	40014800 	.word	0x40014800

08007f80 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b087      	sub	sp, #28
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	60b9      	str	r1, [r7, #8]
 8007f8a:	607a      	str	r2, [r7, #4]
 8007f8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	6a1b      	ldr	r3, [r3, #32]
 8007f92:	f023 0201 	bic.w	r2, r3, #1
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	699b      	ldr	r3, [r3, #24]
 8007f9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6a1b      	ldr	r3, [r3, #32]
 8007fa4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	4a28      	ldr	r2, [pc, #160]	; (800804c <TIM_TI1_SetConfig+0xcc>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d01b      	beq.n	8007fe6 <TIM_TI1_SetConfig+0x66>
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fb4:	d017      	beq.n	8007fe6 <TIM_TI1_SetConfig+0x66>
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	4a25      	ldr	r2, [pc, #148]	; (8008050 <TIM_TI1_SetConfig+0xd0>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d013      	beq.n	8007fe6 <TIM_TI1_SetConfig+0x66>
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	4a24      	ldr	r2, [pc, #144]	; (8008054 <TIM_TI1_SetConfig+0xd4>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d00f      	beq.n	8007fe6 <TIM_TI1_SetConfig+0x66>
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	4a23      	ldr	r2, [pc, #140]	; (8008058 <TIM_TI1_SetConfig+0xd8>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d00b      	beq.n	8007fe6 <TIM_TI1_SetConfig+0x66>
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	4a22      	ldr	r2, [pc, #136]	; (800805c <TIM_TI1_SetConfig+0xdc>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d007      	beq.n	8007fe6 <TIM_TI1_SetConfig+0x66>
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	4a21      	ldr	r2, [pc, #132]	; (8008060 <TIM_TI1_SetConfig+0xe0>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d003      	beq.n	8007fe6 <TIM_TI1_SetConfig+0x66>
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	4a20      	ldr	r2, [pc, #128]	; (8008064 <TIM_TI1_SetConfig+0xe4>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d101      	bne.n	8007fea <TIM_TI1_SetConfig+0x6a>
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	e000      	b.n	8007fec <TIM_TI1_SetConfig+0x6c>
 8007fea:	2300      	movs	r3, #0
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d008      	beq.n	8008002 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	f023 0303 	bic.w	r3, r3, #3
 8007ff6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007ff8:	697a      	ldr	r2, [r7, #20]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	617b      	str	r3, [r7, #20]
 8008000:	e003      	b.n	800800a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	f043 0301 	orr.w	r3, r3, #1
 8008008:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008010:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	011b      	lsls	r3, r3, #4
 8008016:	b2db      	uxtb	r3, r3
 8008018:	697a      	ldr	r2, [r7, #20]
 800801a:	4313      	orrs	r3, r2
 800801c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	f023 030a 	bic.w	r3, r3, #10
 8008024:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	f003 030a 	and.w	r3, r3, #10
 800802c:	693a      	ldr	r2, [r7, #16]
 800802e:	4313      	orrs	r3, r2
 8008030:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	697a      	ldr	r2, [r7, #20]
 8008036:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	693a      	ldr	r2, [r7, #16]
 800803c:	621a      	str	r2, [r3, #32]
}
 800803e:	bf00      	nop
 8008040:	371c      	adds	r7, #28
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr
 800804a:	bf00      	nop
 800804c:	40010000 	.word	0x40010000
 8008050:	40000400 	.word	0x40000400
 8008054:	40000800 	.word	0x40000800
 8008058:	40000c00 	.word	0x40000c00
 800805c:	40010400 	.word	0x40010400
 8008060:	40001800 	.word	0x40001800
 8008064:	40014000 	.word	0x40014000

08008068 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008068:	b480      	push	{r7}
 800806a:	b087      	sub	sp, #28
 800806c:	af00      	add	r7, sp, #0
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	60b9      	str	r1, [r7, #8]
 8008072:	607a      	str	r2, [r7, #4]
 8008074:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	6a1b      	ldr	r3, [r3, #32]
 800807a:	f023 0210 	bic.w	r2, r3, #16
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	699b      	ldr	r3, [r3, #24]
 8008086:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6a1b      	ldr	r3, [r3, #32]
 800808c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008094:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	021b      	lsls	r3, r3, #8
 800809a:	697a      	ldr	r2, [r7, #20]
 800809c:	4313      	orrs	r3, r2
 800809e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80080a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	031b      	lsls	r3, r3, #12
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	697a      	ldr	r2, [r7, #20]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80080ba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	011b      	lsls	r3, r3, #4
 80080c0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80080c4:	693a      	ldr	r2, [r7, #16]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	697a      	ldr	r2, [r7, #20]
 80080ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	693a      	ldr	r2, [r7, #16]
 80080d4:	621a      	str	r2, [r3, #32]
}
 80080d6:	bf00      	nop
 80080d8:	371c      	adds	r7, #28
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr

080080e2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80080e2:	b480      	push	{r7}
 80080e4:	b087      	sub	sp, #28
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	60f8      	str	r0, [r7, #12]
 80080ea:	60b9      	str	r1, [r7, #8]
 80080ec:	607a      	str	r2, [r7, #4]
 80080ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6a1b      	ldr	r3, [r3, #32]
 80080f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	69db      	ldr	r3, [r3, #28]
 8008100:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	6a1b      	ldr	r3, [r3, #32]
 8008106:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	f023 0303 	bic.w	r3, r3, #3
 800810e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008110:	697a      	ldr	r2, [r7, #20]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	4313      	orrs	r3, r2
 8008116:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800811e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	011b      	lsls	r3, r3, #4
 8008124:	b2db      	uxtb	r3, r3
 8008126:	697a      	ldr	r2, [r7, #20]
 8008128:	4313      	orrs	r3, r2
 800812a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008132:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	021b      	lsls	r3, r3, #8
 8008138:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800813c:	693a      	ldr	r2, [r7, #16]
 800813e:	4313      	orrs	r3, r2
 8008140:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	697a      	ldr	r2, [r7, #20]
 8008146:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	693a      	ldr	r2, [r7, #16]
 800814c:	621a      	str	r2, [r3, #32]
}
 800814e:	bf00      	nop
 8008150:	371c      	adds	r7, #28
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr

0800815a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800815a:	b480      	push	{r7}
 800815c:	b087      	sub	sp, #28
 800815e:	af00      	add	r7, sp, #0
 8008160:	60f8      	str	r0, [r7, #12]
 8008162:	60b9      	str	r1, [r7, #8]
 8008164:	607a      	str	r2, [r7, #4]
 8008166:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	6a1b      	ldr	r3, [r3, #32]
 800816c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	69db      	ldr	r3, [r3, #28]
 8008178:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	6a1b      	ldr	r3, [r3, #32]
 800817e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008186:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	021b      	lsls	r3, r3, #8
 800818c:	697a      	ldr	r2, [r7, #20]
 800818e:	4313      	orrs	r3, r2
 8008190:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008198:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	031b      	lsls	r3, r3, #12
 800819e:	b29b      	uxth	r3, r3
 80081a0:	697a      	ldr	r2, [r7, #20]
 80081a2:	4313      	orrs	r3, r2
 80081a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80081ac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	031b      	lsls	r3, r3, #12
 80081b2:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80081b6:	693a      	ldr	r2, [r7, #16]
 80081b8:	4313      	orrs	r3, r2
 80081ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	697a      	ldr	r2, [r7, #20]
 80081c0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	693a      	ldr	r2, [r7, #16]
 80081c6:	621a      	str	r2, [r3, #32]
}
 80081c8:	bf00      	nop
 80081ca:	371c      	adds	r7, #28
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b087      	sub	sp, #28
 80081d8:	af00      	add	r7, sp, #0
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	60b9      	str	r1, [r7, #8]
 80081de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	f003 031f 	and.w	r3, r3, #31
 80081e6:	2201      	movs	r2, #1
 80081e8:	fa02 f303 	lsl.w	r3, r2, r3
 80081ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	6a1a      	ldr	r2, [r3, #32]
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	43db      	mvns	r3, r3
 80081f6:	401a      	ands	r2, r3
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	6a1a      	ldr	r2, [r3, #32]
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	f003 031f 	and.w	r3, r3, #31
 8008206:	6879      	ldr	r1, [r7, #4]
 8008208:	fa01 f303 	lsl.w	r3, r1, r3
 800820c:	431a      	orrs	r2, r3
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	621a      	str	r2, [r3, #32]
}
 8008212:	bf00      	nop
 8008214:	371c      	adds	r7, #28
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr
	...

08008220 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008220:	b480      	push	{r7}
 8008222:	b085      	sub	sp, #20
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008230:	2b01      	cmp	r3, #1
 8008232:	d101      	bne.n	8008238 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008234:	2302      	movs	r3, #2
 8008236:	e06d      	b.n	8008314 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2201      	movs	r2, #1
 800823c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2202      	movs	r2, #2
 8008244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a30      	ldr	r2, [pc, #192]	; (8008320 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d004      	beq.n	800826c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a2f      	ldr	r2, [pc, #188]	; (8008324 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d108      	bne.n	800827e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008272:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	68fa      	ldr	r2, [r7, #12]
 800827a:	4313      	orrs	r3, r2
 800827c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008284:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	68fa      	ldr	r2, [r7, #12]
 800828c:	4313      	orrs	r3, r2
 800828e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	68fa      	ldr	r2, [r7, #12]
 8008296:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a20      	ldr	r2, [pc, #128]	; (8008320 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d022      	beq.n	80082e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082aa:	d01d      	beq.n	80082e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a1d      	ldr	r2, [pc, #116]	; (8008328 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d018      	beq.n	80082e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a1c      	ldr	r2, [pc, #112]	; (800832c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d013      	beq.n	80082e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a1a      	ldr	r2, [pc, #104]	; (8008330 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d00e      	beq.n	80082e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a15      	ldr	r2, [pc, #84]	; (8008324 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d009      	beq.n	80082e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a16      	ldr	r2, [pc, #88]	; (8008334 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d004      	beq.n	80082e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a15      	ldr	r2, [pc, #84]	; (8008338 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d10c      	bne.n	8008302 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	689b      	ldr	r3, [r3, #8]
 80082f4:	68ba      	ldr	r2, [r7, #8]
 80082f6:	4313      	orrs	r3, r2
 80082f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	68ba      	ldr	r2, [r7, #8]
 8008300:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2201      	movs	r2, #1
 8008306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008312:	2300      	movs	r3, #0
}
 8008314:	4618      	mov	r0, r3
 8008316:	3714      	adds	r7, #20
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr
 8008320:	40010000 	.word	0x40010000
 8008324:	40010400 	.word	0x40010400
 8008328:	40000400 	.word	0x40000400
 800832c:	40000800 	.word	0x40000800
 8008330:	40000c00 	.word	0x40000c00
 8008334:	40001800 	.word	0x40001800
 8008338:	40014000 	.word	0x40014000

0800833c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008344:	bf00      	nop
 8008346:	370c      	adds	r7, #12
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008350:	b480      	push	{r7}
 8008352:	b083      	sub	sp, #12
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008358:	bf00      	nop
 800835a:	370c      	adds	r7, #12
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr

08008364 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008364:	b480      	push	{r7}
 8008366:	b083      	sub	sp, #12
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800836c:	bf00      	nop
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d101      	bne.n	800838a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	e042      	b.n	8008410 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008390:	2b00      	cmp	r3, #0
 8008392:	d106      	bne.n	80083a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f7f8 ff89 	bl	80012b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2224      	movs	r2, #36	; 0x24
 80083a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f022 0201 	bic.w	r2, r2, #1
 80083b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 f8c2 	bl	8008544 <UART_SetConfig>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d101      	bne.n	80083ca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	e022      	b.n	8008410 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d002      	beq.n	80083d8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 fe1e 	bl	8009014 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	685a      	ldr	r2, [r3, #4]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80083e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	689a      	ldr	r2, [r3, #8]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80083f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f042 0201 	orr.w	r2, r2, #1
 8008406:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 fea5 	bl	8009158 <UART_CheckIdleState>
 800840e:	4603      	mov	r3, r0
}
 8008410:	4618      	mov	r0, r3
 8008412:	3708      	adds	r7, #8
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b08a      	sub	sp, #40	; 0x28
 800841c:	af02      	add	r7, sp, #8
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	60b9      	str	r1, [r7, #8]
 8008422:	603b      	str	r3, [r7, #0]
 8008424:	4613      	mov	r3, r2
 8008426:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800842e:	2b20      	cmp	r3, #32
 8008430:	f040 8083 	bne.w	800853a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d002      	beq.n	8008440 <HAL_UART_Transmit+0x28>
 800843a:	88fb      	ldrh	r3, [r7, #6]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d101      	bne.n	8008444 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008440:	2301      	movs	r3, #1
 8008442:	e07b      	b.n	800853c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800844a:	2b01      	cmp	r3, #1
 800844c:	d101      	bne.n	8008452 <HAL_UART_Transmit+0x3a>
 800844e:	2302      	movs	r3, #2
 8008450:	e074      	b.n	800853c <HAL_UART_Transmit+0x124>
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2201      	movs	r2, #1
 8008456:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2200      	movs	r2, #0
 800845e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2221      	movs	r2, #33	; 0x21
 8008466:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800846a:	f7f9 f9a1 	bl	80017b0 <HAL_GetTick>
 800846e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	88fa      	ldrh	r2, [r7, #6]
 8008474:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	88fa      	ldrh	r2, [r7, #6]
 800847c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008488:	d108      	bne.n	800849c <HAL_UART_Transmit+0x84>
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	691b      	ldr	r3, [r3, #16]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d104      	bne.n	800849c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8008492:	2300      	movs	r3, #0
 8008494:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	61bb      	str	r3, [r7, #24]
 800849a:	e003      	b.n	80084a4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80084a0:	2300      	movs	r3, #0
 80084a2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2200      	movs	r2, #0
 80084a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80084ac:	e02c      	b.n	8008508 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	9300      	str	r3, [sp, #0]
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	2200      	movs	r2, #0
 80084b6:	2180      	movs	r1, #128	; 0x80
 80084b8:	68f8      	ldr	r0, [r7, #12]
 80084ba:	f000 fe98 	bl	80091ee <UART_WaitOnFlagUntilTimeout>
 80084be:	4603      	mov	r3, r0
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d001      	beq.n	80084c8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80084c4:	2303      	movs	r3, #3
 80084c6:	e039      	b.n	800853c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d10b      	bne.n	80084e6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80084ce:	69bb      	ldr	r3, [r7, #24]
 80084d0:	881b      	ldrh	r3, [r3, #0]
 80084d2:	461a      	mov	r2, r3
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084dc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	3302      	adds	r3, #2
 80084e2:	61bb      	str	r3, [r7, #24]
 80084e4:	e007      	b.n	80084f6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80084e6:	69fb      	ldr	r3, [r7, #28]
 80084e8:	781a      	ldrb	r2, [r3, #0]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80084f0:	69fb      	ldr	r3, [r7, #28]
 80084f2:	3301      	adds	r3, #1
 80084f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	3b01      	subs	r3, #1
 8008500:	b29a      	uxth	r2, r3
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800850e:	b29b      	uxth	r3, r3
 8008510:	2b00      	cmp	r3, #0
 8008512:	d1cc      	bne.n	80084ae <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	9300      	str	r3, [sp, #0]
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	2200      	movs	r2, #0
 800851c:	2140      	movs	r1, #64	; 0x40
 800851e:	68f8      	ldr	r0, [r7, #12]
 8008520:	f000 fe65 	bl	80091ee <UART_WaitOnFlagUntilTimeout>
 8008524:	4603      	mov	r3, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d001      	beq.n	800852e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800852a:	2303      	movs	r3, #3
 800852c:	e006      	b.n	800853c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2220      	movs	r2, #32
 8008532:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008536:	2300      	movs	r3, #0
 8008538:	e000      	b.n	800853c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800853a:	2302      	movs	r3, #2
  }
}
 800853c:	4618      	mov	r0, r3
 800853e:	3720      	adds	r7, #32
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008544:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008548:	b092      	sub	sp, #72	; 0x48
 800854a:	af00      	add	r7, sp, #0
 800854c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800854e:	2300      	movs	r3, #0
 8008550:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	689a      	ldr	r2, [r3, #8]
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	691b      	ldr	r3, [r3, #16]
 800855c:	431a      	orrs	r2, r3
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	695b      	ldr	r3, [r3, #20]
 8008562:	431a      	orrs	r2, r3
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	69db      	ldr	r3, [r3, #28]
 8008568:	4313      	orrs	r3, r2
 800856a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	4bbe      	ldr	r3, [pc, #760]	; (800886c <UART_SetConfig+0x328>)
 8008574:	4013      	ands	r3, r2
 8008576:	697a      	ldr	r2, [r7, #20]
 8008578:	6812      	ldr	r2, [r2, #0]
 800857a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800857c:	430b      	orrs	r3, r1
 800857e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	68da      	ldr	r2, [r3, #12]
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	430a      	orrs	r2, r1
 8008594:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	699b      	ldr	r3, [r3, #24]
 800859a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4ab3      	ldr	r2, [pc, #716]	; (8008870 <UART_SetConfig+0x32c>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d004      	beq.n	80085b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	6a1b      	ldr	r3, [r3, #32]
 80085aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085ac:	4313      	orrs	r3, r2
 80085ae:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	689a      	ldr	r2, [r3, #8]
 80085b6:	4baf      	ldr	r3, [pc, #700]	; (8008874 <UART_SetConfig+0x330>)
 80085b8:	4013      	ands	r3, r2
 80085ba:	697a      	ldr	r2, [r7, #20]
 80085bc:	6812      	ldr	r2, [r2, #0]
 80085be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80085c0:	430b      	orrs	r3, r1
 80085c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ca:	f023 010f 	bic.w	r1, r3, #15
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	430a      	orrs	r2, r1
 80085d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4aa6      	ldr	r2, [pc, #664]	; (8008878 <UART_SetConfig+0x334>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d177      	bne.n	80086d4 <UART_SetConfig+0x190>
 80085e4:	4ba5      	ldr	r3, [pc, #660]	; (800887c <UART_SetConfig+0x338>)
 80085e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80085ec:	2b28      	cmp	r3, #40	; 0x28
 80085ee:	d86d      	bhi.n	80086cc <UART_SetConfig+0x188>
 80085f0:	a201      	add	r2, pc, #4	; (adr r2, 80085f8 <UART_SetConfig+0xb4>)
 80085f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f6:	bf00      	nop
 80085f8:	0800869d 	.word	0x0800869d
 80085fc:	080086cd 	.word	0x080086cd
 8008600:	080086cd 	.word	0x080086cd
 8008604:	080086cd 	.word	0x080086cd
 8008608:	080086cd 	.word	0x080086cd
 800860c:	080086cd 	.word	0x080086cd
 8008610:	080086cd 	.word	0x080086cd
 8008614:	080086cd 	.word	0x080086cd
 8008618:	080086a5 	.word	0x080086a5
 800861c:	080086cd 	.word	0x080086cd
 8008620:	080086cd 	.word	0x080086cd
 8008624:	080086cd 	.word	0x080086cd
 8008628:	080086cd 	.word	0x080086cd
 800862c:	080086cd 	.word	0x080086cd
 8008630:	080086cd 	.word	0x080086cd
 8008634:	080086cd 	.word	0x080086cd
 8008638:	080086ad 	.word	0x080086ad
 800863c:	080086cd 	.word	0x080086cd
 8008640:	080086cd 	.word	0x080086cd
 8008644:	080086cd 	.word	0x080086cd
 8008648:	080086cd 	.word	0x080086cd
 800864c:	080086cd 	.word	0x080086cd
 8008650:	080086cd 	.word	0x080086cd
 8008654:	080086cd 	.word	0x080086cd
 8008658:	080086b5 	.word	0x080086b5
 800865c:	080086cd 	.word	0x080086cd
 8008660:	080086cd 	.word	0x080086cd
 8008664:	080086cd 	.word	0x080086cd
 8008668:	080086cd 	.word	0x080086cd
 800866c:	080086cd 	.word	0x080086cd
 8008670:	080086cd 	.word	0x080086cd
 8008674:	080086cd 	.word	0x080086cd
 8008678:	080086bd 	.word	0x080086bd
 800867c:	080086cd 	.word	0x080086cd
 8008680:	080086cd 	.word	0x080086cd
 8008684:	080086cd 	.word	0x080086cd
 8008688:	080086cd 	.word	0x080086cd
 800868c:	080086cd 	.word	0x080086cd
 8008690:	080086cd 	.word	0x080086cd
 8008694:	080086cd 	.word	0x080086cd
 8008698:	080086c5 	.word	0x080086c5
 800869c:	2301      	movs	r3, #1
 800869e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086a2:	e222      	b.n	8008aea <UART_SetConfig+0x5a6>
 80086a4:	2304      	movs	r3, #4
 80086a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086aa:	e21e      	b.n	8008aea <UART_SetConfig+0x5a6>
 80086ac:	2308      	movs	r3, #8
 80086ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086b2:	e21a      	b.n	8008aea <UART_SetConfig+0x5a6>
 80086b4:	2310      	movs	r3, #16
 80086b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086ba:	e216      	b.n	8008aea <UART_SetConfig+0x5a6>
 80086bc:	2320      	movs	r3, #32
 80086be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086c2:	e212      	b.n	8008aea <UART_SetConfig+0x5a6>
 80086c4:	2340      	movs	r3, #64	; 0x40
 80086c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086ca:	e20e      	b.n	8008aea <UART_SetConfig+0x5a6>
 80086cc:	2380      	movs	r3, #128	; 0x80
 80086ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086d2:	e20a      	b.n	8008aea <UART_SetConfig+0x5a6>
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a69      	ldr	r2, [pc, #420]	; (8008880 <UART_SetConfig+0x33c>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d130      	bne.n	8008740 <UART_SetConfig+0x1fc>
 80086de:	4b67      	ldr	r3, [pc, #412]	; (800887c <UART_SetConfig+0x338>)
 80086e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086e2:	f003 0307 	and.w	r3, r3, #7
 80086e6:	2b05      	cmp	r3, #5
 80086e8:	d826      	bhi.n	8008738 <UART_SetConfig+0x1f4>
 80086ea:	a201      	add	r2, pc, #4	; (adr r2, 80086f0 <UART_SetConfig+0x1ac>)
 80086ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f0:	08008709 	.word	0x08008709
 80086f4:	08008711 	.word	0x08008711
 80086f8:	08008719 	.word	0x08008719
 80086fc:	08008721 	.word	0x08008721
 8008700:	08008729 	.word	0x08008729
 8008704:	08008731 	.word	0x08008731
 8008708:	2300      	movs	r3, #0
 800870a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800870e:	e1ec      	b.n	8008aea <UART_SetConfig+0x5a6>
 8008710:	2304      	movs	r3, #4
 8008712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008716:	e1e8      	b.n	8008aea <UART_SetConfig+0x5a6>
 8008718:	2308      	movs	r3, #8
 800871a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800871e:	e1e4      	b.n	8008aea <UART_SetConfig+0x5a6>
 8008720:	2310      	movs	r3, #16
 8008722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008726:	e1e0      	b.n	8008aea <UART_SetConfig+0x5a6>
 8008728:	2320      	movs	r3, #32
 800872a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800872e:	e1dc      	b.n	8008aea <UART_SetConfig+0x5a6>
 8008730:	2340      	movs	r3, #64	; 0x40
 8008732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008736:	e1d8      	b.n	8008aea <UART_SetConfig+0x5a6>
 8008738:	2380      	movs	r3, #128	; 0x80
 800873a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800873e:	e1d4      	b.n	8008aea <UART_SetConfig+0x5a6>
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a4f      	ldr	r2, [pc, #316]	; (8008884 <UART_SetConfig+0x340>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d130      	bne.n	80087ac <UART_SetConfig+0x268>
 800874a:	4b4c      	ldr	r3, [pc, #304]	; (800887c <UART_SetConfig+0x338>)
 800874c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800874e:	f003 0307 	and.w	r3, r3, #7
 8008752:	2b05      	cmp	r3, #5
 8008754:	d826      	bhi.n	80087a4 <UART_SetConfig+0x260>
 8008756:	a201      	add	r2, pc, #4	; (adr r2, 800875c <UART_SetConfig+0x218>)
 8008758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800875c:	08008775 	.word	0x08008775
 8008760:	0800877d 	.word	0x0800877d
 8008764:	08008785 	.word	0x08008785
 8008768:	0800878d 	.word	0x0800878d
 800876c:	08008795 	.word	0x08008795
 8008770:	0800879d 	.word	0x0800879d
 8008774:	2300      	movs	r3, #0
 8008776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800877a:	e1b6      	b.n	8008aea <UART_SetConfig+0x5a6>
 800877c:	2304      	movs	r3, #4
 800877e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008782:	e1b2      	b.n	8008aea <UART_SetConfig+0x5a6>
 8008784:	2308      	movs	r3, #8
 8008786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800878a:	e1ae      	b.n	8008aea <UART_SetConfig+0x5a6>
 800878c:	2310      	movs	r3, #16
 800878e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008792:	e1aa      	b.n	8008aea <UART_SetConfig+0x5a6>
 8008794:	2320      	movs	r3, #32
 8008796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800879a:	e1a6      	b.n	8008aea <UART_SetConfig+0x5a6>
 800879c:	2340      	movs	r3, #64	; 0x40
 800879e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087a2:	e1a2      	b.n	8008aea <UART_SetConfig+0x5a6>
 80087a4:	2380      	movs	r3, #128	; 0x80
 80087a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087aa:	e19e      	b.n	8008aea <UART_SetConfig+0x5a6>
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a35      	ldr	r2, [pc, #212]	; (8008888 <UART_SetConfig+0x344>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d130      	bne.n	8008818 <UART_SetConfig+0x2d4>
 80087b6:	4b31      	ldr	r3, [pc, #196]	; (800887c <UART_SetConfig+0x338>)
 80087b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087ba:	f003 0307 	and.w	r3, r3, #7
 80087be:	2b05      	cmp	r3, #5
 80087c0:	d826      	bhi.n	8008810 <UART_SetConfig+0x2cc>
 80087c2:	a201      	add	r2, pc, #4	; (adr r2, 80087c8 <UART_SetConfig+0x284>)
 80087c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087c8:	080087e1 	.word	0x080087e1
 80087cc:	080087e9 	.word	0x080087e9
 80087d0:	080087f1 	.word	0x080087f1
 80087d4:	080087f9 	.word	0x080087f9
 80087d8:	08008801 	.word	0x08008801
 80087dc:	08008809 	.word	0x08008809
 80087e0:	2300      	movs	r3, #0
 80087e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087e6:	e180      	b.n	8008aea <UART_SetConfig+0x5a6>
 80087e8:	2304      	movs	r3, #4
 80087ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087ee:	e17c      	b.n	8008aea <UART_SetConfig+0x5a6>
 80087f0:	2308      	movs	r3, #8
 80087f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087f6:	e178      	b.n	8008aea <UART_SetConfig+0x5a6>
 80087f8:	2310      	movs	r3, #16
 80087fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087fe:	e174      	b.n	8008aea <UART_SetConfig+0x5a6>
 8008800:	2320      	movs	r3, #32
 8008802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008806:	e170      	b.n	8008aea <UART_SetConfig+0x5a6>
 8008808:	2340      	movs	r3, #64	; 0x40
 800880a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800880e:	e16c      	b.n	8008aea <UART_SetConfig+0x5a6>
 8008810:	2380      	movs	r3, #128	; 0x80
 8008812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008816:	e168      	b.n	8008aea <UART_SetConfig+0x5a6>
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a1b      	ldr	r2, [pc, #108]	; (800888c <UART_SetConfig+0x348>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d142      	bne.n	80088a8 <UART_SetConfig+0x364>
 8008822:	4b16      	ldr	r3, [pc, #88]	; (800887c <UART_SetConfig+0x338>)
 8008824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008826:	f003 0307 	and.w	r3, r3, #7
 800882a:	2b05      	cmp	r3, #5
 800882c:	d838      	bhi.n	80088a0 <UART_SetConfig+0x35c>
 800882e:	a201      	add	r2, pc, #4	; (adr r2, 8008834 <UART_SetConfig+0x2f0>)
 8008830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008834:	0800884d 	.word	0x0800884d
 8008838:	08008855 	.word	0x08008855
 800883c:	0800885d 	.word	0x0800885d
 8008840:	08008865 	.word	0x08008865
 8008844:	08008891 	.word	0x08008891
 8008848:	08008899 	.word	0x08008899
 800884c:	2300      	movs	r3, #0
 800884e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008852:	e14a      	b.n	8008aea <UART_SetConfig+0x5a6>
 8008854:	2304      	movs	r3, #4
 8008856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800885a:	e146      	b.n	8008aea <UART_SetConfig+0x5a6>
 800885c:	2308      	movs	r3, #8
 800885e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008862:	e142      	b.n	8008aea <UART_SetConfig+0x5a6>
 8008864:	2310      	movs	r3, #16
 8008866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800886a:	e13e      	b.n	8008aea <UART_SetConfig+0x5a6>
 800886c:	cfff69f3 	.word	0xcfff69f3
 8008870:	58000c00 	.word	0x58000c00
 8008874:	11fff4ff 	.word	0x11fff4ff
 8008878:	40011000 	.word	0x40011000
 800887c:	58024400 	.word	0x58024400
 8008880:	40004400 	.word	0x40004400
 8008884:	40004800 	.word	0x40004800
 8008888:	40004c00 	.word	0x40004c00
 800888c:	40005000 	.word	0x40005000
 8008890:	2320      	movs	r3, #32
 8008892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008896:	e128      	b.n	8008aea <UART_SetConfig+0x5a6>
 8008898:	2340      	movs	r3, #64	; 0x40
 800889a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800889e:	e124      	b.n	8008aea <UART_SetConfig+0x5a6>
 80088a0:	2380      	movs	r3, #128	; 0x80
 80088a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088a6:	e120      	b.n	8008aea <UART_SetConfig+0x5a6>
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4acb      	ldr	r2, [pc, #812]	; (8008bdc <UART_SetConfig+0x698>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d176      	bne.n	80089a0 <UART_SetConfig+0x45c>
 80088b2:	4bcb      	ldr	r3, [pc, #812]	; (8008be0 <UART_SetConfig+0x69c>)
 80088b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80088ba:	2b28      	cmp	r3, #40	; 0x28
 80088bc:	d86c      	bhi.n	8008998 <UART_SetConfig+0x454>
 80088be:	a201      	add	r2, pc, #4	; (adr r2, 80088c4 <UART_SetConfig+0x380>)
 80088c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c4:	08008969 	.word	0x08008969
 80088c8:	08008999 	.word	0x08008999
 80088cc:	08008999 	.word	0x08008999
 80088d0:	08008999 	.word	0x08008999
 80088d4:	08008999 	.word	0x08008999
 80088d8:	08008999 	.word	0x08008999
 80088dc:	08008999 	.word	0x08008999
 80088e0:	08008999 	.word	0x08008999
 80088e4:	08008971 	.word	0x08008971
 80088e8:	08008999 	.word	0x08008999
 80088ec:	08008999 	.word	0x08008999
 80088f0:	08008999 	.word	0x08008999
 80088f4:	08008999 	.word	0x08008999
 80088f8:	08008999 	.word	0x08008999
 80088fc:	08008999 	.word	0x08008999
 8008900:	08008999 	.word	0x08008999
 8008904:	08008979 	.word	0x08008979
 8008908:	08008999 	.word	0x08008999
 800890c:	08008999 	.word	0x08008999
 8008910:	08008999 	.word	0x08008999
 8008914:	08008999 	.word	0x08008999
 8008918:	08008999 	.word	0x08008999
 800891c:	08008999 	.word	0x08008999
 8008920:	08008999 	.word	0x08008999
 8008924:	08008981 	.word	0x08008981
 8008928:	08008999 	.word	0x08008999
 800892c:	08008999 	.word	0x08008999
 8008930:	08008999 	.word	0x08008999
 8008934:	08008999 	.word	0x08008999
 8008938:	08008999 	.word	0x08008999
 800893c:	08008999 	.word	0x08008999
 8008940:	08008999 	.word	0x08008999
 8008944:	08008989 	.word	0x08008989
 8008948:	08008999 	.word	0x08008999
 800894c:	08008999 	.word	0x08008999
 8008950:	08008999 	.word	0x08008999
 8008954:	08008999 	.word	0x08008999
 8008958:	08008999 	.word	0x08008999
 800895c:	08008999 	.word	0x08008999
 8008960:	08008999 	.word	0x08008999
 8008964:	08008991 	.word	0x08008991
 8008968:	2301      	movs	r3, #1
 800896a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800896e:	e0bc      	b.n	8008aea <UART_SetConfig+0x5a6>
 8008970:	2304      	movs	r3, #4
 8008972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008976:	e0b8      	b.n	8008aea <UART_SetConfig+0x5a6>
 8008978:	2308      	movs	r3, #8
 800897a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800897e:	e0b4      	b.n	8008aea <UART_SetConfig+0x5a6>
 8008980:	2310      	movs	r3, #16
 8008982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008986:	e0b0      	b.n	8008aea <UART_SetConfig+0x5a6>
 8008988:	2320      	movs	r3, #32
 800898a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800898e:	e0ac      	b.n	8008aea <UART_SetConfig+0x5a6>
 8008990:	2340      	movs	r3, #64	; 0x40
 8008992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008996:	e0a8      	b.n	8008aea <UART_SetConfig+0x5a6>
 8008998:	2380      	movs	r3, #128	; 0x80
 800899a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800899e:	e0a4      	b.n	8008aea <UART_SetConfig+0x5a6>
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a8f      	ldr	r2, [pc, #572]	; (8008be4 <UART_SetConfig+0x6a0>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d130      	bne.n	8008a0c <UART_SetConfig+0x4c8>
 80089aa:	4b8d      	ldr	r3, [pc, #564]	; (8008be0 <UART_SetConfig+0x69c>)
 80089ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089ae:	f003 0307 	and.w	r3, r3, #7
 80089b2:	2b05      	cmp	r3, #5
 80089b4:	d826      	bhi.n	8008a04 <UART_SetConfig+0x4c0>
 80089b6:	a201      	add	r2, pc, #4	; (adr r2, 80089bc <UART_SetConfig+0x478>)
 80089b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089bc:	080089d5 	.word	0x080089d5
 80089c0:	080089dd 	.word	0x080089dd
 80089c4:	080089e5 	.word	0x080089e5
 80089c8:	080089ed 	.word	0x080089ed
 80089cc:	080089f5 	.word	0x080089f5
 80089d0:	080089fd 	.word	0x080089fd
 80089d4:	2300      	movs	r3, #0
 80089d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089da:	e086      	b.n	8008aea <UART_SetConfig+0x5a6>
 80089dc:	2304      	movs	r3, #4
 80089de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089e2:	e082      	b.n	8008aea <UART_SetConfig+0x5a6>
 80089e4:	2308      	movs	r3, #8
 80089e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089ea:	e07e      	b.n	8008aea <UART_SetConfig+0x5a6>
 80089ec:	2310      	movs	r3, #16
 80089ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089f2:	e07a      	b.n	8008aea <UART_SetConfig+0x5a6>
 80089f4:	2320      	movs	r3, #32
 80089f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089fa:	e076      	b.n	8008aea <UART_SetConfig+0x5a6>
 80089fc:	2340      	movs	r3, #64	; 0x40
 80089fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a02:	e072      	b.n	8008aea <UART_SetConfig+0x5a6>
 8008a04:	2380      	movs	r3, #128	; 0x80
 8008a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a0a:	e06e      	b.n	8008aea <UART_SetConfig+0x5a6>
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a75      	ldr	r2, [pc, #468]	; (8008be8 <UART_SetConfig+0x6a4>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d130      	bne.n	8008a78 <UART_SetConfig+0x534>
 8008a16:	4b72      	ldr	r3, [pc, #456]	; (8008be0 <UART_SetConfig+0x69c>)
 8008a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a1a:	f003 0307 	and.w	r3, r3, #7
 8008a1e:	2b05      	cmp	r3, #5
 8008a20:	d826      	bhi.n	8008a70 <UART_SetConfig+0x52c>
 8008a22:	a201      	add	r2, pc, #4	; (adr r2, 8008a28 <UART_SetConfig+0x4e4>)
 8008a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a28:	08008a41 	.word	0x08008a41
 8008a2c:	08008a49 	.word	0x08008a49
 8008a30:	08008a51 	.word	0x08008a51
 8008a34:	08008a59 	.word	0x08008a59
 8008a38:	08008a61 	.word	0x08008a61
 8008a3c:	08008a69 	.word	0x08008a69
 8008a40:	2300      	movs	r3, #0
 8008a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a46:	e050      	b.n	8008aea <UART_SetConfig+0x5a6>
 8008a48:	2304      	movs	r3, #4
 8008a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a4e:	e04c      	b.n	8008aea <UART_SetConfig+0x5a6>
 8008a50:	2308      	movs	r3, #8
 8008a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a56:	e048      	b.n	8008aea <UART_SetConfig+0x5a6>
 8008a58:	2310      	movs	r3, #16
 8008a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a5e:	e044      	b.n	8008aea <UART_SetConfig+0x5a6>
 8008a60:	2320      	movs	r3, #32
 8008a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a66:	e040      	b.n	8008aea <UART_SetConfig+0x5a6>
 8008a68:	2340      	movs	r3, #64	; 0x40
 8008a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a6e:	e03c      	b.n	8008aea <UART_SetConfig+0x5a6>
 8008a70:	2380      	movs	r3, #128	; 0x80
 8008a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a76:	e038      	b.n	8008aea <UART_SetConfig+0x5a6>
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a5b      	ldr	r2, [pc, #364]	; (8008bec <UART_SetConfig+0x6a8>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d130      	bne.n	8008ae4 <UART_SetConfig+0x5a0>
 8008a82:	4b57      	ldr	r3, [pc, #348]	; (8008be0 <UART_SetConfig+0x69c>)
 8008a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a86:	f003 0307 	and.w	r3, r3, #7
 8008a8a:	2b05      	cmp	r3, #5
 8008a8c:	d826      	bhi.n	8008adc <UART_SetConfig+0x598>
 8008a8e:	a201      	add	r2, pc, #4	; (adr r2, 8008a94 <UART_SetConfig+0x550>)
 8008a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a94:	08008aad 	.word	0x08008aad
 8008a98:	08008ab5 	.word	0x08008ab5
 8008a9c:	08008abd 	.word	0x08008abd
 8008aa0:	08008ac5 	.word	0x08008ac5
 8008aa4:	08008acd 	.word	0x08008acd
 8008aa8:	08008ad5 	.word	0x08008ad5
 8008aac:	2302      	movs	r3, #2
 8008aae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ab2:	e01a      	b.n	8008aea <UART_SetConfig+0x5a6>
 8008ab4:	2304      	movs	r3, #4
 8008ab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aba:	e016      	b.n	8008aea <UART_SetConfig+0x5a6>
 8008abc:	2308      	movs	r3, #8
 8008abe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ac2:	e012      	b.n	8008aea <UART_SetConfig+0x5a6>
 8008ac4:	2310      	movs	r3, #16
 8008ac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aca:	e00e      	b.n	8008aea <UART_SetConfig+0x5a6>
 8008acc:	2320      	movs	r3, #32
 8008ace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ad2:	e00a      	b.n	8008aea <UART_SetConfig+0x5a6>
 8008ad4:	2340      	movs	r3, #64	; 0x40
 8008ad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ada:	e006      	b.n	8008aea <UART_SetConfig+0x5a6>
 8008adc:	2380      	movs	r3, #128	; 0x80
 8008ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ae2:	e002      	b.n	8008aea <UART_SetConfig+0x5a6>
 8008ae4:	2380      	movs	r3, #128	; 0x80
 8008ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a3f      	ldr	r2, [pc, #252]	; (8008bec <UART_SetConfig+0x6a8>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	f040 80f8 	bne.w	8008ce6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008af6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008afa:	2b20      	cmp	r3, #32
 8008afc:	dc46      	bgt.n	8008b8c <UART_SetConfig+0x648>
 8008afe:	2b02      	cmp	r3, #2
 8008b00:	f2c0 8082 	blt.w	8008c08 <UART_SetConfig+0x6c4>
 8008b04:	3b02      	subs	r3, #2
 8008b06:	2b1e      	cmp	r3, #30
 8008b08:	d87e      	bhi.n	8008c08 <UART_SetConfig+0x6c4>
 8008b0a:	a201      	add	r2, pc, #4	; (adr r2, 8008b10 <UART_SetConfig+0x5cc>)
 8008b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b10:	08008b93 	.word	0x08008b93
 8008b14:	08008c09 	.word	0x08008c09
 8008b18:	08008b9b 	.word	0x08008b9b
 8008b1c:	08008c09 	.word	0x08008c09
 8008b20:	08008c09 	.word	0x08008c09
 8008b24:	08008c09 	.word	0x08008c09
 8008b28:	08008bab 	.word	0x08008bab
 8008b2c:	08008c09 	.word	0x08008c09
 8008b30:	08008c09 	.word	0x08008c09
 8008b34:	08008c09 	.word	0x08008c09
 8008b38:	08008c09 	.word	0x08008c09
 8008b3c:	08008c09 	.word	0x08008c09
 8008b40:	08008c09 	.word	0x08008c09
 8008b44:	08008c09 	.word	0x08008c09
 8008b48:	08008bbb 	.word	0x08008bbb
 8008b4c:	08008c09 	.word	0x08008c09
 8008b50:	08008c09 	.word	0x08008c09
 8008b54:	08008c09 	.word	0x08008c09
 8008b58:	08008c09 	.word	0x08008c09
 8008b5c:	08008c09 	.word	0x08008c09
 8008b60:	08008c09 	.word	0x08008c09
 8008b64:	08008c09 	.word	0x08008c09
 8008b68:	08008c09 	.word	0x08008c09
 8008b6c:	08008c09 	.word	0x08008c09
 8008b70:	08008c09 	.word	0x08008c09
 8008b74:	08008c09 	.word	0x08008c09
 8008b78:	08008c09 	.word	0x08008c09
 8008b7c:	08008c09 	.word	0x08008c09
 8008b80:	08008c09 	.word	0x08008c09
 8008b84:	08008c09 	.word	0x08008c09
 8008b88:	08008bfb 	.word	0x08008bfb
 8008b8c:	2b40      	cmp	r3, #64	; 0x40
 8008b8e:	d037      	beq.n	8008c00 <UART_SetConfig+0x6bc>
 8008b90:	e03a      	b.n	8008c08 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008b92:	f7fd fdaf 	bl	80066f4 <HAL_RCCEx_GetD3PCLK1Freq>
 8008b96:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008b98:	e03c      	b.n	8008c14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f7fd fdbe 	bl	8006720 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ba8:	e034      	b.n	8008c14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008baa:	f107 0318 	add.w	r3, r7, #24
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f7fd ff0a 	bl	80069c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008bb4:	69fb      	ldr	r3, [r7, #28]
 8008bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bb8:	e02c      	b.n	8008c14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008bba:	4b09      	ldr	r3, [pc, #36]	; (8008be0 <UART_SetConfig+0x69c>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f003 0320 	and.w	r3, r3, #32
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d016      	beq.n	8008bf4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008bc6:	4b06      	ldr	r3, [pc, #24]	; (8008be0 <UART_SetConfig+0x69c>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	08db      	lsrs	r3, r3, #3
 8008bcc:	f003 0303 	and.w	r3, r3, #3
 8008bd0:	4a07      	ldr	r2, [pc, #28]	; (8008bf0 <UART_SetConfig+0x6ac>)
 8008bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8008bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008bd8:	e01c      	b.n	8008c14 <UART_SetConfig+0x6d0>
 8008bda:	bf00      	nop
 8008bdc:	40011400 	.word	0x40011400
 8008be0:	58024400 	.word	0x58024400
 8008be4:	40007800 	.word	0x40007800
 8008be8:	40007c00 	.word	0x40007c00
 8008bec:	58000c00 	.word	0x58000c00
 8008bf0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008bf4:	4b9d      	ldr	r3, [pc, #628]	; (8008e6c <UART_SetConfig+0x928>)
 8008bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bf8:	e00c      	b.n	8008c14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008bfa:	4b9d      	ldr	r3, [pc, #628]	; (8008e70 <UART_SetConfig+0x92c>)
 8008bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bfe:	e009      	b.n	8008c14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c06:	e005      	b.n	8008c14 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008c12:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	f000 81de 	beq.w	8008fd8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c20:	4a94      	ldr	r2, [pc, #592]	; (8008e74 <UART_SetConfig+0x930>)
 8008c22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c26:	461a      	mov	r2, r3
 8008c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c2e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	685a      	ldr	r2, [r3, #4]
 8008c34:	4613      	mov	r3, r2
 8008c36:	005b      	lsls	r3, r3, #1
 8008c38:	4413      	add	r3, r2
 8008c3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d305      	bcc.n	8008c4c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008c46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d903      	bls.n	8008c54 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008c52:	e1c1      	b.n	8008fd8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c56:	2200      	movs	r2, #0
 8008c58:	60bb      	str	r3, [r7, #8]
 8008c5a:	60fa      	str	r2, [r7, #12]
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c60:	4a84      	ldr	r2, [pc, #528]	; (8008e74 <UART_SetConfig+0x930>)
 8008c62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	2200      	movs	r2, #0
 8008c6a:	603b      	str	r3, [r7, #0]
 8008c6c:	607a      	str	r2, [r7, #4]
 8008c6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008c76:	f7f7 fb2f 	bl	80002d8 <__aeabi_uldivmod>
 8008c7a:	4602      	mov	r2, r0
 8008c7c:	460b      	mov	r3, r1
 8008c7e:	4610      	mov	r0, r2
 8008c80:	4619      	mov	r1, r3
 8008c82:	f04f 0200 	mov.w	r2, #0
 8008c86:	f04f 0300 	mov.w	r3, #0
 8008c8a:	020b      	lsls	r3, r1, #8
 8008c8c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008c90:	0202      	lsls	r2, r0, #8
 8008c92:	6979      	ldr	r1, [r7, #20]
 8008c94:	6849      	ldr	r1, [r1, #4]
 8008c96:	0849      	lsrs	r1, r1, #1
 8008c98:	2000      	movs	r0, #0
 8008c9a:	460c      	mov	r4, r1
 8008c9c:	4605      	mov	r5, r0
 8008c9e:	eb12 0804 	adds.w	r8, r2, r4
 8008ca2:	eb43 0905 	adc.w	r9, r3, r5
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	2200      	movs	r2, #0
 8008cac:	469a      	mov	sl, r3
 8008cae:	4693      	mov	fp, r2
 8008cb0:	4652      	mov	r2, sl
 8008cb2:	465b      	mov	r3, fp
 8008cb4:	4640      	mov	r0, r8
 8008cb6:	4649      	mov	r1, r9
 8008cb8:	f7f7 fb0e 	bl	80002d8 <__aeabi_uldivmod>
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	460b      	mov	r3, r1
 8008cc0:	4613      	mov	r3, r2
 8008cc2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008cca:	d308      	bcc.n	8008cde <UART_SetConfig+0x79a>
 8008ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008cd2:	d204      	bcs.n	8008cde <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008cda:	60da      	str	r2, [r3, #12]
 8008cdc:	e17c      	b.n	8008fd8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008ce4:	e178      	b.n	8008fd8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	69db      	ldr	r3, [r3, #28]
 8008cea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cee:	f040 80c5 	bne.w	8008e7c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008cf2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008cf6:	2b20      	cmp	r3, #32
 8008cf8:	dc48      	bgt.n	8008d8c <UART_SetConfig+0x848>
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	db7b      	blt.n	8008df6 <UART_SetConfig+0x8b2>
 8008cfe:	2b20      	cmp	r3, #32
 8008d00:	d879      	bhi.n	8008df6 <UART_SetConfig+0x8b2>
 8008d02:	a201      	add	r2, pc, #4	; (adr r2, 8008d08 <UART_SetConfig+0x7c4>)
 8008d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d08:	08008d93 	.word	0x08008d93
 8008d0c:	08008d9b 	.word	0x08008d9b
 8008d10:	08008df7 	.word	0x08008df7
 8008d14:	08008df7 	.word	0x08008df7
 8008d18:	08008da3 	.word	0x08008da3
 8008d1c:	08008df7 	.word	0x08008df7
 8008d20:	08008df7 	.word	0x08008df7
 8008d24:	08008df7 	.word	0x08008df7
 8008d28:	08008db3 	.word	0x08008db3
 8008d2c:	08008df7 	.word	0x08008df7
 8008d30:	08008df7 	.word	0x08008df7
 8008d34:	08008df7 	.word	0x08008df7
 8008d38:	08008df7 	.word	0x08008df7
 8008d3c:	08008df7 	.word	0x08008df7
 8008d40:	08008df7 	.word	0x08008df7
 8008d44:	08008df7 	.word	0x08008df7
 8008d48:	08008dc3 	.word	0x08008dc3
 8008d4c:	08008df7 	.word	0x08008df7
 8008d50:	08008df7 	.word	0x08008df7
 8008d54:	08008df7 	.word	0x08008df7
 8008d58:	08008df7 	.word	0x08008df7
 8008d5c:	08008df7 	.word	0x08008df7
 8008d60:	08008df7 	.word	0x08008df7
 8008d64:	08008df7 	.word	0x08008df7
 8008d68:	08008df7 	.word	0x08008df7
 8008d6c:	08008df7 	.word	0x08008df7
 8008d70:	08008df7 	.word	0x08008df7
 8008d74:	08008df7 	.word	0x08008df7
 8008d78:	08008df7 	.word	0x08008df7
 8008d7c:	08008df7 	.word	0x08008df7
 8008d80:	08008df7 	.word	0x08008df7
 8008d84:	08008df7 	.word	0x08008df7
 8008d88:	08008de9 	.word	0x08008de9
 8008d8c:	2b40      	cmp	r3, #64	; 0x40
 8008d8e:	d02e      	beq.n	8008dee <UART_SetConfig+0x8aa>
 8008d90:	e031      	b.n	8008df6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d92:	f7fc fd3d 	bl	8005810 <HAL_RCC_GetPCLK1Freq>
 8008d96:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008d98:	e033      	b.n	8008e02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d9a:	f7fc fd4f 	bl	800583c <HAL_RCC_GetPCLK2Freq>
 8008d9e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008da0:	e02f      	b.n	8008e02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008da2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008da6:	4618      	mov	r0, r3
 8008da8:	f7fd fcba 	bl	8006720 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008db0:	e027      	b.n	8008e02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008db2:	f107 0318 	add.w	r3, r7, #24
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7fd fe06 	bl	80069c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008dbc:	69fb      	ldr	r3, [r7, #28]
 8008dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008dc0:	e01f      	b.n	8008e02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008dc2:	4b2d      	ldr	r3, [pc, #180]	; (8008e78 <UART_SetConfig+0x934>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f003 0320 	and.w	r3, r3, #32
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d009      	beq.n	8008de2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008dce:	4b2a      	ldr	r3, [pc, #168]	; (8008e78 <UART_SetConfig+0x934>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	08db      	lsrs	r3, r3, #3
 8008dd4:	f003 0303 	and.w	r3, r3, #3
 8008dd8:	4a24      	ldr	r2, [pc, #144]	; (8008e6c <UART_SetConfig+0x928>)
 8008dda:	fa22 f303 	lsr.w	r3, r2, r3
 8008dde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008de0:	e00f      	b.n	8008e02 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008de2:	4b22      	ldr	r3, [pc, #136]	; (8008e6c <UART_SetConfig+0x928>)
 8008de4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008de6:	e00c      	b.n	8008e02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008de8:	4b21      	ldr	r3, [pc, #132]	; (8008e70 <UART_SetConfig+0x92c>)
 8008dea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008dec:	e009      	b.n	8008e02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008dee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008df2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008df4:	e005      	b.n	8008e02 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008df6:	2300      	movs	r3, #0
 8008df8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008e00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	f000 80e7 	beq.w	8008fd8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e0e:	4a19      	ldr	r2, [pc, #100]	; (8008e74 <UART_SetConfig+0x930>)
 8008e10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e14:	461a      	mov	r2, r3
 8008e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e18:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e1c:	005a      	lsls	r2, r3, #1
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	085b      	lsrs	r3, r3, #1
 8008e24:	441a      	add	r2, r3
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e2e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e32:	2b0f      	cmp	r3, #15
 8008e34:	d916      	bls.n	8008e64 <UART_SetConfig+0x920>
 8008e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e3c:	d212      	bcs.n	8008e64 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e40:	b29b      	uxth	r3, r3
 8008e42:	f023 030f 	bic.w	r3, r3, #15
 8008e46:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e4a:	085b      	lsrs	r3, r3, #1
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	f003 0307 	and.w	r3, r3, #7
 8008e52:	b29a      	uxth	r2, r3
 8008e54:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008e56:	4313      	orrs	r3, r2
 8008e58:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008e60:	60da      	str	r2, [r3, #12]
 8008e62:	e0b9      	b.n	8008fd8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008e64:	2301      	movs	r3, #1
 8008e66:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008e6a:	e0b5      	b.n	8008fd8 <UART_SetConfig+0xa94>
 8008e6c:	03d09000 	.word	0x03d09000
 8008e70:	003d0900 	.word	0x003d0900
 8008e74:	08009c20 	.word	0x08009c20
 8008e78:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008e7c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008e80:	2b20      	cmp	r3, #32
 8008e82:	dc49      	bgt.n	8008f18 <UART_SetConfig+0x9d4>
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	db7c      	blt.n	8008f82 <UART_SetConfig+0xa3e>
 8008e88:	2b20      	cmp	r3, #32
 8008e8a:	d87a      	bhi.n	8008f82 <UART_SetConfig+0xa3e>
 8008e8c:	a201      	add	r2, pc, #4	; (adr r2, 8008e94 <UART_SetConfig+0x950>)
 8008e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e92:	bf00      	nop
 8008e94:	08008f1f 	.word	0x08008f1f
 8008e98:	08008f27 	.word	0x08008f27
 8008e9c:	08008f83 	.word	0x08008f83
 8008ea0:	08008f83 	.word	0x08008f83
 8008ea4:	08008f2f 	.word	0x08008f2f
 8008ea8:	08008f83 	.word	0x08008f83
 8008eac:	08008f83 	.word	0x08008f83
 8008eb0:	08008f83 	.word	0x08008f83
 8008eb4:	08008f3f 	.word	0x08008f3f
 8008eb8:	08008f83 	.word	0x08008f83
 8008ebc:	08008f83 	.word	0x08008f83
 8008ec0:	08008f83 	.word	0x08008f83
 8008ec4:	08008f83 	.word	0x08008f83
 8008ec8:	08008f83 	.word	0x08008f83
 8008ecc:	08008f83 	.word	0x08008f83
 8008ed0:	08008f83 	.word	0x08008f83
 8008ed4:	08008f4f 	.word	0x08008f4f
 8008ed8:	08008f83 	.word	0x08008f83
 8008edc:	08008f83 	.word	0x08008f83
 8008ee0:	08008f83 	.word	0x08008f83
 8008ee4:	08008f83 	.word	0x08008f83
 8008ee8:	08008f83 	.word	0x08008f83
 8008eec:	08008f83 	.word	0x08008f83
 8008ef0:	08008f83 	.word	0x08008f83
 8008ef4:	08008f83 	.word	0x08008f83
 8008ef8:	08008f83 	.word	0x08008f83
 8008efc:	08008f83 	.word	0x08008f83
 8008f00:	08008f83 	.word	0x08008f83
 8008f04:	08008f83 	.word	0x08008f83
 8008f08:	08008f83 	.word	0x08008f83
 8008f0c:	08008f83 	.word	0x08008f83
 8008f10:	08008f83 	.word	0x08008f83
 8008f14:	08008f75 	.word	0x08008f75
 8008f18:	2b40      	cmp	r3, #64	; 0x40
 8008f1a:	d02e      	beq.n	8008f7a <UART_SetConfig+0xa36>
 8008f1c:	e031      	b.n	8008f82 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f1e:	f7fc fc77 	bl	8005810 <HAL_RCC_GetPCLK1Freq>
 8008f22:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008f24:	e033      	b.n	8008f8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f26:	f7fc fc89 	bl	800583c <HAL_RCC_GetPCLK2Freq>
 8008f2a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008f2c:	e02f      	b.n	8008f8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f32:	4618      	mov	r0, r3
 8008f34:	f7fd fbf4 	bl	8006720 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f3c:	e027      	b.n	8008f8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f3e:	f107 0318 	add.w	r3, r7, #24
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7fd fd40 	bl	80069c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008f48:	69fb      	ldr	r3, [r7, #28]
 8008f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f4c:	e01f      	b.n	8008f8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f4e:	4b2d      	ldr	r3, [pc, #180]	; (8009004 <UART_SetConfig+0xac0>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f003 0320 	and.w	r3, r3, #32
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d009      	beq.n	8008f6e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008f5a:	4b2a      	ldr	r3, [pc, #168]	; (8009004 <UART_SetConfig+0xac0>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	08db      	lsrs	r3, r3, #3
 8008f60:	f003 0303 	and.w	r3, r3, #3
 8008f64:	4a28      	ldr	r2, [pc, #160]	; (8009008 <UART_SetConfig+0xac4>)
 8008f66:	fa22 f303 	lsr.w	r3, r2, r3
 8008f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008f6c:	e00f      	b.n	8008f8e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008f6e:	4b26      	ldr	r3, [pc, #152]	; (8009008 <UART_SetConfig+0xac4>)
 8008f70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f72:	e00c      	b.n	8008f8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008f74:	4b25      	ldr	r3, [pc, #148]	; (800900c <UART_SetConfig+0xac8>)
 8008f76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f78:	e009      	b.n	8008f8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f80:	e005      	b.n	8008f8e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008f82:	2300      	movs	r3, #0
 8008f84:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008f86:	2301      	movs	r3, #1
 8008f88:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008f8c:	bf00      	nop
    }

    if (pclk != 0U)
 8008f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d021      	beq.n	8008fd8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f98:	4a1d      	ldr	r2, [pc, #116]	; (8009010 <UART_SetConfig+0xacc>)
 8008f9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fa2:	fbb3 f2f2 	udiv	r2, r3, r2
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	085b      	lsrs	r3, r3, #1
 8008fac:	441a      	add	r2, r3
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	685b      	ldr	r3, [r3, #4]
 8008fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fb6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fba:	2b0f      	cmp	r3, #15
 8008fbc:	d909      	bls.n	8008fd2 <UART_SetConfig+0xa8e>
 8008fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fc4:	d205      	bcs.n	8008fd2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc8:	b29a      	uxth	r2, r3
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	60da      	str	r2, [r3, #12]
 8008fd0:	e002      	b.n	8008fd8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	2201      	movs	r2, #1
 8008fdc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	2200      	movs	r2, #0
 8008fec:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008ff4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3748      	adds	r7, #72	; 0x48
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009002:	bf00      	nop
 8009004:	58024400 	.word	0x58024400
 8009008:	03d09000 	.word	0x03d09000
 800900c:	003d0900 	.word	0x003d0900
 8009010:	08009c20 	.word	0x08009c20

08009014 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009020:	f003 0301 	and.w	r3, r3, #1
 8009024:	2b00      	cmp	r3, #0
 8009026:	d00a      	beq.n	800903e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	430a      	orrs	r2, r1
 800903c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009042:	f003 0302 	and.w	r3, r3, #2
 8009046:	2b00      	cmp	r3, #0
 8009048:	d00a      	beq.n	8009060 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	430a      	orrs	r2, r1
 800905e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009064:	f003 0304 	and.w	r3, r3, #4
 8009068:	2b00      	cmp	r3, #0
 800906a:	d00a      	beq.n	8009082 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	430a      	orrs	r2, r1
 8009080:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009086:	f003 0308 	and.w	r3, r3, #8
 800908a:	2b00      	cmp	r3, #0
 800908c:	d00a      	beq.n	80090a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	430a      	orrs	r2, r1
 80090a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090a8:	f003 0310 	and.w	r3, r3, #16
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d00a      	beq.n	80090c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	689b      	ldr	r3, [r3, #8]
 80090b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	430a      	orrs	r2, r1
 80090c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090ca:	f003 0320 	and.w	r3, r3, #32
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d00a      	beq.n	80090e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	689b      	ldr	r3, [r3, #8]
 80090d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	430a      	orrs	r2, r1
 80090e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d01a      	beq.n	800912a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	430a      	orrs	r2, r1
 8009108:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800910e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009112:	d10a      	bne.n	800912a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	685b      	ldr	r3, [r3, #4]
 800911a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	430a      	orrs	r2, r1
 8009128:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800912e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009132:	2b00      	cmp	r3, #0
 8009134:	d00a      	beq.n	800914c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	430a      	orrs	r2, r1
 800914a:	605a      	str	r2, [r3, #4]
  }
}
 800914c:	bf00      	nop
 800914e:	370c      	adds	r7, #12
 8009150:	46bd      	mov	sp, r7
 8009152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009156:	4770      	bx	lr

08009158 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b086      	sub	sp, #24
 800915c:	af02      	add	r7, sp, #8
 800915e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2200      	movs	r2, #0
 8009164:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009168:	f7f8 fb22 	bl	80017b0 <HAL_GetTick>
 800916c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f003 0308 	and.w	r3, r3, #8
 8009178:	2b08      	cmp	r3, #8
 800917a:	d10e      	bne.n	800919a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800917c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009180:	9300      	str	r3, [sp, #0]
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2200      	movs	r2, #0
 8009186:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 f82f 	bl	80091ee <UART_WaitOnFlagUntilTimeout>
 8009190:	4603      	mov	r3, r0
 8009192:	2b00      	cmp	r3, #0
 8009194:	d001      	beq.n	800919a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009196:	2303      	movs	r3, #3
 8009198:	e025      	b.n	80091e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f003 0304 	and.w	r3, r3, #4
 80091a4:	2b04      	cmp	r3, #4
 80091a6:	d10e      	bne.n	80091c6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80091a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80091ac:	9300      	str	r3, [sp, #0]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2200      	movs	r2, #0
 80091b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 f819 	bl	80091ee <UART_WaitOnFlagUntilTimeout>
 80091bc:	4603      	mov	r3, r0
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d001      	beq.n	80091c6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80091c2:	2303      	movs	r3, #3
 80091c4:	e00f      	b.n	80091e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2220      	movs	r2, #32
 80091ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2220      	movs	r2, #32
 80091d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2200      	movs	r2, #0
 80091da:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2200      	movs	r2, #0
 80091e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80091e4:	2300      	movs	r3, #0
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3710      	adds	r7, #16
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}

080091ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80091ee:	b580      	push	{r7, lr}
 80091f0:	b09c      	sub	sp, #112	; 0x70
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	60f8      	str	r0, [r7, #12]
 80091f6:	60b9      	str	r1, [r7, #8]
 80091f8:	603b      	str	r3, [r7, #0]
 80091fa:	4613      	mov	r3, r2
 80091fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091fe:	e0a9      	b.n	8009354 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009200:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009206:	f000 80a5 	beq.w	8009354 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800920a:	f7f8 fad1 	bl	80017b0 <HAL_GetTick>
 800920e:	4602      	mov	r2, r0
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	1ad3      	subs	r3, r2, r3
 8009214:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009216:	429a      	cmp	r2, r3
 8009218:	d302      	bcc.n	8009220 <UART_WaitOnFlagUntilTimeout+0x32>
 800921a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800921c:	2b00      	cmp	r3, #0
 800921e:	d140      	bne.n	80092a2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009228:	e853 3f00 	ldrex	r3, [r3]
 800922c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800922e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009230:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009234:	667b      	str	r3, [r7, #100]	; 0x64
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	461a      	mov	r2, r3
 800923c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800923e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009240:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009242:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009244:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009246:	e841 2300 	strex	r3, r2, [r1]
 800924a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800924c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800924e:	2b00      	cmp	r3, #0
 8009250:	d1e6      	bne.n	8009220 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	3308      	adds	r3, #8
 8009258:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800925a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800925c:	e853 3f00 	ldrex	r3, [r3]
 8009260:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009264:	f023 0301 	bic.w	r3, r3, #1
 8009268:	663b      	str	r3, [r7, #96]	; 0x60
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	3308      	adds	r3, #8
 8009270:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009272:	64ba      	str	r2, [r7, #72]	; 0x48
 8009274:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009276:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009278:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800927a:	e841 2300 	strex	r3, r2, [r1]
 800927e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009282:	2b00      	cmp	r3, #0
 8009284:	d1e5      	bne.n	8009252 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2220      	movs	r2, #32
 800928a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2220      	movs	r2, #32
 8009292:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2200      	movs	r2, #0
 800929a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800929e:	2303      	movs	r3, #3
 80092a0:	e069      	b.n	8009376 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f003 0304 	and.w	r3, r3, #4
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d051      	beq.n	8009354 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	69db      	ldr	r3, [r3, #28]
 80092b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80092ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80092be:	d149      	bne.n	8009354 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80092c8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d2:	e853 3f00 	ldrex	r3, [r3]
 80092d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80092d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80092de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	461a      	mov	r2, r3
 80092e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092e8:	637b      	str	r3, [r7, #52]	; 0x34
 80092ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80092ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092f0:	e841 2300 	strex	r3, r2, [r1]
 80092f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80092f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d1e6      	bne.n	80092ca <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	3308      	adds	r3, #8
 8009302:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	e853 3f00 	ldrex	r3, [r3]
 800930a:	613b      	str	r3, [r7, #16]
   return(result);
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	f023 0301 	bic.w	r3, r3, #1
 8009312:	66bb      	str	r3, [r7, #104]	; 0x68
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	3308      	adds	r3, #8
 800931a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800931c:	623a      	str	r2, [r7, #32]
 800931e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009320:	69f9      	ldr	r1, [r7, #28]
 8009322:	6a3a      	ldr	r2, [r7, #32]
 8009324:	e841 2300 	strex	r3, r2, [r1]
 8009328:	61bb      	str	r3, [r7, #24]
   return(result);
 800932a:	69bb      	ldr	r3, [r7, #24]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d1e5      	bne.n	80092fc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2220      	movs	r2, #32
 8009334:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2220      	movs	r2, #32
 800933c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2220      	movs	r2, #32
 8009344:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2200      	movs	r2, #0
 800934c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009350:	2303      	movs	r3, #3
 8009352:	e010      	b.n	8009376 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	69da      	ldr	r2, [r3, #28]
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	4013      	ands	r3, r2
 800935e:	68ba      	ldr	r2, [r7, #8]
 8009360:	429a      	cmp	r2, r3
 8009362:	bf0c      	ite	eq
 8009364:	2301      	moveq	r3, #1
 8009366:	2300      	movne	r3, #0
 8009368:	b2db      	uxtb	r3, r3
 800936a:	461a      	mov	r2, r3
 800936c:	79fb      	ldrb	r3, [r7, #7]
 800936e:	429a      	cmp	r2, r3
 8009370:	f43f af46 	beq.w	8009200 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009374:	2300      	movs	r3, #0
}
 8009376:	4618      	mov	r0, r3
 8009378:	3770      	adds	r7, #112	; 0x70
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}

0800937e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800937e:	b480      	push	{r7}
 8009380:	b085      	sub	sp, #20
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800938c:	2b01      	cmp	r3, #1
 800938e:	d101      	bne.n	8009394 <HAL_UARTEx_DisableFifoMode+0x16>
 8009390:	2302      	movs	r3, #2
 8009392:	e027      	b.n	80093e4 <HAL_UARTEx_DisableFifoMode+0x66>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2201      	movs	r2, #1
 8009398:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2224      	movs	r2, #36	; 0x24
 80093a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f022 0201 	bic.w	r2, r2, #1
 80093ba:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80093c2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2200      	movs	r2, #0
 80093c8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	68fa      	ldr	r2, [r7, #12]
 80093d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2220      	movs	r2, #32
 80093d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2200      	movs	r2, #0
 80093de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80093e2:	2300      	movs	r3, #0
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3714      	adds	r7, #20
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr

080093f0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009400:	2b01      	cmp	r3, #1
 8009402:	d101      	bne.n	8009408 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009404:	2302      	movs	r3, #2
 8009406:	e02d      	b.n	8009464 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2201      	movs	r2, #1
 800940c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2224      	movs	r2, #36	; 0x24
 8009414:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	681a      	ldr	r2, [r3, #0]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f022 0201 	bic.w	r2, r2, #1
 800942e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	689b      	ldr	r3, [r3, #8]
 8009436:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	683a      	ldr	r2, [r7, #0]
 8009440:	430a      	orrs	r2, r1
 8009442:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f000 f84f 	bl	80094e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	68fa      	ldr	r2, [r7, #12]
 8009450:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2220      	movs	r2, #32
 8009456:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2200      	movs	r2, #0
 800945e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009462:	2300      	movs	r3, #0
}
 8009464:	4618      	mov	r0, r3
 8009466:	3710      	adds	r7, #16
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800947c:	2b01      	cmp	r3, #1
 800947e:	d101      	bne.n	8009484 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009480:	2302      	movs	r3, #2
 8009482:	e02d      	b.n	80094e0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2201      	movs	r2, #1
 8009488:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2224      	movs	r2, #36	; 0x24
 8009490:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	681a      	ldr	r2, [r3, #0]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f022 0201 	bic.w	r2, r2, #1
 80094aa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	689b      	ldr	r3, [r3, #8]
 80094b2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	683a      	ldr	r2, [r7, #0]
 80094bc:	430a      	orrs	r2, r1
 80094be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f000 f811 	bl	80094e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	68fa      	ldr	r2, [r7, #12]
 80094cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2220      	movs	r2, #32
 80094d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2200      	movs	r2, #0
 80094da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80094de:	2300      	movs	r3, #0
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3710      	adds	r7, #16
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b085      	sub	sp, #20
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d108      	bne.n	800950a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2201      	movs	r2, #1
 80094fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2201      	movs	r2, #1
 8009504:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009508:	e031      	b.n	800956e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800950a:	2310      	movs	r3, #16
 800950c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800950e:	2310      	movs	r3, #16
 8009510:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	689b      	ldr	r3, [r3, #8]
 8009518:	0e5b      	lsrs	r3, r3, #25
 800951a:	b2db      	uxtb	r3, r3
 800951c:	f003 0307 	and.w	r3, r3, #7
 8009520:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	689b      	ldr	r3, [r3, #8]
 8009528:	0f5b      	lsrs	r3, r3, #29
 800952a:	b2db      	uxtb	r3, r3
 800952c:	f003 0307 	and.w	r3, r3, #7
 8009530:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009532:	7bbb      	ldrb	r3, [r7, #14]
 8009534:	7b3a      	ldrb	r2, [r7, #12]
 8009536:	4911      	ldr	r1, [pc, #68]	; (800957c <UARTEx_SetNbDataToProcess+0x94>)
 8009538:	5c8a      	ldrb	r2, [r1, r2]
 800953a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800953e:	7b3a      	ldrb	r2, [r7, #12]
 8009540:	490f      	ldr	r1, [pc, #60]	; (8009580 <UARTEx_SetNbDataToProcess+0x98>)
 8009542:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009544:	fb93 f3f2 	sdiv	r3, r3, r2
 8009548:	b29a      	uxth	r2, r3
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009550:	7bfb      	ldrb	r3, [r7, #15]
 8009552:	7b7a      	ldrb	r2, [r7, #13]
 8009554:	4909      	ldr	r1, [pc, #36]	; (800957c <UARTEx_SetNbDataToProcess+0x94>)
 8009556:	5c8a      	ldrb	r2, [r1, r2]
 8009558:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800955c:	7b7a      	ldrb	r2, [r7, #13]
 800955e:	4908      	ldr	r1, [pc, #32]	; (8009580 <UARTEx_SetNbDataToProcess+0x98>)
 8009560:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009562:	fb93 f3f2 	sdiv	r3, r3, r2
 8009566:	b29a      	uxth	r2, r3
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800956e:	bf00      	nop
 8009570:	3714      	adds	r7, #20
 8009572:	46bd      	mov	sp, r7
 8009574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009578:	4770      	bx	lr
 800957a:	bf00      	nop
 800957c:	08009c38 	.word	0x08009c38
 8009580:	08009c40 	.word	0x08009c40

08009584 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009584:	b084      	sub	sp, #16
 8009586:	b580      	push	{r7, lr}
 8009588:	b084      	sub	sp, #16
 800958a:	af00      	add	r7, sp, #0
 800958c:	6078      	str	r0, [r7, #4]
 800958e:	f107 001c 	add.w	r0, r7, #28
 8009592:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009598:	2b01      	cmp	r3, #1
 800959a:	d120      	bne.n	80095de <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	68da      	ldr	r2, [r3, #12]
 80095ac:	4b2a      	ldr	r3, [pc, #168]	; (8009658 <USB_CoreInit+0xd4>)
 80095ae:	4013      	ands	r3, r2
 80095b0:	687a      	ldr	r2, [r7, #4]
 80095b2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	68db      	ldr	r3, [r3, #12]
 80095b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80095c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d105      	bne.n	80095d2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	68db      	ldr	r3, [r3, #12]
 80095ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f000 faac 	bl	8009b30 <USB_CoreReset>
 80095d8:	4603      	mov	r3, r0
 80095da:	73fb      	strb	r3, [r7, #15]
 80095dc:	e01a      	b.n	8009614 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	68db      	ldr	r3, [r3, #12]
 80095e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 faa0 	bl	8009b30 <USB_CoreReset>
 80095f0:	4603      	mov	r3, r0
 80095f2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80095f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d106      	bne.n	8009608 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	639a      	str	r2, [r3, #56]	; 0x38
 8009606:	e005      	b.n	8009614 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800960c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009616:	2b01      	cmp	r3, #1
 8009618:	d116      	bne.n	8009648 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800961e:	b29a      	uxth	r2, r3
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009628:	4b0c      	ldr	r3, [pc, #48]	; (800965c <USB_CoreInit+0xd8>)
 800962a:	4313      	orrs	r3, r2
 800962c:	687a      	ldr	r2, [r7, #4]
 800962e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	689b      	ldr	r3, [r3, #8]
 8009634:	f043 0206 	orr.w	r2, r3, #6
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	689b      	ldr	r3, [r3, #8]
 8009640:	f043 0220 	orr.w	r2, r3, #32
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009648:	7bfb      	ldrb	r3, [r7, #15]
}
 800964a:	4618      	mov	r0, r3
 800964c:	3710      	adds	r7, #16
 800964e:	46bd      	mov	sp, r7
 8009650:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009654:	b004      	add	sp, #16
 8009656:	4770      	bx	lr
 8009658:	ffbdffbf 	.word	0xffbdffbf
 800965c:	03ee0000 	.word	0x03ee0000

08009660 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	f023 0201 	bic.w	r2, r3, #1
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009674:	2300      	movs	r3, #0
}
 8009676:	4618      	mov	r0, r3
 8009678:	370c      	adds	r7, #12
 800967a:	46bd      	mov	sp, r7
 800967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009680:	4770      	bx	lr

08009682 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009682:	b580      	push	{r7, lr}
 8009684:	b084      	sub	sp, #16
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
 800968a:	460b      	mov	r3, r1
 800968c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800968e:	2300      	movs	r3, #0
 8009690:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	68db      	ldr	r3, [r3, #12]
 8009696:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800969e:	78fb      	ldrb	r3, [r7, #3]
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d115      	bne.n	80096d0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	68db      	ldr	r3, [r3, #12]
 80096a8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80096b0:	2001      	movs	r0, #1
 80096b2:	f7f8 f889 	bl	80017c8 <HAL_Delay>
      ms++;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	3301      	adds	r3, #1
 80096ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f000 fa29 	bl	8009b14 <USB_GetMode>
 80096c2:	4603      	mov	r3, r0
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d01e      	beq.n	8009706 <USB_SetCurrentMode+0x84>
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	2b31      	cmp	r3, #49	; 0x31
 80096cc:	d9f0      	bls.n	80096b0 <USB_SetCurrentMode+0x2e>
 80096ce:	e01a      	b.n	8009706 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80096d0:	78fb      	ldrb	r3, [r7, #3]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d115      	bne.n	8009702 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	68db      	ldr	r3, [r3, #12]
 80096da:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80096e2:	2001      	movs	r0, #1
 80096e4:	f7f8 f870 	bl	80017c8 <HAL_Delay>
      ms++;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	3301      	adds	r3, #1
 80096ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 fa10 	bl	8009b14 <USB_GetMode>
 80096f4:	4603      	mov	r3, r0
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d005      	beq.n	8009706 <USB_SetCurrentMode+0x84>
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2b31      	cmp	r3, #49	; 0x31
 80096fe:	d9f0      	bls.n	80096e2 <USB_SetCurrentMode+0x60>
 8009700:	e001      	b.n	8009706 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009702:	2301      	movs	r3, #1
 8009704:	e005      	b.n	8009712 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2b32      	cmp	r3, #50	; 0x32
 800970a:	d101      	bne.n	8009710 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800970c:	2301      	movs	r3, #1
 800970e:	e000      	b.n	8009712 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009710:	2300      	movs	r3, #0
}
 8009712:	4618      	mov	r0, r3
 8009714:	3710      	adds	r7, #16
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}
	...

0800971c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800971c:	b084      	sub	sp, #16
 800971e:	b580      	push	{r7, lr}
 8009720:	b086      	sub	sp, #24
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
 8009726:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800972a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800972e:	2300      	movs	r3, #0
 8009730:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009736:	2300      	movs	r3, #0
 8009738:	613b      	str	r3, [r7, #16]
 800973a:	e009      	b.n	8009750 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800973c:	687a      	ldr	r2, [r7, #4]
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	3340      	adds	r3, #64	; 0x40
 8009742:	009b      	lsls	r3, r3, #2
 8009744:	4413      	add	r3, r2
 8009746:	2200      	movs	r2, #0
 8009748:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	3301      	adds	r3, #1
 800974e:	613b      	str	r3, [r7, #16]
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	2b0e      	cmp	r3, #14
 8009754:	d9f2      	bls.n	800973c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009758:	2b00      	cmp	r3, #0
 800975a:	d11c      	bne.n	8009796 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	68fa      	ldr	r2, [r7, #12]
 8009766:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800976a:	f043 0302 	orr.w	r3, r3, #2
 800976e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009774:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	601a      	str	r2, [r3, #0]
 8009794:	e005      	b.n	80097a2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800979a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80097a8:	461a      	mov	r2, r3
 80097aa:	2300      	movs	r3, #0
 80097ac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097b4:	4619      	mov	r1, r3
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097bc:	461a      	mov	r2, r3
 80097be:	680b      	ldr	r3, [r1, #0]
 80097c0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80097c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d10c      	bne.n	80097e2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80097c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d104      	bne.n	80097d8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80097ce:	2100      	movs	r1, #0
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f000 f965 	bl	8009aa0 <USB_SetDevSpeed>
 80097d6:	e008      	b.n	80097ea <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80097d8:	2101      	movs	r1, #1
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f000 f960 	bl	8009aa0 <USB_SetDevSpeed>
 80097e0:	e003      	b.n	80097ea <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80097e2:	2103      	movs	r1, #3
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f000 f95b 	bl	8009aa0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80097ea:	2110      	movs	r1, #16
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f000 f8f3 	bl	80099d8 <USB_FlushTxFifo>
 80097f2:	4603      	mov	r3, r0
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d001      	beq.n	80097fc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80097f8:	2301      	movs	r3, #1
 80097fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f000 f91f 	bl	8009a40 <USB_FlushRxFifo>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d001      	beq.n	800980c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009808:	2301      	movs	r3, #1
 800980a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009812:	461a      	mov	r2, r3
 8009814:	2300      	movs	r3, #0
 8009816:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800981e:	461a      	mov	r2, r3
 8009820:	2300      	movs	r3, #0
 8009822:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800982a:	461a      	mov	r2, r3
 800982c:	2300      	movs	r3, #0
 800982e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009830:	2300      	movs	r3, #0
 8009832:	613b      	str	r3, [r7, #16]
 8009834:	e043      	b.n	80098be <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	015a      	lsls	r2, r3, #5
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	4413      	add	r3, r2
 800983e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009848:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800984c:	d118      	bne.n	8009880 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d10a      	bne.n	800986a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	015a      	lsls	r2, r3, #5
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	4413      	add	r3, r2
 800985c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009860:	461a      	mov	r2, r3
 8009862:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009866:	6013      	str	r3, [r2, #0]
 8009868:	e013      	b.n	8009892 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	015a      	lsls	r2, r3, #5
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	4413      	add	r3, r2
 8009872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009876:	461a      	mov	r2, r3
 8009878:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800987c:	6013      	str	r3, [r2, #0]
 800987e:	e008      	b.n	8009892 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	015a      	lsls	r2, r3, #5
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	4413      	add	r3, r2
 8009888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800988c:	461a      	mov	r2, r3
 800988e:	2300      	movs	r3, #0
 8009890:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	015a      	lsls	r2, r3, #5
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	4413      	add	r3, r2
 800989a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800989e:	461a      	mov	r2, r3
 80098a0:	2300      	movs	r3, #0
 80098a2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	015a      	lsls	r2, r3, #5
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	4413      	add	r3, r2
 80098ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098b0:	461a      	mov	r2, r3
 80098b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80098b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	3301      	adds	r3, #1
 80098bc:	613b      	str	r3, [r7, #16]
 80098be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c0:	693a      	ldr	r2, [r7, #16]
 80098c2:	429a      	cmp	r2, r3
 80098c4:	d3b7      	bcc.n	8009836 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80098c6:	2300      	movs	r3, #0
 80098c8:	613b      	str	r3, [r7, #16]
 80098ca:	e043      	b.n	8009954 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	015a      	lsls	r2, r3, #5
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	4413      	add	r3, r2
 80098d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80098de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098e2:	d118      	bne.n	8009916 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d10a      	bne.n	8009900 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	015a      	lsls	r2, r3, #5
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	4413      	add	r3, r2
 80098f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098f6:	461a      	mov	r2, r3
 80098f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80098fc:	6013      	str	r3, [r2, #0]
 80098fe:	e013      	b.n	8009928 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	015a      	lsls	r2, r3, #5
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	4413      	add	r3, r2
 8009908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800990c:	461a      	mov	r2, r3
 800990e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009912:	6013      	str	r3, [r2, #0]
 8009914:	e008      	b.n	8009928 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	015a      	lsls	r2, r3, #5
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	4413      	add	r3, r2
 800991e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009922:	461a      	mov	r2, r3
 8009924:	2300      	movs	r3, #0
 8009926:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	015a      	lsls	r2, r3, #5
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	4413      	add	r3, r2
 8009930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009934:	461a      	mov	r2, r3
 8009936:	2300      	movs	r3, #0
 8009938:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	015a      	lsls	r2, r3, #5
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	4413      	add	r3, r2
 8009942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009946:	461a      	mov	r2, r3
 8009948:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800994c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	3301      	adds	r3, #1
 8009952:	613b      	str	r3, [r7, #16]
 8009954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009956:	693a      	ldr	r2, [r7, #16]
 8009958:	429a      	cmp	r2, r3
 800995a:	d3b7      	bcc.n	80098cc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009962:	691b      	ldr	r3, [r3, #16]
 8009964:	68fa      	ldr	r2, [r7, #12]
 8009966:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800996a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800996e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800997c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800997e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009980:	2b00      	cmp	r3, #0
 8009982:	d105      	bne.n	8009990 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	699b      	ldr	r3, [r3, #24]
 8009988:	f043 0210 	orr.w	r2, r3, #16
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	699a      	ldr	r2, [r3, #24]
 8009994:	4b0e      	ldr	r3, [pc, #56]	; (80099d0 <USB_DevInit+0x2b4>)
 8009996:	4313      	orrs	r3, r2
 8009998:	687a      	ldr	r2, [r7, #4]
 800999a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800999c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d005      	beq.n	80099ae <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	699b      	ldr	r3, [r3, #24]
 80099a6:	f043 0208 	orr.w	r2, r3, #8
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80099ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	d105      	bne.n	80099c0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	699a      	ldr	r2, [r3, #24]
 80099b8:	4b06      	ldr	r3, [pc, #24]	; (80099d4 <USB_DevInit+0x2b8>)
 80099ba:	4313      	orrs	r3, r2
 80099bc:	687a      	ldr	r2, [r7, #4]
 80099be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80099c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3718      	adds	r7, #24
 80099c6:	46bd      	mov	sp, r7
 80099c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80099cc:	b004      	add	sp, #16
 80099ce:	4770      	bx	lr
 80099d0:	803c3800 	.word	0x803c3800
 80099d4:	40000004 	.word	0x40000004

080099d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80099d8:	b480      	push	{r7}
 80099da:	b085      	sub	sp, #20
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80099e2:	2300      	movs	r3, #0
 80099e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	3301      	adds	r3, #1
 80099ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	4a13      	ldr	r2, [pc, #76]	; (8009a3c <USB_FlushTxFifo+0x64>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d901      	bls.n	80099f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80099f4:	2303      	movs	r3, #3
 80099f6:	e01b      	b.n	8009a30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	691b      	ldr	r3, [r3, #16]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	daf2      	bge.n	80099e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009a00:	2300      	movs	r3, #0
 8009a02:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	019b      	lsls	r3, r3, #6
 8009a08:	f043 0220 	orr.w	r2, r3, #32
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	3301      	adds	r3, #1
 8009a14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	4a08      	ldr	r2, [pc, #32]	; (8009a3c <USB_FlushTxFifo+0x64>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d901      	bls.n	8009a22 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009a1e:	2303      	movs	r3, #3
 8009a20:	e006      	b.n	8009a30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	691b      	ldr	r3, [r3, #16]
 8009a26:	f003 0320 	and.w	r3, r3, #32
 8009a2a:	2b20      	cmp	r3, #32
 8009a2c:	d0f0      	beq.n	8009a10 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009a2e:	2300      	movs	r3, #0
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3714      	adds	r7, #20
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr
 8009a3c:	00030d40 	.word	0x00030d40

08009a40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b085      	sub	sp, #20
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	3301      	adds	r3, #1
 8009a50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	4a11      	ldr	r2, [pc, #68]	; (8009a9c <USB_FlushRxFifo+0x5c>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d901      	bls.n	8009a5e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009a5a:	2303      	movs	r3, #3
 8009a5c:	e018      	b.n	8009a90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	691b      	ldr	r3, [r3, #16]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	daf2      	bge.n	8009a4c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009a66:	2300      	movs	r3, #0
 8009a68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2210      	movs	r2, #16
 8009a6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	3301      	adds	r3, #1
 8009a74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	4a08      	ldr	r2, [pc, #32]	; (8009a9c <USB_FlushRxFifo+0x5c>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d901      	bls.n	8009a82 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009a7e:	2303      	movs	r3, #3
 8009a80:	e006      	b.n	8009a90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	691b      	ldr	r3, [r3, #16]
 8009a86:	f003 0310 	and.w	r3, r3, #16
 8009a8a:	2b10      	cmp	r3, #16
 8009a8c:	d0f0      	beq.n	8009a70 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009a8e:	2300      	movs	r3, #0
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	3714      	adds	r7, #20
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr
 8009a9c:	00030d40 	.word	0x00030d40

08009aa0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b085      	sub	sp, #20
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	460b      	mov	r3, r1
 8009aaa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ab6:	681a      	ldr	r2, [r3, #0]
 8009ab8:	78fb      	ldrb	r3, [r7, #3]
 8009aba:	68f9      	ldr	r1, [r7, #12]
 8009abc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009ac4:	2300      	movs	r3, #0
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3714      	adds	r7, #20
 8009aca:	46bd      	mov	sp, r7
 8009acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad0:	4770      	bx	lr

08009ad2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009ad2:	b480      	push	{r7}
 8009ad4:	b085      	sub	sp, #20
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	68fa      	ldr	r2, [r7, #12]
 8009ae8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009aec:	f023 0303 	bic.w	r3, r3, #3
 8009af0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	68fa      	ldr	r2, [r7, #12]
 8009afc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b00:	f043 0302 	orr.w	r3, r3, #2
 8009b04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009b06:	2300      	movs	r3, #0
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3714      	adds	r7, #20
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr

08009b14 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b083      	sub	sp, #12
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	695b      	ldr	r3, [r3, #20]
 8009b20:	f003 0301 	and.w	r3, r3, #1
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	370c      	adds	r7, #12
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr

08009b30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b085      	sub	sp, #20
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	3301      	adds	r3, #1
 8009b40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	4a13      	ldr	r2, [pc, #76]	; (8009b94 <USB_CoreReset+0x64>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d901      	bls.n	8009b4e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009b4a:	2303      	movs	r3, #3
 8009b4c:	e01b      	b.n	8009b86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	691b      	ldr	r3, [r3, #16]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	daf2      	bge.n	8009b3c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009b56:	2300      	movs	r3, #0
 8009b58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	691b      	ldr	r3, [r3, #16]
 8009b5e:	f043 0201 	orr.w	r2, r3, #1
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	3301      	adds	r3, #1
 8009b6a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	4a09      	ldr	r2, [pc, #36]	; (8009b94 <USB_CoreReset+0x64>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d901      	bls.n	8009b78 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009b74:	2303      	movs	r3, #3
 8009b76:	e006      	b.n	8009b86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	691b      	ldr	r3, [r3, #16]
 8009b7c:	f003 0301 	and.w	r3, r3, #1
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d0f0      	beq.n	8009b66 <USB_CoreReset+0x36>

  return HAL_OK;
 8009b84:	2300      	movs	r3, #0
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3714      	adds	r7, #20
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr
 8009b92:	bf00      	nop
 8009b94:	00030d40 	.word	0x00030d40

08009b98 <__libc_init_array>:
 8009b98:	b570      	push	{r4, r5, r6, lr}
 8009b9a:	4d0d      	ldr	r5, [pc, #52]	; (8009bd0 <__libc_init_array+0x38>)
 8009b9c:	4c0d      	ldr	r4, [pc, #52]	; (8009bd4 <__libc_init_array+0x3c>)
 8009b9e:	1b64      	subs	r4, r4, r5
 8009ba0:	10a4      	asrs	r4, r4, #2
 8009ba2:	2600      	movs	r6, #0
 8009ba4:	42a6      	cmp	r6, r4
 8009ba6:	d109      	bne.n	8009bbc <__libc_init_array+0x24>
 8009ba8:	4d0b      	ldr	r5, [pc, #44]	; (8009bd8 <__libc_init_array+0x40>)
 8009baa:	4c0c      	ldr	r4, [pc, #48]	; (8009bdc <__libc_init_array+0x44>)
 8009bac:	f000 f820 	bl	8009bf0 <_init>
 8009bb0:	1b64      	subs	r4, r4, r5
 8009bb2:	10a4      	asrs	r4, r4, #2
 8009bb4:	2600      	movs	r6, #0
 8009bb6:	42a6      	cmp	r6, r4
 8009bb8:	d105      	bne.n	8009bc6 <__libc_init_array+0x2e>
 8009bba:	bd70      	pop	{r4, r5, r6, pc}
 8009bbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bc0:	4798      	blx	r3
 8009bc2:	3601      	adds	r6, #1
 8009bc4:	e7ee      	b.n	8009ba4 <__libc_init_array+0xc>
 8009bc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bca:	4798      	blx	r3
 8009bcc:	3601      	adds	r6, #1
 8009bce:	e7f2      	b.n	8009bb6 <__libc_init_array+0x1e>
 8009bd0:	08009c50 	.word	0x08009c50
 8009bd4:	08009c50 	.word	0x08009c50
 8009bd8:	08009c50 	.word	0x08009c50
 8009bdc:	08009c54 	.word	0x08009c54

08009be0 <memset>:
 8009be0:	4402      	add	r2, r0
 8009be2:	4603      	mov	r3, r0
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d100      	bne.n	8009bea <memset+0xa>
 8009be8:	4770      	bx	lr
 8009bea:	f803 1b01 	strb.w	r1, [r3], #1
 8009bee:	e7f9      	b.n	8009be4 <memset+0x4>

08009bf0 <_init>:
 8009bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bf2:	bf00      	nop
 8009bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bf6:	bc08      	pop	{r3}
 8009bf8:	469e      	mov	lr, r3
 8009bfa:	4770      	bx	lr

08009bfc <_fini>:
 8009bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bfe:	bf00      	nop
 8009c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c02:	bc08      	pop	{r3}
 8009c04:	469e      	mov	lr, r3
 8009c06:	4770      	bx	lr
